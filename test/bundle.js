/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_createjs_collection__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_createjs_collection___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_createjs_collection__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__zim_js__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__zim_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__zim_js__);\n\n\nconsole.log(__WEBPACK_IMPORTED_MODULE_1__zim_js___default.a,__WEBPACK_IMPORTED_MODULE_0_createjs_collection___default.a);\n\nconst obj = {\n  zim: __WEBPACK_IMPORTED_MODULE_1__zim_js___default.a,\n  createjs:__WEBPACK_IMPORTED_MODULE_0_createjs_collection___default.a\n};\n/* harmony default export */ __webpack_exports__[\"a\"] = (obj);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./index.js\n// module id = 0\n// module chunks = 0\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;var createjs = (this.createjs = (this.createjs || {}));\n/*!\n* EaselJS\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2010 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\n//##############################################################################\n// extend.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n/**\n * @class Utility Methods\n */\n\n/**\n * Sets up the prototype chain and constructor property for a new class.\n *\n * This should be called right after creating the class constructor.\n *\n * \tfunction MySubClass() {}\n * \tcreatejs.extend(MySubClass, MySuperClass);\n * \tClassB.prototype.doSomething = function() { }\n *\n * \tvar foo = new MySubClass();\n * \tconsole.log(foo instanceof MySuperClass); // true\n * \tconsole.log(foo.prototype.constructor === MySubClass); // true\n *\n * @method extend\n * @param {Function} subclass The subclass.\n * @param {Function} superclass The superclass to extend.\n * @return {Function} Returns the subclass's new prototype.\n */\ncreatejs.extend = function(subclass, superclass) {\n\t\"use strict\";\n\n\tfunction o() { this.constructor = subclass; }\n\to.prototype = superclass.prototype;\n\treturn (subclass.prototype = new o());\n};\n\n//##############################################################################\n// promote.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n/**\n * @class Utility Methods\n */\n\n/**\n * Promotes any methods on the super class that were overridden, by creating an alias in the format `prefix_methodName`.\n * It is recommended to use the super class's name as the prefix.\n * An alias to the super class's constructor is always added in the format `prefix_constructor`.\n * This allows the subclass to call super class methods without using `function.call`, providing better performance.\n *\n * For example, if `MySubClass` extends `MySuperClass`, and both define a `draw` method, then calling `promote(MySubClass, \"MySuperClass\")`\n * would add a `MySuperClass_constructor` method to MySubClass and promote the `draw` method on `MySuperClass` to the\n * prototype of `MySubClass` as `MySuperClass_draw`.\n *\n * This should be called after the class's prototype is fully defined.\n *\n * \tfunction ClassA(name) {\n * \t\tthis.name = name;\n * \t}\n * \tClassA.prototype.greet = function() {\n * \t\treturn \"Hello \"+this.name;\n * \t}\n *\n * \tfunction ClassB(name, punctuation) {\n * \t\tthis.ClassA_constructor(name);\n * \t\tthis.punctuation = punctuation;\n * \t}\n * \tcreatejs.extend(ClassB, ClassA);\n * \tClassB.prototype.greet = function() {\n * \t\treturn this.ClassA_greet()+this.punctuation;\n * \t}\n * \tcreatejs.promote(ClassB, \"ClassA\");\n *\n * \tvar foo = new ClassB(\"World\", \"!?!\");\n * \tconsole.log(foo.greet()); // Hello World!?!\n *\n * @method promote\n * @param {Function} subclass The class to promote super class methods on.\n * @param {String} prefix The prefix to add to the promoted method names. Usually the name of the superclass.\n * @return {Function} Returns the subclass.\n */\ncreatejs.promote = function(subclass, prefix) {\n\t\"use strict\";\n\n\tvar subP = subclass.prototype, supP = (Object.getPrototypeOf&&Object.getPrototypeOf(subP))||subP.__proto__;\n\tif (supP) {\n\t\tsubP[(prefix+=\"_\") + \"constructor\"] = supP.constructor; // constructor is not always innumerable\n\t\tfor (var n in supP) {\n\t\t\tif (subP.hasOwnProperty(n) && (typeof supP[n] == \"function\")) { subP[prefix + n] = supP[n]; }\n\t\t}\n\t}\n\treturn subclass;\n};\n\n//##############################################################################\n// indexOf.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n/**\n * @class Utility Methods\n */\n\n/**\n * Finds the first occurrence of a specified value searchElement in the passed in array, and returns the index of\n * that value.  Returns -1 if value is not found.\n *\n *      var i = createjs.indexOf(myArray, myElementToFind);\n *\n * @method indexOf\n * @param {Array} array Array to search for searchElement\n * @param searchElement Element to find in array.\n * @return {Number} The first index of searchElement in array.\n */\ncreatejs.indexOf = function (array, searchElement){\n\t\"use strict\";\n\n\tfor (var i = 0,l=array.length; i < l; i++) {\n\t\tif (searchElement === array[i]) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\n\n//##############################################################################\n// Event.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n// constructor:\n\t/**\n\t * Contains properties and methods shared by all events for use with\n\t * {{#crossLink \"EventDispatcher\"}}{{/crossLink}}.\n\t * \n\t * Note that Event objects are often reused, so you should never\n\t * rely on an event object's state outside of the call stack it was received in.\n\t * @class Event\n\t * @param {String} type The event type.\n\t * @param {Boolean} bubbles Indicates whether the event will bubble through the display list.\n\t * @param {Boolean} cancelable Indicates whether the default behaviour of this event can be cancelled.\n\t * @constructor\n\t **/\n\tfunction Event(type, bubbles, cancelable) {\n\t\t\n\t\n\t// public properties:\n\t\t/**\n\t\t * The type of event.\n\t\t * @property type\n\t\t * @type String\n\t\t **/\n\t\tthis.type = type;\n\t\n\t\t/**\n\t\t * The object that generated an event.\n\t\t * @property target\n\t\t * @type Object\n\t\t * @default null\n\t\t * @readonly\n\t\t*/\n\t\tthis.target = null;\n\t\n\t\t/**\n\t\t * The current target that a bubbling event is being dispatched from. For non-bubbling events, this will\n\t\t * always be the same as target. For example, if childObj.parent = parentObj, and a bubbling event\n\t\t * is generated from childObj, then a listener on parentObj would receive the event with\n\t\t * target=childObj (the original target) and currentTarget=parentObj (where the listener was added).\n\t\t * @property currentTarget\n\t\t * @type Object\n\t\t * @default null\n\t\t * @readonly\n\t\t*/\n\t\tthis.currentTarget = null;\n\t\n\t\t/**\n\t\t * For bubbling events, this indicates the current event phase:<OL>\n\t\t * \t<LI> capture phase: starting from the top parent to the target</LI>\n\t\t * \t<LI> at target phase: currently being dispatched from the target</LI>\n\t\t * \t<LI> bubbling phase: from the target to the top parent</LI>\n\t\t * </OL>\n\t\t * @property eventPhase\n\t\t * @type Number\n\t\t * @default 0\n\t\t * @readonly\n\t\t*/\n\t\tthis.eventPhase = 0;\n\t\n\t\t/**\n\t\t * Indicates whether the event will bubble through the display list.\n\t\t * @property bubbles\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.bubbles = !!bubbles;\n\t\n\t\t/**\n\t\t * Indicates whether the default behaviour of this event can be cancelled via\n\t\t * {{#crossLink \"Event/preventDefault\"}}{{/crossLink}}. This is set via the Event constructor.\n\t\t * @property cancelable\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.cancelable = !!cancelable;\n\t\n\t\t/**\n\t\t * The epoch time at which this event was created.\n\t\t * @property timeStamp\n\t\t * @type Number\n\t\t * @default 0\n\t\t * @readonly\n\t\t*/\n\t\tthis.timeStamp = (new Date()).getTime();\n\t\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/preventDefault\"}}{{/crossLink}} has been called\n\t\t * on this event.\n\t\t * @property defaultPrevented\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.defaultPrevented = false;\n\t\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/stopPropagation\"}}{{/crossLink}} or\n\t\t * {{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called on this event.\n\t\t * @property propagationStopped\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.propagationStopped = false;\n\t\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called\n\t\t * on this event.\n\t\t * @property immediatePropagationStopped\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.immediatePropagationStopped = false;\n\t\t\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/remove\"}}{{/crossLink}} has been called on this event.\n\t\t * @property removed\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.removed = false;\n\t}\n\tvar p = Event.prototype;\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n// public methods:\n\t/**\n\t * Sets {{#crossLink \"Event/defaultPrevented\"}}{{/crossLink}} to true if the event is cancelable.\n\t * Mirrors the DOM level 2 event standard. In general, cancelable events that have `preventDefault()` called will\n\t * cancel the default behaviour associated with the event.\n\t * @method preventDefault\n\t **/\n\tp.preventDefault = function() {\n\t\tthis.defaultPrevented = this.cancelable&&true;\n\t};\n\n\t/**\n\t * Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} to true.\n\t * Mirrors the DOM event standard.\n\t * @method stopPropagation\n\t **/\n\tp.stopPropagation = function() {\n\t\tthis.propagationStopped = true;\n\t};\n\n\t/**\n\t * Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} and\n\t * {{#crossLink \"Event/immediatePropagationStopped\"}}{{/crossLink}} to true.\n\t * Mirrors the DOM event standard.\n\t * @method stopImmediatePropagation\n\t **/\n\tp.stopImmediatePropagation = function() {\n\t\tthis.immediatePropagationStopped = this.propagationStopped = true;\n\t};\n\t\n\t/**\n\t * Causes the active listener to be removed via removeEventListener();\n\t * \n\t * \t\tmyBtn.addEventListener(\"click\", function(evt) {\n\t * \t\t\t// do stuff...\n\t * \t\t\tevt.remove(); // removes this listener.\n\t * \t\t});\n\t * \n\t * @method remove\n\t **/\n\tp.remove = function() {\n\t\tthis.removed = true;\n\t};\n\t\n\t/**\n\t * Returns a clone of the Event instance.\n\t * @method clone\n\t * @return {Event} a clone of the Event instance.\n\t **/\n\tp.clone = function() {\n\t\treturn new Event(this.type, this.bubbles, this.cancelable);\n\t};\n\t\n\t/**\n\t * Provides a chainable shortcut method for setting a number of properties on the instance.\n\t *\n\t * @method set\n\t * @param {Object} props A generic object containing properties to copy to the instance.\n\t * @return {Event} Returns the instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t*/\n\tp.set = function(props) {\n\t\tfor (var n in props) { this[n] = props[n]; }\n\t\treturn this;\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Event (type=\"+this.type+\")]\";\n\t};\n\n\tcreatejs.Event = Event;\n}());\n\n//##############################################################################\n// EventDispatcher.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\r\n\r\n(function() {\r\n\t\"use strict\";\r\n\r\n\r\n// constructor:\r\n\t/**\r\n\t * EventDispatcher provides methods for managing queues of event listeners and dispatching events.\r\n\t *\r\n\t * You can either extend EventDispatcher or mix its methods into an existing prototype or instance by using the\r\n\t * EventDispatcher {{#crossLink \"EventDispatcher/initialize\"}}{{/crossLink}} method.\r\n\t * \r\n\t * Together with the CreateJS Event class, EventDispatcher provides an extended event model that is based on the\r\n\t * DOM Level 2 event model, including addEventListener, removeEventListener, and dispatchEvent. It supports\r\n\t * bubbling / capture, preventDefault, stopPropagation, stopImmediatePropagation, and handleEvent.\r\n\t * \r\n\t * EventDispatcher also exposes a {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}} method, which makes it easier\r\n\t * to create scoped listeners, listeners that only run once, and listeners with associated arbitrary data. The \r\n\t * {{#crossLink \"EventDispatcher/off\"}}{{/crossLink}} method is merely an alias to\r\n\t * {{#crossLink \"EventDispatcher/removeEventListener\"}}{{/crossLink}}.\r\n\t * \r\n\t * Another addition to the DOM Level 2 model is the {{#crossLink \"EventDispatcher/removeAllEventListeners\"}}{{/crossLink}}\r\n\t * method, which can be used to listeners for all events, or listeners for a specific event. The Event object also \r\n\t * includes a {{#crossLink \"Event/remove\"}}{{/crossLink}} method which removes the active listener.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t * Add EventDispatcher capabilities to the \"MyClass\" class.\r\n\t *\r\n\t *      EventDispatcher.initialize(MyClass.prototype);\r\n\t *\r\n\t * Add an event (see {{#crossLink \"EventDispatcher/addEventListener\"}}{{/crossLink}}).\r\n\t *\r\n\t *      instance.addEventListener(\"eventName\", handlerMethod);\r\n\t *      function handlerMethod(event) {\r\n\t *          console.log(event.target + \" Was Clicked\");\r\n\t *      }\r\n\t *\r\n\t * <b>Maintaining proper scope</b><br />\r\n\t * Scope (ie. \"this\") can be be a challenge with events. Using the {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}}\r\n\t * method to subscribe to events simplifies this.\r\n\t *\r\n\t *      instance.addEventListener(\"click\", function(event) {\r\n\t *          console.log(instance == this); // false, scope is ambiguous.\r\n\t *      });\r\n\t *      \r\n\t *      instance.on(\"click\", function(event) {\r\n\t *          console.log(instance == this); // true, \"on\" uses dispatcher scope by default.\r\n\t *      });\r\n\t * \r\n\t * If you want to use addEventListener instead, you may want to use function.bind() or a similar proxy to manage scope.\r\n\t *      \r\n\t *\r\n\t * @class EventDispatcher\r\n\t * @constructor\r\n\t **/\r\n\tfunction EventDispatcher() {\r\n\t\r\n\t\r\n\t// private properties:\r\n\t\t/**\r\n\t\t * @protected\r\n\t\t * @property _listeners\r\n\t\t * @type Object\r\n\t\t **/\r\n\t\tthis._listeners = null;\r\n\t\t\r\n\t\t/**\r\n\t\t * @protected\r\n\t\t * @property _captureListeners\r\n\t\t * @type Object\r\n\t\t **/\r\n\t\tthis._captureListeners = null;\r\n\t}\r\n\tvar p = EventDispatcher.prototype;\r\n\r\n\t/**\r\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\r\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\r\n\t * for details.\r\n\t *\r\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\r\n\t *\r\n\t * @method initialize\r\n\t * @protected\r\n\t * @deprecated\r\n\t */\r\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\r\n\r\n\r\n// static public methods:\r\n\t/**\r\n\t * Static initializer to mix EventDispatcher methods into a target object or prototype.\r\n\t * \r\n\t * \t\tEventDispatcher.initialize(MyClass.prototype); // add to the prototype of the class\r\n\t * \t\tEventDispatcher.initialize(myObject); // add to a specific instance\r\n\t * \r\n\t * @method initialize\r\n\t * @static\r\n\t * @param {Object} target The target object to inject EventDispatcher methods into. This can be an instance or a\r\n\t * prototype.\r\n\t **/\r\n\tEventDispatcher.initialize = function(target) {\r\n\t\ttarget.addEventListener = p.addEventListener;\r\n\t\ttarget.on = p.on;\r\n\t\ttarget.removeEventListener = target.off =  p.removeEventListener;\r\n\t\ttarget.removeAllEventListeners = p.removeAllEventListeners;\r\n\t\ttarget.hasEventListener = p.hasEventListener;\r\n\t\ttarget.dispatchEvent = p.dispatchEvent;\r\n\t\ttarget._dispatchEvent = p._dispatchEvent;\r\n\t\ttarget.willTrigger = p.willTrigger;\r\n\t};\r\n\t\r\n\r\n// public methods:\r\n\t/**\r\n\t * Adds the specified event listener. Note that adding multiple listeners to the same function will result in\r\n\t * multiple callbacks getting fired.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      displayObject.addEventListener(\"click\", handleClick);\r\n\t *      function handleClick(event) {\r\n\t *         // Click happened.\r\n\t *      }\r\n\t *\r\n\t * @method addEventListener\r\n\t * @param {String} type The string type of the event.\r\n\t * @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when\r\n\t * the event is dispatched.\r\n\t * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\r\n\t * @return {Function | Object} Returns the listener for chaining or assignment.\r\n\t **/\r\n\tp.addEventListener = function(type, listener, useCapture) {\r\n\t\tvar listeners;\r\n\t\tif (useCapture) {\r\n\t\t\tlisteners = this._captureListeners = this._captureListeners||{};\r\n\t\t} else {\r\n\t\t\tlisteners = this._listeners = this._listeners||{};\r\n\t\t}\r\n\t\tvar arr = listeners[type];\r\n\t\tif (arr) { this.removeEventListener(type, listener, useCapture); }\r\n\t\tarr = listeners[type]; // remove may have deleted the array\r\n\t\tif (!arr) { listeners[type] = [listener];  }\r\n\t\telse { arr.push(listener); }\r\n\t\treturn listener;\r\n\t};\r\n\t\r\n\t/**\r\n\t * A shortcut method for using addEventListener that makes it easier to specify an execution scope, have a listener\r\n\t * only run once, associate arbitrary data with the listener, and remove the listener.\r\n\t * \r\n\t * This method works by creating an anonymous wrapper function and subscribing it with addEventListener.\r\n\t * The wrapper function is returned for use with `removeEventListener` (or `off`).\r\n\t * \r\n\t * <b>IMPORTANT:</b> To remove a listener added with `on`, you must pass in the returned wrapper function as the listener, or use\r\n\t * {{#crossLink \"Event/remove\"}}{{/crossLink}}. Likewise, each time you call `on` a NEW wrapper function is subscribed, so multiple calls\r\n\t * to `on` with the same params will create multiple listeners.\r\n\t * \r\n\t * <h4>Example</h4>\r\n\t * \r\n\t * \t\tvar listener = myBtn.on(\"click\", handleClick, null, false, {count:3});\r\n\t * \t\tfunction handleClick(evt, data) {\r\n\t * \t\t\tdata.count -= 1;\r\n\t * \t\t\tconsole.log(this == myBtn); // true - scope defaults to the dispatcher\r\n\t * \t\t\tif (data.count == 0) {\r\n\t * \t\t\t\talert(\"clicked 3 times!\");\r\n\t * \t\t\t\tmyBtn.off(\"click\", listener);\r\n\t * \t\t\t\t// alternately: evt.remove();\r\n\t * \t\t\t}\r\n\t * \t\t}\r\n\t * \r\n\t * @method on\r\n\t * @param {String} type The string type of the event.\r\n\t * @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when\r\n\t * the event is dispatched.\r\n\t * @param {Object} [scope] The scope to execute the listener in. Defaults to the dispatcher/currentTarget for function listeners, and to the listener itself for object listeners (ie. using handleEvent).\r\n\t * @param {Boolean} [once=false] If true, the listener will remove itself after the first time it is triggered.\r\n\t * @param {*} [data] Arbitrary data that will be included as the second parameter when the listener is called.\r\n\t * @param {Boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\r\n\t * @return {Function} Returns the anonymous function that was created and assigned as the listener. This is needed to remove the listener later using .removeEventListener.\r\n\t **/\r\n\tp.on = function(type, listener, scope, once, data, useCapture) {\r\n\t\tif (listener.handleEvent) {\r\n\t\t\tscope = scope||listener;\r\n\t\t\tlistener = listener.handleEvent;\r\n\t\t}\r\n\t\tscope = scope||this;\r\n\t\treturn this.addEventListener(type, function(evt) {\r\n\t\t\t\tlistener.call(scope, evt, data);\r\n\t\t\t\tonce&&evt.remove();\r\n\t\t\t}, useCapture);\r\n\t};\r\n\r\n\t/**\r\n\t * Removes the specified event listener.\r\n\t *\r\n\t * <b>Important Note:</b> that you must pass the exact function reference used when the event was added. If a proxy\r\n\t * function, or function closure is used as the callback, the proxy/closure reference must be used - a new proxy or\r\n\t * closure will not work.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      displayObject.removeEventListener(\"click\", handleClick);\r\n\t *\r\n\t * @method removeEventListener\r\n\t * @param {String} type The string type of the event.\r\n\t * @param {Function | Object} listener The listener function or object.\r\n\t * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\r\n\t **/\r\n\tp.removeEventListener = function(type, listener, useCapture) {\r\n\t\tvar listeners = useCapture ? this._captureListeners : this._listeners;\r\n\t\tif (!listeners) { return; }\r\n\t\tvar arr = listeners[type];\r\n\t\tif (!arr) { return; }\r\n\t\tfor (var i=0,l=arr.length; i<l; i++) {\r\n\t\t\tif (arr[i] == listener) {\r\n\t\t\t\tif (l==1) { delete(listeners[type]); } // allows for faster checks.\r\n\t\t\t\telse { arr.splice(i,1); }\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\t/**\r\n\t * A shortcut to the removeEventListener method, with the same parameters and return value. This is a companion to the\r\n\t * .on method.\r\n\t * \r\n\t * <b>IMPORTANT:</b> To remove a listener added with `on`, you must pass in the returned wrapper function as the listener. See \r\n\t * {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}} for an example.\r\n\t *\r\n\t * @method off\r\n\t * @param {String} type The string type of the event.\r\n\t * @param {Function | Object} listener The listener function or object.\r\n\t * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\r\n\t **/\r\n\tp.off = p.removeEventListener;\r\n\r\n\t/**\r\n\t * Removes all listeners for the specified type, or all listeners of all types.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      // Remove all listeners\r\n\t *      displayObject.removeAllEventListeners();\r\n\t *\r\n\t *      // Remove all click listeners\r\n\t *      displayObject.removeAllEventListeners(\"click\");\r\n\t *\r\n\t * @method removeAllEventListeners\r\n\t * @param {String} [type] The string type of the event. If omitted, all listeners for all types will be removed.\r\n\t **/\r\n\tp.removeAllEventListeners = function(type) {\r\n\t\tif (!type) { this._listeners = this._captureListeners = null; }\r\n\t\telse {\r\n\t\t\tif (this._listeners) { delete(this._listeners[type]); }\r\n\t\t\tif (this._captureListeners) { delete(this._captureListeners[type]); }\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Dispatches the specified event to all listeners.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      // Use a string event\r\n\t *      this.dispatchEvent(\"complete\");\r\n\t *\r\n\t *      // Use an Event instance\r\n\t *      var event = new createjs.Event(\"progress\");\r\n\t *      this.dispatchEvent(event);\r\n\t *\r\n\t * @method dispatchEvent\r\n\t * @param {Object | String | Event} eventObj An object with a \"type\" property, or a string type.\r\n\t * While a generic object will work, it is recommended to use a CreateJS Event instance. If a string is used,\r\n\t * dispatchEvent will construct an Event instance if necessary with the specified type. This latter approach can\r\n\t * be used to avoid event object instantiation for non-bubbling events that may not have any listeners.\r\n\t * @param {Boolean} [bubbles] Specifies the `bubbles` value when a string was passed to eventObj.\r\n\t * @param {Boolean} [cancelable] Specifies the `cancelable` value when a string was passed to eventObj.\r\n\t * @return {Boolean} Returns false if `preventDefault()` was called on a cancelable event, true otherwise.\r\n\t **/\r\n\tp.dispatchEvent = function(eventObj, bubbles, cancelable) {\r\n\t\tif (typeof eventObj == \"string\") {\r\n\t\t\t// skip everything if there's no listeners and it doesn't bubble:\r\n\t\t\tvar listeners = this._listeners;\r\n\t\t\tif (!bubbles && (!listeners || !listeners[eventObj])) { return true; }\r\n\t\t\teventObj = new createjs.Event(eventObj, bubbles, cancelable);\r\n\t\t} else if (eventObj.target && eventObj.clone) {\r\n\t\t\t// redispatching an active event object, so clone it:\r\n\t\t\teventObj = eventObj.clone();\r\n\t\t}\r\n\t\t\r\n\t\t// TODO: it would be nice to eliminate this. Maybe in favour of evtObj instanceof Event? Or !!evtObj.createEvent\r\n\t\ttry { eventObj.target = this; } catch (e) {} // try/catch allows redispatching of native events\r\n\r\n\t\tif (!eventObj.bubbles || !this.parent) {\r\n\t\t\tthis._dispatchEvent(eventObj, 2);\r\n\t\t} else {\r\n\t\t\tvar top=this, list=[top];\r\n\t\t\twhile (top.parent) { list.push(top = top.parent); }\r\n\t\t\tvar i, l=list.length;\r\n\r\n\t\t\t// capture & atTarget\r\n\t\t\tfor (i=l-1; i>=0 && !eventObj.propagationStopped; i--) {\r\n\t\t\t\tlist[i]._dispatchEvent(eventObj, 1+(i==0));\r\n\t\t\t}\r\n\t\t\t// bubbling\r\n\t\t\tfor (i=1; i<l && !eventObj.propagationStopped; i++) {\r\n\t\t\t\tlist[i]._dispatchEvent(eventObj, 3);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn !eventObj.defaultPrevented;\r\n\t};\r\n\r\n\t/**\r\n\t * Indicates whether there is at least one listener for the specified event type.\r\n\t * @method hasEventListener\r\n\t * @param {String} type The string type of the event.\r\n\t * @return {Boolean} Returns true if there is at least one listener for the specified event.\r\n\t **/\r\n\tp.hasEventListener = function(type) {\r\n\t\tvar listeners = this._listeners, captureListeners = this._captureListeners;\r\n\t\treturn !!((listeners && listeners[type]) || (captureListeners && captureListeners[type]));\r\n\t};\r\n\t\r\n\t/**\r\n\t * Indicates whether there is at least one listener for the specified event type on this object or any of its\r\n\t * ancestors (parent, parent's parent, etc). A return value of true indicates that if a bubbling event of the\r\n\t * specified type is dispatched from this object, it will trigger at least one listener.\r\n\t * \r\n\t * This is similar to {{#crossLink \"EventDispatcher/hasEventListener\"}}{{/crossLink}}, but it searches the entire\r\n\t * event flow for a listener, not just this object.\r\n\t * @method willTrigger\r\n\t * @param {String} type The string type of the event.\r\n\t * @return {Boolean} Returns `true` if there is at least one listener for the specified event.\r\n\t **/\r\n\tp.willTrigger = function(type) {\r\n\t\tvar o = this;\r\n\t\twhile (o) {\r\n\t\t\tif (o.hasEventListener(type)) { return true; }\r\n\t\t\to = o.parent;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @method toString\r\n\t * @return {String} a string representation of the instance.\r\n\t **/\r\n\tp.toString = function() {\r\n\t\treturn \"[EventDispatcher]\";\r\n\t};\r\n\r\n\r\n// private methods:\r\n\t/**\r\n\t * @method _dispatchEvent\r\n\t * @param {Object | String | Event} eventObj\r\n\t * @param {Object} eventPhase\r\n\t * @protected\r\n\t **/\r\n\tp._dispatchEvent = function(eventObj, eventPhase) {\r\n\t\tvar l, listeners = (eventPhase==1) ? this._captureListeners : this._listeners;\r\n\t\tif (eventObj && listeners) {\r\n\t\t\tvar arr = listeners[eventObj.type];\r\n\t\t\tif (!arr||!(l=arr.length)) { return; }\r\n\t\t\ttry { eventObj.currentTarget = this; } catch (e) {}\r\n\t\t\ttry { eventObj.eventPhase = eventPhase; } catch (e) {}\r\n\t\t\teventObj.removed = false;\r\n\t\t\t\r\n\t\t\tarr = arr.slice(); // to avoid issues with items being removed or added during the dispatch\r\n\t\t\tfor (var i=0; i<l && !eventObj.immediatePropagationStopped; i++) {\r\n\t\t\t\tvar o = arr[i];\r\n\t\t\t\tif (o.handleEvent) { o.handleEvent(eventObj); }\r\n\t\t\t\telse { o(eventObj); }\r\n\t\t\t\tif (eventObj.removed) {\r\n\t\t\t\t\tthis.off(eventObj.type, o, eventPhase==1);\r\n\t\t\t\t\teventObj.removed = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\r\n\tcreatejs.EventDispatcher = EventDispatcher;\r\n}());\n\n//##############################################################################\n// Ticker.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * The Ticker provides a centralized tick or heartbeat broadcast at a set interval. Listeners can subscribe to the tick\n\t * event to be notified when a set time interval has elapsed.\n\t *\n\t * Note that the interval that the tick event is called is a target interval, and may be broadcast at a slower interval\n\t * when under high CPU load. The Ticker class uses a static interface (ex. `Ticker.framerate = 30;`) and\n\t * can not be instantiated.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n\t *      function handleTick(event) {\n\t *          // Actions carried out each tick (aka frame)\n\t *          if (!event.paused) {\n\t *              // Actions carried out when the Ticker is not paused.\n\t *          }\n\t *      }\n\t *\n\t * @class Ticker\n\t * @uses EventDispatcher\n\t * @static\n\t **/\n\tfunction Ticker() {\n\t\tthrow \"Ticker cannot be instantiated.\";\n\t}\n\n\n// constants:\n\t/**\n\t * In this mode, Ticker uses the requestAnimationFrame API, but attempts to synch the ticks to target framerate. It\n\t * uses a simple heuristic that compares the time of the RAF return to the target time for the current frame and\n\t * dispatches the tick when the time is within a certain threshold.\n\t *\n\t * This mode has a higher variance for time between frames than {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}},\n\t * but does not require that content be time based as with {{#crossLink \"Ticker/RAF:property\"}}{{/crossLink}} while\n\t * gaining the benefits of that API (screen synch, background throttling).\n\t *\n\t * Variance is usually lowest for framerates that are a divisor of the RAF frequency. This is usually 60, so\n\t * framerates of 10, 12, 15, 20, and 30 work well.\n\t *\n\t * Falls back to {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}} if the requestAnimationFrame API is not\n\t * supported.\n\t * @property RAF_SYNCHED\n\t * @static\n\t * @type {String}\n\t * @default \"synched\"\n\t * @readonly\n\t **/\n\tTicker.RAF_SYNCHED = \"synched\";\n\n\t/**\n\t * In this mode, Ticker passes through the requestAnimationFrame heartbeat, ignoring the target framerate completely.\n\t * Because requestAnimationFrame frequency is not deterministic, any content using this mode should be time based.\n\t * You can leverage {{#crossLink \"Ticker/getTime\"}}{{/crossLink}} and the {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}}\n\t * event object's \"delta\" properties to make this easier.\n\t *\n\t * Falls back on {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}} if the requestAnimationFrame API is not\n\t * supported.\n\t * @property RAF\n\t * @static\n\t * @type {String}\n\t * @default \"raf\"\n\t * @readonly\n\t **/\n\tTicker.RAF = \"raf\";\n\n\t/**\n\t * In this mode, Ticker uses the setTimeout API. This provides predictable, adaptive frame timing, but does not\n\t * provide the benefits of requestAnimationFrame (screen synch, background throttling).\n\t * @property TIMEOUT\n\t * @static\n\t * @type {String}\n\t * @default \"timeout\"\n\t * @readonly\n\t **/\n\tTicker.TIMEOUT = \"timeout\";\n\n\n// static events:\n\t/**\n\t * Dispatched each tick. The event will be dispatched to each listener even when the Ticker has been paused using\n\t * {{#crossLink \"Ticker/setPaused\"}}{{/crossLink}}.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n\t *      function handleTick(event) {\n\t *          console.log(\"Paused:\", event.paused, event.delta);\n\t *      }\n\t *\n\t * @event tick\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t * @param {Boolean} paused Indicates whether the ticker is currently paused.\n\t * @param {Number} delta The time elapsed in ms since the last tick.\n\t * @param {Number} time The total time in ms since Ticker was initialized.\n\t * @param {Number} runTime The total time in ms that Ticker was not paused since it was initialized. For example,\n\t * \tyou could determine the amount of time that the Ticker has been paused since initialization with `time-runTime`.\n\t * @since 0.6.0\n\t */\n\n\n// public static properties:\n\t/**\n\t * Deprecated in favour of {{#crossLink \"Ticker/timingMode\"}}{{/crossLink}}, and will be removed in a future version. If true, timingMode will\n\t * use {{#crossLink \"Ticker/RAF_SYNCHED\"}}{{/crossLink}} by default.\n\t * @deprecated Deprecated in favour of {{#crossLink \"Ticker/timingMode\"}}{{/crossLink}}.\n\t * @property useRAF\n\t * @static\n\t * @type {Boolean}\n\t * @default false\n\t **/\n\tTicker.useRAF = false;\n\n\t/**\n\t * Specifies the timing api (setTimeout or requestAnimationFrame) and mode to use. See\n\t * {{#crossLink \"Ticker/TIMEOUT\"}}{{/crossLink}}, {{#crossLink \"Ticker/RAF\"}}{{/crossLink}}, and\n\t * {{#crossLink \"Ticker/RAF_SYNCHED\"}}{{/crossLink}} for mode details.\n\t * @property timingMode\n\t * @static\n\t * @type {String}\n\t * @default Ticker.TIMEOUT\n\t **/\n\tTicker.timingMode = null;\n\n\t/**\n\t * Specifies a maximum value for the delta property in the tick event object. This is useful when building time\n\t * based animations and systems to prevent issues caused by large time gaps caused by background tabs, system sleep,\n\t * alert dialogs, or other blocking routines. Double the expected frame duration is often an effective value\n\t * (ex. maxDelta=50 when running at 40fps).\n\t * \n\t * This does not impact any other values (ex. time, runTime, etc), so you may experience issues if you enable maxDelta\n\t * when using both delta and other values.\n\t * \n\t * If 0, there is no maximum.\n\t * @property maxDelta\n\t * @static\n\t * @type {number}\n\t * @default 0\n\t */\n\tTicker.maxDelta = 0;\n\t\n\t/**\n\t * When the ticker is paused, all listeners will still receive a tick event, but the <code>paused</code> property\n\t * of the event will be `true`. Also, while paused the `runTime` will not increase. See {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}},\n\t * {{#crossLink \"Ticker/getTime\"}}{{/crossLink}}, and {{#crossLink \"Ticker/getEventTime\"}}{{/crossLink}} for more\n\t * info.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n\t *      createjs.Ticker.paused = true;\n\t *      function handleTick(event) {\n\t *          console.log(event.paused,\n\t *          \tcreatejs.Ticker.getTime(false),\n\t *          \tcreatejs.Ticker.getTime(true));\n\t *      }\n\t *\n\t * @property paused\n\t * @static\n\t * @type {Boolean}\n\t * @default false\n\t **/\n\tTicker.paused = false;\n\n\n// mix-ins:\n\t// EventDispatcher methods:\n\tTicker.removeEventListener = null;\n\tTicker.removeAllEventListeners = null;\n\tTicker.dispatchEvent = null;\n\tTicker.hasEventListener = null;\n\tTicker._listeners = null;\n\tcreatejs.EventDispatcher.initialize(Ticker); // inject EventDispatcher methods.\n\tTicker._addEventListener = Ticker.addEventListener;\n\tTicker.addEventListener = function() {\n\t\t!Ticker._inited&&Ticker.init();\n\t\treturn Ticker._addEventListener.apply(Ticker, arguments);\n\t};\n\n\n// private static properties:\n\t/**\n\t * @property _inited\n\t * @static\n\t * @type {Boolean}\n\t * @protected\n\t **/\n\tTicker._inited = false;\n\n\t/**\n\t * @property _startTime\n\t * @static\n\t * @type {Number}\n\t * @protected\n\t **/\n\tTicker._startTime = 0;\n\n\t/**\n\t * @property _pausedTime\n\t * @static\n\t * @type {Number}\n\t * @protected\n\t **/\n\tTicker._pausedTime=0;\n\n\t/**\n\t * The number of ticks that have passed\n\t * @property _ticks\n\t * @static\n\t * @type {Number}\n\t * @protected\n\t **/\n\tTicker._ticks = 0;\n\n\t/**\n\t * The number of ticks that have passed while Ticker has been paused\n\t * @property _pausedTicks\n\t * @static\n\t * @type {Number}\n\t * @protected\n\t **/\n\tTicker._pausedTicks = 0;\n\n\t/**\n\t * @property _interval\n\t * @static\n\t * @type {Number}\n\t * @protected\n\t **/\n\tTicker._interval = 50;\n\n\t/**\n\t * @property _lastTime\n\t * @static\n\t * @type {Number}\n\t * @protected\n\t **/\n\tTicker._lastTime = 0;\n\n\t/**\n\t * @property _times\n\t * @static\n\t * @type {Array}\n\t * @protected\n\t **/\n\tTicker._times = null;\n\n\t/**\n\t * @property _tickTimes\n\t * @static\n\t * @type {Array}\n\t * @protected\n\t **/\n\tTicker._tickTimes = null;\n\n\t/**\n\t * Stores the timeout or requestAnimationFrame id.\n\t * @property _timerId\n\t * @static\n\t * @type {Number}\n\t * @protected\n\t **/\n\tTicker._timerId = null;\n\t\n\t/**\n\t * True if currently using requestAnimationFrame, false if using setTimeout. This may be different than timingMode\n\t * if that property changed and a tick hasn't fired.\n\t * @property _raf\n\t * @static\n\t * @type {Boolean}\n\t * @protected\n\t **/\n\tTicker._raf = true;\n\t\n\n// static getter / setters:\n\t/**\n\t * Use the {{#crossLink \"Ticker/interval:property\"}}{{/crossLink}} property instead.\n\t * @method setInterval\n\t * @static\n\t * @param {Number} interval\n\t * @deprecated\n\t **/\n\tTicker.setInterval = function(interval) {\n\t\tTicker._interval = interval;\n\t\tif (!Ticker._inited) { return; }\n\t\tTicker._setupTick();\n\t};\n\n\t/**\n\t * Use the {{#crossLink \"Ticker/interval:property\"}}{{/crossLink}} property instead.\n\t * @method getInterval\n\t * @static\n\t * @return {Number}\n\t * @deprecated\n\t **/\n\tTicker.getInterval = function() {\n\t\treturn Ticker._interval;\n\t};\n\n\t/**\n\t * Use the {{#crossLink \"Ticker/framerate:property\"}}{{/crossLink}} property instead.\n\t * @method setFPS\n\t * @static\n\t * @param {Number} value\n\t * @deprecated\n\t **/\n\tTicker.setFPS = function(value) {\n\t\tTicker.setInterval(1000/value);\n\t};\n\n\t/**\n\t * Use the {{#crossLink \"Ticker/framerate:property\"}}{{/crossLink}} property instead.\n\t * @method getFPS\n\t * @static\n\t * @return {Number}\n\t * @deprecated\n\t **/\n\tTicker.getFPS = function() {\n\t\treturn 1000/Ticker._interval;\n\t};\n\n\t/**\n\t * Indicates the target time (in milliseconds) between ticks. Default is 50 (20 FPS).\n\t * Note that actual time between ticks may be more than specified depending on CPU load.\n\t * This property is ignored if the ticker is using the `RAF` timing mode.\n\t * @property interval\n\t * @static\n\t * @type {Number}\n\t **/\n\t \n\t/**\n\t * Indicates the target frame rate in frames per second (FPS). Effectively just a shortcut to `interval`, where\n\t * `framerate == 1000/interval`.\n\t * @property framerate\n\t * @static\n\t * @type {Number}\n\t **/\n\ttry {\n\t\tObject.defineProperties(Ticker, {\n\t\t\tinterval: { get: Ticker.getInterval, set: Ticker.setInterval },\n\t\t\tframerate: { get: Ticker.getFPS, set: Ticker.setFPS }\n\t\t});\n\t} catch (e) { console.log(e); }\n\n\n// public static methods:\n\t/**\n\t * Starts the tick. This is called automatically when the first listener is added.\n\t * @method init\n\t * @static\n\t **/\n\tTicker.init = function() {\n\t\tif (Ticker._inited) { return; }\n\t\tTicker._inited = true;\n\t\tTicker._times = [];\n\t\tTicker._tickTimes = [];\n\t\tTicker._startTime = Ticker._getTime();\n\t\tTicker._times.push(Ticker._lastTime = 0);\n\t\tTicker.interval = Ticker._interval;\n\t};\n\t\n\t/**\n\t * Stops the Ticker and removes all listeners. Use init() to restart the Ticker.\n\t * @method reset\n\t * @static\n\t **/\n\tTicker.reset = function() {\n\t\tif (Ticker._raf) {\n\t\t\tvar f = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame;\n\t\t\tf&&f(Ticker._timerId);\n\t\t} else {\n\t\t\tclearTimeout(Ticker._timerId);\n\t\t}\n\t\tTicker.removeAllEventListeners(\"tick\");\n\t\tTicker._timerId = Ticker._times = Ticker._tickTimes = null;\n\t\tTicker._startTime = Ticker._lastTime = Ticker._ticks = 0;\n\t\tTicker._inited = false;\n\t};\n\n\t/**\n\t * Returns the average time spent within a tick. This can vary significantly from the value provided by getMeasuredFPS\n\t * because it only measures the time spent within the tick execution stack. \n\t * \n\t * Example 1: With a target FPS of 20, getMeasuredFPS() returns 20fps, which indicates an average of 50ms between \n\t * the end of one tick and the end of the next. However, getMeasuredTickTime() returns 15ms. This indicates that \n\t * there may be up to 35ms of \"idle\" time between the end of one tick and the start of the next.\n\t *\n\t * Example 2: With a target FPS of 30, getFPS() returns 10fps, which indicates an average of 100ms between the end of\n\t * one tick and the end of the next. However, getMeasuredTickTime() returns 20ms. This would indicate that something\n\t * other than the tick is using ~80ms (another script, DOM rendering, etc).\n\t * @method getMeasuredTickTime\n\t * @static\n\t * @param {Number} [ticks] The number of previous ticks over which to measure the average time spent in a tick.\n\t * Defaults to the number of ticks per second. To get only the last tick's time, pass in 1.\n\t * @return {Number} The average time spent in a tick in milliseconds.\n\t **/\n\tTicker.getMeasuredTickTime = function(ticks) {\n\t\tvar ttl=0, times=Ticker._tickTimes;\n\t\tif (!times || times.length < 1) { return -1; }\n\n\t\t// by default, calculate average for the past ~1 second:\n\t\tticks = Math.min(times.length, ticks||(Ticker.getFPS()|0));\n\t\tfor (var i=0; i<ticks; i++) { ttl += times[i]; }\n\t\treturn ttl/ticks;\n\t};\n\n\t/**\n\t * Returns the actual frames / ticks per second.\n\t * @method getMeasuredFPS\n\t * @static\n\t * @param {Number} [ticks] The number of previous ticks over which to measure the actual frames / ticks per second.\n\t * Defaults to the number of ticks per second.\n\t * @return {Number} The actual frames / ticks per second. Depending on performance, this may differ\n\t * from the target frames per second.\n\t **/\n\tTicker.getMeasuredFPS = function(ticks) {\n\t\tvar times = Ticker._times;\n\t\tif (!times || times.length < 2) { return -1; }\n\n\t\t// by default, calculate fps for the past ~1 second:\n\t\tticks = Math.min(times.length-1, ticks||(Ticker.getFPS()|0));\n\t\treturn 1000/((times[0]-times[ticks])/ticks);\n\t};\n\n\t/**\n\t * Use the {{#crossLink \"Ticker/paused:property\"}}{{/crossLink}} property instead.\n\t * @method setPaused\n\t * @static\n\t * @param {Boolean} value\n\t * @deprecated\n\t **/\n\tTicker.setPaused = function(value) {\n\t\t// TODO: deprecated.\n\t\tTicker.paused = value;\n\t};\n\n\t/**\n\t * Use the {{#crossLink \"Ticker/paused:property\"}}{{/crossLink}} property instead.\n\t * @method getPaused\n\t * @static\n\t * @return {Boolean}\n\t * @deprecated\n\t **/\n\tTicker.getPaused = function() {\n\t\t// TODO: deprecated.\n\t\treturn Ticker.paused;\n\t};\n\n\t/**\n\t * Returns the number of milliseconds that have elapsed since Ticker was initialized via {{#crossLink \"Ticker/init\"}}.\n\t * Returns -1 if Ticker has not been initialized. For example, you could use\n\t * this in a time synchronized animation to determine the exact amount of time that has elapsed.\n\t * @method getTime\n\t * @static\n\t * @param {Boolean} [runTime=false] If true only time elapsed while Ticker was not paused will be returned.\n\t * If false, the value returned will be total time elapsed since the first tick event listener was added.\n\t * @return {Number} Number of milliseconds that have elapsed since Ticker was initialized or -1.\n\t **/\n\tTicker.getTime = function(runTime) {\n\t\treturn Ticker._startTime ? Ticker._getTime() - (runTime ? Ticker._pausedTime : 0) : -1;\n\t};\n\n\t/**\n\t * Similar to the {{#crossLink \"Ticker/getTime\"}}{{/crossLink}} method, but returns the time on the most recent {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}}\n\t * event object.\n\t * @method getEventTime\n\t * @static\n\t * @param runTime {Boolean} [runTime=false] If true, the runTime property will be returned instead of time.\n\t * @returns {number} The time or runTime property from the most recent tick event or -1.\n\t */\n\tTicker.getEventTime = function(runTime) {\n\t\treturn Ticker._startTime ? (Ticker._lastTime || Ticker._startTime) - (runTime ? Ticker._pausedTime : 0) : -1;\n\t};\n\t\n\t/**\n\t * Returns the number of ticks that have been broadcast by Ticker.\n\t * @method getTicks\n\t * @static\n\t * @param {Boolean} pauseable Indicates whether to include ticks that would have been broadcast\n\t * while Ticker was paused. If true only tick events broadcast while Ticker is not paused will be returned.\n\t * If false, tick events that would have been broadcast while Ticker was paused will be included in the return\n\t * value. The default value is false.\n\t * @return {Number} of ticks that have been broadcast.\n\t **/\n\tTicker.getTicks = function(pauseable) {\n\t\treturn  Ticker._ticks - (pauseable ? Ticker._pausedTicks : 0);\n\t};\n\n\n// private static methods:\n\t/**\n\t * @method _handleSynch\n\t * @static\n\t * @protected\n\t **/\n\tTicker._handleSynch = function() {\n\t\tTicker._timerId = null;\n\t\tTicker._setupTick();\n\n\t\t// run if enough time has elapsed, with a little bit of flexibility to be early:\n\t\tif (Ticker._getTime() - Ticker._lastTime >= (Ticker._interval-1)*0.97) {\n\t\t\tTicker._tick();\n\t\t}\n\t};\n\n\t/**\n\t * @method _handleRAF\n\t * @static\n\t * @protected\n\t **/\n\tTicker._handleRAF = function() {\n\t\tTicker._timerId = null;\n\t\tTicker._setupTick();\n\t\tTicker._tick();\n\t};\n\n\t/**\n\t * @method _handleTimeout\n\t * @static\n\t * @protected\n\t **/\n\tTicker._handleTimeout = function() {\n\t\tTicker._timerId = null;\n\t\tTicker._setupTick();\n\t\tTicker._tick();\n\t};\n\n\t/**\n\t * @method _setupTick\n\t * @static\n\t * @protected\n\t **/\n\tTicker._setupTick = function() {\n\t\tif (Ticker._timerId != null) { return; } // avoid duplicates\n\n\t\tvar mode = Ticker.timingMode||(Ticker.useRAF&&Ticker.RAF_SYNCHED);\n\t\tif (mode == Ticker.RAF_SYNCHED || mode == Ticker.RAF) {\n\t\t\tvar f = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;\n\t\t\tif (f) {\n\t\t\t\tTicker._timerId = f(mode == Ticker.RAF ? Ticker._handleRAF : Ticker._handleSynch);\n\t\t\t\tTicker._raf = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tTicker._raf = false;\n\t\tTicker._timerId = setTimeout(Ticker._handleTimeout, Ticker._interval);\n\t};\n\n\t/**\n\t * @method _tick\n\t * @static\n\t * @protected\n\t **/\n\tTicker._tick = function() {\n\t\tvar paused = Ticker.paused;\n\t\tvar time = Ticker._getTime();\n\t\tvar elapsedTime = time-Ticker._lastTime;\n\t\tTicker._lastTime = time;\n\t\tTicker._ticks++;\n\t\t\n\t\tif (paused) {\n\t\t\tTicker._pausedTicks++;\n\t\t\tTicker._pausedTime += elapsedTime;\n\t\t}\n\t\t\n\t\tif (Ticker.hasEventListener(\"tick\")) {\n\t\t\tvar event = new createjs.Event(\"tick\");\n\t\t\tvar maxDelta = Ticker.maxDelta;\n\t\t\tevent.delta = (maxDelta && elapsedTime > maxDelta) ? maxDelta : elapsedTime;\n\t\t\tevent.paused = paused;\n\t\t\tevent.time = time;\n\t\t\tevent.runTime = time-Ticker._pausedTime;\n\t\t\tTicker.dispatchEvent(event);\n\t\t}\n\t\t\n\t\tTicker._tickTimes.unshift(Ticker._getTime()-time);\n\t\twhile (Ticker._tickTimes.length > 100) { Ticker._tickTimes.pop(); }\n\n\t\tTicker._times.unshift(time);\n\t\twhile (Ticker._times.length > 100) { Ticker._times.pop(); }\n\t};\n\n\t/**\n\t * @method _getTime\n\t * @static\n\t * @protected\n\t **/\n\tvar now = window.performance && (performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow);\n\tTicker._getTime = function() {\n\t\treturn ((now&&now.call(performance))||(new Date().getTime())) - Ticker._startTime;\n\t};\n\n\n\tcreatejs.Ticker = Ticker;\n}());\n\n//##############################################################################\n// UID.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Global utility for generating sequential unique ID numbers. The UID class uses a static interface (ex. <code>UID.get()</code>)\n\t * and should not be instantiated.\n\t * @class UID\n\t * @static\n\t **/\n\tfunction UID() {\n\t\tthrow \"UID cannot be instantiated\";\n\t}\n\n\n// private static properties:\n\t/**\n\t * @property _nextID\n\t * @type Number\n\t * @protected\n\t **/\n\tUID._nextID = 0;\n\n\n// public static methods:\n\t/**\n\t * Returns the next unique id.\n\t * @method get\n\t * @return {Number} The next unique id\n\t * @static\n\t **/\n\tUID.get = function() {\n\t\treturn UID._nextID++;\n\t};\n\n\n\tcreatejs.UID = UID;\n}());\n\n//##############################################################################\n// MouseEvent.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Passed as the parameter to all mouse/pointer/touch related events. For a listing of mouse events and their properties,\n\t * see the {{#crossLink \"DisplayObject\"}}{{/crossLink}} and {{#crossLink \"Stage\"}}{{/crossLink}} event listings.\n\t * @class MouseEvent\n\t * @param {String} type The event type.\n\t * @param {Boolean} bubbles Indicates whether the event will bubble through the display list.\n\t * @param {Boolean} cancelable Indicates whether the default behaviour of this event can be cancelled.\n\t * @param {Number} stageX The normalized x position relative to the stage.\n\t * @param {Number} stageY The normalized y position relative to the stage.\n\t * @param {MouseEvent} nativeEvent The native DOM event related to this mouse event.\n\t * @param {Number} pointerID The unique id for the pointer.\n\t * @param {Boolean} primary Indicates whether this is the primary pointer in a multitouch environment.\n\t * @param {Number} rawX The raw x position relative to the stage.\n\t * @param {Number} rawY The raw y position relative to the stage.\n\t * @param {DisplayObject} relatedTarget The secondary target for the event.\n\t * @extends Event\n\t * @constructor\n\t **/\n\tfunction MouseEvent(type, bubbles, cancelable, stageX, stageY, nativeEvent, pointerID, primary, rawX, rawY, relatedTarget) {\n\t\tthis.Event_constructor(type, bubbles, cancelable);\n\t\t\n\t\t\n\t// public properties:\n\t\t/**\n\t\t * The normalized x position on the stage. This will always be within the range 0 to stage width.\n\t\t * @property stageX\n\t\t * @type Number\n\t\t*/\n\t\tthis.stageX = stageX;\n\t\n\t\t/**\n\t\t * The normalized y position on the stage. This will always be within the range 0 to stage height.\n\t\t * @property stageY\n\t\t * @type Number\n\t\t **/\n\t\tthis.stageY = stageY;\n\t\n\t\t/**\n\t\t * The raw x position relative to the stage. Normally this will be the same as the stageX value, unless\n\t\t * stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.\n\t\t * @property rawX\n\t\t * @type Number\n\t\t*/\n\t\tthis.rawX = (rawX==null)?stageX:rawX;\n\t\n\t\t/**\n\t\t * The raw y position relative to the stage. Normally this will be the same as the stageY value, unless\n\t\t * stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.\n\t\t * @property rawY\n\t\t * @type Number\n\t\t*/\n\t\tthis.rawY = (rawY==null)?stageY:rawY;\n\t\n\t\t/**\n\t\t * The native MouseEvent generated by the browser. The properties and API for this\n\t\t * event may differ between browsers. This property will be null if the\n\t\t * EaselJS property was not directly generated from a native MouseEvent.\n\t\t * @property nativeEvent\n\t\t * @type HtmlMouseEvent\n\t\t * @default null\n\t\t **/\n\t\tthis.nativeEvent = nativeEvent;\n\t\n\t\t/**\n\t\t * The unique id for the pointer (touch point or cursor). This will be either -1 for the mouse, or the system\n\t\t * supplied id value.\n\t\t * @property pointerID\n\t\t * @type {Number}\n\t\t */\n\t\tthis.pointerID = pointerID;\n\t\n\t\t/**\n\t\t * Indicates whether this is the primary pointer in a multitouch environment. This will always be true for the mouse.\n\t\t * For touch pointers, the first pointer in the current stack will be considered the primary pointer.\n\t\t * @property primary\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis.primary = !!primary;\n\t\t\n\t\t/**\n\t\t * The secondary target for the event, if applicable. This is used for mouseout/rollout\n\t\t * events to indicate the object that the mouse entered from, mouseover/rollover for the object the mouse exited,\n\t\t * and stagemousedown/stagemouseup events for the object that was the under the cursor, if any.\n\t\t * \n\t\t * Only valid interaction targets will be returned (ie. objects with mouse listeners or a cursor set).\n\t\t * @property relatedTarget\n\t\t * @type {DisplayObject}\n\t\t */\n\t\tthis.relatedTarget = relatedTarget;\n\t}\n\tvar p = createjs.extend(MouseEvent, createjs.Event);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\t\n\t\n// getter / setters:\n\t/**\n\t * Returns the x position of the mouse in the local coordinate system of the current target (ie. the dispatcher).\n\t * @property localX\n\t * @type {Number}\n\t * @readonly\n\t */\n\tp._get_localX = function() {\n\t\treturn this.currentTarget.globalToLocal(this.rawX, this.rawY).x;\n\t};\n\t\n\t/**\n\t * Returns the y position of the mouse in the local coordinate system of the current target (ie. the dispatcher).\n\t * @property localY\n\t * @type {Number}\n\t * @readonly\n\t */\n\tp._get_localY = function() {\n\t\treturn this.currentTarget.globalToLocal(this.rawX, this.rawY).y;\n\t};\n\t\n\t/**\n\t * Indicates whether the event was generated by a touch input (versus a mouse input).\n\t * @property isTouch\n\t * @type {Boolean}\n\t * @readonly\n\t */\n\tp._get_isTouch = function() {\n\t\treturn this.pointerID !== -1;\n\t};\n\t\n\t\n\ttry {\n\t\tObject.defineProperties(p, {\n\t\t\tlocalX: { get: p._get_localX },\n\t\t\tlocalY: { get: p._get_localY },\n\t\t\tisTouch: { get: p._get_isTouch }\n\t\t});\n\t} catch (e) {} // TODO: use Log\n\n\n// public methods:\n\t/**\n\t * Returns a clone of the MouseEvent instance.\n\t * @method clone\n\t * @return {MouseEvent} a clone of the MouseEvent instance.\n\t **/\n\tp.clone = function() {\n\t\treturn new MouseEvent(this.type, this.bubbles, this.cancelable, this.stageX, this.stageY, this.nativeEvent, this.pointerID, this.primary, this.rawX, this.rawY);\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[MouseEvent (type=\"+this.type+\" stageX=\"+this.stageX+\" stageY=\"+this.stageY+\")]\";\n\t};\n\n\n\tcreatejs.MouseEvent = createjs.promote(MouseEvent, \"Event\");\n}());\n\n//##############################################################################\n// Matrix2D.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Represents an affine transformation matrix, and provides tools for constructing and concatenating matrices.\n\t *\n\t * This matrix can be visualized as:\n\t *\n\t * \t[ a  c  tx\n\t * \t  b  d  ty\n\t * \t  0  0  1  ]\n\t *\n\t * Note the locations of b and c.\n\t *\n\t * @class Matrix2D\n\t * @param {Number} [a=1] Specifies the a property for the new matrix.\n\t * @param {Number} [b=0] Specifies the b property for the new matrix.\n\t * @param {Number} [c=0] Specifies the c property for the new matrix.\n\t * @param {Number} [d=1] Specifies the d property for the new matrix.\n\t * @param {Number} [tx=0] Specifies the tx property for the new matrix.\n\t * @param {Number} [ty=0] Specifies the ty property for the new matrix.\n\t * @constructor\n\t **/\n\tfunction Matrix2D(a, b, c, d, tx, ty) {\n\t\tthis.setValues(a,b,c,d,tx,ty);\n\t\t\n\t// public properties:\n\t\t// assigned in the setValues method.\n\t\t/**\n\t\t * Position (0, 0) in a 3x3 affine transformation matrix.\n\t\t * @property a\n\t\t * @type Number\n\t\t **/\n\t\n\t\t/**\n\t\t * Position (0, 1) in a 3x3 affine transformation matrix.\n\t\t * @property b\n\t\t * @type Number\n\t\t **/\n\t\n\t\t/**\n\t\t * Position (1, 0) in a 3x3 affine transformation matrix.\n\t\t * @property c\n\t\t * @type Number\n\t\t **/\n\t\n\t\t/**\n\t\t * Position (1, 1) in a 3x3 affine transformation matrix.\n\t\t * @property d\n\t\t * @type Number\n\t\t **/\n\t\n\t\t/**\n\t\t * Position (2, 0) in a 3x3 affine transformation matrix.\n\t\t * @property tx\n\t\t * @type Number\n\t\t **/\n\t\n\t\t/**\n\t\t * Position (2, 1) in a 3x3 affine transformation matrix.\n\t\t * @property ty\n\t\t * @type Number\n\t\t **/\n\t}\n\tvar p = Matrix2D.prototype;\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\n// constants:\n\t/**\n\t * Multiplier for converting degrees to radians. Used internally by Matrix2D.\n\t * @property DEG_TO_RAD\n\t * @static\n\t * @final\n\t * @type Number\n\t * @readonly\n\t **/\n\tMatrix2D.DEG_TO_RAD = Math.PI/180;\n\n\n// static public properties:\n\t/**\n\t * An identity matrix, representing a null transformation.\n\t * @property identity\n\t * @static\n\t * @type Matrix2D\n\t * @readonly\n\t **/\n\tMatrix2D.identity = null; // set at bottom of class definition.\n\t\n\n// public methods:\n\t/**\n\t * Sets the specified values on this instance. \n\t * @method setValues\n\t * @param {Number} [a=1] Specifies the a property for the new matrix.\n\t * @param {Number} [b=0] Specifies the b property for the new matrix.\n\t * @param {Number} [c=0] Specifies the c property for the new matrix.\n\t * @param {Number} [d=1] Specifies the d property for the new matrix.\n\t * @param {Number} [tx=0] Specifies the tx property for the new matrix.\n\t * @param {Number} [ty=0] Specifies the ty property for the new matrix.\n\t * @return {Matrix2D} This instance. Useful for chaining method calls.\n\t*/\n\tp.setValues = function(a, b, c, d, tx, ty) {\n\t\t// don't forget to update docs in the constructor if these change:\n\t\tthis.a = (a == null) ? 1 : a;\n\t\tthis.b = b || 0;\n\t\tthis.c = c || 0;\n\t\tthis.d = (d == null) ? 1 : d;\n\t\tthis.tx = tx || 0;\n\t\tthis.ty = ty || 0;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Appends the specified matrix properties to this matrix. All parameters are required.\n\t * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.\n\t * @method append\n\t * @param {Number} a\n\t * @param {Number} b\n\t * @param {Number} c\n\t * @param {Number} d\n\t * @param {Number} tx\n\t * @param {Number} ty\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.append = function(a, b, c, d, tx, ty) {\n\t\tvar a1 = this.a;\n\t\tvar b1 = this.b;\n\t\tvar c1 = this.c;\n\t\tvar d1 = this.d;\n\t\tif (a != 1 || b != 0 || c != 0 || d != 1) {\n\t\t\tthis.a  = a1*a+c1*b;\n\t\t\tthis.b  = b1*a+d1*b;\n\t\t\tthis.c  = a1*c+c1*d;\n\t\t\tthis.d  = b1*c+d1*d;\n\t\t}\n\t\tthis.tx = a1*tx+c1*ty+this.tx;\n\t\tthis.ty = b1*tx+d1*ty+this.ty;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Prepends the specified matrix properties to this matrix.\n\t * This is the equivalent of multiplying `(specified matrix) * (this matrix)`.\n\t * All parameters are required.\n\t * @method prepend\n\t * @param {Number} a\n\t * @param {Number} b\n\t * @param {Number} c\n\t * @param {Number} d\n\t * @param {Number} tx\n\t * @param {Number} ty\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.prepend = function(a, b, c, d, tx, ty) {\n\t\tvar a1 = this.a;\n\t\tvar c1 = this.c;\n\t\tvar tx1 = this.tx;\n\n\t\tthis.a  = a*a1+c*this.b;\n\t\tthis.b  = b*a1+d*this.b;\n\t\tthis.c  = a*c1+c*this.d;\n\t\tthis.d  = b*c1+d*this.d;\n\t\tthis.tx = a*tx1+c*this.ty+tx;\n\t\tthis.ty = b*tx1+d*this.ty+ty;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Appends the specified matrix to this matrix.\n\t * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.\n\t * @method appendMatrix\n\t * @param {Matrix2D} matrix\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.appendMatrix = function(matrix) {\n\t\treturn this.append(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n\t};\n\n\t/**\n\t * Prepends the specified matrix to this matrix.\n\t * This is the equivalent of multiplying `(specified matrix) * (this matrix)`.\n\t * For example, you could calculate the combined transformation for a child object using:\n\t * \n\t * \tvar o = myDisplayObject;\n\t * \tvar mtx = o.getMatrix();\n\t * \twhile (o = o.parent) {\n\t * \t\t// prepend each parent's transformation in turn:\n\t * \t\to.prependMatrix(o.getMatrix());\n\t * \t}\n\t * @method prependMatrix\n\t * @param {Matrix2D} matrix\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.prependMatrix = function(matrix) {\n\t\treturn this.prepend(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n\t};\n\n\t/**\n\t * Generates matrix properties from the specified display object transform properties, and appends them to this matrix.\n\t * For example, you can use this to generate a matrix representing the transformations of a display object:\n\t * \n\t * \tvar mtx = new Matrix2D();\n\t * \tmtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\n\t * @method appendTransform\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} scaleX\n\t * @param {Number} scaleY\n\t * @param {Number} rotation\n\t * @param {Number} skewX\n\t * @param {Number} skewY\n\t * @param {Number} regX Optional.\n\t * @param {Number} regY Optional.\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.appendTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n\t\tif (rotation%360) {\n\t\t\tvar r = rotation*Matrix2D.DEG_TO_RAD;\n\t\t\tvar cos = Math.cos(r);\n\t\t\tvar sin = Math.sin(r);\n\t\t} else {\n\t\t\tcos = 1;\n\t\t\tsin = 0;\n\t\t}\n\n\t\tif (skewX || skewY) {\n\t\t\t// TODO: can this be combined into a single append operation?\n\t\t\tskewX *= Matrix2D.DEG_TO_RAD;\n\t\t\tskewY *= Matrix2D.DEG_TO_RAD;\n\t\t\tthis.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\n\t\t\tthis.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);\n\t\t} else {\n\t\t\tthis.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);\n\t\t}\n\t\t\n\t\tif (regX || regY) {\n\t\t\t// append the registration offset:\n\t\t\tthis.tx -= regX*this.a+regY*this.c; \n\t\t\tthis.ty -= regX*this.b+regY*this.d;\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Generates matrix properties from the specified display object transform properties, and prepends them to this matrix.\n\t * For example, you could calculate the combined transformation for a child object using:\n\t * \n\t * \tvar o = myDisplayObject;\n\t * \tvar mtx = new createjs.Matrix2D();\n\t * \tdo  {\n\t * \t\t// prepend each parent's transformation in turn:\n\t * \t\tmtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);\n\t * \t} while (o = o.parent);\n\t * \t\n\t * \tNote that the above example would not account for {{#crossLink \"DisplayObject/transformMatrix:property\"}}{{/crossLink}}\n\t * \tvalues. See {{#crossLink \"Matrix2D/prependMatrix\"}}{{/crossLink}} for an example that does.\n\t * @method prependTransform\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} scaleX\n\t * @param {Number} scaleY\n\t * @param {Number} rotation\n\t * @param {Number} skewX\n\t * @param {Number} skewY\n\t * @param {Number} regX Optional.\n\t * @param {Number} regY Optional.\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.prependTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n\t\tif (rotation%360) {\n\t\t\tvar r = rotation*Matrix2D.DEG_TO_RAD;\n\t\t\tvar cos = Math.cos(r);\n\t\t\tvar sin = Math.sin(r);\n\t\t} else {\n\t\t\tcos = 1;\n\t\t\tsin = 0;\n\t\t}\n\n\t\tif (regX || regY) {\n\t\t\t// prepend the registration offset:\n\t\t\tthis.tx -= regX; this.ty -= regY;\n\t\t}\n\t\tif (skewX || skewY) {\n\t\t\t// TODO: can this be combined into a single prepend operation?\n\t\t\tskewX *= Matrix2D.DEG_TO_RAD;\n\t\t\tskewY *= Matrix2D.DEG_TO_RAD;\n\t\t\tthis.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);\n\t\t\tthis.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\n\t\t} else {\n\t\t\tthis.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Applies a clockwise rotation transformation to the matrix.\n\t * @method rotate\n\t * @param {Number} angle The angle to rotate by, in degrees. To use a value in radians, multiply it by `180/Math.PI`.\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.rotate = function(angle) {\n\t\tangle = angle*Matrix2D.DEG_TO_RAD;\n\t\tvar cos = Math.cos(angle);\n\t\tvar sin = Math.sin(angle);\n\n\t\tvar a1 = this.a;\n\t\tvar b1 = this.b;\n\n\t\tthis.a = a1*cos+this.c*sin;\n\t\tthis.b = b1*cos+this.d*sin;\n\t\tthis.c = -a1*sin+this.c*cos;\n\t\tthis.d = -b1*sin+this.d*cos;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Applies a skew transformation to the matrix.\n\t * @method skew\n\t * @param {Number} skewX The amount to skew horizontally in degrees. To use a value in radians, multiply it by `180/Math.PI`.\n\t * @param {Number} skewY The amount to skew vertically in degrees.\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t*/\n\tp.skew = function(skewX, skewY) {\n\t\tskewX = skewX*Matrix2D.DEG_TO_RAD;\n\t\tskewY = skewY*Matrix2D.DEG_TO_RAD;\n\t\tthis.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), 0, 0);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Applies a scale transformation to the matrix.\n\t * @method scale\n\t * @param {Number} x The amount to scale horizontally. E.G. a value of 2 will double the size in the X direction, and 0.5 will halve it.\n\t * @param {Number} y The amount to scale vertically.\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.scale = function(x, y) {\n\t\tthis.a *= x;\n\t\tthis.b *= x;\n\t\tthis.c *= y;\n\t\tthis.d *= y;\n\t\t//this.tx *= x;\n\t\t//this.ty *= y;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Translates the matrix on the x and y axes.\n\t * @method translate\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.translate = function(x, y) {\n\t\tthis.tx += this.a*x + this.c*y;\n\t\tthis.ty += this.b*x + this.d*y;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Sets the properties of the matrix to those of an identity matrix (one that applies a null transformation).\n\t * @method identity\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.identity = function() {\n\t\tthis.a = this.d = 1;\n\t\tthis.b = this.c = this.tx = this.ty = 0;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Inverts the matrix, causing it to perform the opposite transformation.\n\t * @method invert\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t **/\n\tp.invert = function() {\n\t\tvar a1 = this.a;\n\t\tvar b1 = this.b;\n\t\tvar c1 = this.c;\n\t\tvar d1 = this.d;\n\t\tvar tx1 = this.tx;\n\t\tvar n = a1*d1-b1*c1;\n\n\t\tthis.a = d1/n;\n\t\tthis.b = -b1/n;\n\t\tthis.c = -c1/n;\n\t\tthis.d = a1/n;\n\t\tthis.tx = (c1*this.ty-d1*tx1)/n;\n\t\tthis.ty = -(a1*this.ty-b1*tx1)/n;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Returns true if the matrix is an identity matrix.\n\t * @method isIdentity\n\t * @return {Boolean}\n\t **/\n\tp.isIdentity = function() {\n\t\treturn this.tx === 0 && this.ty === 0 && this.a === 1 && this.b === 0 && this.c === 0 && this.d === 1;\n\t};\n\t\n\t/**\n\t * Returns true if this matrix is equal to the specified matrix (all property values are equal).\n\t * @method equals\n\t * @param {Matrix2D} matrix The matrix to compare.\n\t * @return {Boolean}\n\t **/\n\tp.equals = function(matrix) {\n\t\treturn this.tx === matrix.tx && this.ty === matrix.ty && this.a === matrix.a && this.b === matrix.b && this.c === matrix.c && this.d === matrix.d;\n\t};\n\n\t/**\n\t * Transforms a point according to this matrix.\n\t * @method transformPoint\n\t * @param {Number} x The x component of the point to transform.\n\t * @param {Number} y The y component of the point to transform.\n\t * @param {Point | Object} [pt] An object to copy the result into. If omitted a generic object with x/y properties will be returned.\n\t * @return {Point} This matrix. Useful for chaining method calls.\n\t **/\n\tp.transformPoint = function(x, y, pt) {\n\t\tpt = pt||{};\n\t\tpt.x = x*this.a+y*this.c+this.tx;\n\t\tpt.y = x*this.b+y*this.d+this.ty;\n\t\treturn pt;\n\t};\n\n\t/**\n\t * Decomposes the matrix into transform properties (x, y, scaleX, scaleY, and rotation). Note that these values\n\t * may not match the transform properties you used to generate the matrix, though they will produce the same visual\n\t * results.\n\t * @method decompose\n\t * @param {Object} target The object to apply the transform properties to. If null, then a new object will be returned.\n\t * @return {Object} The target, or a new generic object with the transform properties applied.\n\t*/\n\tp.decompose = function(target) {\n\t\t// TODO: it would be nice to be able to solve for whether the matrix can be decomposed into only scale/rotation even when scale is negative\n\t\tif (target == null) { target = {}; }\n\t\ttarget.x = this.tx;\n\t\ttarget.y = this.ty;\n\t\ttarget.scaleX = Math.sqrt(this.a * this.a + this.b * this.b);\n\t\ttarget.scaleY = Math.sqrt(this.c * this.c + this.d * this.d);\n\n\t\tvar skewX = Math.atan2(-this.c, this.d);\n\t\tvar skewY = Math.atan2(this.b, this.a);\n\n\t\tvar delta = Math.abs(1-skewX/skewY);\n\t\tif (delta < 0.00001) { // effectively identical, can use rotation:\n\t\t\ttarget.rotation = skewY/Matrix2D.DEG_TO_RAD;\n\t\t\tif (this.a < 0 && this.d >= 0) {\n\t\t\t\ttarget.rotation += (target.rotation <= 0) ? 180 : -180;\n\t\t\t}\n\t\t\ttarget.skewX = target.skewY = 0;\n\t\t} else {\n\t\t\ttarget.skewX = skewX/Matrix2D.DEG_TO_RAD;\n\t\t\ttarget.skewY = skewY/Matrix2D.DEG_TO_RAD;\n\t\t}\n\t\treturn target;\n\t};\n\t\n\t/**\n\t * Copies all properties from the specified matrix to this matrix.\n\t * @method copy\n\t * @param {Matrix2D} matrix The matrix to copy properties from.\n\t * @return {Matrix2D} This matrix. Useful for chaining method calls.\n\t*/\n\tp.copy = function(matrix) {\n\t\treturn this.setValues(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n\t};\n\n\t/**\n\t * Returns a clone of the Matrix2D instance.\n\t * @method clone\n\t * @return {Matrix2D} a clone of the Matrix2D instance.\n\t **/\n\tp.clone = function() {\n\t\treturn new Matrix2D(this.a, this.b, this.c, this.d, this.tx, this.ty);\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Matrix2D (a=\"+this.a+\" b=\"+this.b+\" c=\"+this.c+\" d=\"+this.d+\" tx=\"+this.tx+\" ty=\"+this.ty+\")]\";\n\t};\n\n\t// this has to be populated after the class is defined:\n\tMatrix2D.identity = new Matrix2D();\n\n\n\tcreatejs.Matrix2D = Matrix2D;\n}());\n\n//##############################################################################\n// DisplayProps.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\t/**\n\t * Used for calculating and encapsulating display related properties.\n\t * @class DisplayProps\n\t * @param {Number} [visible=true] Visible value.\n\t * @param {Number} [alpha=0] Alpha value.\n\t * @param {Number} [shadow=null] A Shadow instance or null.\n\t * @param {Number} [compositeOperation=null] A compositeOperation value or null.\n\t * @param {Number} [matrix] A transformation matrix. Defaults to a new identity matrix.\n\t * @constructor\n\t **/\n\tfunction DisplayProps(visible, alpha, shadow, compositeOperation, matrix) {\n\t\tthis.setValues(visible, alpha, shadow, compositeOperation, matrix);\n\t\t\n\t// public properties:\n\t\t// assigned in the setValues method.\n\t\t/**\n\t\t * Property representing the alpha that will be applied to a display object.\n\t\t * @property alpha\n\t\t * @type Number\n\t\t **/\n\t\n\t\t/**\n\t\t * Property representing the shadow that will be applied to a display object.\n\t\t * @property shadow\n\t\t * @type Shadow\n\t\t **/\n\t\n\t\t/**\n\t\t * Property representing the compositeOperation that will be applied to a display object.\n\t\t * You can find a list of valid composite operations at:\n\t\t * <a href=\"https://developer.mozilla.org/en/Canvas_tutorial/Compositing\">https://developer.mozilla.org/en/Canvas_tutorial/Compositing</a>\n\t\t * @property compositeOperation\n\t\t * @type String\n\t\t **/\n\t\t\n\t\t/**\n\t\t * Property representing the value for visible that will be applied to a display object.\n\t\t * @property visible\n\t\t * @type Boolean\n\t\t **/\n\t\t\n\t\t/**\n\t\t * The transformation matrix that will be applied to a display object.\n\t\t * @property matrix\n\t\t * @type Matrix2D\n\t\t **/\n\t}\n\tvar p = DisplayProps.prototype;\n\n// initialization:\n\t/**\n\t * Reinitializes the instance with the specified values.\n\t * @method setValues\n\t * @param {Number} [visible=true] Visible value.\n\t * @param {Number} [alpha=1] Alpha value.\n\t * @param {Number} [shadow=null] A Shadow instance or null.\n\t * @param {Number} [compositeOperation=null] A compositeOperation value or null.\n\t * @param {Number} [matrix] A transformation matrix. Defaults to an identity matrix.\n\t * @return {DisplayProps} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tp.setValues = function (visible, alpha, shadow, compositeOperation, matrix) {\n\t\tthis.visible = visible == null ? true : !!visible;\n\t\tthis.alpha = alpha == null ? 1 : alpha;\n\t\tthis.shadow = shadow;\n\t\tthis.compositeOperation = shadow;\n\t\tthis.matrix = matrix || (this.matrix&&this.matrix.identity()) || new createjs.Matrix2D();\n\t\treturn this;\n\t};\n\n// public methods:\n\t/**\n\t * Appends the specified display properties. This is generally used to apply a child's properties its parent's.\n\t * @method append\n\t * @param {Boolean} visible desired visible value\n\t * @param {Number} alpha desired alpha value\n\t * @param {Shadow} shadow desired shadow value\n\t * @param {String} compositeOperation desired composite operation value\n\t * @param {Matrix2D} [matrix] a Matrix2D instance\n\t * @return {DisplayProps} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tp.append = function(visible, alpha, shadow, compositeOperation, matrix) {\n\t\tthis.alpha *= alpha;\n\t\tthis.shadow = shadow || this.shadow;\n\t\tthis.compositeOperation = compositeOperation || this.compositeOperation;\n\t\tthis.visible = this.visible && visible;\n\t\tmatrix&&this.matrix.appendMatrix(matrix);\n\t\treturn this;\n\t};\n\t\n\t/**\n\t * Prepends the specified display properties. This is generally used to apply a parent's properties to a child's.\n\t * For example, to get the combined display properties that would be applied to a child, you could use:\n\t * \n\t * \tvar o = myDisplayObject;\n\t * \tvar props = new createjs.DisplayProps();\n\t * \tdo {\n\t * \t\t// prepend each parent's props in turn:\n\t * \t\tprops.prepend(o.visible, o.alpha, o.shadow, o.compositeOperation, o.getMatrix());\n\t * \t} while (o = o.parent);\n\t * \t\n\t * @method prepend\n\t * @param {Boolean} visible desired visible value\n\t * @param {Number} alpha desired alpha value\n\t * @param {Shadow} shadow desired shadow value\n\t * @param {String} compositeOperation desired composite operation value\n\t * @param {Matrix2D} [matrix] a Matrix2D instance\n\t * @return {DisplayProps} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tp.prepend = function(visible, alpha, shadow, compositeOperation, matrix) {\n\t\tthis.alpha *= alpha;\n\t\tthis.shadow = this.shadow || shadow;\n\t\tthis.compositeOperation = this.compositeOperation || compositeOperation;\n\t\tthis.visible = this.visible && visible;\n\t\tmatrix&&this.matrix.prependMatrix(matrix);\n\t\treturn this;\n\t};\n\t\n\t/**\n\t * Resets this instance and its matrix to default values.\n\t * @method identity\n\t * @return {DisplayProps} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tp.identity = function() {\n\t\tthis.visible = true;\n\t\tthis.alpha = 1;\n\t\tthis.shadow = this.compositeOperation = null;\n\t\tthis.matrix.identity();\n\t\treturn this;\n\t};\n\t\n\t/**\n\t * Returns a clone of the DisplayProps instance. Clones the associated matrix.\n\t * @method clone\n\t * @return {DisplayProps} a clone of the DisplayProps instance.\n\t **/\n\tp.clone = function() {\n\t\treturn new DisplayProps(this.alpha, this.shadow, this.compositeOperation, this.visible, this.matrix.clone());\n\t};\n\n// private methods:\n\n\tcreatejs.DisplayProps = DisplayProps;\n})();\n\n//##############################################################################\n// Point.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Represents a point on a 2 dimensional x / y coordinate system.\n\t *\n\t * <h4>Example</h4>\n\t * \n\t *      var point = new createjs.Point(0, 100);\n\t * \n\t * @class Point\n\t * @param {Number} [x=0] X position.\n\t * @param {Number} [y=0] Y position.\n\t * @constructor\n\t **/\n\tfunction Point(x, y) {\n\t \tthis.setValues(x, y);\n\t \t\n\t \t\n\t// public properties:\n\t\t// assigned in the setValues method.\n\t\t/**\n\t\t * X position.\n\t\t * @property x\n\t\t * @type Number\n\t\t **/\n\t\n\t\t/**\n\t\t * Y position.\n\t\t * @property y\n\t\t * @type Number\n\t\t **/\n\t}\n\tvar p = Point.prototype;\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\t\n// public methods:\n\t/** \n\t * Sets the specified values on this instance.\n\t * @method setValues\n\t * @param {Number} [x=0] X position.\n\t * @param {Number} [y=0] Y position.\n\t * @return {Point} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tp.setValues = function(x, y) {\n\t\tthis.x = x||0;\n\t\tthis.y = y||0;\n\t\treturn this;\n\t};\n\t\n\t/**\n\t * Copies all properties from the specified point to this point.\n\t * @method copy\n\t * @param {Point} point The point to copy properties from.\n\t * @return {Point} This point. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tp.copy = function(point) {\n\t\tthis.x = point.x;\n\t\tthis.y = point.y;\n\t\treturn this;\n\t};\n\t\n\t/**\n\t * Returns a clone of the Point instance.\n\t * @method clone\n\t * @return {Point} a clone of the Point instance.\n\t **/\n\tp.clone = function() {\n\t\treturn new Point(this.x, this.y);\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Point (x=\"+this.x+\" y=\"+this.y+\")]\";\n\t};\n\t\n\t\n\tcreatejs.Point = Point;\n}());\n\n//##############################################################################\n// Rectangle.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Represents a rectangle as defined by the points (x, y) and (x+width, y+height).\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var rect = new createjs.Rectangle(0, 0, 100, 100);\n\t *\n\t * @class Rectangle\n\t * @param {Number} [x=0] X position.\n\t * @param {Number} [y=0] Y position.\n\t * @param {Number} [width=0] The width of the Rectangle.\n\t * @param {Number} [height=0] The height of the Rectangle.\n\t * @constructor\n\t **/\n\tfunction Rectangle(x, y, width, height) {\n\t\tthis.setValues(x, y, width, height);\n\t\t\n\t\t\n\t// public properties:\n\t\t// assigned in the setValues method.\n\t\t/**\n\t\t * X position.\n\t\t * @property x\n\t\t * @type Number\n\t\t **/\n\t\n\t\t/**\n\t\t * Y position.\n\t\t * @property y\n\t\t * @type Number\n\t\t **/\n\t\n\t\t/**\n\t\t * Width.\n\t\t * @property width\n\t\t * @type Number\n\t\t **/\n\t\n\t\t/**\n\t\t * Height.\n\t\t * @property height\n\t\t * @type Number\n\t\t **/\n\t}\n\tvar p = Rectangle.prototype;\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\n// public methods:\n\t/** \n\t * Sets the specified values on this instance.\n\t * @method setValues\n\t * @param {Number} [x=0] X position.\n\t * @param {Number} [y=0] Y position.\n\t * @param {Number} [width=0] The width of the Rectangle.\n\t * @param {Number} [height=0] The height of the Rectangle.\n\t * @return {Rectangle} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tp.setValues = function(x, y, width, height) {\n\t\t// don't forget to update docs in the constructor if these change:\n\t\tthis.x = x||0;\n\t\tthis.y = y||0;\n\t\tthis.width = width||0;\n\t\tthis.height = height||0;\n\t\treturn this;\n\t};\n\t\n\t/** \n\t * Extends the rectangle's bounds to include the described point or rectangle.\n\t * @method extend\n\t * @param {Number} x X position of the point or rectangle.\n\t * @param {Number} y Y position of the point or rectangle.\n\t * @param {Number} [width=0] The width of the rectangle.\n\t * @param {Number} [height=0] The height of the rectangle.\n\t * @return {Rectangle} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tp.extend = function(x, y, width, height) {\n\t\twidth = width||0;\n\t\theight = height||0;\n\t\tif (x+width > this.x+this.width) { this.width = x+width-this.x; }\n\t\tif (y+height > this.y+this.height) { this.height = y+height-this.y; }\n\t\tif (x < this.x) { this.width += this.x-x; this.x = x; }\n\t\tif (y < this.y) { this.height += this.y-y; this.y = y; }\n\t\treturn this;\n\t};\n\t\n\t/** \n\t * Adds the specified padding to the rectangle's bounds.\n\t * @method extend\n\t * @param {Number} [top=0]\n\t * @param {Number} [left=0]\n\t * @param {Number} [right=0]\n\t * @param {Number} [bottom=0]\n\t * @return {Rectangle} This instance. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tp.pad = function(top, left, bottom, right) {\n\t\tthis.x -= left;\n\t\tthis.y -= top;\n\t\tthis.width += left+right;\n\t\tthis.height += top+bottom;\n\t\treturn this;\n\t};\n\t\n\t/**\n\t * Copies all properties from the specified rectangle to this rectangle.\n\t * @method copy\n\t * @param {Rectangle} rectangle The rectangle to copy properties from.\n\t * @return {Rectangle} This rectangle. Useful for chaining method calls.\n\t * @chainable\n\t*/\n\tp.copy = function(rectangle) {\n\t\treturn this.setValues(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n\t};\n\t\n\t/** \n\t * Returns true if this rectangle fully encloses the described point or rectangle.\n\t * @method contains\n\t * @param {Number} x X position of the point or rectangle.\n\t * @param {Number} y Y position of the point or rectangle.\n\t * @param {Number} [width=0] The width of the rectangle.\n\t * @param {Number} [height=0] The height of the rectangle.\n\t * @return {Boolean} True if the described point or rectangle is contained within this rectangle.\n\t*/\n\tp.contains = function(x, y, width, height) {\n\t\twidth = width||0;\n\t\theight = height||0;\n\t\treturn (x >= this.x && x+width <= this.x+this.width && y >= this.y && y+height <= this.y+this.height);\n\t};\n\t\n\t/** \n\t * Returns a new rectangle which contains this rectangle and the specified rectangle.\n\t * @method union\n\t * @param {Rectangle} rect The rectangle to calculate a union with.\n\t * @return {Rectangle} A new rectangle describing the union.\n\t*/\n\tp.union = function(rect) {\n\t\treturn this.clone().extend(rect.x, rect.y, rect.width, rect.height);\n\t};\n\t\n\t/** \n\t * Returns a new rectangle which describes the intersection (overlap) of this rectangle and the specified rectangle,\n\t * or null if they do not intersect.\n\t * @method intersection\n\t * @param {Rectangle} rect The rectangle to calculate an intersection with.\n\t * @return {Rectangle} A new rectangle describing the intersection or null.\n\t*/\n\tp.intersection = function(rect) {\n\t\tvar x1 = rect.x, y1 = rect.y, x2 = x1+rect.width, y2 = y1+rect.height;\n\t\tif (this.x > x1) { x1 = this.x; }\n\t\tif (this.y > y1) { y1 = this.y; }\n\t\tif (this.x + this.width < x2) { x2 = this.x + this.width; }\n\t\tif (this.y + this.height < y2) { y2 = this.y + this.height; }\n\t\treturn (x2 <= x1 || y2 <= y1) ? null : new Rectangle(x1, y1, x2-x1, y2-y1);\n\t};\n\t\n\t/** \n\t * Returns true if the specified rectangle intersects (has any overlap) with this rectangle.\n\t * @method intersects\n\t * @param {Rectangle} rect The rectangle to compare.\n\t * @return {Boolean} True if the rectangles intersect.\n\t*/\n\tp.intersects = function(rect) {\n\t\treturn (rect.x <= this.x+this.width && this.x <= rect.x+rect.width && rect.y <= this.y+this.height && this.y <= rect.y + rect.height);\n\t};\n\t\n\t/** \n\t * Returns true if the width or height are equal or less than 0.\n\t * @method isEmpty\n\t * @return {Boolean} True if the rectangle is empty.\n\t*/\n\tp.isEmpty = function() {\n\t\treturn this.width <= 0 || this.height <= 0;\n\t};\n\t\n\t/**\n\t * Returns a clone of the Rectangle instance.\n\t * @method clone\n\t * @return {Rectangle} a clone of the Rectangle instance.\n\t **/\n\tp.clone = function() {\n\t\treturn new Rectangle(this.x, this.y, this.width, this.height);\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Rectangle (x=\"+this.x+\" y=\"+this.y+\" width=\"+this.width+\" height=\"+this.height+\")]\";\n\t};\n\t\n\t\n\tcreatejs.Rectangle = Rectangle;\n}());\n\n//##############################################################################\n// ButtonHelper.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * The ButtonHelper is a helper class to create interactive buttons from {{#crossLink \"MovieClip\"}}{{/crossLink}} or\n\t * {{#crossLink \"Sprite\"}}{{/crossLink}} instances. This class will intercept mouse events from an object, and\n\t * automatically call {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} or {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}},\n\t * to the respective animation labels, add a pointer cursor, and allows the user to define a hit state frame.\n\t *\n\t * The ButtonHelper instance does not need to be added to the stage, but a reference should be maintained to prevent\n\t * garbage collection.\n\t * \n\t * Note that over states will not work unless you call {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var helper = new createjs.ButtonHelper(myInstance, \"out\", \"over\", \"down\", false, myInstance, \"hit\");\n\t *      myInstance.addEventListener(\"click\", handleClick);\n\t *      function handleClick(event) {\n\t *          // Click Happened.\n\t *      }\n\t *\n\t * @class ButtonHelper\n\t * @param {Sprite|MovieClip} target The instance to manage.\n\t * @param {String} [outLabel=\"out\"] The label or animation to go to when the user rolls out of the button.\n\t * @param {String} [overLabel=\"over\"] The label or animation to go to when the user rolls over the button.\n\t * @param {String} [downLabel=\"down\"] The label or animation to go to when the user presses the button.\n\t * @param {Boolean} [play=false] If the helper should call \"gotoAndPlay\" or \"gotoAndStop\" on the button when changing\n\t * states.\n\t * @param {DisplayObject} [hitArea] An optional item to use as the hit state for the button. If this is not defined,\n\t * then the button's visible states will be used instead. Note that the same instance as the \"target\" argument can be\n\t * used for the hitState.\n\t * @param {String} [hitLabel] The label or animation on the hitArea instance that defines the hitArea bounds. If this is\n\t * null, then the default state of the hitArea will be used. *\n\t * @constructor\n\t */\n\tfunction ButtonHelper(target, outLabel, overLabel, downLabel, play, hitArea, hitLabel) {\n\t\tif (!target.addEventListener) { return; }\n\t\n\t\n\t// public properties:\n\t\t/**\n\t\t * The target for this button helper.\n\t\t * @property target\n\t\t * @type MovieClip | Sprite\n\t\t * @readonly\n\t\t **/\n\t\tthis.target = target;\n\t\n\t\t/**\n\t\t * The label name or frame number to display when the user mouses out of the target. Defaults to \"over\".\n\t\t * @property overLabel\n\t\t * @type String | Number\n\t\t **/\n\t\tthis.overLabel = overLabel == null ? \"over\" : overLabel;\n\t\n\t\t/**\n\t\t * The label name or frame number to display when the user mouses over the target. Defaults to \"out\".\n\t\t * @property outLabel\n\t\t * @type String | Number\n\t\t **/\n\t\tthis.outLabel = outLabel == null ? \"out\" : outLabel;\n\t\n\t\t/**\n\t\t * The label name or frame number to display when the user presses on the target. Defaults to \"down\".\n\t\t * @property downLabel\n\t\t * @type String | Number\n\t\t **/\n\t\tthis.downLabel = downLabel == null ? \"down\" : downLabel;\n\t\n\t\t/**\n\t\t * If true, then ButtonHelper will call gotoAndPlay, if false, it will use gotoAndStop. Default is false.\n\t\t * @property play\n\t\t * @default false\n\t\t * @type Boolean\n\t\t **/\n\t\tthis.play = play;\n\t\t\n\t\t\n\t//  private properties\n\t\t/**\n\t\t * @property _isPressed\n\t\t * @type Boolean\n\t\t * @protected\n\t\t **/\n\t\tthis._isPressed = false;\n\t\n\t\t/**\n\t\t * @property _isOver\n\t\t * @type Boolean\n\t\t * @protected\n\t\t **/\n\t\tthis._isOver = false;\n\t\n\t\t/**\n\t\t * @property _enabled\n\t\t * @type Boolean\n\t\t * @protected\n\t\t **/\n\t\tthis._enabled = false;\n\t\t\n\t// setup:\n\t\ttarget.mouseChildren = false; // prevents issues when children are removed from the display list when state changes.\n\t\tthis.enabled = true;\n\t\tthis.handleEvent({});\n\t\tif (hitArea) {\n\t\t\tif (hitLabel) {\n\t\t\t\thitArea.actionsEnabled = false;\n\t\t\t\thitArea.gotoAndStop&&hitArea.gotoAndStop(hitLabel);\n\t\t\t}\n\t\t\ttarget.hitArea = hitArea;\n\t\t}\n\t}\n\tvar p = ButtonHelper.prototype;\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\t\n// getter / setters:\n\t/**\n\t * Use the {{#crossLink \"ButtonHelper/enabled:property\"}}{{/crossLink}} property instead.\n\t * @method setEnabled\n\t * @param {Boolean} value\n\t * @deprecated\n\t **/\n\tp.setEnabled = function(value) { // TODO: deprecated.\n\t\tif (value == this._enabled) { return; }\n\t\tvar o = this.target;\n\t\tthis._enabled = value;\n\t\tif (value) {\n\t\t\to.cursor = \"pointer\";\n\t\t\to.addEventListener(\"rollover\", this);\n\t\t\to.addEventListener(\"rollout\", this);\n\t\t\to.addEventListener(\"mousedown\", this);\n\t\t\to.addEventListener(\"pressup\", this);\n\t\t\tif (o._reset) { o.__reset = o._reset; o._reset = this._reset;}\n\t\t} else {\n\t\t\to.cursor = null;\n\t\t\to.removeEventListener(\"rollover\", this);\n\t\t\to.removeEventListener(\"rollout\", this);\n\t\t\to.removeEventListener(\"mousedown\", this);\n\t\t\to.removeEventListener(\"pressup\", this);\n\t\t\tif (o.__reset) { o._reset = o.__reset; delete(o.__reset); }\n\t\t}\n\t};\n\t/**\n\t * Use the {{#crossLink \"ButtonHelper/enabled:property\"}}{{/crossLink}} property instead.\n\t * @method getEnabled\n\t * @return {Boolean}\n\t * @deprecated\n\t **/\n\tp.getEnabled = function() {\n\t\treturn this._enabled;\n\t};\n\n\t/**\n\t * Enables or disables the button functionality on the target.\n\t * @property enabled\n\t * @type {Boolean}\n\t **/\n\ttry {\n\t\tObject.defineProperties(p, {\n\t\t\tenabled: { get: p.getEnabled, set: p.setEnabled }\n\t\t});\n\t} catch (e) {} // TODO: use Log\n\n\n// public methods:\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[ButtonHelper]\";\n\t};\n\n\n// private methods:\n\t/**\n\t * @method handleEvent\n\t * @param {Object} evt The mouse event to handle.\n\t * @protected\n\t **/\n\tp.handleEvent = function(evt) {\n\t\tvar label, t = this.target, type = evt.type;\n\t\tif (type == \"mousedown\") {\n\t\t\tthis._isPressed = true;\n\t\t\tlabel = this.downLabel;\n\t\t} else if (type == \"pressup\") {\n\t\t\tthis._isPressed = false;\n\t\t\tlabel = this._isOver ? this.overLabel : this.outLabel;\n\t\t} else if (type == \"rollover\") {\n\t\t\tthis._isOver = true;\n\t\t\tlabel = this._isPressed ? this.downLabel : this.overLabel;\n\t\t} else { // rollout and default\n\t\t\tthis._isOver = false;\n\t\t\tlabel = this._isPressed ? this.overLabel : this.outLabel;\n\t\t}\n\t\tif (this.play) {\n\t\t\tt.gotoAndPlay&&t.gotoAndPlay(label);\n\t\t} else {\n\t\t\tt.gotoAndStop&&t.gotoAndStop(label);\n\t\t}\n\t};\n\t\n\t/**\n\t * Injected into target. Preserves the paused state through a reset.\n\t * @method _reset\n\t * @protected\n\t **/\n\tp._reset = function() {\n\t\t// TODO: explore better ways to handle this issue. This is hacky & disrupts object signatures.\n\t\tvar p = this.paused;\n\t\tthis.__reset();\n\t\tthis.paused = p;\n\t};\n\n\n\tcreatejs.ButtonHelper = ButtonHelper;\n}());\n\n//##############################################################################\n// Shadow.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * This class encapsulates the properties required to define a shadow to apply to a {{#crossLink \"DisplayObject\"}}{{/crossLink}}\n\t * via its <code>shadow</code> property.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      myImage.shadow = new createjs.Shadow(\"#000000\", 5, 5, 10);\n\t *\n\t * @class Shadow\n\t * @constructor\n\t * @param {String} color The color of the shadow. This can be any valid CSS color value.\n\t * @param {Number} offsetX The x offset of the shadow in pixels.\n\t * @param {Number} offsetY The y offset of the shadow in pixels.\n\t * @param {Number} blur The size of the blurring effect.\n\t **/\n\tfunction Shadow(color, offsetX, offsetY, blur) {\n\t\t\n\t\t\n\t// public properties:\n\t\t/** \n\t\t * The color of the shadow. This can be any valid CSS color value.\n\t\t * @property color\n\t\t * @type String\n\t\t * @default null\n\t\t */\n\t\tthis.color = color||\"black\";\n\t\n\t\t/** The x offset of the shadow.\n\t\t * @property offsetX\n\t\t * @type Number\n\t\t * @default 0\n\t\t */\n\t\tthis.offsetX = offsetX||0;\n\t\n\t\t/** The y offset of the shadow.\n\t\t * @property offsetY\n\t\t * @type Number\n\t\t * @default 0\n\t\t */\n\t\tthis.offsetY = offsetY||0;\n\t\n\t\t/** The blur of the shadow.\n\t\t * @property blur\n\t\t * @type Number\n\t\t * @default 0\n\t\t */\n\t\tthis.blur = blur||0;\n\t}\n\tvar p = Shadow.prototype;\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\n// static public properties:\n\t/**\n\t * An identity shadow object (all properties are set to 0).\n\t * @property identity\n\t * @type Shadow\n\t * @static\n\t * @final\n\t * @readonly\n\t **/\n\tShadow.identity = new Shadow(\"transparent\", 0, 0, 0);\n\n\n// public methods:\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Shadow]\";\n\t};\n\n\t/**\n\t * Returns a clone of this Shadow instance.\n\t * @method clone\n\t * @return {Shadow} A clone of the current Shadow instance.\n\t **/\n\tp.clone = function() {\n\t\treturn new Shadow(this.color, this.offsetX, this.offsetY, this.blur);\n\t};\n\t\n\n\tcreatejs.Shadow = Shadow;\n}());\n\n//##############################################################################\n// SpriteSheet.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Encapsulates the properties and methods associated with a sprite sheet. A sprite sheet is a series of images (usually\n\t * animation frames) combined into a larger image (or images). For example, an animation consisting of eight 100x100\n\t * images could be combined into a single 400x200 sprite sheet (4 frames across by 2 high).\n\t *\n\t * The data passed to the SpriteSheet constructor defines:<ol>\n\t * \t<li> The source image or images to use.</li>\n\t * \t<li> The positions of individual image frames.</li>\n\t * \t<li> Sequences of frames that form named animations. Optional.</li>\n\t * \t<li> The target playback framerate. Optional.</li>\n\t * </OL>\n\t *\n\t * <h3>SpriteSheet Format</h3>\n\t *\n\t * SpriteSheets are an object with two required properties (`images` and `frames`), and two optional properties\n\t * (`framerate` and `animations`). This makes them easy to define in javascript code, or in JSON.\n\t *\n\t * <h4>images</h4>\n\t * An array of source images. Images can be either an HTMLImage\n\t * instance, or a uri to an image. The former is recommended to control preloading.\n\t *\n\t * \timages: [image1, \"path/to/image2.png\"],\n\t *\n\t * <h4>frames</h4>\n\t * Defines the individual frames. There are two supported formats for frame data:<OL>\n\t * <LI> when all of the frames are the same size (in a grid), use an object with `width`, `height`, `regX`, `regY`, and `count` properties.\n\t * `width` & `height` are required and specify the dimensions of the frames.\n\t * `regX` & `regY` indicate the registration point or \"origin\" of the frames.\n\t * `spacing` indicate the spacing between frames.\n\t * `margin` specify the margin around the image(s).\n\t * `count` allows you to specify the total number of frames in the spritesheet; if omitted, this will be calculated\n\t * based on the dimensions of the source images and the frames. Frames will be assigned indexes based on their position\n\t * in the source images (left to right, top to bottom).\n\t *\n\t * \tframes: {width:64, height:64, count:20, regX: 32, regY:64, spacing:0, margin:0}\n\t *\n\t * <LI> if the frames are of different sizes, use an array of frame definitions. Each definition is itself an array\n\t * with 4 required and 3 optional entries, in the order: `x`, `y`, `width`, `height`, `imageIndex`, `regX`, `regY`. The first\n\t * four entries are required and define the frame rectangle. The fifth specifies the index of the source image (defaults to 0). The\n\t * last two specify the registration point of the frame.\n\t *\n\t * \tframes: [\n\t * \t\t// x, y, width, height, imageIndex*, regX*, regY*\n\t * \t\t[64, 0, 96, 64],\n\t * \t\t[0, 0, 64, 64, 1, 32, 32]\n\t * \t\t// etc.\n\t * \t]\n\t *\n\t * </OL>\n\t *\n\t * <h4>animations</h4>\n\t * Optional. An object defining sequences of frames to play as named animations. Each property corresponds to an\n\t * animation of the same name. Each animation must specify the frames to play, and may\n\t * also include a relative playback `speed` (ex. 2 would playback at double speed, 0.5 at half), and\n\t * the name of the `next` animation to sequence to after it completes.\n\t *\n\t * There are three formats supported for defining the frames in an animation, which can be mixed and matched as appropriate:<OL>\n\t * <LI> for a single frame animation, you can simply specify the frame index\n\t *\n\t * \tanimations: {\n\t * \t\tsit: 7\n\t * \t}\n\t *\n\t * <LI> for an animation of consecutive frames, you can use an array with two required, and two optional entries\n\t * in the order: `start`, `end`, `next`, and `speed`. This will play the frames from start to end inclusive.\n\t *\n\t * \tanimations: {\n\t * \t\t// start, end, next*, speed*\n\t * \t\trun: [0, 8],\n\t * \t\tjump: [9, 12, \"run\", 2]\n\t * \t}\n\t *\n\t * <LI> for non-consecutive frames, you can use an object with a `frames` property defining an array of frame indexes to\n\t * play in order. The object can also specify `next` and `speed` properties.\n\t *\n\t * \tanimations: {\n\t * \t\twalk: {\n\t * \t\t\tframes: [1,2,3,3,2,1]\n\t * \t\t},\n\t * \t\tshoot: {\n\t * \t\t\tframes: [1,4,5,6],\n\t * \t\t\tnext: \"walk\",\n\t * \t\t\tspeed: 0.5\n\t * \t\t}\n\t * \t}\n\t *\n\t * </OL>\n\t * <strong>Note:</strong> the `speed` property was added in EaselJS 0.7.0. Earlier versions had a `frequency`\n\t * property instead, which was the inverse of `speed`. For example, a value of \"4\" would be 1/4 normal speed in earlier\n\t * versions, but is 4x normal speed in 0.7.0+.\n\t *\n\t * <h4>framerate</h4>\n\t * Optional. Indicates the default framerate to play this spritesheet at in frames per second.\n\t * See {{#crossLink \"SpriteSheet/framerate:property\"}}{{/crossLink}} for more information.\n\t *\n\t * \tframerate: 20\n\t *\n\t * <h4>Example</h4>\n\t * To define a simple sprite sheet, with a single image \"sprites.jpg\" arranged in a regular 50x50 grid with three\n\t * animations: \"stand\" showing the first frame, \"run\" looping frame 1-5 inclusive, and \"jump\" playing  frame 6-8 and sequencing back to run.\n\t *\n\t * \tvar data = {\n\t * \t\timages: [\"sprites.jpg\"],\n\t * \t\tframes: {width:50, height:50},\n\t * \t\tanimations: {\n\t * \t\t\tstand:0,\n\t * \t\t\trun:[1,5],\n\t * \t\t\tjump:[6,8,\"run\"]\n\t * \t\t}\n\t * \t};\n\t * \tvar spriteSheet = new createjs.SpriteSheet(data);\n\t * \tvar animation = new createjs.Sprite(spriteSheet, \"run\");\n\t *\n\t *\n\t * <strong>Warning:</strong> Images loaded cross-origin will throw cross-origin security errors when interacted with\n\t * using a mouse, using methods such as `getObjectUnderPoint`, using filters, or caching. You can get around this by\n\t * setting `crossOrigin` flags on your images before passing them to EaselJS, eg: `img.crossOrigin=\"Anonymous\";`\n\t *\n\t * @class SpriteSheet\n\t * @constructor\n\t * @param {Object} data An object describing the SpriteSheet data.\n\t * @extends EventDispatcher\n\t **/\n\tfunction SpriteSheet(data) {\n\t\tthis.EventDispatcher_constructor();\n\n\n\t\t// public properties:\n\t\t/**\n\t\t * Indicates whether all images are finished loading.\n\t\t * @property complete\n\t\t * @type Boolean\n\t\t * @readonly\n\t\t **/\n\t\tthis.complete = true;\n\n\t\t/**\n\t\t * Specifies the framerate to use by default for Sprite instances using the SpriteSheet. See\n\t\t * Sprite.framerate for more information.\n\t\t * @property framerate\n\t\t * @type Number\n\t\t **/\n\t\tthis.framerate = 0;\n\n\n\t\t// private properties:\n\t\t/**\n\t\t * @property _animations\n\t\t * @protected\n\t\t * @type Array\n\t\t **/\n\t\tthis._animations = null;\n\n\t\t/**\n\t\t * @property _frames\n\t\t * @protected\n\t\t * @type Array\n\t\t **/\n\t\tthis._frames = null;\n\n\t\t/**\n\t\t * @property _images\n\t\t * @protected\n\t\t * @type Array\n\t\t **/\n\t\tthis._images = null;\n\n\t\t/**\n\t\t * @property _data\n\t\t * @protected\n\t\t * @type Object\n\t\t **/\n\t\tthis._data = null;\n\n\t\t/**\n\t\t * @property _loadCount\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._loadCount = 0;\n\n\t\t// only used for simple frame defs:\n\t\t/**\n\t\t * @property _frameHeight\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._frameHeight = 0;\n\n\t\t/**\n\t\t * @property _frameWidth\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._frameWidth = 0;\n\n\t\t/**\n\t\t * @property _numFrames\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._numFrames = 0;\n\n\t\t/**\n\t\t * @property _regX\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._regX = 0;\n\n\t\t/**\n\t\t * @property _regY\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._regY = 0;\n\n\t\t/**\n\t\t * @property _spacing\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._spacing = 0;\n\n\t\t/**\n\t\t * @property _margin\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._margin = 0;\n\n\t\t// setup:\n\t\tthis._parseData(data);\n\t}\n\tvar p = createjs.extend(SpriteSheet, createjs.EventDispatcher);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\n\n// events:\n\t/**\n\t * Dispatched when all images are loaded.  Note that this only fires if the images\n\t * were not fully loaded when the sprite sheet was initialized. You should check the complete property\n\t * to prior to adding a listener. Ex.\n\t *\n\t * \tvar sheet = new SpriteSheet(data);\n\t * \tif (!sheet.complete) {\n\t * \t\t// not preloaded, listen for the complete event:\n\t * \t\tsheet.addEventListener(\"complete\", handler);\n\t * \t}\n\t *\n\t * @event complete\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t * @since 0.6.0\n\t */\n\n\t/**\n\t * Dispatched when getFrame is called with a valid frame index. This is primarily intended for use by {{#crossLink \"SpriteSheetBuilder\"}}{{/crossLink}}\n\t * when doing on-demand rendering.\n\t * @event getframe\n\t * @param {Number} index The frame index.\n\t * @param {Object} frame The frame object that getFrame will return.\n\t */\n\n\n// getter / setters:\n\t/**\n\t * Use the {{#crossLink \"SpriteSheet/animations:property\"}}{{/crossLink}} property instead.\n\t * @method getAnimations\n\t * @return {Array}\n\t * @deprecated\n\t **/\n\tp.getAnimations = function() {\n\t\treturn this._animations.slice();\n\t};\n\n\t/**\n\t * Returns an array of all available animation names available on this sprite sheet as strings.\n\t * @property animations\n\t * @type {Array}\n\t * @readonly\n\t **/\n\ttry {\n\t\tObject.defineProperties(p, {\n\t\t\tanimations: { get: p.getAnimations }\n\t\t});\n\t} catch (e) {}\n\n\n// public methods:\n\t/**\n\t * Returns the total number of frames in the specified animation, or in the whole sprite\n\t * sheet if the animation param is omitted. Returns 0 if the spritesheet relies on calculated frame counts, and\n\t * the images have not been fully loaded.\n\t * @method getNumFrames\n\t * @param {String} animation The name of the animation to get a frame count for.\n\t * @return {Number} The number of frames in the animation, or in the entire sprite sheet if the animation param is omitted.\n\t */\n\tp.getNumFrames = function(animation) {\n\t\tif (animation == null) {\n\t\t\treturn this._frames ? this._frames.length : this._numFrames || 0;\n\t\t} else {\n\t\t\tvar data = this._data[animation];\n\t\t\tif (data == null) { return 0; }\n\t\t\telse { return data.frames.length; }\n\t\t}\n\t};\n\n\t/**\n\t * Returns an object defining the specified animation. The returned object contains:<UL>\n\t * \t<LI>frames: an array of the frame ids in the animation</LI>\n\t * \t<LI>speed: the playback speed for this animation</LI>\n\t * \t<LI>name: the name of the animation</LI>\n\t * \t<LI>next: the default animation to play next. If the animation loops, the name and next property will be the\n\t * \tsame.</LI>\n\t * </UL>\n\t * @method getAnimation\n\t * @param {String} name The name of the animation to get.\n\t * @return {Object} a generic object with frames, speed, name, and next properties.\n\t **/\n\tp.getAnimation = function(name) {\n\t\treturn this._data[name];\n\t};\n\n\t/**\n\t * Returns an object specifying the image and source rect of the specified frame. The returned object has:<UL>\n\t * \t<LI>an image property holding a reference to the image object in which the frame is found</LI>\n\t * \t<LI>a rect property containing a Rectangle instance which defines the boundaries for the frame within that\n\t * \timage.</LI>\n\t * \t<LI> A regX and regY property corresponding to the regX/Y values for the frame.\n\t * </UL>\n\t * @method getFrame\n\t * @param {Number} frameIndex The index of the frame.\n\t * @return {Object} a generic object with image and rect properties. Returns null if the frame does not exist.\n\t **/\n\tp.getFrame = function(frameIndex) {\n\t\tvar frame;\n\t\tif (this._frames && (frame=this._frames[frameIndex])) { return frame; }\n\t\treturn null;\n\t};\n\n\t/**\n\t * Returns a {{#crossLink \"Rectangle\"}}{{/crossLink}} instance defining the bounds of the specified frame relative\n\t * to the origin. For example, a 90 x 70 frame with a regX of 50 and a regY of 40 would return:\n\t *\n\t * \t[x=-50, y=-40, width=90, height=70]\n\t *\n\t * @method getFrameBounds\n\t * @param {Number} frameIndex The index of the frame.\n\t * @param {Rectangle} [rectangle] A Rectangle instance to copy the values into. By default a new instance is created.\n\t * @return {Rectangle} A Rectangle instance. Returns null if the frame does not exist, or the image is not fully loaded.\n\t **/\n\tp.getFrameBounds = function(frameIndex, rectangle) {\n\t\tvar frame = this.getFrame(frameIndex);\n\t\treturn frame ? (rectangle||new createjs.Rectangle()).setValues(-frame.regX, -frame.regY, frame.rect.width, frame.rect.height) : null;\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[SpriteSheet]\";\n\t};\n\n\t/**\n\t * SpriteSheet cannot be cloned. A SpriteSheet can be shared by multiple Sprite instances without cloning it.\n\t * @method clone\n\t **/\n\tp.clone = function() {\n\t\tthrow(\"SpriteSheet cannot be cloned.\")\n\t};\n\n// private methods:\n\t/**\n\t * @method _parseData\n\t * @param {Object} data An object describing the SpriteSheet data.\n\t * @protected\n\t **/\n\tp._parseData = function(data) {\n\t\tvar i,l,o,a;\n\t\tif (data == null) { return; }\n\n\t\tthis.framerate = data.framerate||0;\n\n\t\t// parse images:\n\t\tif (data.images && (l=data.images.length) > 0) {\n\t\t\ta = this._images = [];\n\t\t\tfor (i=0; i<l; i++) {\n\t\t\t\tvar img = data.images[i];\n\t\t\t\tif (typeof img == \"string\") {\n\t\t\t\t\tvar src = img;\n\t\t\t\t\timg = document.createElement(\"img\");\n\t\t\t\t\timg.src = src;\n\t\t\t\t}\n\t\t\t\ta.push(img);\n\t\t\t\tif (!img.getContext && !img.naturalWidth) {\n\t\t\t\t\tthis._loadCount++;\n\t\t\t\t\tthis.complete = false;\n\t\t\t\t\t(function(o) { img.onload = function() { o._handleImageLoad(); } })(this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// parse frames:\n\t\tif (data.frames == null) { // nothing\n\t\t} else if (data.frames instanceof Array) {\n\t\t\tthis._frames = [];\n\t\t\ta = data.frames;\n\t\t\tfor (i=0,l=a.length;i<l;i++) {\n\t\t\t\tvar arr = a[i];\n\t\t\t\tthis._frames.push({image:this._images[arr[4]?arr[4]:0], rect:new createjs.Rectangle(arr[0],arr[1],arr[2],arr[3]), regX:arr[5]||0, regY:arr[6]||0 });\n\t\t\t}\n\t\t} else {\n\t\t\to = data.frames;\n\t\t\tthis._frameWidth = o.width;\n\t\t\tthis._frameHeight = o.height;\n\t\t\tthis._regX = o.regX||0;\n\t\t\tthis._regY = o.regY||0;\n\t\t\tthis._spacing = o.spacing||0;\n\t\t\tthis._margin = o.margin||0;\n\t\t\tthis._numFrames = o.count;\n\t\t\tif (this._loadCount == 0) { this._calculateFrames(); }\n\t\t}\n\n\t\t// parse animations:\n\t\tthis._animations = [];\n\t\tif ((o=data.animations) != null) {\n\t\t\tthis._data = {};\n\t\t\tvar name;\n\t\t\tfor (name in o) {\n\t\t\t\tvar anim = {name:name};\n\t\t\t\tvar obj = o[name];\n\t\t\t\tif (typeof obj == \"number\") { // single frame\n\t\t\t\t\ta = anim.frames = [obj];\n\t\t\t\t} else if (obj instanceof Array) { // simple\n\t\t\t\t\tif (obj.length == 1) { anim.frames = [obj[0]]; }\n\t\t\t\t\telse {\n\t\t\t\t\t\tanim.speed = obj[3];\n\t\t\t\t\t\tanim.next = obj[2];\n\t\t\t\t\t\ta = anim.frames = [];\n\t\t\t\t\t\tfor (i=obj[0];i<=obj[1];i++) {\n\t\t\t\t\t\t\ta.push(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else { // complex\n\t\t\t\t\tanim.speed = obj.speed;\n\t\t\t\t\tanim.next = obj.next;\n\t\t\t\t\tvar frames = obj.frames;\n\t\t\t\t\ta = anim.frames = (typeof frames == \"number\") ? [frames] : frames.slice(0);\n\t\t\t\t}\n\t\t\t\tif (anim.next === true || anim.next === undefined) { anim.next = name; } // loop\n\t\t\t\tif (anim.next === false || (a.length < 2 && anim.next == name)) { anim.next = null; } // stop\n\t\t\t\tif (!anim.speed) { anim.speed = 1; }\n\t\t\t\tthis._animations.push(name);\n\t\t\t\tthis._data[name] = anim;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * @method _handleImageLoad\n\t * @protected\n\t **/\n\tp._handleImageLoad = function() {\n\t\tif (--this._loadCount == 0) {\n\t\t\tthis._calculateFrames();\n\t\t\tthis.complete = true;\n\t\t\tthis.dispatchEvent(\"complete\");\n\t\t}\n\t};\n\n\t/**\n\t * @method _calculateFrames\n\t * @protected\n\t **/\n\tp._calculateFrames = function() {\n\t\tif (this._frames || this._frameWidth == 0) { return; }\n\n\t\tthis._frames = [];\n\n\t\tvar maxFrames = this._numFrames || 100000; // if we go over this, something is wrong.\n\t\tvar frameCount = 0, frameWidth = this._frameWidth, frameHeight = this._frameHeight;\n\t\tvar spacing = this._spacing, margin = this._margin;\n\t\t\n\t\timgLoop:\n\t\tfor (var i=0, imgs=this._images; i<imgs.length; i++) {\n\t\t\tvar img = imgs[i], imgW = img.width, imgH = img.height;\n\n\t\t\tvar y = margin;\n\t\t\twhile (y <= imgH-margin-frameHeight) {\n\t\t\t\tvar x = margin;\n\t\t\t\twhile (x <= imgW-margin-frameWidth) {\n\t\t\t\t\tif (frameCount >= maxFrames) { break imgLoop; }\n\t\t\t\t\tframeCount++;\n\t\t\t\t\tthis._frames.push({\n\t\t\t\t\t\t\timage: img,\n\t\t\t\t\t\t\trect: new createjs.Rectangle(x, y, frameWidth, frameHeight),\n\t\t\t\t\t\t\tregX: this._regX,\n\t\t\t\t\t\t\tregY: this._regY\n\t\t\t\t\t\t});\n\t\t\t\t\tx += frameWidth+spacing;\n\t\t\t\t}\n\t\t\t\ty += frameHeight+spacing;\n\t\t\t}\n\t\t}\n\t\tthis._numFrames = frameCount;\n\t};\n\n\n\tcreatejs.SpriteSheet = createjs.promote(SpriteSheet, \"EventDispatcher\");\n}());\n\n//##############################################################################\n// Graphics.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * The Graphics class exposes an easy to use API for generating vector drawing instructions and drawing them to a\n\t * specified context. Note that you can use Graphics without any dependency on the EaselJS framework by calling {{#crossLink \"Graphics/draw\"}}{{/crossLink}}\n\t * directly, or it can be used with the {{#crossLink \"Shape\"}}{{/crossLink}} object to draw vector graphics within the\n\t * context of an EaselJS display list.\n\t *\n\t * There are two approaches to working with Graphics object: calling methods on a Graphics instance (the \"Graphics API\"), or\n\t * instantiating Graphics command objects and adding them to the graphics queue via {{#crossLink \"Graphics/append\"}}{{/crossLink}}.\n\t * The former abstracts the latter, simplifying beginning and ending paths, fills, and strokes.\n\t *\n\t *      var g = new createjs.Graphics();\n\t *      g.setStrokeStyle(1);\n\t *      g.beginStroke(\"#000000\");\n\t *      g.beginFill(\"red\");\n\t *      g.drawCircle(0,0,30);\n\t *\n\t * All drawing methods in Graphics return the Graphics instance, so they can be chained together. For example,\n\t * the following line of code would generate the instructions to draw a rectangle with a red stroke and blue fill:\n\t *\n\t *      myGraphics.beginStroke(\"red\").beginFill(\"blue\").drawRect(20, 20, 100, 50);\n\t *\n\t * Each graphics API call generates a command object (see below). The last command to be created can be accessed via\n\t * {{#crossLink \"Graphics/command:property\"}}{{/crossLink}}:\n\t *\n\t *      var fillCommand = myGraphics.beginFill(\"red\").command;\n\t *      // ... later, update the fill style/color:\n\t *      fillCommand.style = \"blue\";\n\t *      // or change it to a bitmap fill:\n\t *      fillCommand.bitmap(myImage);\n\t *\n\t * For more direct control of rendering, you can instantiate and append command objects to the graphics queue directly. In this case, you\n\t * need to manage path creation manually, and ensure that fill/stroke is applied to a defined path:\n\t *\n\t *      // start a new path. Graphics.beginCmd is a reusable BeginPath instance:\n\t *      myGraphics.append(createjs.Graphics.beginCmd);\n\t *      // we need to define the path before applying the fill:\n\t *      var circle = new createjs.Graphics.Circle(0,0,30);\n\t *      myGraphics.append(circle);\n\t *      // fill the path we just defined:\n\t *      var fill = new createjs.Graphics.Fill(\"red\");\n\t *      myGraphics.append(fill);\n\t *\n\t * These approaches can be used together, for example to insert a custom command:\n\t *\n\t *      myGraphics.beginFill(\"red\");\n\t *      var customCommand = new CustomSpiralCommand(etc);\n\t *      myGraphics.append(customCommand);\n\t *      myGraphics.beginFill(\"blue\");\n\t *      myGraphics.drawCircle(0, 0, 30);\n\t *\n\t * See {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more info on creating custom commands.\n\t *\n\t * <h4>Tiny API</h4>\n\t * The Graphics class also includes a \"tiny API\", which is one or two-letter methods that are shortcuts for all of the\n\t * Graphics methods. These methods are great for creating compact instructions, and is used by the Toolkit for CreateJS\n\t * to generate readable code. All tiny methods are marked as protected, so you can view them by enabling protected\n\t * descriptions in the docs.\n\t *\n\t * <table>\n\t *     <tr><td><b>Tiny</b></td><td><b>Method</b></td><td><b>Tiny</b></td><td><b>Method</b></td></tr>\n\t *     <tr><td>mt</td><td>{{#crossLink \"Graphics/moveTo\"}}{{/crossLink}} </td>\n\t *     <td>lt</td> <td>{{#crossLink \"Graphics/lineTo\"}}{{/crossLink}}</td></tr>\n\t *     <tr><td>a/at</td><td>{{#crossLink \"Graphics/arc\"}}{{/crossLink}} / {{#crossLink \"Graphics/arcTo\"}}{{/crossLink}} </td>\n\t *     <td>bt</td><td>{{#crossLink \"Graphics/bezierCurveTo\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>qt</td><td>{{#crossLink \"Graphics/quadraticCurveTo\"}}{{/crossLink}} (also curveTo)</td>\n\t *     <td>r</td><td>{{#crossLink \"Graphics/rect\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>cp</td><td>{{#crossLink \"Graphics/closePath\"}}{{/crossLink}} </td>\n\t *     <td>c</td><td>{{#crossLink \"Graphics/clear\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>f</td><td>{{#crossLink \"Graphics/beginFill\"}}{{/crossLink}} </td>\n\t *     <td>lf</td><td>{{#crossLink \"Graphics/beginLinearGradientFill\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>rf</td><td>{{#crossLink \"Graphics/beginRadialGradientFill\"}}{{/crossLink}} </td>\n\t *     <td>bf</td><td>{{#crossLink \"Graphics/beginBitmapFill\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>ef</td><td>{{#crossLink \"Graphics/endFill\"}}{{/crossLink}} </td>\n\t *     <td>ss / sd</td><td>{{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} / {{#crossLink \"Graphics/setStrokeDash\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>s</td><td>{{#crossLink \"Graphics/beginStroke\"}}{{/crossLink}} </td>\n\t *     <td>ls</td><td>{{#crossLink \"Graphics/beginLinearGradientStroke\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>rs</td><td>{{#crossLink \"Graphics/beginRadialGradientStroke\"}}{{/crossLink}} </td>\n\t *     <td>bs</td><td>{{#crossLink \"Graphics/beginBitmapStroke\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>es</td><td>{{#crossLink \"Graphics/endStroke\"}}{{/crossLink}} </td>\n\t *     <td>dr</td><td>{{#crossLink \"Graphics/drawRect\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>rr</td><td>{{#crossLink \"Graphics/drawRoundRect\"}}{{/crossLink}} </td>\n\t *     <td>rc</td><td>{{#crossLink \"Graphics/drawRoundRectComplex\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>dc</td><td>{{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}} </td>\n\t *     <td>de</td><td>{{#crossLink \"Graphics/drawEllipse\"}}{{/crossLink}} </td></tr>\n\t *     <tr><td>dp</td><td>{{#crossLink \"Graphics/drawPolyStar\"}}{{/crossLink}} </td>\n\t *     <td>p</td><td>{{#crossLink \"Graphics/decodePath\"}}{{/crossLink}} </td></tr>\n\t * </table>\n\t *\n\t * Here is the above example, using the tiny API instead.\n\t *\n\t *      myGraphics.s(\"red\").f(\"blue\").r(20, 20, 100, 50);\n\t *\n\t * @class Graphics\n\t * @constructor\n\t **/\n\tfunction Graphics() {\n\n\n\t// public properties\n\t\t/**\n\t\t * Holds a reference to the last command that was created or appended. For example, you could retain a reference\n\t\t * to a Fill command in order to dynamically update the color later by using:\n\t\t * \t\tmyFill = myGraphics.beginFill(\"red\").command;\n\t\t * \t\t// update color later:\n\t\t * \t\tmyFill.style = \"yellow\";\n\t\t * @property command\n\t\t * @type Object\n\t\t **/\n\t\tthis.command = null;\n\n\n\t// private properties\n\t\t/**\n\t\t * @property _stroke\n\t\t * @protected\n\t\t * @type {Stroke}\n\t\t **/\n\t\tthis._stroke = null;\n\n\t\t/**\n\t\t * @property _strokeStyle\n\t\t * @protected\n\t\t * @type {StrokeStyle}\n\t\t **/\n\t\tthis._strokeStyle = null;\n\t\t\n\t\t/**\n\t\t * @property _oldStrokeStyle\n\t\t * @protected\n\t\t * @type {StrokeStyle}\n\t\t **/\n\t\tthis._oldStrokeStyle = null;\n\t\t\n\t\t/**\n\t\t * @property _strokeDash\n\t\t * @protected\n\t\t * @type {StrokeDash}\n\t\t **/\n\t\tthis._strokeDash = null;\n\t\t\n\t\t/**\n\t\t * @property _oldStrokeDash\n\t\t * @protected\n\t\t * @type {StrokeDash}\n\t\t **/\n\t\tthis._oldStrokeDash = null;\n\n\t\t/**\n\t\t * @property _strokeIgnoreScale\n\t\t * @protected\n\t\t * @type Boolean\n\t\t **/\n\t\tthis._strokeIgnoreScale = false;\n\n\t\t/**\n\t\t * @property _fill\n\t\t * @protected\n\t\t * @type {Fill}\n\t\t **/\n\t\tthis._fill = null;\n\n\t\t/**\n\t\t * @property _instructions\n\t\t * @protected\n\t\t * @type {Array}\n\t\t **/\n\t\tthis._instructions = [];\n\n\t\t/**\n\t\t * Indicates the last instruction index that was committed.\n\t\t * @property _commitIndex\n\t\t * @protected\n\t\t * @type {Number}\n\t\t **/\n\t\tthis._commitIndex = 0;\n\n\t\t/**\n\t\t * Uncommitted instructions.\n\t\t * @property _activeInstructions\n\t\t * @protected\n\t\t * @type {Array}\n\t\t **/\n\t\tthis._activeInstructions = [];\n\n\t\t/**\n\t\t * This indicates that there have been changes to the activeInstruction list since the last updateInstructions call.\n\t\t * @property _dirty\n\t\t * @protected\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t **/\n\t\tthis._dirty = false;\n\n\t\t/**\n\t\t * Index to draw from if a store operation has happened.\n\t\t * @property _storeIndex\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t **/\n\t\tthis._storeIndex = 0;\n\n\t// setup:\n\t\tthis.clear();\n\t}\n\tvar p = Graphics.prototype;\n\tvar G = Graphics; // shortcut\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\n// static public methods:\n\t/**\n\t * Returns a CSS compatible color string based on the specified RGB numeric color values in the format\n\t * \"rgba(255,255,255,1.0)\", or if alpha is null then in the format \"rgb(255,255,255)\". For example,\n\t *\n\t *      createjs.Graphics.getRGB(50, 100, 150, 0.5);\n\t *      // Returns \"rgba(50,100,150,0.5)\"\n\t *\n\t * It also supports passing a single hex color value as the first param, and an optional alpha value as the second\n\t * param. For example,\n\t *\n\t *      createjs.Graphics.getRGB(0xFF00FF, 0.2);\n\t *      // Returns \"rgba(255,0,255,0.2)\"\n\t *\n\t * @method getRGB\n\t * @static\n\t * @param {Number} r The red component for the color, between 0 and 0xFF (255).\n\t * @param {Number} g The green component for the color, between 0 and 0xFF (255).\n\t * @param {Number} b The blue component for the color, between 0 and 0xFF (255).\n\t * @param {Number} [alpha] The alpha component for the color where 0 is fully transparent and 1 is fully opaque.\n\t * @return {String} A CSS compatible color string based on the specified RGB numeric color values in the format\n\t * \"rgba(255,255,255,1.0)\", or if alpha is null then in the format \"rgb(255,255,255)\".\n\t **/\n\tGraphics.getRGB = function(r, g, b, alpha) {\n\t\tif (r != null && b == null) {\n\t\t\talpha = g;\n\t\t\tb = r&0xFF;\n\t\t\tg = r>>8&0xFF;\n\t\t\tr = r>>16&0xFF;\n\t\t}\n\t\tif (alpha == null) {\n\t\t\treturn \"rgb(\"+r+\",\"+g+\",\"+b+\")\";\n\t\t} else {\n\t\t\treturn \"rgba(\"+r+\",\"+g+\",\"+b+\",\"+alpha+\")\";\n\t\t}\n\t};\n\n\t/**\n\t * Returns a CSS compatible color string based on the specified HSL numeric color values in the format \"hsla(360,100,100,1.0)\",\n\t * or if alpha is null then in the format \"hsl(360,100,100)\".\n\t *\n\t *      createjs.Graphics.getHSL(150, 100, 70);\n\t *      // Returns \"hsl(150,100,70)\"\n\t *\n\t * @method getHSL\n\t * @static\n\t * @param {Number} hue The hue component for the color, between 0 and 360.\n\t * @param {Number} saturation The saturation component for the color, between 0 and 100.\n\t * @param {Number} lightness The lightness component for the color, between 0 and 100.\n\t * @param {Number} [alpha] The alpha component for the color where 0 is fully transparent and 1 is fully opaque.\n\t * @return {String} A CSS compatible color string based on the specified HSL numeric color values in the format\n\t * \"hsla(360,100,100,1.0)\", or if alpha is null then in the format \"hsl(360,100,100)\".\n\t **/\n\tGraphics.getHSL = function(hue, saturation, lightness, alpha) {\n\t\tif (alpha == null) {\n\t\t\treturn \"hsl(\"+(hue%360)+\",\"+saturation+\"%,\"+lightness+\"%)\";\n\t\t} else {\n\t\t\treturn \"hsla(\"+(hue%360)+\",\"+saturation+\"%,\"+lightness+\"%,\"+alpha+\")\";\n\t\t}\n\t};\n\n\n// static properties:\n\t/**\n\t * A reusable instance of {{#crossLink \"Graphics/BeginPath\"}}{{/crossLink}} to avoid\n\t * unnecessary instantiation.\n\t * @property beginCmd\n\t * @type {Graphics.BeginPath}\n\t * @static\n\t **/\n\t // defined at the bottom of this file.\n\n\t/**\n\t * Map of Base64 characters to values. Used by {{#crossLink \"Graphics/decodePath\"}}{{/crossLink}}.\n\t * @property BASE_64\n\t * @static\n\t * @final\n\t * @readonly\n\t * @type {Object}\n\t **/\n\tGraphics.BASE_64 = {\"A\":0,\"B\":1,\"C\":2,\"D\":3,\"E\":4,\"F\":5,\"G\":6,\"H\":7,\"I\":8,\"J\":9,\"K\":10,\"L\":11,\"M\":12,\"N\":13,\"O\":14,\"P\":15,\"Q\":16,\"R\":17,\"S\":18,\"T\":19,\"U\":20,\"V\":21,\"W\":22,\"X\":23,\"Y\":24,\"Z\":25,\"a\":26,\"b\":27,\"c\":28,\"d\":29,\"e\":30,\"f\":31,\"g\":32,\"h\":33,\"i\":34,\"j\":35,\"k\":36,\"l\":37,\"m\":38,\"n\":39,\"o\":40,\"p\":41,\"q\":42,\"r\":43,\"s\":44,\"t\":45,\"u\":46,\"v\":47,\"w\":48,\"x\":49,\"y\":50,\"z\":51,\"0\":52,\"1\":53,\"2\":54,\"3\":55,\"4\":56,\"5\":57,\"6\":58,\"7\":59,\"8\":60,\"9\":61,\"+\":62,\"/\":63};\n\n\t/**\n\t * Maps numeric values for the caps parameter of {{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} to\n\t * corresponding string values. This is primarily for use with the tiny API. The mappings are as follows: 0 to\n\t * \"butt\", 1 to \"round\", and 2 to \"square\".\n\t * For example, to set the line caps to \"square\":\n\t *\n\t *      myGraphics.ss(16, 2);\n\t *\n\t * @property STROKE_CAPS_MAP\n\t * @static\n\t * @final\n\t * @readonly\n\t * @type {Array}\n\t **/\n\tGraphics.STROKE_CAPS_MAP = [\"butt\", \"round\", \"square\"];\n\n\t/**\n\t * Maps numeric values for the joints parameter of {{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} to\n\t * corresponding string values. This is primarily for use with the tiny API. The mappings are as follows: 0 to\n\t * \"miter\", 1 to \"round\", and 2 to \"bevel\".\n\t * For example, to set the line joints to \"bevel\":\n\t *\n\t *      myGraphics.ss(16, 0, 2);\n\t *\n\t * @property STROKE_JOINTS_MAP\n\t * @static\n\t * @final\n\t * @readonly\n\t * @type {Array}\n\t **/\n\tGraphics.STROKE_JOINTS_MAP = [\"miter\", \"round\", \"bevel\"];\n\n\t/**\n\t * @property _ctx\n\t * @static\n\t * @protected\n\t * @type {CanvasRenderingContext2D}\n\t **/\n\tvar canvas = (createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"));\n\tif (canvas.getContext) {\n\t\tGraphics._ctx = canvas.getContext(\"2d\");\n\t\tcanvas.width = canvas.height = 1;\n\t}\n\n\n// getter / setters:\n\t/**\n\t * Use the {{#crossLink \"Graphics/instructions:property\"}}{{/crossLink}} property instead.\n\t * @method getInstructions\n\t * @return {Array}\n\t * @deprecated\n\t **/\n\tp.getInstructions = function() {\n\t\tthis._updateInstructions();\n\t\treturn this._instructions;\n\t};\n\n\t/**\n\t * Returns the graphics instructions array. Each entry is a graphics command object (ex. Graphics.Fill, Graphics.Rect)\n\t * Modifying the returned array directly is not recommended, and is likely to result in unexpected behaviour.\n\t *\n\t * This property is mainly intended for introspection of the instructions (ex. for graphics export).\n\t * @property instructions\n\t * @type {Array}\n\t * @readonly\n\t **/\n\ttry {\n\t\tObject.defineProperties(p, {\n\t\t\tinstructions: { get: p.getInstructions }\n\t\t});\n\t} catch (e) {}\n\n\n// public methods:\n\t/**\n\t * Returns true if this Graphics instance has no drawing commands.\n\t * @method isEmpty\n\t * @return {Boolean} Returns true if this Graphics instance has no drawing commands.\n\t **/\n\tp.isEmpty = function() {\n\t\treturn !(this._instructions.length || this._activeInstructions.length);\n\t};\n\n\t/**\n\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t * Returns true if the draw was handled (useful for overriding functionality).\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Object} data Optional data that is passed to graphics command exec methods. When called from a Shape instance, the shape passes itself as the data parameter. This can be used by custom graphic commands to insert contextual data.\n\t **/\n\tp.draw = function(ctx, data) {\n\t\tthis._updateInstructions();\n\t\tvar instr = this._instructions;\n\t\tfor (var i=this._storeIndex, l=instr.length; i<l; i++) {\n\t\t\tinstr[i].exec(ctx, data);\n\t\t}\n\t};\n\n\t/**\n\t * Draws only the path described for this Graphics instance, skipping any non-path instructions, including fill and\n\t * stroke descriptions. Used for <code>DisplayObject.mask</code> to draw the clipping path, for example.\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method drawAsPath\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t **/\n\tp.drawAsPath = function(ctx) {\n\t\tthis._updateInstructions();\n\t\tvar instr, instrs = this._instructions;\n\t\tfor (var i=this._storeIndex, l=instrs.length; i<l; i++) {\n\t\t\t// the first command is always a beginPath command.\n\t\t\tif ((instr = instrs[i]).path !== false) { instr.exec(ctx); }\n\t\t}\n\t};\n\n\n// public methods that map directly to context 2D calls:\n\t/**\n\t * Moves the drawing point to the specified position. A tiny API method \"mt\" also exists.\n\t * @method moveTo\n\t * @param {Number} x The x coordinate the drawing point should move to.\n\t * @param {Number} y The y coordinate the drawing point should move to.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls).\n\t * @chainable\n\t **/\n\tp.moveTo = function(x, y) {\n\t\treturn this.append(new G.MoveTo(x,y), true);\n\t};\n\n\t/**\n\t * Draws a line from the current drawing point to the specified position, which become the new current drawing\n\t * point. A tiny API method \"lt\" also exists.\n\t *\n\t * For detailed information, read the\n\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#complex-shapes-(paths)\">\n\t * whatwg spec</a>.\n\t * @method lineTo\n\t * @param {Number} x The x coordinate the drawing point should draw to.\n\t * @param {Number} y The y coordinate the drawing point should draw to.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.lineTo = function(x, y) {\n\t\treturn this.append(new G.LineTo(x,y));\n\t};\n\n\t/**\n\t * Draws an arc with the specified control points and radius.  For detailed information, read the\n\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-arcto\">\n\t * whatwg spec</a>. A tiny API method \"at\" also exists.\n\t * @method arcTo\n\t * @param {Number} x1\n\t * @param {Number} y1\n\t * @param {Number} x2\n\t * @param {Number} y2\n\t * @param {Number} radius\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.arcTo = function(x1, y1, x2, y2, radius) {\n\t\treturn this.append(new G.ArcTo(x1, y1, x2, y2, radius));\n\t};\n\n\t/**\n\t * Draws an arc defined by the radius, startAngle and endAngle arguments, centered at the position (x, y). For\n\t * example, to draw a full circle with a radius of 20 centered at (100, 100):\n\t *\n\t *      arc(100, 100, 20, 0, Math.PI*2);\n\t *\n\t * For detailed information, read the\n\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-arc\">whatwg spec</a>.\n\t * A tiny API method \"a\" also exists.\n\t * @method arc\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} radius\n\t * @param {Number} startAngle Measured in radians.\n\t * @param {Number} endAngle Measured in radians.\n\t * @param {Boolean} anticlockwise\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.arc = function(x, y, radius, startAngle, endAngle, anticlockwise) {\n\t\treturn this.append(new G.Arc(x, y, radius, startAngle, endAngle, anticlockwise));\n\t};\n\n\t/**\n\t * Draws a quadratic curve from the current drawing point to (x, y) using the control point (cpx, cpy). For detailed\n\t * information, read the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-quadraticcurveto\">\n\t * whatwg spec</a>. A tiny API method \"qt\" also exists.\n\t * @method quadraticCurveTo\n\t * @param {Number} cpx\n\t * @param {Number} cpy\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.quadraticCurveTo = function(cpx, cpy, x, y) {\n\t\treturn this.append(new G.QuadraticCurveTo(cpx, cpy, x, y));\n\t};\n\n\t/**\n\t * Draws a bezier curve from the current drawing point to (x, y) using the control points (cp1x, cp1y) and (cp2x,\n\t * cp2y). For detailed information, read the\n\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-beziercurveto\">\n\t * whatwg spec</a>. A tiny API method \"bt\" also exists.\n\t * @method bezierCurveTo\n\t * @param {Number} cp1x\n\t * @param {Number} cp1y\n\t * @param {Number} cp2x\n\t * @param {Number} cp2y\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.bezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {\n\t\treturn this.append(new G.BezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y));\n\t};\n\n\t/**\n\t * Draws a rectangle at (x, y) with the specified width and height using the current fill and/or stroke.\n\t * For detailed information, read the\n\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-rect\">\n\t * whatwg spec</a>. A tiny API method \"r\" also exists.\n\t * @method rect\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w Width of the rectangle\n\t * @param {Number} h Height of the rectangle\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.rect = function(x, y, w, h) {\n\t\treturn this.append(new G.Rect(x, y, w, h));\n\t};\n\n\t/**\n\t * Closes the current path, effectively drawing a line from the current drawing point to the first drawing point specified\n\t * since the fill or stroke was last set. A tiny API method \"cp\" also exists.\n\t * @method closePath\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.closePath = function() {\n\t\treturn this._activeInstructions.length ? this.append(new G.ClosePath()) : this;\n\t};\n\n\n// public methods that roughly map to Flash graphics APIs:\n\t/**\n\t * Clears all drawing instructions, effectively resetting this Graphics instance. Any line and fill styles will need\n\t * to be redefined to draw shapes following a clear call. A tiny API method \"c\" also exists.\n\t * @method clear\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.clear = function() {\n\t\tthis._instructions.length = this._activeInstructions.length = this._commitIndex = 0;\n\t\tthis._strokeStyle = this._oldStrokeStyle = this._stroke = this._fill = this._strokeDash = this._oldStrokeDash = null;\n\t\tthis._dirty = this._strokeIgnoreScale = false;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Begins a fill with the specified color. This ends the current sub-path. A tiny API method \"f\" also exists.\n\t * @method beginFill\n\t * @param {String} color A CSS compatible color value (ex. \"red\", \"#FF0000\", or \"rgba(255,0,0,0.5)\"). Setting to\n\t * null will result in no fill.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.beginFill = function(color) {\n\t\treturn this._setFill(color ? new G.Fill(color) : null);\n\t};\n\n\t/**\n\t * Begins a linear gradient fill defined by the line (x0, y0) to (x1, y1). This ends the current sub-path. For\n\t * example, the following code defines a black to white vertical gradient ranging from 20px to 120px, and draws a\n\t * square to display it:\n\t *\n\t *      myGraphics.beginLinearGradientFill([\"#000\",\"#FFF\"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);\n\t *\n\t * A tiny API method \"lf\" also exists.\n\t * @method beginLinearGradientFill\n\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define a gradient\n\t * drawing from red to blue.\n\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would draw\n\t * the first color to 10% then interpolating to the second color at 90%.\n\t * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.\n\t * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.\n\t * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.\n\t * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.beginLinearGradientFill = function(colors, ratios, x0, y0, x1, y1) {\n\t\treturn this._setFill(new G.Fill().linearGradient(colors, ratios, x0, y0, x1, y1));\n\t};\n\n\t/**\n\t * Begins a radial gradient fill. This ends the current sub-path. For example, the following code defines a red to\n\t * blue radial gradient centered at (100, 100), with a radius of 50, and draws a circle to display it:\n\t *\n\t *      myGraphics.beginRadialGradientFill([\"#F00\",\"#00F\"], [0, 1], 100, 100, 0, 100, 100, 50).drawCircle(100, 100, 50);\n\t *\n\t * A tiny API method \"rf\" also exists.\n\t * @method beginRadialGradientFill\n\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t * a gradient drawing from red to blue.\n\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.\n\t * @param {Number} x0 Center position of the inner circle that defines the gradient.\n\t * @param {Number} y0 Center position of the inner circle that defines the gradient.\n\t * @param {Number} r0 Radius of the inner circle that defines the gradient.\n\t * @param {Number} x1 Center position of the outer circle that defines the gradient.\n\t * @param {Number} y1 Center position of the outer circle that defines the gradient.\n\t * @param {Number} r1 Radius of the outer circle that defines the gradient.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.beginRadialGradientFill = function(colors, ratios, x0, y0, r0, x1, y1, r1) {\n\t\treturn this._setFill(new G.Fill().radialGradient(colors, ratios, x0, y0, r0, x1, y1, r1));\n\t};\n\n\t/**\n\t * Begins a pattern fill using the specified image. This ends the current sub-path. A tiny API method \"bf\" also\n\t * exists.\n\t * @method beginBitmapFill\n\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use\n\t * as the pattern. Must be loaded prior to creating a bitmap fill, or the fill will be empty.\n\t * @param {String} repetition Optional. Indicates whether to repeat the image in the fill area. One of \"repeat\",\n\t * \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\". Note that Firefox does not support \"repeat-x\" or\n\t * \"repeat-y\" (latest tests were in FF 20.0), and will default to \"repeat\".\n\t * @param {Matrix2D} matrix Optional. Specifies a transformation matrix for the bitmap fill. This transformation\n\t * will be applied relative to the parent transform.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.beginBitmapFill = function(image, repetition, matrix) {\n\t\treturn this._setFill(new G.Fill(null,matrix).bitmap(image, repetition));\n\t};\n\n\t/**\n\t * Ends the current sub-path, and begins a new one with no fill. Functionally identical to <code>beginFill(null)</code>.\n\t * A tiny API method \"ef\" also exists.\n\t * @method endFill\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.endFill = function() {\n\t\treturn this.beginFill();\n\t};\n\n\t/**\n\t * Sets the stroke style. Like all drawing methods, this can be chained, so you can define\n\t * the stroke style and color in a single line of code like so:\n\t *\n\t * \tmyGraphics.setStrokeStyle(8,\"round\").beginStroke(\"#F00\");\n\t *\n\t * A tiny API method \"ss\" also exists.\n\t * @method setStrokeStyle\n\t * @param {Number} thickness The width of the stroke.\n\t * @param {String | Number} [caps=0] Indicates the type of caps to use at the end of lines. One of butt,\n\t * round, or square. Defaults to \"butt\". Also accepts the values 0 (butt), 1 (round), and 2 (square) for use with\n\t * the tiny API.\n\t * @param {String | Number} [joints=0] Specifies the type of joints that should be used where two lines meet.\n\t * One of bevel, round, or miter. Defaults to \"miter\". Also accepts the values 0 (miter), 1 (round), and 2 (bevel)\n\t * for use with the tiny API.\n\t * @param {Number} [miterLimit=10] If joints is set to \"miter\", then you can specify a miter limit ratio which\n\t * controls at what point a mitered joint will be clipped.\n\t * @param {Boolean} [ignoreScale=false] If true, the stroke will be drawn at the specified thickness regardless\n\t * of active transformations.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.setStrokeStyle = function(thickness, caps, joints, miterLimit, ignoreScale) {\n\t\tthis._updateInstructions(true);\n\t\tthis._strokeStyle = this.command = new G.StrokeStyle(thickness, caps, joints, miterLimit, ignoreScale);\n\n\t\t// ignoreScale lives on Stroke, not StrokeStyle, so we do a little trickery:\n\t\tif (this._stroke) { this._stroke.ignoreScale = ignoreScale; }\n\t\tthis._strokeIgnoreScale = ignoreScale;\n\t\treturn this;\n\t};\n\t\n\t/**\n\t * Sets or clears the stroke dash pattern.\n\t *\n\t * \tmyGraphics.setStrokeDash([20, 10], 0);\n\t *\n\t * A tiny API method `sd` also exists.\n\t * @method setStrokeDash\n\t * @param {Array} [segments] An array specifying the dash pattern, alternating between line and gap.\n\t * For example, `[20,10]` would create a pattern of 20 pixel lines with 10 pixel gaps between them.\n\t * Passing null or an empty array will clear the existing stroke dash.\n\t * @param {Number} [offset=0] The offset of the dash pattern. For example, you could increment this value to create a \"marching ants\" effect.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.setStrokeDash = function(segments, offset) {\n\t\tthis._updateInstructions(true);\n\t\tthis._strokeDash = this.command = new G.StrokeDash(segments, offset);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Begins a stroke with the specified color. This ends the current sub-path. A tiny API method \"s\" also exists.\n\t * @method beginStroke\n\t * @param {String} color A CSS compatible color value (ex. \"#FF0000\", \"red\", or \"rgba(255,0,0,0.5)\"). Setting to\n\t * null will result in no stroke.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.beginStroke = function(color) {\n\t\treturn this._setStroke(color ? new G.Stroke(color) : null);\n\t};\n\n\t/**\n\t * Begins a linear gradient stroke defined by the line (x0, y0) to (x1, y1). This ends the current sub-path. For\n\t * example, the following code defines a black to white vertical gradient ranging from 20px to 120px, and draws a\n\t * square to display it:\n\t *\n\t *      myGraphics.setStrokeStyle(10).\n\t *          beginLinearGradientStroke([\"#000\",\"#FFF\"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);\n\t *\n\t * A tiny API method \"ls\" also exists.\n\t * @method beginLinearGradientStroke\n\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t * a gradient drawing from red to blue.\n\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.\n\t * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.\n\t * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.\n\t * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.\n\t * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.beginLinearGradientStroke = function(colors, ratios, x0, y0, x1, y1) {\n\t\treturn this._setStroke(new G.Stroke().linearGradient(colors, ratios, x0, y0, x1, y1));\n\t};\n\n\t/**\n\t * Begins a radial gradient stroke. This ends the current sub-path. For example, the following code defines a red to\n\t * blue radial gradient centered at (100, 100), with a radius of 50, and draws a rectangle to display it:\n\t *\n\t *      myGraphics.setStrokeStyle(10)\n\t *          .beginRadialGradientStroke([\"#F00\",\"#00F\"], [0, 1], 100, 100, 0, 100, 100, 50)\n\t *          .drawRect(50, 90, 150, 110);\n\t *\n\t * A tiny API method \"rs\" also exists.\n\t * @method beginRadialGradientStroke\n\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t * a gradient drawing from red to blue.\n\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%, then draw the second color\n\t * to 100%.\n\t * @param {Number} x0 Center position of the inner circle that defines the gradient.\n\t * @param {Number} y0 Center position of the inner circle that defines the gradient.\n\t * @param {Number} r0 Radius of the inner circle that defines the gradient.\n\t * @param {Number} x1 Center position of the outer circle that defines the gradient.\n\t * @param {Number} y1 Center position of the outer circle that defines the gradient.\n\t * @param {Number} r1 Radius of the outer circle that defines the gradient.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.beginRadialGradientStroke = function(colors, ratios, x0, y0, r0, x1, y1, r1) {\n\t\treturn this._setStroke(new G.Stroke().radialGradient(colors, ratios, x0, y0, r0, x1, y1, r1));\n\t};\n\n\t/**\n\t * Begins a pattern fill using the specified image. This ends the current sub-path. Note that unlike bitmap fills,\n\t * strokes do not currently support a matrix parameter due to limitations in the canvas API. A tiny API method \"bs\"\n\t * also exists.\n\t * @method beginBitmapStroke\n\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use\n\t * as the pattern. Must be loaded prior to creating a bitmap fill, or the fill will be empty.\n\t * @param {String} [repetition=repeat] Optional. Indicates whether to repeat the image in the fill area. One of\n\t * \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\".\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.beginBitmapStroke = function(image, repetition) {\n\t\t// NOTE: matrix is not supported for stroke because transforms on strokes also affect the drawn stroke width.\n\t\treturn this._setStroke(new G.Stroke().bitmap(image, repetition));\n\t};\n\n\t/**\n\t * Ends the current sub-path, and begins a new one with no stroke. Functionally identical to <code>beginStroke(null)</code>.\n\t * A tiny API method \"es\" also exists.\n\t * @method endStroke\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.endStroke = function() {\n\t\treturn this.beginStroke();\n\t};\n\n\t/**\n\t * Maps the familiar ActionScript <code>curveTo()</code> method to the functionally similar {{#crossLink \"Graphics/quadraticCurveTo\"}}{{/crossLink}}\n\t * method.\n\t * @method quadraticCurveTo\n\t * @param {Number} cpx\n\t * @param {Number} cpy\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.curveTo = p.quadraticCurveTo;\n\n\t/**\n\t *\n\t * Maps the familiar ActionScript <code>drawRect()</code> method to the functionally similar {{#crossLink \"Graphics/rect\"}}{{/crossLink}}\n\t * method.\n\t * @method drawRect\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w Width of the rectangle\n\t * @param {Number} h Height of the rectangle\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.drawRect = p.rect;\n\n\t/**\n\t * Draws a rounded rectangle with all corners with the specified radius.\n\t * @method drawRoundRect\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w\n\t * @param {Number} h\n\t * @param {Number} radius Corner radius.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.drawRoundRect = function(x, y, w, h, radius) {\n\t\treturn this.drawRoundRectComplex(x, y, w, h, radius, radius, radius, radius);\n\t};\n\n\t/**\n\t * Draws a rounded rectangle with different corner radii. Supports positive and negative corner radii. A tiny API\n\t * method \"rc\" also exists.\n\t * @method drawRoundRectComplex\n\t * @param {Number} x The horizontal coordinate to draw the round rect.\n\t * @param {Number} y The vertical coordinate to draw the round rect.\n\t * @param {Number} w The width of the round rect.\n\t * @param {Number} h The height of the round rect.\n\t * @param {Number} radiusTL Top left corner radius.\n\t * @param {Number} radiusTR Top right corner radius.\n\t * @param {Number} radiusBR Bottom right corner radius.\n\t * @param {Number} radiusBL Bottom left corner radius.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.drawRoundRectComplex = function(x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL) {\n\t\treturn this.append(new G.RoundRect(x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL));\n\t};\n\n\t/**\n\t * Draws a circle with the specified radius at (x, y).\n\t *\n\t *      var g = new createjs.Graphics();\n\t *\t    g.setStrokeStyle(1);\n\t *\t    g.beginStroke(createjs.Graphics.getRGB(0,0,0));\n\t *\t    g.beginFill(createjs.Graphics.getRGB(255,0,0));\n\t *\t    g.drawCircle(0,0,3);\n\t *\n\t *\t    var s = new createjs.Shape(g);\n\t *\t\ts.x = 100;\n\t *\t\ts.y = 100;\n\t *\n\t *\t    stage.addChild(s);\n\t *\t    stage.update();\n\t *\n\t * A tiny API method \"dc\" also exists.\n\t * @method drawCircle\n\t * @param {Number} x x coordinate center point of circle.\n\t * @param {Number} y y coordinate center point of circle.\n\t * @param {Number} radius Radius of circle.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.drawCircle = function(x, y, radius) {\n\t\treturn this.append(new G.Circle(x, y, radius));\n\t};\n\n\t/**\n\t * Draws an ellipse (oval) with a specified width (w) and height (h). Similar to {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}},\n\t * except the width and height can be different. A tiny API method \"de\" also exists.\n\t * @method drawEllipse\n\t * @param {Number} x The left coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\n\t * which draws from center.\n\t * @param {Number} y The top coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\n\t * which draws from the center.\n\t * @param {Number} w The height (horizontal diameter) of the ellipse. The horizontal radius will be half of this\n\t * number.\n\t * @param {Number} h The width (vertical diameter) of the ellipse. The vertical radius will be half of this number.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.drawEllipse = function(x, y, w, h) {\n\t\treturn this.append(new G.Ellipse(x, y, w, h));\n\t};\n\n\t/**\n\t * Draws a star if pointSize is greater than 0, or a regular polygon if pointSize is 0 with the specified number of\n\t * points. For example, the following code will draw a familiar 5 pointed star shape centered at 100, 100 and with a\n\t * radius of 50:\n\t *\n\t *      myGraphics.beginFill(\"#FF0\").drawPolyStar(100, 100, 50, 5, 0.6, -90);\n\t *      // Note: -90 makes the first point vertical\n\t *\n\t * A tiny API method \"dp\" also exists.\n\t *\n\t * @method drawPolyStar\n\t * @param {Number} x Position of the center of the shape.\n\t * @param {Number} y Position of the center of the shape.\n\t * @param {Number} radius The outer radius of the shape.\n\t * @param {Number} sides The number of points on the star or sides on the polygon.\n\t * @param {Number} pointSize The depth or \"pointy-ness\" of the star points. A pointSize of 0 will draw a regular\n\t * polygon (no points), a pointSize of 1 will draw nothing because the points are infinitely pointy.\n\t * @param {Number} angle The angle of the first point / corner. For example a value of 0 will draw the first point\n\t * directly to the right of the center.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.drawPolyStar = function(x, y, radius, sides, pointSize, angle) {\n\t\treturn this.append(new G.PolyStar(x, y, radius, sides, pointSize, angle));\n\t};\n\n\t// TODO: deprecated.\n\t/**\n\t * Removed in favour of using custom command objects with {{#crossLink \"Graphics/append\"}}{{/crossLink}}.\n\t * @method inject\n\t * @deprecated\n\t **/\n\n\t/**\n\t * Appends a graphics command object to the graphics queue. Command objects expose an \"exec\" method\n\t * that accepts two parameters: the Context2D to operate on, and an arbitrary data object passed into\n\t * {{#crossLink \"Graphics/draw\"}}{{/crossLink}}. The latter will usually be the Shape instance that called draw.\n\t *\n\t * This method is used internally by Graphics methods, such as drawCircle, but can also be used directly to insert\n\t * built-in or custom graphics commands. For example:\n\t *\n\t * \t\t// attach data to our shape, so we can access it during the draw:\n\t * \t\tmyShape.color = \"red\";\n\t *\n\t * \t\t// append a Circle command object:\n\t * \t\tmyShape.graphics.append(new Graphics.Circle(50, 50, 30));\n\t *\n\t * \t\t// append a custom command object with an exec method that sets the fill style\n\t * \t\t// based on the shape's data, and then fills the circle.\n\t * \t\tmyShape.graphics.append({exec:function(ctx, shape) {\n\t * \t\t\tctx.fillStyle = shape.color;\n\t * \t\t\tctx.fill();\n\t * \t\t}});\n\t *\n\t * @method append\n\t * @param {Object} command A graphics command object exposing an \"exec\" method.\n\t * @param {boolean} clean The clean param is primarily for internal use. A value of true indicates that a command does not generate a path that should be stroked or filled.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.append = function(command, clean) {\n\t\tthis._activeInstructions.push(command);\n\t\tthis.command = command;\n\t\tif (!clean) { this._dirty = true; }\n\t\treturn this;\n\t};\n\n\t/**\n\t * Decodes a compact encoded path string into a series of draw instructions.\n\t * This format is not intended to be human readable, and is meant for use by authoring tools.\n\t * The format uses a base64 character set, with each character representing 6 bits, to define a series of draw\n\t * commands.\n\t *\n\t * Each command is comprised of a single \"header\" character followed by a variable number of alternating x and y\n\t * position values. Reading the header bits from left to right (most to least significant): bits 1 to 3 specify the\n\t * type of operation (0-moveTo, 1-lineTo, 2-quadraticCurveTo, 3-bezierCurveTo, 4-closePath, 5-7 unused). Bit 4\n\t * indicates whether position values use 12 bits (2 characters) or 18 bits (3 characters), with a one indicating the\n\t * latter. Bits 5 and 6 are currently unused.\n\t *\n\t * Following the header is a series of 0 (closePath), 2 (moveTo, lineTo), 4 (quadraticCurveTo), or 6 (bezierCurveTo)\n\t * parameters. These parameters are alternating x/y positions represented by 2 or 3 characters (as indicated by the\n\t * 4th bit in the command char). These characters consist of a 1 bit sign (1 is negative, 0 is positive), followed\n\t * by an 11 (2 char) or 17 (3 char) bit integer value. All position values are in tenths of a pixel. Except in the\n\t * case of move operations which are absolute, this value is a delta from the previous x or y position (as\n\t * appropriate).\n\t *\n\t * For example, the string \"A3cAAMAu4AAA\" represents a line starting at -150,0 and ending at 150,0.\n\t * <br />A - bits 000000. First 3 bits (000) indicate a moveTo operation. 4th bit (0) indicates 2 chars per\n\t * parameter.\n\t * <br />n0 - 110111011100. Absolute x position of -150.0px. First bit indicates a negative value, remaining bits\n\t * indicate 1500 tenths of a pixel.\n\t * <br />AA - 000000000000. Absolute y position of 0.\n\t * <br />I - 001100. First 3 bits (001) indicate a lineTo operation. 4th bit (1) indicates 3 chars per parameter.\n\t * <br />Au4 - 000000101110111000. An x delta of 300.0px, which is added to the previous x value of -150.0px to\n\t * provide an absolute position of +150.0px.\n\t * <br />AAA - 000000000000000000. A y delta value of 0.\n\t *\n\t * A tiny API method \"p\" also exists.\n\t * @method decodePath\n\t * @param {String} str The path string to decode.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.decodePath = function(str) {\n\t\tvar instructions = [this.moveTo, this.lineTo, this.quadraticCurveTo, this.bezierCurveTo, this.closePath];\n\t\tvar paramCount = [2, 2, 4, 6, 0];\n\t\tvar i=0, l=str.length;\n\t\tvar params = [];\n\t\tvar x=0, y=0;\n\t\tvar base64 = Graphics.BASE_64;\n\n\t\twhile (i<l) {\n\t\t\tvar c = str.charAt(i);\n\t\t\tvar n = base64[c];\n\t\t\tvar fi = n>>3; // highest order bits 1-3 code for operation.\n\t\t\tvar f = instructions[fi];\n\t\t\t// check that we have a valid instruction & that the unused bits are empty:\n\t\t\tif (!f || (n&3)) { throw(\"bad path data (@\"+i+\"): \"+c); }\n\t\t\tvar pl = paramCount[fi];\n\t\t\tif (!fi) { x=y=0; } // move operations reset the position.\n\t\t\tparams.length = 0;\n\t\t\ti++;\n\t\t\tvar charCount = (n>>2&1)+2;  // 4th header bit indicates number size for this operation.\n\t\t\tfor (var p=0; p<pl; p++) {\n\t\t\t\tvar num = base64[str.charAt(i)];\n\t\t\t\tvar sign = (num>>5) ? -1 : 1;\n\t\t\t\tnum = ((num&31)<<6)|(base64[str.charAt(i+1)]);\n\t\t\t\tif (charCount == 3) { num = (num<<6)|(base64[str.charAt(i+2)]); }\n\t\t\t\tnum = sign*num/10;\n\t\t\t\tif (p%2) { x = (num += x); }\n\t\t\t\telse { y = (num += y); }\n\t\t\t\tparams[p] = num;\n\t\t\t\ti += charCount;\n\t\t\t}\n\t\t\tf.apply(this,params);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Stores all graphics commands so they won't be executed in future draws. Calling store() a second time adds to\n\t * the existing store. This also affects `drawAsPath()`.\n\t *\n\t * This is useful in cases where you are creating vector graphics in an iterative manner (ex. generative art), so\n\t * that only new graphics need to be drawn (which can provide huge performance benefits), but you wish to retain all\n\t * of the vector instructions for later use (ex. scaling, modifying, or exporting).\n\t *\n\t * Note that calling store() will force the active path (if any) to be ended in a manner similar to changing\n\t * the fill or stroke.\n\t *\n\t * For example, consider a application where the user draws lines with the mouse. As each line segment (or collection of\n\t * segments) are added to a Shape, it can be rasterized using {{#crossLink \"DisplayObject/updateCache\"}}{{/crossLink}},\n\t * and then stored, so that it can be redrawn at a different scale when the application is resized, or exported to SVG.\n\t *\n\t * \t// set up cache:\n\t * \tmyShape.cache(0,0,500,500,scale);\n\t *\n\t * \t// when the user drags, draw a new line:\n\t * \tmyShape.graphics.moveTo(oldX,oldY).lineTo(newX,newY);\n\t * \t// then draw it into the existing cache:\n\t * \tmyShape.updateCache(\"source-over\");\n\t * \t// store the new line, so it isn't redrawn next time:\n\t * \tmyShape.store();\n\t *\n\t * \t// then, when the window resizes, we can re-render at a different scale:\n\t * \t// first, unstore all our lines:\n\t * \tmyShape.unstore();\n\t * \t// then cache using the new scale:\n\t * \tmyShape.cache(0,0,500,500,newScale);\n\t * \t// finally, store the existing commands again:\n\t * \tmyShape.store();\n\t *\n\t * @method store\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.store = function() {\n\t\tthis._updateInstructions(true);\n\t\tthis._storeIndex = this._instructions.length;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Unstores any graphics commands that were previously stored using {{#crossLink \"Graphics/store\"}}{{/crossLink}}\n\t * so that they will be executed in subsequent draw calls.\n\t *\n\t * @method unstore\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.unstore = function() {\n\t\tthis._storeIndex = 0;\n\t\treturn this;\n\t};\n\n\t/**\n\t * Returns a clone of this Graphics instance. Note that the individual command objects are not cloned.\n\t * @method clone\n\t * @return {Graphics} A clone of the current Graphics instance.\n\t **/\n\tp.clone = function() {\n\t\tvar o = new Graphics();\n\t\to.command = this.command;\n\t\to._stroke = this._stroke;\n\t\to._strokeStyle = this._strokeStyle;\n\t\to._strokeDash = this._strokeDash;\n\t\to._strokeIgnoreScale = this._strokeIgnoreScale;\n\t\to._fill = this._fill;\n\t\to._instructions = this._instructions.slice();\n\t\to._commitIndex = this._commitIndex;\n\t\to._activeInstructions = this._activeInstructions.slice();\n\t\to._dirty = this._dirty;\n\t\to._storeIndex = this._storeIndex;\n\t\treturn o;\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Graphics]\";\n\t};\n\n\n// tiny API:\n\t/**\n\t * Shortcut to moveTo.\n\t * @method mt\n\t * @param {Number} x The x coordinate the drawing point should move to.\n\t * @param {Number} y The y coordinate the drawing point should move to.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls).\n\t * @chainable\n\t * @protected\n\t **/\n\tp.mt = p.moveTo;\n\n\t/**\n\t * Shortcut to lineTo.\n\t * @method lt\n\t * @param {Number} x The x coordinate the drawing point should draw to.\n\t * @param {Number} y The y coordinate the drawing point should draw to.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.lt = p.lineTo;\n\n\t/**\n\t * Shortcut to arcTo.\n\t * @method at\n\t * @param {Number} x1\n\t * @param {Number} y1\n\t * @param {Number} x2\n\t * @param {Number} y2\n\t * @param {Number} radius\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.at = p.arcTo;\n\n\t/**\n\t * Shortcut to bezierCurveTo.\n\t * @method bt\n\t * @param {Number} cp1x\n\t * @param {Number} cp1y\n\t * @param {Number} cp2x\n\t * @param {Number} cp2y\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.bt = p.bezierCurveTo;\n\n\t/**\n\t * Shortcut to quadraticCurveTo / curveTo.\n\t * @method qt\n\t * @param {Number} cpx\n\t * @param {Number} cpy\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @protected\n\t * @chainable\n\t **/\n\tp.qt = p.quadraticCurveTo;\n\n\t/**\n\t * Shortcut to arc.\n\t * @method a\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} radius\n\t * @param {Number} startAngle Measured in radians.\n\t * @param {Number} endAngle Measured in radians.\n\t * @param {Boolean} anticlockwise\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @protected\n\t * @chainable\n\t **/\n\tp.a = p.arc;\n\n\t/**\n\t * Shortcut to rect.\n\t * @method r\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w Width of the rectangle\n\t * @param {Number} h Height of the rectangle\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.r = p.rect;\n\n\t/**\n\t * Shortcut to closePath.\n\t * @method cp\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.cp = p.closePath;\n\n\t/**\n\t * Shortcut to clear.\n\t * @method c\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.c = p.clear;\n\n\t/**\n\t * Shortcut to beginFill.\n\t * @method f\n\t * @param {String} color A CSS compatible color value (ex. \"red\", \"#FF0000\", or \"rgba(255,0,0,0.5)\"). Setting to\n\t * null will result in no fill.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.f = p.beginFill;\n\n\t/**\n\t * Shortcut to beginLinearGradientFill.\n\t * @method lf\n\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define a gradient\n\t * drawing from red to blue.\n\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would draw\n\t * the first color to 10% then interpolating to the second color at 90%.\n\t * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.\n\t * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.\n\t * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.\n\t * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.lf = p.beginLinearGradientFill;\n\n\t/**\n\t * Shortcut to beginRadialGradientFill.\n\t * @method rf\n\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t * a gradient drawing from red to blue.\n\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.\n\t * @param {Number} x0 Center position of the inner circle that defines the gradient.\n\t * @param {Number} y0 Center position of the inner circle that defines the gradient.\n\t * @param {Number} r0 Radius of the inner circle that defines the gradient.\n\t * @param {Number} x1 Center position of the outer circle that defines the gradient.\n\t * @param {Number} y1 Center position of the outer circle that defines the gradient.\n\t * @param {Number} r1 Radius of the outer circle that defines the gradient.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.rf = p.beginRadialGradientFill;\n\n\t/**\n\t * Shortcut to beginBitmapFill.\n\t * @method bf\n\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use\n\t * as the pattern.\n\t * @param {String} repetition Optional. Indicates whether to repeat the image in the fill area. One of \"repeat\",\n\t * \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\". Note that Firefox does not support \"repeat-x\" or\n\t * \"repeat-y\" (latest tests were in FF 20.0), and will default to \"repeat\".\n\t * @param {Matrix2D} matrix Optional. Specifies a transformation matrix for the bitmap fill. This transformation\n\t * will be applied relative to the parent transform.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.bf = p.beginBitmapFill;\n\n\t/**\n\t * Shortcut to endFill.\n\t * @method ef\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.ef = p.endFill;\n\n\t/**\n\t * Shortcut to setStrokeStyle.\n\t * @method ss\n\t * @param {Number} thickness The width of the stroke.\n\t * @param {String | Number} [caps=0] Indicates the type of caps to use at the end of lines. One of butt,\n\t * round, or square. Defaults to \"butt\". Also accepts the values 0 (butt), 1 (round), and 2 (square) for use with\n\t * the tiny API.\n\t * @param {String | Number} [joints=0] Specifies the type of joints that should be used where two lines meet.\n\t * One of bevel, round, or miter. Defaults to \"miter\". Also accepts the values 0 (miter), 1 (round), and 2 (bevel)\n\t * for use with the tiny API.\n\t * @param {Number} [miterLimit=10] If joints is set to \"miter\", then you can specify a miter limit ratio which\n\t * controls at what point a mitered joint will be clipped.\n\t * @param {Boolean} [ignoreScale=false] If true, the stroke will be drawn at the specified thickness regardless\n\t * of active transformations.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.ss = p.setStrokeStyle;\n\t\n\t/**\n\t * Shortcut to setStrokeDash.\n\t * @method sd\n\t * @param {Array} [segments] An array specifying the dash pattern, alternating between line and gap.\n\t * For example, [20,10] would create a pattern of 20 pixel lines with 10 pixel gaps between them.\n\t * Passing null or an empty array will clear any existing dash.\n\t * @param {Number} [offset=0] The offset of the dash pattern. For example, you could increment this value to create a \"marching ants\" effect.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.sd = p.setStrokeDash;\n\n\t/**\n\t * Shortcut to beginStroke.\n\t * @method s\n\t * @param {String} color A CSS compatible color value (ex. \"#FF0000\", \"red\", or \"rgba(255,0,0,0.5)\"). Setting to\n\t * null will result in no stroke.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.s = p.beginStroke;\n\n\t/**\n\t * Shortcut to beginLinearGradientStroke.\n\t * @method ls\n\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t * a gradient drawing from red to blue.\n\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.\n\t * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.\n\t * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.\n\t * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.\n\t * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.ls = p.beginLinearGradientStroke;\n\n\t/**\n\t * Shortcut to beginRadialGradientStroke.\n\t * @method rs\n\t * @param {Array} colors An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define\n\t * a gradient drawing from red to blue.\n\t * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,\n\t * 0.9] would draw the first color to 10% then interpolating to the second color at 90%, then draw the second color\n\t * to 100%.\n\t * @param {Number} x0 Center position of the inner circle that defines the gradient.\n\t * @param {Number} y0 Center position of the inner circle that defines the gradient.\n\t * @param {Number} r0 Radius of the inner circle that defines the gradient.\n\t * @param {Number} x1 Center position of the outer circle that defines the gradient.\n\t * @param {Number} y1 Center position of the outer circle that defines the gradient.\n\t * @param {Number} r1 Radius of the outer circle that defines the gradient.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.rs = p.beginRadialGradientStroke;\n\n\t/**\n\t * Shortcut to beginBitmapStroke.\n\t * @method bs\n\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use\n\t * as the pattern.\n\t * @param {String} [repetition=repeat] Optional. Indicates whether to repeat the image in the fill area. One of\n\t * \"repeat\", \"repeat-x\", \"repeat-y\", or \"no-repeat\". Defaults to \"repeat\".\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.bs = p.beginBitmapStroke;\n\n\t/**\n\t * Shortcut to endStroke.\n\t * @method es\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.es = p.endStroke;\n\n\t/**\n\t * Shortcut to drawRect.\n\t * @method dr\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w Width of the rectangle\n\t * @param {Number} h Height of the rectangle\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.dr = p.drawRect;\n\n\t/**\n\t * Shortcut to drawRoundRect.\n\t * @method rr\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w\n\t * @param {Number} h\n\t * @param {Number} radius Corner radius.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.rr = p.drawRoundRect;\n\n\t/**\n\t * Shortcut to drawRoundRectComplex.\n\t * @method rc\n\t * @param {Number} x The horizontal coordinate to draw the round rect.\n\t * @param {Number} y The vertical coordinate to draw the round rect.\n\t * @param {Number} w The width of the round rect.\n\t * @param {Number} h The height of the round rect.\n\t * @param {Number} radiusTL Top left corner radius.\n\t * @param {Number} radiusTR Top right corner radius.\n\t * @param {Number} radiusBR Bottom right corner radius.\n\t * @param {Number} radiusBL Bottom left corner radius.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.rc = p.drawRoundRectComplex;\n\n\t/**\n\t * Shortcut to drawCircle.\n\t * @method dc\n\t * @param {Number} x x coordinate center point of circle.\n\t * @param {Number} y y coordinate center point of circle.\n\t * @param {Number} radius Radius of circle.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.dc = p.drawCircle;\n\n\t/**\n\t * Shortcut to drawEllipse.\n\t * @method de\n\t * @param {Number} x The left coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\n\t * which draws from center.\n\t * @param {Number} y The top coordinate point of the ellipse. Note that this is different from {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}}\n\t * which draws from the center.\n\t * @param {Number} w The height (horizontal diameter) of the ellipse. The horizontal radius will be half of this\n\t * number.\n\t * @param {Number} h The width (vertical diameter) of the ellipse. The vertical radius will be half of this number.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.de = p.drawEllipse;\n\n\t/**\n\t * Shortcut to drawPolyStar.\n\t * @method dp\n\t * @param {Number} x Position of the center of the shape.\n\t * @param {Number} y Position of the center of the shape.\n\t * @param {Number} radius The outer radius of the shape.\n\t * @param {Number} sides The number of points on the star or sides on the polygon.\n\t * @param {Number} pointSize The depth or \"pointy-ness\" of the star points. A pointSize of 0 will draw a regular\n\t * polygon (no points), a pointSize of 1 will draw nothing because the points are infinitely pointy.\n\t * @param {Number} angle The angle of the first point / corner. For example a value of 0 will draw the first point\n\t * directly to the right of the center.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.dp = p.drawPolyStar;\n\n\t/**\n\t * Shortcut to decodePath.\n\t * @method p\n\t * @param {String} str The path string to decode.\n\t * @return {Graphics} The Graphics instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t * @protected\n\t **/\n\tp.p = p.decodePath;\n\n\n// private methods:\n\t/**\n\t * @method _updateInstructions\n\t * @param commit\n\t * @protected\n\t **/\n\tp._updateInstructions = function(commit) {\n\t\tvar instr = this._instructions, active = this._activeInstructions, commitIndex = this._commitIndex;\n\n\t\tif (this._dirty && active.length) {\n\t\t\tinstr.length = commitIndex; // remove old, uncommitted commands\n\t\t\tinstr.push(Graphics.beginCmd);\n\n\t\t\tvar l = active.length, ll = instr.length;\n\t\t\tinstr.length = ll+l;\n\t\t\tfor (var i=0; i<l; i++) { instr[i+ll] = active[i]; }\n\n\t\t\tif (this._fill) { instr.push(this._fill); }\n\t\t\tif (this._stroke) {\n\t\t\t\t// doesn't need to be re-applied if it hasn't changed.\n\t\t\t\tif (this._strokeDash !== this._oldStrokeDash) {\n\t\t\t\t\tthis._oldStrokeDash = this._strokeDash;\n\t\t\t\t\tinstr.push(this._strokeDash);\n\t\t\t\t}\n\t\t\t\tif (this._strokeStyle !== this._oldStrokeStyle) {\n\t\t\t\t\tthis._oldStrokeStyle = this._strokeStyle;\n\t\t\t\t\tinstr.push(this._strokeStyle);\n\t\t\t\t}\n\t\t\t\tinstr.push(this._stroke);\n\t\t\t}\n\n\t\t\tthis._dirty = false;\n\t\t}\n\n\t\tif (commit) {\n\t\t\tactive.length = 0;\n\t\t\tthis._commitIndex = instr.length;\n\t\t}\n\t};\n\n\t/**\n\t * @method _setFill\n\t * @param fill\n\t * @protected\n\t **/\n\tp._setFill = function(fill) {\n\t\tthis._updateInstructions(true);\n\t\tthis.command = this._fill = fill;\n\t\treturn this;\n\t};\n\n\t/**\n\t * @method _setStroke\n\t * @param stroke\n\t * @protected\n\t **/\n\tp._setStroke = function(stroke) {\n\t\tthis._updateInstructions(true);\n\t\tif (this.command = this._stroke = stroke) {\n\t\t\tstroke.ignoreScale = this._strokeIgnoreScale;\n\t\t}\n\t\treturn this;\n\t};\n\n// Command Objects:\n\t/**\n\t * @namespace Graphics\n\t */\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/lineTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information. See {{#crossLink \"Graphics\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class LineTo\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t **/\n\t/**\n\t * @property x\n\t * @type Number\n\t */\n\t/**\n\t * @property y\n\t * @type Number\n\t */\n\t/**\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx\n\t */\n\t(G.LineTo = function(x, y) {\n\t\tthis.x = x; this.y = y;\n\t}).prototype.exec = function(ctx) { ctx.lineTo(this.x,this.y); };\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/moveTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class MoveTo\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t **/\n\t/**\n\t * @property x\n\t * @type Number\n\t */\n\t/**\n\t * @property y\n\t * @type Number\n\t */\n\t/**\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx\n\t */\n\t(G.MoveTo = function(x, y) {\n\t\tthis.x = x; this.y = y;\n\t}).prototype.exec = function(ctx) { ctx.moveTo(this.x, this.y); };\n\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/arcTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class ArcTo\n\t * @constructor\n\t * @param {Number} x1\n\t * @param {Number} y1\n\t * @param {Number} x2\n\t * @param {Number} y2\n\t * @param {Number} radius\n\t **/\n\t/**\n\t * @property x1\n\t * @type Number\n\t */\n\t/**\n\t * @property y1\n\t * @type Number\n\t */\n\t/**\n\t * @property x2\n\t * @type Number\n\t */\n\t/**\n\t * @property y2\n\t * @type Number\n\t */\n\t/**\n\t * @property radius\n\t * @type Number\n\t */\n\t/**\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx\n\t */\n\t(G.ArcTo = function(x1, y1, x2, y2, radius) {\n\t\tthis.x1 = x1; this.y1 = y1;\n\t\tthis.x2 = x2; this.y2 = y2;\n\t\tthis.radius = radius;\n\t}).prototype.exec = function(ctx) { ctx.arcTo(this.x1, this.y1, this.x2, this.y2, this.radius); };\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/arc\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class Arc\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} radius\n\t * @param {Number} startAngle\n\t * @param {Number} endAngle\n\t * @param {Number} anticlockwise\n\t **/\n\t/**\n\t * @property x\n\t * @type Number\n\t */\n\t/**\n\t * @property y\n\t * @type Number\n\t */\n\t/**\n\t * @property radius\n\t * @type Number\n\t */\n\t/**\n\t * @property startAngle\n\t * @type Number\n\t */\n\t/**\n\t * @property endAngle\n\t * @type Number\n\t */\n\t/**\n\t * @property anticlockwise\n\t * @type Number\n\t */\n\t/**\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx\n\t */\n\t(G.Arc = function(x, y, radius, startAngle, endAngle, anticlockwise) {\n\t\tthis.x = x; this.y = y;\n\t\tthis.radius = radius;\n\t\tthis.startAngle = startAngle; this.endAngle = endAngle;\n\t\tthis.anticlockwise = !!anticlockwise;\n\t}).prototype.exec = function(ctx) { ctx.arc(this.x, this.y, this.radius, this.startAngle, this.endAngle, this.anticlockwise); };\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/quadraticCurveTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class QuadraticCurveTo\n\t * @constructor\n\t * @param {Number} cpx\n\t * @param {Number} cpy\n\t * @param {Number} x\n\t * @param {Number} y\n\t **/\n\t/**\n\t * @property cpx\n\t * @type Number\n\t */\n\t/**\n\t * @property cpy\n\t * @type Number\n\t */\n\t/**\n\t * @property x\n\t * @type Number\n\t */\n\t/**\n\t * @property y\n\t * @type Number\n\t */\n\t/**\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx\n\t */\n\t(G.QuadraticCurveTo = function(cpx, cpy, x, y) {\n\t\tthis.cpx = cpx; this.cpy = cpy;\n\t\tthis.x = x; this.y = y;\n\t}).prototype.exec = function(ctx) { ctx.quadraticCurveTo(this.cpx, this.cpy, this.x, this.y); };\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/bezierCurveTo\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class BezierCurveTo\n\t * @constructor\n\t * @param {Number} cp1x\n\t * @param {Number} cp1y\n\t * @param {Number} cp2x\n\t * @param {Number} cp2y\n\t * @param {Number} x\n\t * @param {Number} y\n\t **/\n\t/**\n\t * @property cp1x\n\t * @type Number\n\t */\n\t/**\n\t * @property cp1y\n\t * @type Number\n\t */\n\t/**\n\t * @property cp2x\n\t * @type Number\n\t */\n\t/**\n\t * @property cp2y\n\t * @type Number\n\t */\n\t/**\n\t * @property x\n\t * @type Number\n\t */\n\t/**\n\t * @property y\n\t * @type Number\n\t */\n\t/**\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx\n\t */\n\t(G.BezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {\n\t\tthis.cp1x = cp1x; this.cp1y = cp1y;\n\t\tthis.cp2x = cp2x; this.cp2y = cp2y;\n\t\tthis.x = x; this.y = y;\n\t}).prototype.exec = function(ctx) { ctx.bezierCurveTo(this.cp1x, this.cp1y, this.cp2x, this.cp2y, this.x, this.y); };\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/rect\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class Rect\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w\n\t * @param {Number} h\n\t **/\n\t/**\n\t * @property x\n\t * @type Number\n\t */\n\t/**\n\t * @property y\n\t * @type Number\n\t */\n\t/**\n\t * @property w\n\t * @type Number\n\t */\n\t/**\n\t * @property h\n\t * @type Number\n\t */\n\t/**\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx\n\t */\n\t(G.Rect = function(x, y, w, h) {\n\t\tthis.x = x; this.y = y;\n\t\tthis.w = w; this.h = h;\n\t}).prototype.exec = function(ctx) { ctx.rect(this.x, this.y, this.w, this.h); };\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/closePath\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class ClosePath\n\t * @constructor\n\t **/\n\t/**\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx\n\t */\n\t(G.ClosePath = function() {\n\t}).prototype.exec = function(ctx) { ctx.closePath(); };\n\n\t/**\n\t * Graphics command object to begin a new path. See {{#crossLink \"Graphics\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class BeginPath\n\t * @constructor\n\t **/\n\t/**\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx\n\t */\n\t(G.BeginPath = function() {\n\t}).prototype.exec = function(ctx) { ctx.beginPath(); };\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/beginFill\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class Fill\n\t * @constructor\n\t * @param {Object} style A valid Context2D fillStyle.\n\t * @param {Matrix2D} matrix\n\t **/\n\t/**\n\t * A valid Context2D fillStyle.\n\t * @property style\n\t * @type Object\n\t */\n\t/**\n\t * @property matrix\n\t * @type Matrix2D\n\t */\n\t/**\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx\n\t */\n\tp = (G.Fill = function(style, matrix) {\n\t\tthis.style = style;\n\t\tthis.matrix = matrix;\n\t}).prototype;\n\tp.exec = function(ctx) {\n\t\tif (!this.style) { return; }\n\t\tctx.fillStyle = this.style;\n\t\tvar mtx = this.matrix;\n\t\tif (mtx) { ctx.save(); ctx.transform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty); }\n\t\tctx.fill();\n\t\tif (mtx) { ctx.restore(); }\n\t};\n\t/**\n\t * Creates a linear gradient style and assigns it to {{#crossLink \"Fill/style:property\"}}{{/crossLink}}.\n\t * See {{#crossLink \"Graphics/beginLinearGradientFill\"}}{{/crossLink}} for more information.\n\t * @method linearGradient\n\t * @param {Array} colors\n\t * @param {Array} ratios\n\t * @param {Number} x0\n\t * @param {Number} y0\n\t * @param {Number} x1\n\t * @param {Number} y1\n\t * @return {Fill} Returns this Fill object for chaining or assignment.\n\t */\n\tp.linearGradient = function(colors, ratios, x0, y0, x1, y1) {\n\t\tvar o = this.style =  Graphics._ctx.createLinearGradient(x0, y0, x1, y1);\n\t\tfor (var i=0, l=colors.length; i<l; i++) { o.addColorStop(ratios[i], colors[i]); }\n\t\to.props = {colors:colors, ratios:ratios, x0:x0, y0:y0, x1:x1, y1:y1, type:\"linear\"};\n\t\treturn this;\n\t};\n\t/**\n\t * Creates a radial gradient style and assigns it to {{#crossLink \"Fill/style:property\"}}{{/crossLink}}.\n\t * See {{#crossLink \"Graphics/beginRadialGradientFill\"}}{{/crossLink}} for more information.\n\t * @method radialGradient\n\t * @param {Array} colors\n\t * @param {Array} ratios\n\t * @param {Number} x0\n\t * @param {Number} y0\n\t * @param {Number} r0\n\t * @param {Number} x1\n\t * @param {Number} y1\n\t * @param {Number} r1\n\t * @return {Fill} Returns this Fill object for chaining or assignment.\n\t */\n\tp.radialGradient = function(colors, ratios, x0, y0, r0, x1, y1, r1) {\n\t\tvar o = this.style =  Graphics._ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);\n\t\tfor (var i=0, l=colors.length; i<l; i++) { o.addColorStop(ratios[i], colors[i]); }\n\t\to.props = {colors:colors, ratios:ratios, x0:x0, y0:y0, r0:r0, x1:x1, y1:y1, r1:r1, type:\"radial\"};\n\t\treturn this;\n\t};\n\t/**\n\t * Creates a bitmap fill style and assigns it to the {{#crossLink \"Fill/style:property\"}}{{/crossLink}}.\n\t * See {{#crossLink \"Graphics/beginBitmapFill\"}}{{/crossLink}} for more information.\n\t * @method bitmap\n\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image  Must be loaded prior to creating a bitmap fill, or the fill will be empty.\n\t * @param {String} [repetition] One of: repeat, repeat-x, repeat-y, or no-repeat.\n\t * @return {Fill} Returns this Fill object for chaining or assignment.\n\t */\n\tp.bitmap = function(image, repetition) {\n\t\tif (image.naturalWidth || image.getContext || image.readyState >= 2) {\n\t\t\tvar o = this.style = Graphics._ctx.createPattern(image, repetition || \"\");\n\t\t\to.props = {image: image, repetition: repetition, type: \"bitmap\"};\n\t\t}\n\t\treturn this;\n\t};\n\tp.path = false;\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/beginStroke\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class Stroke\n\t * @constructor\n\t * @param {Object} style A valid Context2D fillStyle.\n\t * @param {Boolean} ignoreScale\n\t **/\n\t/**\n\t * A valid Context2D strokeStyle.\n\t * @property style\n\t * @type Object\n\t */\n\t/**\n\t * @property ignoreScale\n\t * @type Boolean\n\t */\n\t/**\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx\n\t */\n\tp = (G.Stroke = function(style, ignoreScale) {\n\t\tthis.style = style;\n\t\tthis.ignoreScale = ignoreScale;\n\t}).prototype;\n\tp.exec = function(ctx) {\n\t\tif (!this.style) { return; }\n\t\tctx.strokeStyle = this.style;\n\t\tif (this.ignoreScale) { ctx.save(); ctx.setTransform(1,0,0,1,0,0); }\n\t\tctx.stroke();\n\t\tif (this.ignoreScale) { ctx.restore(); }\n\t};\n\t/**\n\t * Creates a linear gradient style and assigns it to {{#crossLink \"Stroke/style:property\"}}{{/crossLink}}.\n\t * See {{#crossLink \"Graphics/beginLinearGradientStroke\"}}{{/crossLink}} for more information.\n\t * @method linearGradient\n\t * @param {Array} colors\n\t * @param {Array} ratios\n\t * @param {Number} x0\n\t * @param {Number} y0\n\t * @param {Number} x1\n\t * @param {Number} y1\n\t * @return {Fill} Returns this Stroke object for chaining or assignment.\n\t */\n\tp.linearGradient = G.Fill.prototype.linearGradient;\n\t/**\n\t * Creates a radial gradient style and assigns it to {{#crossLink \"Stroke/style:property\"}}{{/crossLink}}.\n\t * See {{#crossLink \"Graphics/beginRadialGradientStroke\"}}{{/crossLink}} for more information.\n\t * @method radialGradient\n\t * @param {Array} colors\n\t * @param {Array} ratios\n\t * @param {Number} x0\n\t * @param {Number} y0\n\t * @param {Number} r0\n\t * @param {Number} x1\n\t * @param {Number} y1\n\t * @param {Number} r1\n\t * @return {Fill} Returns this Stroke object for chaining or assignment.\n\t */\n\tp.radialGradient = G.Fill.prototype.radialGradient;\n\t/**\n\t * Creates a bitmap fill style and assigns it to {{#crossLink \"Stroke/style:property\"}}{{/crossLink}}.\n\t * See {{#crossLink \"Graphics/beginBitmapStroke\"}}{{/crossLink}} for more information.\n\t * @method bitmap\n\t * @param {HTMLImageElement} image\n\t * @param {String} [repetition] One of: repeat, repeat-x, repeat-y, or no-repeat.\n\t * @return {Fill} Returns this Stroke object for chaining or assignment.\n\t */\n\tp.bitmap = G.Fill.prototype.bitmap;\n\tp.path = false;\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/setStrokeStyle\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class StrokeStyle\n\t * @constructor\n\t * @param {Number} width\n\t * @param {String} [caps]\n\t * @param {String} [joints]\n\t * @param {Number} [miterLimit]\n\t **/\n\t/**\n\t * @property width\n\t * @type Number\n\t */\n\t/**\n\t * One of: butt, round, square\n\t * @property caps\n\t * @type String\n\t */\n\t/**\n\t * One of: round, bevel, miter\n\t * @property joints\n\t * @type String\n\t */\n\t/**\n\t * @property miterLimit\n\t * @type Number\n\t */\n\t/**\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx\n\t */\n\tp = (G.StrokeStyle = function(width, caps, joints, miterLimit) {\n\t\tthis.width = width;\n\t\tthis.caps = caps;\n\t\tthis.joints = joints;\n\t\tthis.miterLimit = miterLimit;\n\t}).prototype;\n\tp.exec = function(ctx) {\n\t\tctx.lineWidth = (this.width == null ? \"1\" : this.width);\n\t\tctx.lineCap = (this.caps == null ? \"butt\" : (isNaN(this.caps) ? this.caps : Graphics.STROKE_CAPS_MAP[this.caps]));\n\t\tctx.lineJoin = (this.joints == null ? \"miter\" : (isNaN(this.joints) ? this.joints : Graphics.STROKE_JOINTS_MAP[this.joints]));\n\t\tctx.miterLimit = (this.miterLimit == null ? \"10\" : this.miterLimit);\n\t};\n\tp.path = false;\n\t\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/setStrokeDash\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class StrokeDash\n\t * @constructor\n\t * @param {Array} [segments]\n\t * @param {Number} [offset=0]\n\t **/\n\t/**\n\t * @property segments\n\t * @type Array\n\t */\n\t/**\n\t * @property offset\n\t * @type Number\n\t */\n\t/**\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx\n\t */\n\t(G.StrokeDash = function(segments, offset) {\n\t\tthis.segments = segments;\n\t\tthis.offset = offset||0;\n\t}).prototype.exec = function(ctx) {\n\t\tif (ctx.setLineDash) { // feature detection.\n\t\t\tctx.setLineDash(this.segments|| G.StrokeDash.EMPTY_SEGMENTS); // instead of [] to reduce churn.\n\t\t\tctx.lineDashOffset = this.offset||0;\n\t\t}\n\t};\n\t/**\n\t * The default value for segments (ie. no dash).\n\t * @property EMPTY_SEGMENTS\n\t * @static\n\t * @final\n\t * @readonly\n\t * @protected\n\t * @type {Array}\n\t **/\n\tG.StrokeDash.EMPTY_SEGMENTS = [];\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/drawRoundRectComplex\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class RoundRect\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w\n\t * @param {Number} h\n\t * @param {Number} radiusTL\n\t * @param {Number} radiusTR\n\t * @param {Number} radiusBR\n\t * @param {Number} radiusBL\n\t **/\n\t/**\n\t * @property x\n\t * @type Number\n\t */\n\t/**\n\t * @property y\n\t * @type Number\n\t */\n\t/**\n\t * @property w\n\t * @type Number\n\t */\n\t/**\n\t * @property h\n\t * @type Number\n\t */\n\t/**\n\t * @property radiusTL\n\t * @type Number\n\t */\n\t/**\n\t * @property radiusTR\n\t * @type Number\n\t */\n\t/**\n\t * @property radiusBR\n\t * @type Number\n\t */\n\t/**\n\t * @property radiusBL\n\t * @type Number\n\t */\n\t/**\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx\n\t */\n\t(G.RoundRect = function(x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL) {\n\t\tthis.x = x; this.y = y;\n\t\tthis.w = w; this.h = h;\n\t\tthis.radiusTL = radiusTL; this.radiusTR = radiusTR;\n\t\tthis.radiusBR = radiusBR; this.radiusBL = radiusBL;\n\t}).prototype.exec = function(ctx) {\n\t\tvar max = (w<h?w:h)/2;\n\t\tvar mTL=0, mTR=0, mBR=0, mBL=0;\n\t\tvar x = this.x, y = this.y, w = this.w, h = this.h;\n\t\tvar rTL = this.radiusTL, rTR = this.radiusTR, rBR = this.radiusBR, rBL = this.radiusBL;\n\n\t\tif (rTL < 0) { rTL *= (mTL=-1); }\n\t\tif (rTL > max) { rTL = max; }\n\t\tif (rTR < 0) { rTR *= (mTR=-1); }\n\t\tif (rTR > max) { rTR = max; }\n\t\tif (rBR < 0) { rBR *= (mBR=-1); }\n\t\tif (rBR > max) { rBR = max; }\n\t\tif (rBL < 0) { rBL *= (mBL=-1); }\n\t\tif (rBL > max) { rBL = max; }\n\n\t\tctx.moveTo(x+w-rTR, y);\n\t\tctx.arcTo(x+w+rTR*mTR, y-rTR*mTR, x+w, y+rTR, rTR);\n\t\tctx.lineTo(x+w, y+h-rBR);\n\t\tctx.arcTo(x+w+rBR*mBR, y+h+rBR*mBR, x+w-rBR, y+h, rBR);\n\t\tctx.lineTo(x+rBL, y+h);\n\t\tctx.arcTo(x-rBL*mBL, y+h+rBL*mBL, x, y+h-rBL, rBL);\n\t\tctx.lineTo(x, y+rTL);\n\t\tctx.arcTo(x-rTL*mTL, y-rTL*mTL, x+rTL, y, rTL);\n\t\tctx.closePath();\n\t};\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/drawCircle\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class Circle\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} radius\n\t **/\n\t/**\n\t * @property x\n\t * @type Number\n\t */\n\t/**\n\t * @property y\n\t * @type Number\n\t */\n\t/**\n\t * @property radius\n\t * @type Number\n\t */\n\t/**\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx\n\t */\n\t(G.Circle = function(x, y, radius) {\n\t\tthis.x = x; this.y = y;\n\t\tthis.radius = radius;\n\t}).prototype.exec = function(ctx) { ctx.arc(this.x, this.y, this.radius, 0, Math.PI*2); };\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/drawEllipse\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class Ellipse\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} w\n\t * @param {Number} h\n\t **/\n\t/**\n\t * @property x\n\t * @type Number\n\t */\n\t/**\n\t * @property y\n\t * @type Number\n\t */\n\t/**\n\t * @property w\n\t * @type Number\n\t */\n\t/**\n\t * @property h\n\t * @type Number\n\t */\n\t/**\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx\n\t */\n\t(G.Ellipse = function(x, y, w, h) {\n\t\tthis.x = x; this.y = y;\n\t\tthis.w = w; this.h = h;\n\t}).prototype.exec = function(ctx) {\n\t\tvar x = this.x, y = this.y;\n\t\tvar w = this.w, h = this.h;\n\n\t\tvar k = 0.5522848;\n\t\tvar ox = (w / 2) * k;\n\t\tvar oy = (h / 2) * k;\n\t\tvar xe = x + w;\n\t\tvar ye = y + h;\n\t\tvar xm = x + w / 2;\n\t\tvar ym = y + h / 2;\n\n\t\tctx.moveTo(x, ym);\n\t\tctx.bezierCurveTo(x, ym-oy, xm-ox, y, xm, y);\n\t\tctx.bezierCurveTo(xm+ox, y, xe, ym-oy, xe, ym);\n\t\tctx.bezierCurveTo(xe, ym+oy, xm+ox, ye, xm, ye);\n\t\tctx.bezierCurveTo(xm-ox, ye, x, ym+oy, x, ym);\n\t};\n\n\t/**\n\t * Graphics command object. See {{#crossLink \"Graphics/drawPolyStar\"}}{{/crossLink}} and {{#crossLink \"Graphics/append\"}}{{/crossLink}} for more information.\n\t * @class PolyStar\n\t * @constructor\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @param {Number} radius\n\t * @param {Number} sides\n\t * @param {Number} pointSize\n\t * @param {Number} angle\n\t **/\n\t/**\n\t * @property x\n\t * @type Number\n\t */\n\t/**\n\t * @property y\n\t * @type Number\n\t */\n\t/**\n\t * @property radius\n\t * @type Number\n\t */\n\t/**\n\t * @property sides\n\t * @type Number\n\t */\n\t/**\n\t * @property pointSize\n\t * @type Number\n\t */\n\t/**\n\t * @property angle\n\t * @type Number\n\t */\n\t/**\n\t * @method exec\n\t * @param {CanvasRenderingContext2D} ctx\n\t */\n\t(G.PolyStar = function(x, y, radius, sides, pointSize, angle) {\n\t\tthis.x = x; this.y = y;\n\t\tthis.radius = radius;\n\t\tthis.sides = sides;\n\t\tthis.pointSize = pointSize;\n\t\tthis.angle = angle;\n\t}).prototype.exec = function(ctx) {\n\t\tvar x = this.x, y = this.y;\n\t\tvar radius = this.radius;\n\t\tvar angle = (this.angle||0)/180*Math.PI;\n\t\tvar sides = this.sides;\n\t\tvar ps = 1-(this.pointSize||0);\n\t\tvar a = Math.PI/sides;\n\n\t\tctx.moveTo(x+Math.cos(angle)*radius, y+Math.sin(angle)*radius);\n\t\tfor (var i=0; i<sides; i++) {\n\t\t\tangle += a;\n\t\t\tif (ps != 1) {\n\t\t\t\tctx.lineTo(x+Math.cos(angle)*radius*ps, y+Math.sin(angle)*radius*ps);\n\t\t\t}\n\t\t\tangle += a;\n\t\t\tctx.lineTo(x+Math.cos(angle)*radius, y+Math.sin(angle)*radius);\n\t\t}\n\t\tctx.closePath();\n\t};\n\n\t// docced above.\n\tGraphics.beginCmd = new G.BeginPath(); // so we don't have to instantiate multiple instances.\n\n\n\tcreatejs.Graphics = Graphics;\n}());\n\n//##############################################################################\n// DisplayObject.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\r\n\r\n(function() {\r\n\t\"use strict\";\r\n\r\n\r\n// constructor:\r\n\t/**\r\n\t * DisplayObject is an abstract class that should not be constructed directly. Instead construct subclasses such as\r\n\t * {{#crossLink \"Container\"}}{{/crossLink}}, {{#crossLink \"Bitmap\"}}{{/crossLink}}, and {{#crossLink \"Shape\"}}{{/crossLink}}.\r\n\t * DisplayObject is the base class for all display classes in the EaselJS library. It defines the core properties and\r\n\t * methods that are shared between all display objects, such as transformation properties (x, y, scaleX, scaleY, etc),\r\n\t * caching, and mouse handlers.\r\n\t * @class DisplayObject\r\n\t * @extends EventDispatcher\r\n\t * @constructor\r\n\t **/\r\n\tfunction DisplayObject() {\r\n\t\tthis.EventDispatcher_constructor();\r\n\t\t\r\n\t\t\r\n\t// public properties:\r\n\t\t/**\r\n\t\t * The alpha (transparency) for this display object. 0 is fully transparent, 1 is fully opaque.\r\n\t\t * @property alpha\r\n\t\t * @type {Number}\r\n\t\t * @default 1\r\n\t\t **/\r\n\t\tthis.alpha = 1;\r\n\t\r\n\t\t/**\r\n\t\t * If a cache is active, this returns the canvas that holds the cached version of this display object. See {{#crossLink \"cache\"}}{{/crossLink}}\r\n\t\t * for more information.\r\n\t\t * @property cacheCanvas\r\n\t\t * @type {HTMLCanvasElement | Object}\r\n\t\t * @default null\r\n\t\t * @readonly\r\n\t\t **/\r\n\t\tthis.cacheCanvas = null;\r\n\t\r\n\t\t/**\r\n\t\t * Returns an ID number that uniquely identifies the current cache for this display object. This can be used to\r\n\t\t * determine if the cache has changed since a previous check.\r\n\t\t * @property cacheID\r\n\t\t * @type {Number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.cacheID = 0;\r\n\t\r\n\t\t/**\r\n\t\t * Unique ID for this display object. Makes display objects easier for some uses.\r\n\t\t * @property id\r\n\t\t * @type {Number}\r\n\t\t * @default -1\r\n\t\t **/\r\n\t\tthis.id = createjs.UID.get();\r\n\t\r\n\t\t/**\r\n\t\t * Indicates whether to include this object when running mouse interactions. Setting this to `false` for children\r\n\t\t * of a {{#crossLink \"Container\"}}{{/crossLink}} will cause events on the Container to not fire when that child is\r\n\t\t * clicked. Setting this property to `false` does not prevent the {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}}\r\n\t\t * method from returning the child.\r\n\t\t *\r\n\t\t * <strong>Note:</strong> In EaselJS 0.7.0, the mouseEnabled property will not work properly with nested Containers. Please\r\n\t\t * check out the latest NEXT version in <a href=\"https://github.com/CreateJS/EaselJS/tree/master/lib\">GitHub</a> for an updated version with this issue resolved. The fix will be\r\n\t\t * provided in the next release of EaselJS.\r\n\t\t * @property mouseEnabled\r\n\t\t * @type {Boolean}\r\n\t\t * @default true\r\n\t\t **/\r\n\t\tthis.mouseEnabled = true;\r\n\t\t\r\n\t\t/**\r\n\t\t * If false, the tick will not run on this display object (or its children). This can provide some performance benefits.\r\n\t\t * In addition to preventing the \"tick\" event from being dispatched, it will also prevent tick related updates\r\n\t\t * on some display objects (ex. Sprite & MovieClip frame advancing, DOMElement visibility handling).\r\n\t\t * @property tickEnabled\r\n\t\t * @type Boolean\r\n\t\t * @default true\r\n\t\t **/\r\n\t\tthis.tickEnabled = true;\r\n\t\r\n\t\t/**\r\n\t\t * An optional name for this display object. Included in {{#crossLink \"DisplayObject/toString\"}}{{/crossLink}} . Useful for\r\n\t\t * debugging.\r\n\t\t * @property name\r\n\t\t * @type {String}\r\n\t\t * @default null\r\n\t\t **/\r\n\t\tthis.name = null;\r\n\t\r\n\t\t/**\r\n\t\t * A reference to the {{#crossLink \"Container\"}}{{/crossLink}} or {{#crossLink \"Stage\"}}{{/crossLink}} object that\r\n\t\t * contains this display object, or null if it has not been added\r\n\t\t * to one.\r\n\t\t * @property parent\r\n\t\t * @final\r\n\t\t * @type {Container}\r\n\t\t * @default null\r\n\t\t * @readonly\r\n\t\t **/\r\n\t\tthis.parent = null;\r\n\t\r\n\t\t/**\r\n\t\t * The left offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate\r\n\t\t * around its center, you would set regX and {{#crossLink \"DisplayObject/regY:property\"}}{{/crossLink}} to 50.\r\n\t\t * @property regX\r\n\t\t * @type {Number}\r\n\t\t * @default 0\r\n\t\t **/\r\n\t\tthis.regX = 0;\r\n\t\r\n\t\t/**\r\n\t\t * The y offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate around\r\n\t\t * its center, you would set {{#crossLink \"DisplayObject/regX:property\"}}{{/crossLink}} and regY to 50.\r\n\t\t * @property regY\r\n\t\t * @type {Number}\r\n\t\t * @default 0\r\n\t\t **/\r\n\t\tthis.regY = 0;\r\n\t\r\n\t\t/**\r\n\t\t * The rotation in degrees for this display object.\r\n\t\t * @property rotation\r\n\t\t * @type {Number}\r\n\t\t * @default 0\r\n\t\t **/\r\n\t\tthis.rotation = 0;\r\n\t\r\n\t\t/**\r\n\t\t * The factor to stretch this display object horizontally. For example, setting scaleX to 2 will stretch the display\r\n\t\t * object to twice its nominal width. To horizontally flip an object, set the scale to a negative number.\r\n\t\t * @property scaleX\r\n\t\t * @type {Number}\r\n\t\t * @default 1\r\n\t\t **/\r\n\t\tthis.scaleX = 1;\r\n\t\r\n\t\t/**\r\n\t\t * The factor to stretch this display object vertically. For example, setting scaleY to 0.5 will stretch the display\r\n\t\t * object to half its nominal height. To vertically flip an object, set the scale to a negative number.\r\n\t\t * @property scaleY\r\n\t\t * @type {Number}\r\n\t\t * @default 1\r\n\t\t **/\r\n\t\tthis.scaleY = 1;\r\n\t\r\n\t\t/**\r\n\t\t * The factor to skew this display object horizontally.\r\n\t\t * @property skewX\r\n\t\t * @type {Number}\r\n\t\t * @default 0\r\n\t\t **/\r\n\t\tthis.skewX = 0;\r\n\t\r\n\t\t/**\r\n\t\t * The factor to skew this display object vertically.\r\n\t\t * @property skewY\r\n\t\t * @type {Number}\r\n\t\t * @default 0\r\n\t\t **/\r\n\t\tthis.skewY = 0;\r\n\t\r\n\t\t/**\r\n\t\t * A shadow object that defines the shadow to render on this display object. Set to `null` to remove a shadow. If\r\n\t\t * null, this property is inherited from the parent container.\r\n\t\t * @property shadow\r\n\t\t * @type {Shadow}\r\n\t\t * @default null\r\n\t\t **/\r\n\t\tthis.shadow = null;\r\n\t\r\n\t\t/**\r\n\t\t * Indicates whether this display object should be rendered to the canvas and included when running the Stage\r\n\t\t * {{#crossLink \"Stage/getObjectsUnderPoint\"}}{{/crossLink}} method.\r\n\t\t * @property visible\r\n\t\t * @type {Boolean}\r\n\t\t * @default true\r\n\t\t **/\r\n\t\tthis.visible = true;\r\n\t\r\n\t\t/**\r\n\t\t * The x (horizontal) position of the display object, relative to its parent.\r\n\t\t * @property x\r\n\t\t * @type {Number}\r\n\t\t * @default 0\r\n\t\t **/\r\n\t\tthis.x = 0;\r\n\t\r\n\t\t/** The y (vertical) position of the display object, relative to its parent.\r\n\t\t * @property y\r\n\t\t * @type {Number}\r\n\t\t * @default 0\r\n\t\t **/\r\n\t\tthis.y = 0;\r\n\t\t\r\n\t\t/**\r\n\t\t * If set, defines the transformation for this display object, overriding all other transformation properties\r\n\t\t * (x, y, rotation, scale, skew).\r\n\t\t * @property transformMatrix\r\n\t\t * @type {Matrix2D}\r\n\t\t * @default null\r\n\t\t **/\r\n\t\tthis.transformMatrix = null;\r\n\t\t\r\n\t\t/**\r\n\t\t * The composite operation indicates how the pixels of this display object will be composited with the elements\r\n\t\t * behind it. If `null`, this property is inherited from the parent container. For more information, read the\r\n\t\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#compositing\">\r\n\t\t * whatwg spec on compositing</a>.\r\n\t\t * @property compositeOperation\r\n\t\t * @type {String}\r\n\t\t * @default null\r\n\t\t **/\r\n\t\tthis.compositeOperation = null;\r\n\t\r\n\t\t/**\r\n\t\t * Indicates whether the display object should be drawn to a whole pixel when\r\n\t\t * {{#crossLink \"Stage/snapToPixelEnabled\"}}{{/crossLink}} is true. To enable/disable snapping on whole\r\n\t\t * categories of display objects, set this value on the prototype (Ex. Text.prototype.snapToPixel = true).\r\n\t\t * @property snapToPixel\r\n\t\t * @type {Boolean}\r\n\t\t * @default true\r\n\t\t **/\r\n\t\tthis.snapToPixel = true;\r\n\t\r\n\t\t/**\r\n\t\t * An array of Filter objects to apply to this display object. Filters are only applied / updated when {{#crossLink \"cache\"}}{{/crossLink}}\r\n\t\t * or {{#crossLink \"updateCache\"}}{{/crossLink}} is called on the display object, and only apply to the area that is\r\n\t\t * cached.\r\n\t\t * @property filters\r\n\t\t * @type {Array}\r\n\t\t * @default null\r\n\t\t **/\r\n\t\tthis.filters = null;\r\n\t\t\r\n\t\t/**\r\n\t\t * A Shape instance that defines a vector mask (clipping path) for this display object.  The shape's transformation\r\n\t\t * will be applied relative to the display object's parent coordinates (as if it were a child of the parent).\r\n\t\t * @property mask\r\n\t\t * @type {Shape}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.mask = null;\r\n\t\t\r\n\t\t/**\r\n\t\t * A display object that will be tested when checking mouse interactions or testing {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}}.\r\n\t\t * The hit area will have its transformation applied relative to this display object's coordinate space (as though\r\n\t\t * the hit test object were a child of this display object and relative to its regX/Y). The hitArea will be tested\r\n\t\t * using only its own `alpha` value regardless of the alpha value on the target display object, or the target's\r\n\t\t * ancestors (parents).\r\n\t\t * \r\n\t\t * If set on a {{#crossLink \"Container\"}}{{/crossLink}}, children of the Container will not receive mouse events.\r\n\t\t * This is similar to setting {{#crossLink \"mouseChildren\"}}{{/crossLink}} to false.\r\n\t\t *\r\n\t\t * Note that hitArea is NOT currently used by the `hitTest()` method, nor is it supported for {{#crossLink \"Stage\"}}{{/crossLink}}.\r\n\t\t * @property hitArea\r\n\t\t * @type {DisplayObject}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.hitArea = null;\r\n\t\t\r\n\t\t/**\r\n\t\t * A CSS cursor (ex. \"pointer\", \"help\", \"text\", etc) that will be displayed when the user hovers over this display\r\n\t\t * object. You must enable mouseover events using the {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}} method to\r\n\t\t * use this property. Setting a non-null cursor on a Container will override the cursor set on its descendants.\r\n\t\t * @property cursor\r\n\t\t * @type {String}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.cursor = null;\r\n\t\r\n\t\r\n\t// private properties:\r\n\t\t/**\r\n\t\t * @property _cacheOffsetX\r\n\t\t * @protected\r\n\t\t * @type {Number}\r\n\t\t * @default 0\r\n\t\t **/\r\n\t\tthis._cacheOffsetX = 0;\r\n\t\r\n\t\t/**\r\n\t\t * @property _cacheOffsetY\r\n\t\t * @protected\r\n\t\t * @type {Number}\r\n\t\t * @default 0\r\n\t\t **/\r\n\t\tthis._cacheOffsetY = 0;\r\n\t\t\r\n\t\t/**\r\n\t\t * @property _filterOffsetX\r\n\t\t * @protected\r\n\t\t * @type {Number}\r\n\t\t * @default 0\r\n\t\t **/\r\n\t\tthis._filterOffsetX = 0;\r\n\t\t\r\n\t\t/**\r\n\t\t * @property _filterOffsetY\r\n\t\t * @protected\r\n\t\t * @type {Number}\r\n\t\t * @default 0\r\n\t\t **/\r\n\t\tthis._filterOffsetY = 0;\r\n\t\t\r\n\t\t/**\r\n\t\t * @property _cacheScale\r\n\t\t * @protected\r\n\t\t * @type {Number}\r\n\t\t * @default 1\r\n\t\t **/\r\n\t\tthis._cacheScale = 1;\r\n\t\r\n\t\t/**\r\n\t\t* @property _cacheDataURLID\r\n\t\t* @protected\r\n\t\t* @type {Number}\r\n\t\t* @default 0\r\n\t\t*/\r\n\t\tthis._cacheDataURLID = 0;\r\n\t\t\r\n\t\t/**\r\n\t\t* @property _cacheDataURL\r\n\t\t* @protected\r\n\t\t* @type {String}\r\n\t\t* @default null\r\n\t\t*/\r\n\t\tthis._cacheDataURL = null;\r\n\t\r\n\t\t/**\r\n\t\t * @property _props\r\n\t\t * @protected\r\n\t\t * @type {DisplayObject}\r\n\t\t * @default null\r\n\t\t **/\r\n\t\tthis._props = new createjs.DisplayProps();\r\n\t\r\n\t\t/**\r\n\t\t * @property _rectangle\r\n\t\t * @protected\r\n\t\t * @type {Rectangle}\r\n\t\t * @default null\r\n\t\t **/\r\n\t\tthis._rectangle = new createjs.Rectangle();\r\n\t\r\n\t\t/**\r\n\t\t * @property _bounds\r\n\t\t * @protected\r\n\t\t * @type {Rectangle}\r\n\t\t * @default null\r\n\t\t **/\r\n\t\tthis._bounds = null;\r\n\t}\r\n\tvar p = createjs.extend(DisplayObject, createjs.EventDispatcher);\r\n\r\n\t// TODO: deprecated\r\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\r\n\t\r\n// static properties:\r\n\t/**\r\n\t * Listing of mouse event names. Used in _hasMouseEventListener.\r\n\t * @property _MOUSE_EVENTS\r\n\t * @protected\r\n\t * @static\r\n\t * @type {Array}\r\n\t **/\r\n\tDisplayObject._MOUSE_EVENTS = [\"click\",\"dblclick\",\"mousedown\",\"mouseout\",\"mouseover\",\"pressmove\",\"pressup\",\"rollout\",\"rollover\"];\r\n\r\n\t/**\r\n\t * Suppresses errors generated when using features like hitTest, mouse events, and {{#crossLink \"getObjectsUnderPoint\"}}{{/crossLink}}\r\n\t * with cross domain content.\r\n\t * @property suppressCrossDomainErrors\r\n\t * @static\r\n\t * @type {Boolean}\r\n\t * @default false\r\n\t **/\r\n\tDisplayObject.suppressCrossDomainErrors = false;\r\n\t\r\n\t/**\r\n\t * @property _snapToPixelEnabled\r\n\t * @protected\r\n\t * @static\r\n\t * @type {Boolean}\r\n\t * @default false\r\n\t **/\r\n\tDisplayObject._snapToPixelEnabled = false; // stage.snapToPixelEnabled is temporarily copied here during a draw to provide global access.\r\n\r\n\t/**\r\n\t * @property _hitTestCanvas\r\n\t * @type {HTMLCanvasElement | Object}\r\n\t * @static\r\n\t * @protected\r\n\t **/\r\n\t/**\r\n\t * @property _hitTestContext\r\n\t * @type {CanvasRenderingContext2D}\r\n\t * @static\r\n\t * @protected\r\n\t **/\r\n\tvar canvas = createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"); // prevent errors on load in browsers without canvas.\r\n\tif (canvas.getContext) {\r\n\t\tDisplayObject._hitTestCanvas = canvas;\r\n\t\tDisplayObject._hitTestContext = canvas.getContext(\"2d\");\r\n\t\tcanvas.width = canvas.height = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @property _nextCacheID\r\n\t * @type {Number}\r\n\t * @static\r\n\t * @protected\r\n\t **/\r\n\tDisplayObject._nextCacheID = 1;\r\n\r\n\r\n// events:\r\n\t/**\r\n\t * Dispatched when the user presses their left mouse button over the display object. See the \r\n\t * {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\r\n\t * @event mousedown\r\n\t * @since 0.6.0\r\n\t */\r\n\t \r\n\t/**\r\n\t * Dispatched when the user presses their left mouse button and then releases it while over the display object.\r\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\r\n\t * @event click\r\n\t * @since 0.6.0\r\n\t */\r\n\t \r\n\t/**\r\n\t * Dispatched when the user double clicks their left mouse button over this display object.\r\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\r\n\t * @event dblclick\r\n\t * @since 0.6.0\r\n\t */\r\n\t \r\n\t/**\r\n\t * Dispatched when the user's mouse enters this display object. This event must be enabled using \r\n\t * {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}. See also {{#crossLink \"DisplayObject/rollover:event\"}}{{/crossLink}}.\r\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\r\n\t * @event mouseover\r\n\t * @since 0.6.0\r\n\t */\r\n\r\n\t/**\r\n\t * Dispatched when the user's mouse leaves this display object. This event must be enabled using \r\n\t * {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}. See also {{#crossLink \"DisplayObject/rollout:event\"}}{{/crossLink}}.\r\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\r\n\t * @event mouseout\r\n\t * @since 0.6.0\r\n\t */\r\n\t \r\n\t/**\r\n\t * This event is similar to {{#crossLink \"DisplayObject/mouseover:event\"}}{{/crossLink}}, with the following\r\n\t * differences: it does not bubble, and it considers {{#crossLink \"Container\"}}{{/crossLink}} instances as an\r\n\t * aggregate of their content.\r\n\t * \r\n\t * For example, myContainer contains two overlapping children: shapeA and shapeB. The user moves their mouse over\r\n\t * shapeA and then directly on to shapeB. With a listener for {{#crossLink \"mouseover:event\"}}{{/crossLink}} on\r\n\t * myContainer, two events would be received, each targeting a child element:<OL>\r\n\t * <LI>when the mouse enters shapeA (target=shapeA)</LI>\r\n\t * <LI>when the mouse enters shapeB (target=shapeB)</LI>\r\n\t * </OL>\r\n\t * However, with a listener for \"rollover\" instead, only a single event is received when the mouse first enters\r\n\t * the aggregate myContainer content (target=myContainer).\r\n\t * \r\n\t * This event must be enabled using {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}.\r\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\r\n\t * @event rollover\r\n\t * @since 0.7.0\r\n\t */\r\n\t \r\n\t/**\r\n\t * This event is similar to {{#crossLink \"DisplayObject/mouseout:event\"}}{{/crossLink}}, with the following\r\n\t * differences: it does not bubble, and it considers {{#crossLink \"Container\"}}{{/crossLink}} instances as an\r\n\t * aggregate of their content.\r\n\t * \r\n\t * For example, myContainer contains two overlapping children: shapeA and shapeB. The user moves their mouse over\r\n\t * shapeA, then directly on to shapeB, then off both. With a listener for {{#crossLink \"mouseout:event\"}}{{/crossLink}}\r\n\t * on myContainer, two events would be received, each targeting a child element:<OL>\r\n\t * <LI>when the mouse leaves shapeA (target=shapeA)</LI>\r\n\t * <LI>when the mouse leaves shapeB (target=shapeB)</LI>\r\n\t * </OL>\r\n\t * However, with a listener for \"rollout\" instead, only a single event is received when the mouse leaves\r\n\t * the aggregate myContainer content (target=myContainer).\r\n\t * \r\n\t * This event must be enabled using {{#crossLink \"Stage/enableMouseOver\"}}{{/crossLink}}.\r\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\r\n\t * @event rollout\r\n\t * @since 0.7.0\r\n\t */\r\n\t \r\n\t/**\r\n\t * After a {{#crossLink \"DisplayObject/mousedown:event\"}}{{/crossLink}} occurs on a display object, a pressmove\r\n\t * event will be generated on that object whenever the mouse moves until the mouse press is released. This can be\r\n\t * useful for dragging and similar operations.\r\n\t * @event pressmove\r\n\t * @since 0.7.0\r\n\t */\r\n\t \r\n\t/**\r\n\t * After a {{#crossLink \"DisplayObject/mousedown:event\"}}{{/crossLink}} occurs on a display object, a pressup event\r\n\t * will be generated on that object when that mouse press is released. This can be useful for dragging and similar\r\n\t * operations.\r\n\t * @event pressup\r\n\t * @since 0.7.0\r\n\t */\r\n\t \r\n\t/**\r\n\t * Dispatched when the display object is added to a parent container.\r\n\t * @event added\r\n\t */\r\n\t \r\n\t/**\r\n\t * Dispatched when the display object is removed from its parent container.\r\n\t * @event removed\r\n\t */\r\n\t \r\n\t/**\r\n\t * Dispatched on each display object on a stage whenever the stage updates. This occurs immediately before the\r\n\t * rendering (draw) pass. When {{#crossLink \"Stage/update\"}}{{/crossLink}} is called, first all display objects on\r\n\t * the stage dispatch the tick event, then all of the display objects are drawn to stage. Children will have their\r\n\t * {{#crossLink \"tick:event\"}}{{/crossLink}} event dispatched in order of their depth prior to the event being\r\n\t * dispatched on their parent.\r\n\t * @event tick\r\n\t * @param {Object} target The object that dispatched the event.\r\n\t * @param {String} type The event type.\r\n\t * @param {Array} params An array containing any arguments that were passed to the Stage.update() method. For\r\n\t *      example if you called stage.update(\"hello\"), then the params would be [\"hello\"].\r\n\t * @since 0.6.0\r\n\t */\r\n\t\r\n\t\r\n// getter / setters:\r\n\t/**\r\n\t * Use the {{#crossLink \"DisplayObject/stage:property\"}}{{/crossLink}} property instead.\r\n\t * @method getStage\r\n\t * @return {Stage}\r\n\t * @deprecated\r\n\t **/\r\n\tp.getStage = function() {\r\n\t\t// uses dynamic access to avoid circular dependencies;\r\n\t\tvar o = this, _Stage = createjs[\"Stage\"];\r\n\t\twhile (o.parent) { o = o.parent; }\r\n\t\tif (o instanceof _Stage) { return o; }\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns the Stage instance that this display object will be rendered on, or null if it has not been added to one.\r\n\t * @property stage\r\n\t * @type {Stage}\r\n\t * @readonly\r\n\t **/\r\n\ttry {\r\n\t\tObject.defineProperties(p, {\r\n\t\t\tstage: { get: p.getStage }\r\n\t\t});\r\n\t} catch (e) {}\r\n\r\n\r\n// public methods:\r\n\t/**\r\n\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\r\n\t * This does not account for whether it would be visible within the boundaries of the stage.\r\n\t *\r\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\r\n\t * @method isVisible\r\n\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\r\n\t **/\r\n\tp.isVisible = function() {\r\n\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0);\r\n\t};\r\n\r\n\t/**\r\n\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\r\n\t * Returns <code>true</code> if the draw was handled (useful for overriding functionality).\r\n\t *\r\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\r\n\t * @method draw\r\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\r\n\t * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache. For example,\r\n\t * used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).\r\n\t * @return {Boolean}\r\n\t **/\r\n\tp.draw = function(ctx, ignoreCache) {\r\n\t\tvar cacheCanvas = this.cacheCanvas;\r\n\t\tif (ignoreCache || !cacheCanvas) { return false; }\r\n\t\tvar scale = this._cacheScale;\r\n\t\tctx.drawImage(cacheCanvas, this._cacheOffsetX+this._filterOffsetX, this._cacheOffsetY+this._filterOffsetY, cacheCanvas.width/scale, cacheCanvas.height/scale);\r\n\t\treturn true;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Applies this display object's transformation, alpha, globalCompositeOperation, clipping path (mask), and shadow\r\n\t * to the specified context. This is typically called prior to {{#crossLink \"DisplayObject/draw\"}}{{/crossLink}}.\r\n\t * @method updateContext\r\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D to update.\r\n\t **/\r\n\tp.updateContext = function(ctx) {\r\n\t\tvar o=this, mask=o.mask, mtx= o._props.matrix;\r\n\t\t\r\n\t\tif (mask && mask.graphics && !mask.graphics.isEmpty()) {\r\n\t\t\tmask.getMatrix(mtx);\r\n\t\t\tctx.transform(mtx.a,  mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty);\r\n\t\t\t\r\n\t\t\tmask.graphics.drawAsPath(ctx);\r\n\t\t\tctx.clip();\r\n\t\t\t\r\n\t\t\tmtx.invert();\r\n\t\t\tctx.transform(mtx.a,  mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty);\r\n\t\t}\r\n\t\t\r\n\t\tthis.getMatrix(mtx);\r\n\t\tvar tx = mtx.tx, ty = mtx.ty;\r\n\t\tif (DisplayObject._snapToPixelEnabled && o.snapToPixel) {\r\n\t\t\ttx = tx + (tx < 0 ? -0.5 : 0.5) | 0;\r\n\t\t\tty = ty + (ty < 0 ? -0.5 : 0.5) | 0;\r\n\t\t}\r\n\t\tctx.transform(mtx.a,  mtx.b, mtx.c, mtx.d, tx, ty);\r\n\t\tctx.globalAlpha *= o.alpha;\r\n\t\tif (o.compositeOperation) { ctx.globalCompositeOperation = o.compositeOperation; }\r\n\t\tif (o.shadow) { this._applyShadow(ctx, o.shadow); }\r\n\t};\r\n\r\n\t/**\r\n\t * Draws the display object into a new canvas, which is then used for subsequent draws. For complex content\r\n\t * that does not change frequently (ex. a Container with many children that do not move, or a complex vector Shape),\r\n\t * this can provide for much faster rendering because the content does not need to be re-rendered each tick. The\r\n\t * cached display object can be moved, rotated, faded, etc freely, however if its content changes, you must\r\n\t * manually update the cache by calling <code>updateCache()</code> or <code>cache()</code> again. You must specify\r\n\t * the cache area via the x, y, w, and h parameters. This defines the rectangle that will be rendered and cached\r\n\t * using this display object's coordinates.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t * For example if you defined a Shape that drew a circle at 0, 0 with a radius of 25:\r\n\t *\r\n\t *      var shape = new createjs.Shape();\r\n\t *      shape.graphics.beginFill(\"#ff0000\").drawCircle(0, 0, 25);\r\n\t *      myShape.cache(-25, -25, 50, 50);\r\n\t *\r\n\t * Note that filters need to be defined <em>before</em> the cache is applied. Check out the {{#crossLink \"Filter\"}}{{/crossLink}}\r\n\t * class for more information. Some filters (ex. BlurFilter) will not work as expected in conjunction with the scale param.\r\n\t * \r\n\t * Usually, the resulting cacheCanvas will have the dimensions width*scale by height*scale, however some filters (ex. BlurFilter)\r\n\t * will add padding to the canvas dimensions.\r\n\t *\r\n\t * @method cache\r\n\t * @param {Number} x The x coordinate origin for the cache region.\r\n\t * @param {Number} y The y coordinate origin for the cache region.\r\n\t * @param {Number} width The width of the cache region.\r\n\t * @param {Number} height The height of the cache region.\r\n\t * @param {Number} [scale=1] The scale at which the cache will be created. For example, if you cache a vector shape using\r\n\t * \tmyShape.cache(0,0,100,100,2) then the resulting cacheCanvas will be 200x200 px. This lets you scale and rotate\r\n\t * \tcached elements with greater fidelity. Default is 1.\r\n\t **/\r\n\tp.cache = function(x, y, width, height, scale) {\r\n\t\t// draw to canvas.\r\n\t\tscale = scale||1;\r\n\t\tif (!this.cacheCanvas) { this.cacheCanvas = createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"); }\r\n\t\tthis._cacheWidth = width;\r\n\t\tthis._cacheHeight = height;\r\n\t\tthis._cacheOffsetX = x;\r\n\t\tthis._cacheOffsetY = y;\r\n\t\tthis._cacheScale = scale;\r\n\t\tthis.updateCache();\r\n\t};\r\n\r\n\t/**\r\n\t * Redraws the display object to its cache. Calling updateCache without an active cache will throw an error.\r\n\t * If compositeOperation is null the current cache will be cleared prior to drawing. Otherwise the display object\r\n\t * will be drawn over the existing cache using the specified compositeOperation.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t * Clear the current graphics of a cached shape, draw some new instructions, and then update the cache. The new line\r\n\t * will be drawn on top of the old one.\r\n\t *\r\n\t *      // Not shown: Creating the shape, and caching it.\r\n\t *      shapeInstance.clear();\r\n\t *      shapeInstance.setStrokeStyle(3).beginStroke(\"#ff0000\").moveTo(100, 100).lineTo(200,200);\r\n\t *      shapeInstance.updateCache();\r\n\t *\r\n\t * @method updateCache\r\n\t * @param {String} compositeOperation The compositeOperation to use, or null to clear the cache and redraw it.\r\n\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#compositing\">\r\n\t * whatwg spec on compositing</a>.\r\n\t **/\r\n\tp.updateCache = function(compositeOperation) {\r\n\t\tvar cacheCanvas = this.cacheCanvas;\r\n\t\tif (!cacheCanvas) { throw \"cache() must be called before updateCache()\"; }\r\n\t\tvar scale = this._cacheScale, offX = this._cacheOffsetX*scale, offY = this._cacheOffsetY*scale;\r\n\t\tvar w = this._cacheWidth, h = this._cacheHeight, ctx = cacheCanvas.getContext(\"2d\");\r\n\t\t\r\n\t\tvar fBounds = this._getFilterBounds();\r\n\t\toffX += (this._filterOffsetX = fBounds.x);\r\n\t\toffY += (this._filterOffsetY = fBounds.y);\r\n\t\t\r\n\t\tw = Math.ceil(w*scale) + fBounds.width;\r\n\t\th = Math.ceil(h*scale) + fBounds.height;\r\n\t\tif (w != cacheCanvas.width || h != cacheCanvas.height) {\r\n\t\t\t// TODO: it would be nice to preserve the content if there is a compositeOperation.\r\n\t\t\tcacheCanvas.width = w;\r\n\t\t\tcacheCanvas.height = h;\r\n\t\t} else if (!compositeOperation) {\r\n\t\t\tctx.clearRect(0, 0, w+1, h+1);\r\n\t\t}\r\n\t\t\r\n\t\tctx.save();\r\n\t\tctx.globalCompositeOperation = compositeOperation;\r\n\t\tctx.setTransform(scale, 0, 0, scale, -offX, -offY);\r\n\t\tthis.draw(ctx, true);\r\n\t\t// TODO: filters and cache scale don't play well together at present.\r\n\t\tthis._applyFilters();\r\n\t\tctx.restore();\r\n\t\tthis.cacheID = DisplayObject._nextCacheID++;\r\n\t};\r\n\r\n\t/**\r\n\t * Clears the current cache. See {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}} for more information.\r\n\t * @method uncache\r\n\t **/\r\n\tp.uncache = function() {\r\n\t\tthis._cacheDataURL = this.cacheCanvas = null;\r\n\t\tthis.cacheID = this._cacheOffsetX = this._cacheOffsetY = this._filterOffsetX = this._filterOffsetY = 0;\r\n\t\tthis._cacheScale = 1;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Returns a data URL for the cache, or null if this display object is not cached.\r\n\t * Uses cacheID to ensure a new data URL is not generated if the cache has not changed.\r\n\t * @method getCacheDataURL\r\n\t * @return {String} The image data url for the cache.\r\n\t **/\r\n\tp.getCacheDataURL = function() {\r\n\t\tif (!this.cacheCanvas) { return null; }\r\n\t\tif (this.cacheID != this._cacheDataURLID) { this._cacheDataURL = this.cacheCanvas.toDataURL(); }\r\n\t\treturn this._cacheDataURL;\r\n\t};\r\n\r\n\t/**\r\n\t * Transforms the specified x and y position from the coordinate space of the display object\r\n\t * to the global (stage) coordinate space. For example, this could be used to position an HTML label\r\n\t * over a specific point on a nested display object. Returns a Point instance with x and y properties\r\n\t * correlating to the transformed coordinates on the stage.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      displayObject.x = 300;\r\n\t *      displayObject.y = 200;\r\n\t *      stage.addChild(displayObject);\r\n\t *      var point = myDisplayObject.localToGlobal(100, 100);\r\n\t *      // Results in x=400, y=300\r\n\t *\r\n\t * @method localToGlobal\r\n\t * @param {Number} x The x position in the source display object to transform.\r\n\t * @param {Number} y The y position in the source display object to transform.\r\n\t * @param {Point | Object} [pt] An object to copy the result into. If omitted a new Point object with x/y properties will be returned. \r\n\t * @return {Point} A Point instance with x and y properties correlating to the transformed coordinates\r\n\t * on the stage.\r\n\t **/\r\n\tp.localToGlobal = function(x, y, pt) {\r\n\t\treturn this.getConcatenatedMatrix(this._props.matrix).transformPoint(x,y, pt||new createjs.Point());\r\n\t};\r\n\r\n\t/**\r\n\t * Transforms the specified x and y position from the global (stage) coordinate space to the\r\n\t * coordinate space of the display object. For example, this could be used to determine\r\n\t * the current mouse position within the display object. Returns a Point instance with x and y properties\r\n\t * correlating to the transformed position in the display object's coordinate space.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      displayObject.x = 300;\r\n\t *      displayObject.y = 200;\r\n\t *      stage.addChild(displayObject);\r\n\t *      var point = myDisplayObject.globalToLocal(100, 100);\r\n\t *      // Results in x=-200, y=-100\r\n\t *\r\n\t * @method globalToLocal\r\n\t * @param {Number} x The x position on the stage to transform.\r\n\t * @param {Number} y The y position on the stage to transform.\r\n\t * @param {Point | Object} [pt] An object to copy the result into. If omitted a new Point object with x/y properties will be returned. \r\n\t * @return {Point} A Point instance with x and y properties correlating to the transformed position in the\r\n\t * display object's coordinate space.\r\n\t **/\r\n\tp.globalToLocal = function(x, y, pt) {\r\n\t\treturn this.getConcatenatedMatrix(this._props.matrix).invert().transformPoint(x,y, pt||new createjs.Point());\r\n\t};\r\n\r\n\t/**\r\n\t * Transforms the specified x and y position from the coordinate space of this display object to the coordinate\r\n\t * space of the target display object. Returns a Point instance with x and y properties correlating to the\r\n\t * transformed position in the target's coordinate space. Effectively the same as using the following code with\r\n\t * {{#crossLink \"DisplayObject/localToGlobal\"}}{{/crossLink}} and {{#crossLink \"DisplayObject/globalToLocal\"}}{{/crossLink}}.\r\n\t *\r\n\t *      var pt = this.localToGlobal(x, y);\r\n\t *      pt = target.globalToLocal(pt.x, pt.y);\r\n\t *\r\n\t * @method localToLocal\r\n\t * @param {Number} x The x position in the source display object to transform.\r\n\t * @param {Number} y The y position on the source display object to transform.\r\n\t * @param {DisplayObject} target The target display object to which the coordinates will be transformed.\r\n\t * @param {Point | Object} [pt] An object to copy the result into. If omitted a new Point object with x/y properties will be returned. \r\n\t * @return {Point} Returns a Point instance with x and y properties correlating to the transformed position\r\n\t * in the target's coordinate space.\r\n\t **/\r\n\tp.localToLocal = function(x, y, target, pt) {\r\n\t\tpt = this.localToGlobal(x, y, pt);\r\n\t\treturn target.globalToLocal(pt.x, pt.y, pt);\r\n\t};\r\n\r\n\t/**\r\n\t * Shortcut method to quickly set the transform properties on the display object. All parameters are optional.\r\n\t * Omitted parameters will have the default value set.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      displayObject.setTransform(100, 100, 2, 2);\r\n\t *\r\n\t * @method setTransform\r\n\t * @param {Number} [x=0] The horizontal translation (x position) in pixels\r\n\t * @param {Number} [y=0] The vertical translation (y position) in pixels\r\n\t * @param {Number} [scaleX=1] The horizontal scale, as a percentage of 1\r\n\t * @param {Number} [scaleY=1] the vertical scale, as a percentage of 1\r\n\t * @param {Number} [rotation=0] The rotation, in degrees\r\n\t * @param {Number} [skewX=0] The horizontal skew factor\r\n\t * @param {Number} [skewY=0] The vertical skew factor\r\n\t * @param {Number} [regX=0] The horizontal registration point in pixels\r\n\t * @param {Number} [regY=0] The vertical registration point in pixels\r\n\t * @return {DisplayObject} Returns this instance. Useful for chaining commands.\r\n\t * @chainable\r\n\t*/\r\n\tp.setTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\r\n\t\tthis.x = x || 0;\r\n\t\tthis.y = y || 0;\r\n\t\tthis.scaleX = scaleX == null ? 1 : scaleX;\r\n\t\tthis.scaleY = scaleY == null ? 1 : scaleY;\r\n\t\tthis.rotation = rotation || 0;\r\n\t\tthis.skewX = skewX || 0;\r\n\t\tthis.skewY = skewY || 0;\r\n\t\tthis.regX = regX || 0;\r\n\t\tthis.regY = regY || 0;\r\n\t\treturn this;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Returns a matrix based on this object's current transform.\r\n\t * @method getMatrix\r\n\t * @param {Matrix2D} matrix Optional. A Matrix2D object to populate with the calculated values. If null, a new\r\n\t * Matrix object is returned.\r\n\t * @return {Matrix2D} A matrix representing this display object's transform.\r\n\t **/\r\n\tp.getMatrix = function(matrix) {\r\n\t\tvar o = this, mtx = matrix&&matrix.identity() || new createjs.Matrix2D();\r\n\t\treturn o.transformMatrix ?  mtx.copy(o.transformMatrix) : mtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Generates a Matrix2D object representing the combined transform of the display object and all of its\r\n\t * parent Containers up to the highest level ancestor (usually the {{#crossLink \"Stage\"}}{{/crossLink}}). This can\r\n\t * be used to transform positions between coordinate spaces, such as with {{#crossLink \"DisplayObject/localToGlobal\"}}{{/crossLink}}\r\n\t * and {{#crossLink \"DisplayObject/globalToLocal\"}}{{/crossLink}}.\r\n\t * @method getConcatenatedMatrix\r\n\t * @param {Matrix2D} [matrix] A {{#crossLink \"Matrix2D\"}}{{/crossLink}} object to populate with the calculated values.\r\n\t * If null, a new Matrix2D object is returned.\r\n\t * @return {Matrix2D} The combined matrix.\r\n\t **/\r\n\tp.getConcatenatedMatrix = function(matrix) {\r\n\t\tvar o = this, mtx = this.getMatrix(matrix);\r\n\t\twhile (o = o.parent) {\r\n\t\t\tmtx.prependMatrix(o.getMatrix(o._props.matrix));\r\n\t\t}\r\n\t\treturn mtx;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Generates a DisplayProps object representing the combined display properties of the  object and all of its\r\n\t * parent Containers up to the highest level ancestor (usually the {{#crossLink \"Stage\"}}{{/crossLink}}).\r\n\t * @method getConcatenatedDisplayProps\r\n\t * @param {DisplayProps} [props] A {{#crossLink \"DisplayProps\"}}{{/crossLink}} object to populate with the calculated values.\r\n\t * If null, a new DisplayProps object is returned.\r\n\t * @return {DisplayProps} The combined display properties.\r\n\t **/\r\n\tp.getConcatenatedDisplayProps = function(props) {\r\n\t\tprops = props ? props.identity() : new createjs.DisplayProps();\r\n\t\tvar o = this, mtx = o.getMatrix(props.matrix); \r\n\t\tdo {\r\n\t\t\tprops.prepend(o.visible, o.alpha, o.shadow, o.compositeOperation);\r\n\t\t\t\r\n\t\t\t// we do this to avoid problems with the matrix being used for both operations when o._props.matrix is passed in as the props param.\r\n\t\t\t// this could be simplified (ie. just done as part of the prepend above) if we switched to using a pool.\r\n\t\t\tif (o != this) { mtx.prependMatrix(o.getMatrix(o._props.matrix)); }\r\n\t\t} while (o = o.parent);\r\n\t\treturn props;\r\n\t};\r\n\r\n\t/**\r\n\t * Tests whether the display object intersects the specified point in local coordinates (ie. draws a pixel with alpha > 0 at\r\n\t * the specified position). This ignores the alpha, shadow, hitArea, mask, and compositeOperation of the display object.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      stage.addEventListener(\"stagemousedown\", handleMouseDown);\r\n\t *      function handleMouseDown(event) {\r\n\t *          var hit = myShape.hitTest(event.stageX, event.stageY);\r\n\t *      }\r\n\t *\r\n\t * Please note that shape-to-shape collision is not currently supported by EaselJS.\r\n\t * @method hitTest\r\n\t * @param {Number} x The x position to check in the display object's local coordinates.\r\n\t * @param {Number} y The y position to check in the display object's local coordinates.\r\n\t * @return {Boolean} A Boolean indicating whether a visible portion of the DisplayObject intersect the specified\r\n\t * local Point.\r\n\t*/\r\n\tp.hitTest = function(x, y) {\r\n\t\tvar ctx = DisplayObject._hitTestContext;\r\n\t\tctx.setTransform(1, 0, 0, 1, -x, -y);\r\n\t\tthis.draw(ctx);\r\n\r\n\t\tvar hit = this._testHit(ctx);\r\n\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\r\n\t\tctx.clearRect(0, 0, 2, 2);\r\n\t\treturn hit;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Provides a chainable shortcut method for setting a number of properties on the instance.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      var myGraphics = new createjs.Graphics().beginFill(\"#ff0000\").drawCircle(0, 0, 25);\r\n\t *      var shape = stage.addChild(new Shape()).set({graphics:myGraphics, x:100, y:100, alpha:0.5});\r\n\t *\r\n\t * @method set\r\n\t * @param {Object} props A generic object containing properties to copy to the DisplayObject instance.\r\n\t * @return {DisplayObject} Returns the instance the method is called on (useful for chaining calls.)\r\n\t * @chainable\r\n\t*/\r\n\tp.set = function(props) {\r\n\t\tfor (var n in props) { this[n] = props[n]; }\r\n\t\treturn this;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Returns a rectangle representing this object's bounds in its local coordinate system (ie. with no transformation).\r\n\t * Objects that have been cached will return the bounds of the cache.\r\n\t * \r\n\t * Not all display objects can calculate their own bounds (ex. Shape). For these objects, you can use \r\n\t * {{#crossLink \"DisplayObject/setBounds\"}}{{/crossLink}} so that they are included when calculating Container\r\n\t * bounds.\r\n\t * \r\n\t * <table>\r\n\t * \t<tr><td><b>All</b></td><td>\r\n\t * \t\tAll display objects support setting bounds manually using setBounds(). Likewise, display objects that\r\n\t * \t\thave been cached using cache() will return the bounds of their cache. Manual and cache bounds will override\r\n\t * \t\tthe automatic calculations listed below.\r\n\t * \t</td></tr>\r\n\t * \t<tr><td><b>Bitmap</b></td><td>\r\n\t * \t\tReturns the width and height of the sourceRect (if specified) or image, extending from (x=0,y=0).\r\n\t * \t</td></tr>\r\n\t * \t<tr><td><b>Sprite</b></td><td>\r\n\t * \t\tReturns the bounds of the current frame. May have non-zero x/y if a frame registration point was specified\r\n\t * \t\tin the spritesheet data. See also {{#crossLink \"SpriteSheet/getFrameBounds\"}}{{/crossLink}}\r\n\t * \t</td></tr>\r\n\t * \t<tr><td><b>Container</b></td><td>\r\n\t * \t\tReturns the aggregate (combined) bounds of all children that return a non-null value from getBounds().\r\n\t * \t</td></tr>\r\n\t * \t<tr><td><b>Shape</b></td><td>\r\n\t * \t\tDoes not currently support automatic bounds calculations. Use setBounds() to manually define bounds.\r\n\t * \t</td></tr>\r\n\t * \t<tr><td><b>Text</b></td><td>\r\n\t * \t\tReturns approximate bounds. Horizontal values (x/width) are quite accurate, but vertical values (y/height) are\r\n\t * \t\tnot, especially when using textBaseline values other than \"top\".\r\n\t * \t</td></tr>\r\n\t * \t<tr><td><b>BitmapText</b></td><td>\r\n\t * \t\tReturns approximate bounds. Values will be more accurate if spritesheet frame registration points are close\r\n\t * \t\tto (x=0,y=0).\r\n\t * \t</td></tr>\r\n\t* </table>\r\n\t * \r\n\t * Bounds can be expensive to calculate for some objects (ex. text, or containers with many children), and\r\n\t * are recalculated each time you call getBounds(). You can prevent recalculation on static objects by setting the\r\n\t * bounds explicitly:\r\n\t * \r\n\t * \tvar bounds = obj.getBounds();\r\n\t * \tobj.setBounds(bounds.x, bounds.y, bounds.width, bounds.height);\r\n\t * \t// getBounds will now use the set values, instead of recalculating\r\n\t * \r\n\t * To reduce memory impact, the returned Rectangle instance may be reused internally; clone the instance or copy its\r\n\t * values if you need to retain it.\r\n\t * \r\n\t * \tvar myBounds = obj.getBounds().clone();\r\n\t * \t// OR:\r\n\t * \tmyRect.copy(obj.getBounds());\r\n\t * \r\n\t * @method getBounds\r\n\t * @return {Rectangle} A Rectangle instance representing the bounds, or null if bounds are not available for this\r\n\t * object.\r\n\t **/\r\n\tp.getBounds = function() {\r\n\t\tif (this._bounds) { return this._rectangle.copy(this._bounds); }\r\n\t\tvar cacheCanvas = this.cacheCanvas;\r\n\t\tif (cacheCanvas) {\r\n\t\t\tvar scale = this._cacheScale;\r\n\t\t\treturn this._rectangle.setValues(this._cacheOffsetX, this._cacheOffsetY, cacheCanvas.width/scale, cacheCanvas.height/scale);\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Returns a rectangle representing this object's bounds in its parent's coordinate system (ie. with transformations applied).\r\n\t * Objects that have been cached will return the transformed bounds of the cache.\r\n\t * \r\n\t * Not all display objects can calculate their own bounds (ex. Shape). For these objects, you can use \r\n\t * {{#crossLink \"DisplayObject/setBounds\"}}{{/crossLink}} so that they are included when calculating Container\r\n\t * bounds.\r\n\t * \r\n\t * To reduce memory impact, the returned Rectangle instance may be reused internally; clone the instance or copy its\r\n\t * values if you need to retain it.\r\n\t * \r\n\t * Container instances calculate aggregate bounds for all children that return bounds via getBounds.\r\n\t * @method getTransformedBounds\r\n\t * @return {Rectangle} A Rectangle instance representing the bounds, or null if bounds are not available for this object.\r\n\t **/\r\n\tp.getTransformedBounds = function() {\r\n\t\treturn this._getBounds();\r\n\t};\r\n\t\r\n\t/**\r\n\t * Allows you to manually specify the bounds of an object that either cannot calculate their own bounds (ex. Shape &\r\n\t * Text) for future reference, or so the object can be included in Container bounds. Manually set bounds will always\r\n\t * override calculated bounds.\r\n\t * \r\n\t * The bounds should be specified in the object's local (untransformed) coordinates. For example, a Shape instance\r\n\t * with a 25px radius circle centered at 0,0 would have bounds of (-25, -25, 50, 50).\r\n\t * @method setBounds\r\n\t * @param {Number} x The x origin of the bounds. Pass null to remove the manual bounds.\r\n\t * @param {Number} y The y origin of the bounds.\r\n\t * @param {Number} width The width of the bounds.\r\n\t * @param {Number} height The height of the bounds.\r\n\t **/\r\n\tp.setBounds = function(x, y, width, height) {\r\n\t\tif (x == null) { this._bounds = x; }\r\n\t\tthis._bounds = (this._bounds || new createjs.Rectangle()).setValues(x, y, width, height);\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a clone of this DisplayObject. Some properties that are specific to this instance's current context are\r\n\t * reverted to their defaults (for example .parent). Caches are not maintained across clones, and some elements\r\n\t * are copied by reference (masks, individual filter instances, hit area)\r\n\t * @method clone\r\n\t * @return {DisplayObject} A clone of the current DisplayObject instance.\r\n\t **/\r\n\tp.clone = function() {\r\n\t\treturn this._cloneProps(new DisplayObject());\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a string representation of this object.\r\n\t * @method toString\r\n\t * @return {String} a string representation of the instance.\r\n\t **/\r\n\tp.toString = function() {\r\n\t\treturn \"[DisplayObject (name=\"+  this.name +\")]\";\r\n\t};\r\n\r\n\r\n// private methods:\r\n\t// separated so it can be used more easily in subclasses:\r\n\t/**\r\n\t * @method _cloneProps\r\n\t * @param {DisplayObject} o The DisplayObject instance which will have properties from the current DisplayObject\r\n\t * instance copied into.\r\n\t * @return {DisplayObject} o\r\n\t * @protected\r\n\t **/\r\n\tp._cloneProps = function(o) {\r\n\t\to.alpha = this.alpha;\r\n\t\to.mouseEnabled = this.mouseEnabled;\r\n\t\to.tickEnabled = this.tickEnabled;\r\n\t\to.name = this.name;\r\n\t\to.regX = this.regX;\r\n\t\to.regY = this.regY;\r\n\t\to.rotation = this.rotation;\r\n\t\to.scaleX = this.scaleX;\r\n\t\to.scaleY = this.scaleY;\r\n\t\to.shadow = this.shadow;\r\n\t\to.skewX = this.skewX;\r\n\t\to.skewY = this.skewY;\r\n\t\to.visible = this.visible;\r\n\t\to.x  = this.x;\r\n\t\to.y = this.y;\r\n\t\to.compositeOperation = this.compositeOperation;\r\n\t\to.snapToPixel = this.snapToPixel;\r\n\t\to.filters = this.filters==null?null:this.filters.slice(0);\r\n\t\to.mask = this.mask;\r\n\t\to.hitArea = this.hitArea;\r\n\t\to.cursor = this.cursor;\r\n\t\to._bounds = this._bounds;\r\n\t\treturn o;\r\n\t};\r\n\r\n\t/**\r\n\t * @method _applyShadow\r\n\t * @protected\r\n\t * @param {CanvasRenderingContext2D} ctx\r\n\t * @param {Shadow} shadow\r\n\t **/\r\n\tp._applyShadow = function(ctx, shadow) {\r\n\t\tshadow = shadow || Shadow.identity;\r\n\t\tctx.shadowColor = shadow.color;\r\n\t\tctx.shadowOffsetX = shadow.offsetX;\r\n\t\tctx.shadowOffsetY = shadow.offsetY;\r\n\t\tctx.shadowBlur = shadow.blur;\r\n\t};\r\n\t\r\n\t\r\n\t/**\r\n\t * @method _tick\r\n\t * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\r\n\t * @protected\r\n\t **/\r\n\tp._tick = function(evtObj) {\r\n\t\t// because tick can be really performance sensitive, check for listeners before calling dispatchEvent.\r\n\t\tvar ls = this._listeners;\r\n\t\tif (ls && ls[\"tick\"]) {\r\n\t\t\t// reset & reuse the event object to avoid construction / GC costs:\r\n\t\t\tevtObj.target = null;\r\n\t\t\tevtObj.propagationStopped = evtObj.immediatePropagationStopped = false;\r\n\t\t\tthis.dispatchEvent(evtObj);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @method _testHit\r\n\t * @protected\r\n\t * @param {CanvasRenderingContext2D} ctx\r\n\t * @return {Boolean}\r\n\t **/\r\n\tp._testHit = function(ctx) {\r\n\t\ttry {\r\n\t\t\tvar hit = ctx.getImageData(0, 0, 1, 1).data[3] > 1;\r\n\t\t} catch (e) {\r\n\t\t\tif (!DisplayObject.suppressCrossDomainErrors) {\r\n\t\t\t\tthrow \"An error has occurred. This is most likely due to security restrictions on reading canvas pixel data with local or cross-domain images.\";\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn hit;\r\n\t};\r\n\r\n\t/**\r\n\t * @method _applyFilters\r\n\t * @protected\r\n\t **/\r\n\tp._applyFilters = function() {\r\n\t\tif (!this.filters || this.filters.length == 0 || !this.cacheCanvas) { return; }\r\n\t\tvar l = this.filters.length;\r\n\t\tvar ctx = this.cacheCanvas.getContext(\"2d\");\r\n\t\tvar w = this.cacheCanvas.width;\r\n\t\tvar h = this.cacheCanvas.height;\r\n\t\tfor (var i=0; i<l; i++) {\r\n\t\t\tthis.filters[i].applyFilter(ctx, 0, 0, w, h);\r\n\t\t}\r\n\t};\r\n\t\r\n\t/**\r\n\t * @method _getFilterBounds\r\n\t * @return {Rectangle}\r\n\t * @protected\r\n\t **/\r\n\tp._getFilterBounds = function(rect) {\r\n\t\tvar l, filters = this.filters, bounds = this._rectangle.setValues(0,0,0,0);\r\n\t\tif (!filters || !(l=filters.length)) { return bounds; }\r\n\t\t\r\n\t\tfor (var i=0; i<l; i++) {\r\n\t\t\tvar f = this.filters[i];\r\n\t\t\tf.getBounds&&f.getBounds(bounds);\r\n\t\t}\r\n\t\treturn bounds;\r\n\t};\r\n\t\r\n\t/**\r\n\t * @method _getBounds\r\n\t * @param {Matrix2D} matrix\r\n\t * @param {Boolean} ignoreTransform If true, does not apply this object's transform.\r\n\t * @return {Rectangle}\r\n\t * @protected\r\n\t **/\r\n\tp._getBounds = function(matrix, ignoreTransform){\r\n\t\treturn this._transformBounds(this.getBounds(), matrix, ignoreTransform);\r\n\t};\r\n\t\r\n\t/**\r\n\t * @method _transformBounds\r\n\t * @param {Rectangle} bounds\r\n\t * @param {Matrix2D} matrix\r\n\t * @param {Boolean} ignoreTransform\r\n\t * @return {Rectangle}\r\n\t * @protected\r\n\t **/\r\n\tp._transformBounds = function(bounds, matrix, ignoreTransform) {\r\n\t\tif (!bounds) { return bounds; }\r\n\t\tvar x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height, mtx = this._props.matrix;\r\n\t\tmtx = ignoreTransform ? mtx.identity() : this.getMatrix(mtx);\r\n\t\t\r\n\t\tif (x || y) { mtx.appendTransform(0,0,1,1,0,0,0,-x,-y); } // TODO: simplify this.\r\n\t\tif (matrix) { mtx.prependMatrix(matrix); }\r\n\t\t\r\n\t\tvar x_a = width*mtx.a, x_b = width*mtx.b;\r\n\t\tvar y_c = height*mtx.c, y_d = height*mtx.d;\r\n\t\tvar tx = mtx.tx, ty = mtx.ty;\r\n\t\t\r\n\t\tvar minX = tx, maxX = tx, minY = ty, maxY = ty;\r\n\r\n\t\tif ((x = x_a + tx) < minX) { minX = x; } else if (x > maxX) { maxX = x; }\r\n\t\tif ((x = x_a + y_c + tx) < minX) { minX = x; } else if (x > maxX) { maxX = x; }\r\n\t\tif ((x = y_c + tx) < minX) { minX = x; } else if (x > maxX) { maxX = x; }\r\n\t\t\r\n\t\tif ((y = x_b + ty) < minY) { minY = y; } else if (y > maxY) { maxY = y; }\r\n\t\tif ((y = x_b + y_d + ty) < minY) { minY = y; } else if (y > maxY) { maxY = y; }\r\n\t\tif ((y = y_d + ty) < minY) { minY = y; } else if (y > maxY) { maxY = y; }\r\n\t\t\r\n\t\treturn bounds.setValues(minX, minY, maxX-minX, maxY-minY);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Indicates whether the display object has any mouse event listeners or a cursor.\r\n\t * @method _isMouseOpaque\r\n\t * @return {Boolean}\r\n\t * @protected\r\n\t **/\r\n\tp._hasMouseEventListener = function() {\r\n\t\tvar evts = DisplayObject._MOUSE_EVENTS;\r\n\t\tfor (var i= 0, l=evts.length; i<l; i++) {\r\n\t\t\tif (this.hasEventListener(evts[i])) { return true; }\r\n\t\t}\r\n\t\treturn !!this.cursor;\r\n\t};\r\n\r\n\tcreatejs.DisplayObject = createjs.promote(DisplayObject, \"EventDispatcher\");\r\n}());\n\n//##############################################################################\n// Container.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\r\n\r\n(function() {\r\n\t\"use strict\";\r\n\t\r\n\r\n// constructor:\r\n/**\r\n * A Container is a nestable display list that allows you to work with compound display elements. For  example you could\r\n * group arm, leg, torso and head {{#crossLink \"Bitmap\"}}{{/crossLink}} instances together into a Person Container, and\r\n * transform them as a group, while still being able to move the individual parts relative to each other. Children of\r\n * containers have their <code>transform</code> and <code>alpha</code> properties concatenated with their parent\r\n * Container.\r\n *\r\n * For example, a {{#crossLink \"Shape\"}}{{/crossLink}} with x=100 and alpha=0.5, placed in a Container with <code>x=50</code>\r\n * and <code>alpha=0.7</code> will be rendered to the canvas at <code>x=150</code> and <code>alpha=0.35</code>.\r\n * Containers have some overhead, so you generally shouldn't create a Container to hold a single child.\r\n *\r\n * <h4>Example</h4>\r\n *\r\n *      var container = new createjs.Container();\r\n *      container.addChild(bitmapInstance, shapeInstance);\r\n *      container.x = 100;\r\n *\r\n * @class Container\r\n * @extends DisplayObject\r\n * @constructor\r\n **/\r\n\tfunction Container() {\r\n\t\tthis.DisplayObject_constructor();\r\n\t\t\r\n\t// public properties:\r\n\t\t/**\r\n\t\t * The array of children in the display list. You should usually use the child management methods such as\r\n\t\t * {{#crossLink \"Container/addChild\"}}{{/crossLink}}, {{#crossLink \"Container/removeChild\"}}{{/crossLink}},\r\n\t\t * {{#crossLink \"Container/swapChildren\"}}{{/crossLink}}, etc, rather than accessing this directly, but it is\r\n\t\t * included for advanced uses.\r\n\t\t * @property children\r\n\t\t * @type Array\r\n\t\t * @default null\r\n\t\t **/\r\n\t\tthis.children = [];\r\n\t\t\r\n\t\t/**\r\n\t\t * Indicates whether the children of this container are independently enabled for mouse/pointer interaction.\r\n\t\t * If false, the children will be aggregated under the container - for example, a click on a child shape would\r\n\t\t * trigger a click event on the container.\r\n\t\t * @property mouseChildren\r\n\t\t * @type Boolean\r\n\t\t * @default true\r\n\t\t **/\r\n\t\tthis.mouseChildren = true;\r\n\t\t\r\n\t\t/**\r\n\t\t * If false, the tick will not be propagated to children of this Container. This can provide some performance benefits.\r\n\t\t * In addition to preventing the \"tick\" event from being dispatched, it will also prevent tick related updates\r\n\t\t * on some display objects (ex. Sprite & MovieClip frame advancing, DOMElement visibility handling).\r\n\t\t * @property tickChildren\r\n\t\t * @type Boolean\r\n\t\t * @default true\r\n\t\t **/\r\n\t\tthis.tickChildren = true;\r\n\t}\r\n\tvar p = createjs.extend(Container, createjs.DisplayObject);\r\n\t\r\n\t\r\n// getter / setters:\r\n\t/**\r\n\t * Use the {{#crossLink \"Container/numChildren:property\"}}{{/crossLink}} property instead.\r\n\t * @method getNumChildren\r\n\t * @return {Number}\r\n\t * @deprecated\r\n\t **/\r\n\tp.getNumChildren = function() {\r\n\t\treturn this.children.length;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns the number of children in the container.\r\n\t * @property numChildren\r\n\t * @type {Number}\r\n\t * @readonly\r\n\t **/\r\n\ttry {\r\n\t\tObject.defineProperties(p, {\r\n\t\t\tnumChildren: { get: p.getNumChildren }\r\n\t\t});\r\n\t} catch (e) {}\r\n\t\r\n\r\n// public methods:\r\n\t/**\r\n\t * Constructor alias for backwards compatibility. This method will be removed in future versions.\r\n\t * Subclasses should be updated to use {{#crossLink \"Utility Methods/extends\"}}{{/crossLink}}.\r\n\t * @method initialize\r\n\t * @deprecated in favour of `createjs.promote()`\r\n\t **/\r\n\tp.initialize = Container; // TODO: deprecated.\r\n\t\r\n\t/**\r\n\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\r\n\t * This does not account for whether it would be visible within the boundaries of the stage.\r\n\t *\r\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\r\n\t * @method isVisible\r\n\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\r\n\t **/\r\n\tp.isVisible = function() {\r\n\t\tvar hasContent = this.cacheCanvas || this.children.length;\r\n\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\r\n\t};\r\n\r\n\t/**\r\n\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\r\n\t * Returns true if the draw was handled (useful for overriding functionality).\r\n\t *\r\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\r\n\t * @method draw\r\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\r\n\t * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache.\r\n\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\r\n\t * into itself).\r\n\t **/\r\n\tp.draw = function(ctx, ignoreCache) {\r\n\t\tif (this.DisplayObject_draw(ctx, ignoreCache)) { return true; }\r\n\t\t\r\n\t\t// this ensures we don't have issues with display list changes that occur during a draw:\r\n\t\tvar list = this.children.slice();\r\n\t\tfor (var i=0,l=list.length; i<l; i++) {\r\n\t\t\tvar child = list[i];\r\n\t\t\tif (!child.isVisible()) { continue; }\r\n\t\t\t\r\n\t\t\t// draw the child:\r\n\t\t\tctx.save();\r\n\t\t\tchild.updateContext(ctx);\r\n\t\t\tchild.draw(ctx);\r\n\t\t\tctx.restore();\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Adds a child to the top of the display list.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t * \t\tcontainer.addChild(bitmapInstance);\r\n\t *\r\n\t * You can also add multiple children at once:\r\n\t *\r\n\t * \t\tcontainer.addChild(bitmapInstance, shapeInstance, textInstance);\r\n\t *\r\n\t * @method addChild\r\n\t * @param {DisplayObject} child The display object to add.\r\n\t * @return {DisplayObject} The child that was added, or the last child if multiple children were added.\r\n\t **/\r\n\tp.addChild = function(child) {\r\n\t\tif (child == null) { return child; }\r\n\t\tvar l = arguments.length;\r\n\t\tif (l > 1) {\r\n\t\t\tfor (var i=0; i<l; i++) { this.addChild(arguments[i]); }\r\n\t\t\treturn arguments[l-1];\r\n\t\t}\r\n\t\tif (child.parent) { child.parent.removeChild(child); }\r\n\t\tchild.parent = this;\r\n\t\tthis.children.push(child);\r\n\t\tchild.dispatchEvent(\"added\");\r\n\t\treturn child;\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a child to the display list at the specified index, bumping children at equal or greater indexes up one, and\r\n\t * setting its parent to this Container.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      addChildAt(child1, index);\r\n\t *\r\n\t * You can also add multiple children, such as:\r\n\t *\r\n\t *      addChildAt(child1, child2, ..., index);\r\n\t *\r\n\t * The index must be between 0 and numChildren. For example, to add myShape under otherShape in the display list,\r\n\t * you could use:\r\n\t *\r\n\t *      container.addChildAt(myShape, container.getChildIndex(otherShape));\r\n\t *\r\n\t * This would also bump otherShape's index up by one. Fails silently if the index is out of range.\r\n\t *\r\n\t * @method addChildAt\r\n\t * @param {DisplayObject} child The display object to add.\r\n\t * @param {Number} index The index to add the child at.\r\n\t * @return {DisplayObject} Returns the last child that was added, or the last child if multiple children were added.\r\n\t **/\r\n\tp.addChildAt = function(child, index) {\r\n\t\tvar l = arguments.length;\r\n\t\tvar indx = arguments[l-1]; // can't use the same name as the index param or it replaces arguments[1]\r\n\t\tif (indx < 0 || indx > this.children.length) { return arguments[l-2]; }\r\n\t\tif (l > 2) {\r\n\t\t\tfor (var i=0; i<l-1; i++) { this.addChildAt(arguments[i], indx+i); }\r\n\t\t\treturn arguments[l-2];\r\n\t\t}\r\n\t\tif (child.parent) { child.parent.removeChild(child); }\r\n\t\tchild.parent = this;\r\n\t\tthis.children.splice(index, 0, child);\r\n\t\tchild.dispatchEvent(\"added\");\r\n\t\treturn child;\r\n\t};\r\n\r\n\t/**\r\n\t * Removes the specified child from the display list. Note that it is faster to use removeChildAt() if the index is\r\n\t * already known.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      container.removeChild(child);\r\n\t *\r\n\t * You can also remove multiple children:\r\n\t *\r\n\t *      removeChild(child1, child2, ...);\r\n\t *\r\n\t * Returns true if the child (or children) was removed, or false if it was not in the display list.\r\n\t * @method removeChild\r\n\t * @param {DisplayObject} child The child to remove.\r\n\t * @return {Boolean} true if the child (or children) was removed, or false if it was not in the display list.\r\n\t **/\r\n\tp.removeChild = function(child) {\r\n\t\tvar l = arguments.length;\r\n\t\tif (l > 1) {\r\n\t\t\tvar good = true;\r\n\t\t\tfor (var i=0; i<l; i++) { good = good && this.removeChild(arguments[i]); }\r\n\t\t\treturn good;\r\n\t\t}\r\n\t\treturn this.removeChildAt(createjs.indexOf(this.children, child));\r\n\t};\r\n\r\n\t/**\r\n\t * Removes the child at the specified index from the display list, and sets its parent to null.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      container.removeChildAt(2);\r\n\t *\r\n\t * You can also remove multiple children:\r\n\t *\r\n\t *      container.removeChild(2, 7, ...)\r\n\t *\r\n\t * Returns true if the child (or children) was removed, or false if any index was out of range.\r\n\t * @method removeChildAt\r\n\t * @param {Number} index The index of the child to remove.\r\n\t * @return {Boolean} true if the child (or children) was removed, or false if any index was out of range.\r\n\t **/\r\n\tp.removeChildAt = function(index) {\r\n\t\tvar l = arguments.length;\r\n\t\tif (l > 1) {\r\n\t\t\tvar a = [];\r\n\t\t\tfor (var i=0; i<l; i++) { a[i] = arguments[i]; }\r\n\t\t\ta.sort(function(a, b) { return b-a; });\r\n\t\t\tvar good = true;\r\n\t\t\tfor (var i=0; i<l; i++) { good = good && this.removeChildAt(a[i]); }\r\n\t\t\treturn good;\r\n\t\t}\r\n\t\tif (index < 0 || index > this.children.length-1) { return false; }\r\n\t\tvar child = this.children[index];\r\n\t\tif (child) { child.parent = null; }\r\n\t\tthis.children.splice(index, 1);\r\n\t\tchild.dispatchEvent(\"removed\");\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Removes all children from the display list.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t * \tcontainer.removeAllChildren();\r\n\t *\r\n\t * @method removeAllChildren\r\n\t **/\r\n\tp.removeAllChildren = function() {\r\n\t\tvar kids = this.children;\r\n\t\twhile (kids.length) { this.removeChildAt(0); }\r\n\t};\r\n\r\n\t/**\r\n\t * Returns the child at the specified index.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      container.getChildAt(2);\r\n\t *\r\n\t * @method getChildAt\r\n\t * @param {Number} index The index of the child to return.\r\n\t * @return {DisplayObject} The child at the specified index. Returns null if there is no child at the index.\r\n\t **/\r\n\tp.getChildAt = function(index) {\r\n\t\treturn this.children[index];\r\n\t};\r\n\t\r\n\t/**\r\n\t * Returns the child with the specified name.\r\n\t * @method getChildByName\r\n\t * @param {String} name The name of the child to return.\r\n\t * @return {DisplayObject} The child with the specified name.\r\n\t **/\r\n\tp.getChildByName = function(name) {\r\n\t\tvar kids = this.children;\r\n\t\tfor (var i=0,l=kids.length;i<l;i++) {\r\n\t\t\tif(kids[i].name == name) { return kids[i]; }\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n\t * Performs an array sort operation on the child list.\r\n\t *\r\n\t * <h4>Example: Display children with a higher y in front.</h4>\r\n\t * \r\n\t *      var sortFunction = function(obj1, obj2, options) {\r\n\t *          if (obj1.y > obj2.y) { return 1; }\r\n\t *          if (obj1.y < obj2.y) { return -1; }\r\n\t *          return 0;\r\n\t *      }\r\n\t *      container.sortChildren(sortFunction);\r\n\t *\r\n\t * @method sortChildren\r\n\t * @param {Function} sortFunction the function to use to sort the child list. See JavaScript's <code>Array.sort</code>\r\n\t * documentation for details.\r\n\t **/\r\n\tp.sortChildren = function(sortFunction) {\r\n\t\tthis.children.sort(sortFunction);\r\n\t};\r\n\r\n\t/**\r\n\t * Returns the index of the specified child in the display list, or -1 if it is not in the display list.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      var index = container.getChildIndex(child);\r\n\t *\r\n\t * @method getChildIndex\r\n\t * @param {DisplayObject} child The child to return the index of.\r\n\t * @return {Number} The index of the specified child. -1 if the child is not found.\r\n\t **/\r\n\tp.getChildIndex = function(child) {\r\n\t\treturn createjs.indexOf(this.children, child);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Swaps the children at the specified indexes. Fails silently if either index is out of range.\r\n\t * @method swapChildrenAt\r\n\t * @param {Number} index1\r\n\t * @param {Number} index2\r\n\t **/\r\n\tp.swapChildrenAt = function(index1, index2) {\r\n\t\tvar kids = this.children;\r\n\t\tvar o1 = kids[index1];\r\n\t\tvar o2 = kids[index2];\r\n\t\tif (!o1 || !o2) { return; }\r\n\t\tkids[index1] = o2;\r\n\t\tkids[index2] = o1;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Swaps the specified children's depth in the display list. Fails silently if either child is not a child of this\r\n\t * Container.\r\n\t * @method swapChildren\r\n\t * @param {DisplayObject} child1\r\n\t * @param {DisplayObject} child2\r\n\t **/\r\n\tp.swapChildren = function(child1, child2) {\r\n\t\tvar kids = this.children;\r\n\t\tvar index1,index2;\r\n\t\tfor (var i=0,l=kids.length;i<l;i++) {\r\n\t\t\tif (kids[i] == child1) { index1 = i; }\r\n\t\t\tif (kids[i] == child2) { index2 = i; }\r\n\t\t\tif (index1 != null && index2 != null) { break; }\r\n\t\t}\r\n\t\tif (i==l) { return; } // TODO: throw error?\r\n\t\tkids[index1] = child2;\r\n\t\tkids[index2] = child1;\r\n\t};\r\n\t\r\n\t/**\r\n\t * Changes the depth of the specified child. Fails silently if the child is not a child of this container, or the index is out of range.\r\n\t * @param {DisplayObject} child\r\n\t * @param {Number} index  \r\n\t * @method setChildIndex\r\n\t **/\r\n\tp.setChildIndex = function(child, index) {\r\n\t\tvar kids = this.children, l=kids.length;\r\n\t\tif (child.parent != this || index < 0 || index >= l) { return; }\r\n\t\tfor (var i=0;i<l;i++) {\r\n\t\t\tif (kids[i] == child) { break; }\r\n\t\t}\r\n\t\tif (i==l || i == index) { return; }\r\n\t\tkids.splice(i,1);\r\n\t\tkids.splice(index,0,child);\r\n\t};\r\n\r\n\t/**\r\n\t * Returns true if the specified display object either is this container or is a descendent (child, grandchild, etc)\r\n\t * of this container.\r\n\t * @method contains\r\n\t * @param {DisplayObject} child The DisplayObject to be checked.\r\n\t * @return {Boolean} true if the specified display object either is this container or is a descendent.\r\n\t **/\r\n\tp.contains = function(child) {\r\n\t\twhile (child) {\r\n\t\t\tif (child == this) { return true; }\r\n\t\t\tchild = child.parent;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * Tests whether the display object intersects the specified local point (ie. draws a pixel with alpha > 0 at the\r\n\t * specified position). This ignores the alpha, shadow and compositeOperation of the display object, and all\r\n\t * transform properties including regX/Y.\r\n\t * @method hitTest\r\n\t * @param {Number} x The x position to check in the display object's local coordinates.\r\n\t * @param {Number} y The y position to check in the display object's local coordinates.\r\n\t * @return {Boolean} A Boolean indicating whether there is a visible section of a DisplayObject that overlaps the specified\r\n\t * coordinates.\r\n\t **/\r\n\tp.hitTest = function(x, y) {\r\n\t\t// TODO: optimize to use the fast cache check where possible.\r\n\t\treturn (this.getObjectUnderPoint(x, y) != null);\r\n\t};\r\n\r\n\t/**\r\n\t * Returns an array of all display objects under the specified coordinates that are in this container's display\r\n\t * list. This routine ignores any display objects with {{#crossLink \"DisplayObject/mouseEnabled:property\"}}{{/crossLink}}\r\n\t * set to `false`. The array will be sorted in order of visual depth, with the top-most display object at index 0.\r\n\t * This uses shape based hit detection, and can be an expensive operation to run, so it is best to use it carefully.\r\n\t * For example, if testing for objects under the mouse, test on tick (instead of on {{#crossLink \"DisplayObject/mousemove:event\"}}{{/crossLink}}),\r\n\t * and only if the mouse's position has changed.\r\n\t * \r\n\t * <ul>\r\n\t *     <li>By default (mode=0) this method evaluates all display objects.</li>\r\n\t *     <li>By setting the `mode` parameter to `1`, the {{#crossLink \"DisplayObject/mouseEnabled:property\"}}{{/crossLink}}\r\n\t * \t\tand {{#crossLink \"mouseChildren:property\"}}{{/crossLink}} properties will be respected.</li>\r\n\t * \t   <li>Setting the `mode` to `2` additionally excludes display objects that do not have active mouse event\r\n\t * \t   \tlisteners or a {{#crossLink \"DisplayObject:cursor:property\"}}{{/crossLink}} property. That is, only objects\r\n\t * \t   \tthat would normally intercept mouse interaction will be included. This can significantly improve performance\r\n\t * \t   \tin some cases by reducing the number of display objects that need to be tested.</li>\r\n\t * </li>\r\n\t * \r\n\t * This method accounts for both {{#crossLink \"DisplayObject/hitArea:property\"}}{{/crossLink}} and {{#crossLink \"DisplayObject/mask:property\"}}{{/crossLink}}.\r\n\t * @method getObjectsUnderPoint\r\n\t * @param {Number} x The x position in the container to test.\r\n\t * @param {Number} y The y position in the container to test.\r\n\t * @param {Number} [mode=0] The mode to use to determine which display objects to include. 0-all, 1-respect mouseEnabled/mouseChildren, 2-only mouse opaque objects.\r\n\t * @return {Array} An Array of DisplayObjects under the specified coordinates.\r\n\t **/\r\n\tp.getObjectsUnderPoint = function(x, y, mode) {\r\n\t\tvar arr = [];\r\n\t\tvar pt = this.localToGlobal(x, y);\r\n\t\tthis._getObjectsUnderPoint(pt.x, pt.y, arr, mode>0, mode==1);\r\n\t\treturn arr;\r\n\t};\r\n\r\n\t/**\r\n\t * Similar to {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}}, but returns only the top-most display\r\n\t * object. This runs significantly faster than <code>getObjectsUnderPoint()</code>, but is still potentially an expensive\r\n\t * operation. See {{#crossLink \"Container/getObjectsUnderPoint\"}}{{/crossLink}} for more information.\r\n\t * @method getObjectUnderPoint\r\n\t * @param {Number} x The x position in the container to test.\r\n\t * @param {Number} y The y position in the container to test.\r\n\t * @param {Number} mode The mode to use to determine which display objects to include.  0-all, 1-respect mouseEnabled/mouseChildren, 2-only mouse opaque objects.\r\n\t * @return {DisplayObject} The top-most display object under the specified coordinates.\r\n\t **/\r\n\tp.getObjectUnderPoint = function(x, y, mode) {\r\n\t\tvar pt = this.localToGlobal(x, y);\r\n\t\treturn this._getObjectsUnderPoint(pt.x, pt.y, null, mode>0, mode==1);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Docced in superclass.\r\n\t */\r\n\tp.getBounds = function() {\r\n\t\treturn this._getBounds(null, true);\r\n\t};\r\n\t\r\n\t\r\n\t/**\r\n\t * Docced in superclass.\r\n\t */\r\n\tp.getTransformedBounds = function() {\r\n\t\treturn this._getBounds();\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a clone of this Container. Some properties that are specific to this instance's current context are\r\n\t * reverted to their defaults (for example .parent).\r\n\t * @method clone\r\n\t * @param {Boolean} [recursive=false] If true, all of the descendants of this container will be cloned recursively. If false, the\r\n\t * properties of the container will be cloned, but the new instance will not have any children.\r\n\t * @return {Container} A clone of the current Container instance.\r\n\t **/\r\n\tp.clone = function(recursive) {\r\n\t\tvar o = this._cloneProps(new Container());\r\n\t\tif (recursive) { this._cloneChildren(o); }\r\n\t\treturn o;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a string representation of this object.\r\n\t * @method toString\r\n\t * @return {String} a string representation of the instance.\r\n\t **/\r\n\tp.toString = function() {\r\n\t\treturn \"[Container (name=\"+  this.name +\")]\";\r\n\t};\r\n\r\n\r\n// private methods:\r\n\t/**\r\n\t * @method _tick\r\n\t * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\r\n\t * @protected\r\n\t **/\r\n\tp._tick = function(evtObj) {\r\n\t\tif (this.tickChildren) {\r\n\t\t\tfor (var i=this.children.length-1; i>=0; i--) {\r\n\t\t\t\tvar child = this.children[i];\r\n\t\t\t\tif (child.tickEnabled && child._tick) { child._tick(evtObj); }\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.DisplayObject__tick(evtObj);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Recursively clones all children of this container, and adds them to the target container.\r\n\t * @method cloneChildren\r\n\t * @protected\r\n\t * @param {Container} o The target container.\r\n\t **/\r\n\tp._cloneChildren = function(o) {\r\n\t\tif (o.children.length) { o.removeAllChildren(); }\r\n\t\tvar arr = o.children;\r\n\t\tfor (var i=0, l=this.children.length; i<l; i++) {\r\n\t\t\tvar clone = this.children[i].clone(true);\r\n\t\t\tclone.parent = o;\r\n\t\t\tarr.push(clone);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @method _getObjectsUnderPoint\r\n\t * @param {Number} x\r\n\t * @param {Number} y\r\n\t * @param {Array} arr\r\n\t * @param {Boolean} mouse If true, it will respect mouse interaction properties like mouseEnabled, mouseChildren, and active listeners.\r\n\t * @param {Boolean} activeListener If true, there is an active mouse event listener on a parent object.\r\n\t * @param {Number} currentDepth Indicates the current depth of the search.\r\n\t * @return {DisplayObject}\r\n\t * @protected\r\n\t **/\r\n\tp._getObjectsUnderPoint = function(x, y, arr, mouse, activeListener, currentDepth) {\r\n\t\tcurrentDepth = currentDepth || 0;\r\n\t\tif (!currentDepth && !this._testMask(this, x, y)) { return null; }\r\n\t\tvar mtx, ctx = createjs.DisplayObject._hitTestContext;\r\n\t\tactiveListener = activeListener || (mouse&&this._hasMouseEventListener());\r\n\r\n\t\t// draw children one at a time, and check if we get a hit:\r\n\t\tvar children = this.children, l = children.length;\r\n\t\tfor (var i=l-1; i>=0; i--) {\r\n\t\t\tvar child = children[i];\r\n\t\t\tvar hitArea = child.hitArea;\r\n\t\t\tif (!child.visible || (!hitArea && !child.isVisible()) || (mouse && !child.mouseEnabled)) { continue; }\r\n\t\t\tif (!hitArea && !this._testMask(child, x, y)) { continue; }\r\n\t\t\t\r\n\t\t\t// if a child container has a hitArea then we only need to check its hitArea, so we can treat it as a normal DO:\r\n\t\t\tif (!hitArea && child instanceof Container) {\r\n\t\t\t\tvar result = child._getObjectsUnderPoint(x, y, arr, mouse, activeListener, currentDepth+1);\r\n\t\t\t\tif (!arr && result) { return (mouse && !this.mouseChildren) ? this : result; }\r\n\t\t\t} else {\r\n\t\t\t\tif (mouse && !activeListener && !child._hasMouseEventListener()) { continue; }\r\n\t\t\t\t\r\n\t\t\t\t// TODO: can we pass displayProps forward, to avoid having to calculate this backwards every time? It's kind of a mixed bag. When we're only hunting for DOs with event listeners, it may not make sense.\r\n\t\t\t\tvar props = child.getConcatenatedDisplayProps(child._props);\r\n\t\t\t\tmtx = props.matrix;\r\n\t\t\t\t\r\n\t\t\t\tif (hitArea) {\r\n\t\t\t\t\tmtx.appendMatrix(hitArea.getMatrix(hitArea._props.matrix));\r\n\t\t\t\t\tprops.alpha = hitArea.alpha;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tctx.globalAlpha = props.alpha;\r\n\t\t\t\tctx.setTransform(mtx.a,  mtx.b, mtx.c, mtx.d, mtx.tx-x, mtx.ty-y);\r\n\t\t\t\t(hitArea||child).draw(ctx);\r\n\t\t\t\tif (!this._testHit(ctx)) { continue; }\r\n\t\t\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\r\n\t\t\t\tctx.clearRect(0, 0, 2, 2);\r\n\t\t\t\tif (arr) { arr.push(child); }\r\n\t\t\t\telse { return (mouse && !this.mouseChildren) ? this : child; }\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\t\r\n\t/**\r\n\t * @method _testMask\r\n\t * @param {DisplayObject} target\r\n\t * @param {Number} x\r\n\t * @param {Number} y\r\n\t * @return {Boolean} Indicates whether the x/y is within the masked region.\r\n\t * @protected\r\n\t **/\r\n\tp._testMask = function(target, x, y) {\r\n\t\tvar mask = target.mask;\r\n\t\tif (!mask || !mask.graphics || mask.graphics.isEmpty()) { return true; }\r\n\t\t\r\n\t\tvar mtx = this._props.matrix, parent = target.parent;\r\n\t\tmtx = parent ? parent.getConcatenatedMatrix(mtx) : mtx.identity();\r\n\t\tmtx = mask.getMatrix(mask._props.matrix).prependMatrix(mtx);\r\n\t\t\r\n\t\tvar ctx = createjs.DisplayObject._hitTestContext;\r\n\t\tctx.setTransform(mtx.a,  mtx.b, mtx.c, mtx.d, mtx.tx-x, mtx.ty-y);\r\n\t\t\r\n\t\t// draw the mask as a solid fill:\r\n\t\tmask.graphics.drawAsPath(ctx);\r\n\t\tctx.fillStyle = \"#000\";\r\n\t\tctx.fill();\r\n\t\t\r\n\t\tif (!this._testHit(ctx)) { return false; }\r\n\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\r\n\t\tctx.clearRect(0, 0, 2, 2);\r\n\t\t\r\n\t\treturn true;\r\n\t};\r\n\t\r\n\t/**\r\n\t * @method _getBounds\r\n\t * @param {Matrix2D} matrix\r\n\t * @param {Boolean} ignoreTransform If true, does not apply this object's transform.\r\n\t * @return {Rectangle}\r\n\t * @protected\r\n\t **/\r\n\tp._getBounds = function(matrix, ignoreTransform) {\r\n\t\tvar bounds = this.DisplayObject_getBounds();\r\n\t\tif (bounds) { return this._transformBounds(bounds, matrix, ignoreTransform); }\r\n\t\t\r\n\t\tvar mtx = this._props.matrix;\r\n\t\tmtx = ignoreTransform ? mtx.identity() : this.getMatrix(mtx);\r\n\t\tif (matrix) { mtx.prependMatrix(matrix); }\r\n\t\t\r\n\t\tvar l = this.children.length, rect=null;\r\n\t\tfor (var i=0; i<l; i++) {\r\n\t\t\tvar child = this.children[i];\r\n\t\t\tif (!child.visible || !(bounds = child._getBounds(mtx))) { continue; }\r\n\t\t\tif (rect) { rect.extend(bounds.x, bounds.y, bounds.width, bounds.height); }\r\n\t\t\telse { rect = bounds.clone(); }\r\n\t\t}\r\n\t\treturn rect;\r\n\t};\r\n\r\n\r\n\tcreatejs.Container = createjs.promote(Container, \"DisplayObject\");\r\n}());\n\n//##############################################################################\n// Stage.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * A stage is the root level {{#crossLink \"Container\"}}{{/crossLink}} for a display list. Each time its {{#crossLink \"Stage/tick\"}}{{/crossLink}}\n\t * method is called, it will render its display list to its target canvas.\n\t *\n\t * <h4>Example</h4>\n\t * This example creates a stage, adds a child to it, then uses {{#crossLink \"Ticker\"}}{{/crossLink}} to update the child\n\t * and redraw the stage using {{#crossLink \"Stage/update\"}}{{/crossLink}}.\n\t *\n\t *      var stage = new createjs.Stage(\"canvasElementId\");\n\t *      var image = new createjs.Bitmap(\"imagePath.png\");\n\t *      stage.addChild(image);\n\t *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n\t *      function handleTick(event) {\n\t *          image.x += 10;\n\t *          stage.update();\n\t *      }\n\t *\n\t * @class Stage\n\t * @extends Container\n\t * @constructor\n\t * @param {HTMLCanvasElement | String | Object} canvas A canvas object that the Stage will render to, or the string id\n\t * of a canvas object in the current document.\n\t **/\n\tfunction Stage(canvas) {\n\t\tthis.Container_constructor();\n\t\n\t\n\t// public properties:\n\t\t/**\n\t\t * Indicates whether the stage should automatically clear the canvas before each render. You can set this to <code>false</code>\n\t\t * to manually control clearing (for generative art, or when pointing multiple stages at the same canvas for\n\t\t * example).\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      var stage = new createjs.Stage(\"canvasId\");\n\t\t *      stage.autoClear = false;\n\t\t *\n\t\t * @property autoClear\n\t\t * @type Boolean\n\t\t * @default true\n\t\t **/\n\t\tthis.autoClear = true;\n\t\n\t\t/**\n\t\t * The canvas the stage will render to. Multiple stages can share a single canvas, but you must disable autoClear for all but the\n\t\t * first stage that will be ticked (or they will clear each other's render).\n\t\t *\n\t\t * When changing the canvas property you must disable the events on the old canvas, and enable events on the\n\t\t * new canvas or mouse events will not work as expected. For example:\n\t\t *\n\t\t *      myStage.enableDOMEvents(false);\n\t\t *      myStage.canvas = anotherCanvas;\n\t\t *      myStage.enableDOMEvents(true);\n\t\t *\n\t\t * @property canvas\n\t\t * @type HTMLCanvasElement | Object\n\t\t **/\n\t\tthis.canvas = (typeof canvas == \"string\") ? document.getElementById(canvas) : canvas;\n\t\n\t\t/**\n\t\t * The current mouse X position on the canvas. If the mouse leaves the canvas, this will indicate the most recent\n\t\t * position over the canvas, and mouseInBounds will be set to false.\n\t\t * @property mouseX\n\t\t * @type Number\n\t\t * @readonly\n\t\t **/\n\t\tthis.mouseX = 0;\n\t\n\t\t/**\n\t\t * The current mouse Y position on the canvas. If the mouse leaves the canvas, this will indicate the most recent\n\t\t * position over the canvas, and mouseInBounds will be set to false.\n\t\t * @property mouseY\n\t\t * @type Number\n\t\t * @readonly\n\t\t **/\n\t\tthis.mouseY = 0;\n\t\n\t\t/**\n\t\t * Specifies the area of the stage to affect when calling update. This can be use to selectively\n\t\t * re-draw specific regions of the canvas. If null, the whole canvas area is drawn.\n\t\t * @property drawRect\n\t\t * @type {Rectangle}\n\t\t */\n\t\tthis.drawRect = null;\n\t\n\t\t/**\n\t\t * Indicates whether display objects should be rendered on whole pixels. You can set the\n\t\t * {{#crossLink \"DisplayObject/snapToPixel\"}}{{/crossLink}} property of\n\t\t * display objects to false to enable/disable this behaviour on a per instance basis.\n\t\t * @property snapToPixelEnabled\n\t\t * @type Boolean\n\t\t * @default false\n\t\t **/\n\t\tthis.snapToPixelEnabled = false;\n\t\n\t\t/**\n\t\t * Indicates whether the mouse is currently within the bounds of the canvas.\n\t\t * @property mouseInBounds\n\t\t * @type Boolean\n\t\t * @default false\n\t\t **/\n\t\tthis.mouseInBounds = false;\n\t\n\t\t/**\n\t\t * If true, tick callbacks will be called on all display objects on the stage prior to rendering to the canvas.\n\t\t * @property tickOnUpdate\n\t\t * @type Boolean\n\t\t * @default true\n\t\t **/\n\t\tthis.tickOnUpdate = true;\n\t\n\t\t/**\n\t\t * If true, mouse move events will continue to be called when the mouse leaves the target canvas. See\n\t\t * {{#crossLink \"Stage/mouseInBounds:property\"}}{{/crossLink}}, and {{#crossLink \"MouseEvent\"}}{{/crossLink}}\n\t\t * x/y/rawX/rawY.\n\t\t * @property mouseMoveOutside\n\t\t * @type Boolean\n\t\t * @default false\n\t\t **/\n\t\tthis.mouseMoveOutside = false;\n\t\t\n\t\t\n\t\t/**\n\t\t * Prevents selection of other elements in the html page if the user clicks and drags, or double clicks on the canvas.\n\t\t * This works by calling `preventDefault()` on any mousedown events (or touch equivalent) originating on the canvas.\n\t\t * @property preventSelection\n\t\t * @type Boolean\n\t\t * @default true\n\t\t **/\n\t\tthis.preventSelection = true;\n\t\n\t\t/**\n\t\t * The hitArea property is not supported for Stage.\n\t\t * @property hitArea\n\t\t * @type {DisplayObject}\n\t\t * @default null\n\t\t */\n\t\t \n\t\t \n\t// private properties:\n\t\t/**\n\t\t * Holds objects with data for each active pointer id. Each object has the following properties:\n\t\t * x, y, event, target, overTarget, overX, overY, inBounds, posEvtObj (native event that last updated position)\n\t\t * @property _pointerData\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._pointerData = {};\n\t\n\t\t/**\n\t\t * Number of active pointers.\n\t\t * @property _pointerCount\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._pointerCount = 0;\n\t\n\t\t/**\n\t\t * The ID of the primary pointer.\n\t\t * @property _primaryPointerID\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._primaryPointerID = null;\n\t\n\t\t/**\n\t\t * @property _mouseOverIntervalID\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._mouseOverIntervalID = null;\n\t\t\n\t\t/**\n\t\t * @property _nextStage\n\t\t * @protected\n\t\t * @type Stage\n\t\t **/\n\t\tthis._nextStage = null;\n\t\t\n\t\t/**\n\t\t * @property _prevStage\n\t\t * @protected\n\t\t * @type Stage\n\t\t **/\n\t\tthis._prevStage = null;\n\t\t\n\t\t\n\t// initialize:\n\t\tthis.enableDOMEvents(true);\n\t}\n\tvar p = createjs.extend(Stage, createjs.Container);\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\n// events:\n\t/**\n\t * Dispatched when the user moves the mouse over the canvas.\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t * @event stagemousemove\n\t * @since 0.6.0\n\t */\n\n\t/**\n\t * Dispatched when the user presses their left mouse button on the canvas. See the {{#crossLink \"MouseEvent\"}}{{/crossLink}}\n\t * class for a listing of event properties.\n\t * @event stagemousedown\n\t * @since 0.6.0\n\t */\n\n\t/**\n\t * Dispatched when the user the user presses somewhere on the stage, then releases the mouse button anywhere that the page can detect it (this varies slightly between browsers).\n\t * You can use {{#crossLink \"Stage/mouseInBounds:property\"}}{{/crossLink}} to check whether the mouse is currently within the stage bounds.\n\t * See the {{#crossLink \"MouseEvent\"}}{{/crossLink}} class for a listing of event properties.\n\t * @event stagemouseup\n\t * @since 0.6.0\n\t */\n\n\t/**\n\t * Dispatched when the mouse moves from within the canvas area (mouseInBounds == true) to outside it (mouseInBounds == false).\n\t * This is currently only dispatched for mouse input (not touch). See the {{#crossLink \"MouseEvent\"}}{{/crossLink}}\n\t * class for a listing of event properties.\n\t * @event mouseleave\n\t * @since 0.7.0\n\t */\n\n\t/**\n\t * Dispatched when the mouse moves into the canvas area (mouseInBounds == false) from outside it (mouseInBounds == true).\n\t * This is currently only dispatched for mouse input (not touch). See the {{#crossLink \"MouseEvent\"}}{{/crossLink}}\n\t * class for a listing of event properties.\n\t * @event mouseenter\n\t * @since 0.7.0\n\t */\n\t \n\t/**\n\t * Dispatched each update immediately before the tick event is propagated through the display list.\n\t * You can call preventDefault on the event object to cancel propagating the tick event.\n\t * @event tickstart\n\t * @since 0.7.0\n\t */\n\t \n\t/**\n\t * Dispatched each update immediately after the tick event is propagated through the display list. Does not fire if\n\t * tickOnUpdate is false. Precedes the \"drawstart\" event.\n\t * @event tickend\n\t * @since 0.7.0\n\t */\n\t \n\t/**\n\t * Dispatched each update immediately before the canvas is cleared and the display list is drawn to it.\n\t * You can call preventDefault on the event object to cancel the draw.\n\t * @event drawstart\n\t * @since 0.7.0\n\t */\n\t \n\t/**\n\t * Dispatched each update immediately after the display list is drawn to the canvas and the canvas context is restored.\n\t * @event drawend\n\t * @since 0.7.0\n\t */\n\n\t \n// getter / setters:\n\t/**\n\t * Specifies a target stage that will have mouse / touch interactions relayed to it after this stage handles them.\n\t * This can be useful in cases where you have multiple layered canvases and want user interactions\n\t * events to pass through. For example, this would relay mouse events from topStage to bottomStage:\n\t *\n\t *      topStage.nextStage = bottomStage;\n\t *\n\t * To disable relaying, set nextStage to null.\n\t * \n\t * MouseOver, MouseOut, RollOver, and RollOut interactions are also passed through using the mouse over settings\n\t * of the top-most stage, but are only processed if the target stage has mouse over interactions enabled.\n\t * Considerations when using roll over in relay targets:<OL>\n\t * <LI> The top-most (first) stage must have mouse over interactions enabled (via enableMouseOver)</LI>\n\t * <LI> All stages that wish to participate in mouse over interaction must enable them via enableMouseOver</LI>\n\t * <LI> All relay targets will share the frequency value of the top-most stage</LI>\n\t * </OL>\n\t * To illustrate, in this example the targetStage would process mouse over interactions at 10hz (despite passing\n\t * 30 as it's desired frequency):\n\t * \ttopStage.nextStage = targetStage;\n\t * \ttopStage.enableMouseOver(10);\n\t * \ttargetStage.enableMouseOver(30);\n\t * \n\t * If the target stage's canvas is completely covered by this stage's canvas, you may also want to disable its\n\t * DOM events using:\n\t * \n\t *\ttargetStage.enableDOMEvents(false);\n\t * \n\t * @property nextStage\n\t * @type {Stage}\n\t **/\n\tp._get_nextStage = function() {\n\t\treturn this._nextStage;\n\t};\n\tp._set_nextStage = function(value) {\n\t\tif (this._nextStage) { this._nextStage._prevStage = null; }\n\t\tif (value) { value._prevStage = this; }\n\t\tthis._nextStage = value;\n\t};\n\t\n\ttry {\n\t\tObject.defineProperties(p, {\n\t\t\tnextStage: { get: p._get_nextStage, set: p._set_nextStage }\n\t\t});\n\t} catch (e) {} // TODO: use Log\n\n\n// public methods:\n\t/**\n\t * Each time the update method is called, the stage will call {{#crossLink \"Stage/tick\"}}{{/crossLink}}\n\t * unless {{#crossLink \"Stage/tickOnUpdate:property\"}}{{/crossLink}} is set to false,\n\t * and then render the display list to the canvas.\n\t *\n\t * @method update\n\t * @param {Object} [props] Props object to pass to `tick()`. Should usually be a {{#crossLink \"Ticker\"}}{{/crossLink}} event object, or similar object with a delta property.\n\t **/\n\tp.update = function(props) {\n\t\tif (!this.canvas) { return; }\n\t\tif (this.tickOnUpdate) { this.tick(props); }\n\t\tif (this.dispatchEvent(\"drawstart\", false, true) === false) { return; }\n\t\tcreatejs.DisplayObject._snapToPixelEnabled = this.snapToPixelEnabled;\n\t\tvar r = this.drawRect, ctx = this.canvas.getContext(\"2d\");\n\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\t\tif (this.autoClear) {\n\t\t\tif (r) { ctx.clearRect(r.x, r.y, r.width, r.height); }\n\t\t\telse { ctx.clearRect(0, 0, this.canvas.width+1, this.canvas.height+1); }\n\t\t}\n\t\tctx.save();\n\t\tif (this.drawRect) {\n\t\t\tctx.beginPath();\n\t\t\tctx.rect(r.x, r.y, r.width, r.height);\n\t\t\tctx.clip();\n\t\t}\n\t\tthis.updateContext(ctx);\n\t\tthis.draw(ctx, false);\n\t\tctx.restore();\n\t\tthis.dispatchEvent(\"drawend\");\n\t};\n\t\n\t/**\n\t * Propagates a tick event through the display list. This is automatically called by {{#crossLink \"Stage/update\"}}{{/crossLink}}\n\t * unless {{#crossLink \"Stage/tickOnUpdate:property\"}}{{/crossLink}} is set to false.\n\t *\n\t * If a props object is passed to `tick()`, then all of its properties will be copied to the event object that is\n\t * propagated to listeners.\n\t *\n\t * Some time-based features in EaselJS (for example {{#crossLink \"Sprite/framerate\"}}{{/crossLink}} require that\n\t * a {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}} event object (or equivalent object with a delta property) be\n\t * passed as the `props` parameter to `tick()`. For example:\n\t *\n\t * \tTicker.on(\"tick\", handleTick);\n\t * \tfunction handleTick(evtObj) {\n\t * \t\t// clone the event object from Ticker, and add some custom data to it:\n\t * \t\tvar evt = evtObj.clone().set({greeting:\"hello\", name:\"world\"});\n\t * \t\t\n\t * \t\t// pass it to stage.update():\n\t * \t\tmyStage.update(evt); // subsequently calls tick() with the same param\n\t * \t}\n\t * \t\n\t * \t// ...\n\t * \tmyDisplayObject.on(\"tick\", handleDisplayObjectTick);\n\t * \tfunction handleDisplayObjectTick(evt) {\n\t * \t\tconsole.log(evt.delta); // the delta property from the Ticker tick event object\n\t * \t\tconsole.log(evt.greeting, evt.name); // custom data: \"hello world\"\n\t * \t}\n\t * \n\t * @method tick\n\t * @param {Object} [props] An object with properties that should be copied to the event object. Should usually be a Ticker event object, or similar object with a delta property.\n\t **/\n\tp.tick = function(props) {\n\t\tif (!this.tickEnabled || this.dispatchEvent(\"tickstart\", false, true) === false) { return; }\n\t\tvar evtObj = new createjs.Event(\"tick\");\n\t\tif (props) {\n\t\t\tfor (var n in props) {\n\t\t\t\tif (props.hasOwnProperty(n)) { evtObj[n] = props[n]; }\n\t\t\t}\n\t\t}\n\t\tthis._tick(evtObj);\n\t\tthis.dispatchEvent(\"tickend\");\n\t};\n\n\t/**\n\t * Default event handler that calls the Stage {{#crossLink \"Stage/update\"}}{{/crossLink}} method when a {{#crossLink \"DisplayObject/tick:event\"}}{{/crossLink}}\n\t * event is received. This allows you to register a Stage instance as a event listener on {{#crossLink \"Ticker\"}}{{/crossLink}}\n\t * directly, using:\n\t *\n\t *      Ticker.addEventListener(\"tick\", myStage\");\n\t *\n\t * Note that if you subscribe to ticks using this pattern, then the tick event object will be passed through to\n\t * display object tick handlers, instead of <code>delta</code> and <code>paused</code> parameters.\n\t * @property handleEvent\n\t * @type Function\n\t **/\n\tp.handleEvent = function(evt) {\n\t\tif (evt.type == \"tick\") { this.update(evt); }\n\t};\n\n\t/**\n\t * Clears the target canvas. Useful if {{#crossLink \"Stage/autoClear:property\"}}{{/crossLink}} is set to `false`.\n\t * @method clear\n\t **/\n\tp.clear = function() {\n\t\tif (!this.canvas) { return; }\n\t\tvar ctx = this.canvas.getContext(\"2d\");\n\t\tctx.setTransform(1, 0, 0, 1, 0, 0);\n\t\tctx.clearRect(0, 0, this.canvas.width+1, this.canvas.height+1);\n\t};\n\n\t/**\n\t * Returns a data url that contains a Base64-encoded image of the contents of the stage. The returned data url can\n\t * be specified as the src value of an image element.\n\t * @method toDataURL\n\t * @param {String} [backgroundColor] The background color to be used for the generated image. Any valid CSS color\n\t * value is allowed. The default value is a transparent background.\n\t * @param {String} [mimeType=\"image/png\"] The MIME type of the image format to be create. The default is \"image/png\". If an unknown MIME type\n\t * is passed in, or if the browser does not support the specified MIME type, the default value will be used.\n\t * @return {String} a Base64 encoded image.\n\t **/\n\tp.toDataURL = function(backgroundColor, mimeType) {\n\t\tvar data, ctx = this.canvas.getContext('2d'), w = this.canvas.width, h = this.canvas.height;\n\n\t\tif (backgroundColor) {\n\t\t\tdata = ctx.getImageData(0, 0, w, h);\n\t\t\tvar compositeOperation = ctx.globalCompositeOperation;\n\t\t\tctx.globalCompositeOperation = \"destination-over\";\n\t\t\t\n\t\t\tctx.fillStyle = backgroundColor;\n\t\t\tctx.fillRect(0, 0, w, h);\n\t\t}\n\n\t\tvar dataURL = this.canvas.toDataURL(mimeType||\"image/png\");\n\n\t\tif(backgroundColor) {\n\t\t\tctx.putImageData(data, 0, 0);\n\t\t\tctx.globalCompositeOperation = compositeOperation;\n\t\t}\n\n\t\treturn dataURL;\n\t};\n\n\t/**\n\t * Enables or disables (by passing a frequency of 0) mouse over ({{#crossLink \"DisplayObject/mouseover:event\"}}{{/crossLink}}\n\t * and {{#crossLink \"DisplayObject/mouseout:event\"}}{{/crossLink}}) and roll over events ({{#crossLink \"DisplayObject/rollover:event\"}}{{/crossLink}}\n\t * and {{#crossLink \"DisplayObject/rollout:event\"}}{{/crossLink}}) for this stage's display list. These events can\n\t * be expensive to generate, so they are disabled by default. The frequency of the events can be controlled\n\t * independently of mouse move events via the optional `frequency` parameter.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var stage = new createjs.Stage(\"canvasId\");\n\t *      stage.enableMouseOver(10); // 10 updates per second\n\t *\n\t * @method enableMouseOver\n\t * @param {Number} [frequency=20] Optional param specifying the maximum number of times per second to broadcast\n\t * mouse over/out events. Set to 0 to disable mouse over events completely. Maximum is 50. A lower frequency is less\n\t * responsive, but uses less CPU.\n\t **/\n\tp.enableMouseOver = function(frequency) {\n\t\tif (this._mouseOverIntervalID) {\n\t\t\tclearInterval(this._mouseOverIntervalID);\n\t\t\tthis._mouseOverIntervalID = null;\n\t\t\tif (frequency == 0) {\n\t\t\t\tthis._testMouseOver(true);\n\t\t\t}\n\t\t}\n\t\tif (frequency == null) { frequency = 20; }\n\t\telse if (frequency <= 0) { return; }\n\t\tvar o = this;\n\t\tthis._mouseOverIntervalID = setInterval(function(){ o._testMouseOver(); }, 1000/Math.min(50,frequency));\n\t};\n\n\t/**\n\t * Enables or disables the event listeners that stage adds to DOM elements (window, document and canvas). It is good\n\t * practice to disable events when disposing of a Stage instance, otherwise the stage will continue to receive\n\t * events from the page.\n\t *\n\t * When changing the canvas property you must disable the events on the old canvas, and enable events on the\n\t * new canvas or mouse events will not work as expected. For example:\n\t *\n\t *      myStage.enableDOMEvents(false);\n\t *      myStage.canvas = anotherCanvas;\n\t *      myStage.enableDOMEvents(true);\n\t *\n\t * @method enableDOMEvents\n\t * @param {Boolean} [enable=true] Indicates whether to enable or disable the events. Default is true.\n\t **/\n\tp.enableDOMEvents = function(enable) {\n\t\tif (enable == null) { enable = true; }\n\t\tvar n, o, ls = this._eventListeners;\n\t\tif (!enable && ls) {\n\t\t\tfor (n in ls) {\n\t\t\t\to = ls[n];\n\t\t\t\to.t.removeEventListener(n, o.f, false);\n\t\t\t}\n\t\t\tthis._eventListeners = null;\n\t\t} else if (enable && !ls && this.canvas) {\n\t\t\tvar t = window.addEventListener ? window : document;\n\t\t\tvar _this = this;\n\t\t\tls = this._eventListeners = {};\n\t\t\tls[\"mouseup\"] = {t:t, f:function(e) { _this._handleMouseUp(e)} };\n\t\t\tls[\"mousemove\"] = {t:t, f:function(e) { _this._handleMouseMove(e)} };\n\t\t\tls[\"dblclick\"] = {t:this.canvas, f:function(e) { _this._handleDoubleClick(e)} };\n\t\t\tls[\"mousedown\"] = {t:this.canvas, f:function(e) { _this._handleMouseDown(e)} };\n\n\t\t\tfor (n in ls) {\n\t\t\t\to = ls[n];\n\t\t\t\to.t.addEventListener(n, o.f, false);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Stage instances cannot be cloned.\n\t * @method clone\n\t **/\n\tp.clone = function() {\n\t\tthrow(\"Stage cannot be cloned.\");\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Stage (name=\"+  this.name +\")]\";\n\t};\n\n\n// private methods:\n\t/**\n\t * @method _getElementRect\n\t * @protected\n\t * @param {HTMLElement} e\n\t **/\n\tp._getElementRect = function(e) {\n\t\tvar bounds;\n\t\ttry { bounds = e.getBoundingClientRect(); } // this can fail on disconnected DOM elements in IE9\n\t\tcatch (err) { bounds = {top: e.offsetTop, left: e.offsetLeft, width:e.offsetWidth, height:e.offsetHeight}; }\n\n\t\tvar offX = (window.pageXOffset || document.scrollLeft || 0) - (document.clientLeft || document.body.clientLeft || 0);\n\t\tvar offY = (window.pageYOffset || document.scrollTop || 0) - (document.clientTop  || document.body.clientTop  || 0);\n\n\t\tvar styles = window.getComputedStyle ? getComputedStyle(e,null) : e.currentStyle; // IE <9 compatibility.\n\t\tvar padL = parseInt(styles.paddingLeft)+parseInt(styles.borderLeftWidth);\n\t\tvar padT = parseInt(styles.paddingTop)+parseInt(styles.borderTopWidth);\n\t\tvar padR = parseInt(styles.paddingRight)+parseInt(styles.borderRightWidth);\n\t\tvar padB = parseInt(styles.paddingBottom)+parseInt(styles.borderBottomWidth);\n\n\t\t// note: in some browsers bounds properties are read only.\n\t\treturn {\n\t\t\tleft: bounds.left+offX+padL,\n\t\t\tright: bounds.right+offX-padR,\n\t\t\ttop: bounds.top+offY+padT,\n\t\t\tbottom: bounds.bottom+offY-padB\n\t\t}\n\t};\n\n\t/**\n\t * @method _getPointerData\n\t * @protected\n\t * @param {Number} id\n\t **/\n\tp._getPointerData = function(id) {\n\t\tvar data = this._pointerData[id];\n\t\tif (!data) { data = this._pointerData[id] = {x:0,y:0}; }\n\t\treturn data;\n\t};\n\n\t/**\n\t * @method _handleMouseMove\n\t * @protected\n\t * @param {MouseEvent} e\n\t **/\n\tp._handleMouseMove = function(e) {\n\t\tif(!e){ e = window.event; }\n\t\tthis._handlePointerMove(-1, e, e.pageX, e.pageY);\n\t};\n\n\t/**\n\t * @method _handlePointerMove\n\t * @protected\n\t * @param {Number} id\n\t * @param {Event} e\n\t * @param {Number} pageX\n\t * @param {Number} pageY\n\t * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n\t **/\n\tp._handlePointerMove = function(id, e, pageX, pageY, owner) {\n\t\tif (this._prevStage && owner === undefined) { return; } // redundant listener.\n\t\tif (!this.canvas) { return; }\n\t\tvar nextStage=this._nextStage, o=this._getPointerData(id);\n\n\t\tvar inBounds = o.inBounds;\n\t\tthis._updatePointerPosition(id, e, pageX, pageY);\n\t\tif (inBounds || o.inBounds || this.mouseMoveOutside) {\n\t\t\tif (id === -1 && o.inBounds == !inBounds) {\n\t\t\t\tthis._dispatchMouseEvent(this, (inBounds ? \"mouseleave\" : \"mouseenter\"), false, id, o, e);\n\t\t\t}\n\t\t\t\n\t\t\tthis._dispatchMouseEvent(this, \"stagemousemove\", false, id, o, e);\n\t\t\tthis._dispatchMouseEvent(o.target, \"pressmove\", true, id, o, e);\n\t\t}\n\t\t\n\t\tnextStage&&nextStage._handlePointerMove(id, e, pageX, pageY, null);\n\t};\n\n\t/**\n\t * @method _updatePointerPosition\n\t * @protected\n\t * @param {Number} id\n\t * @param {Event} e\n\t * @param {Number} pageX\n\t * @param {Number} pageY\n\t **/\n\tp._updatePointerPosition = function(id, e, pageX, pageY) {\n\t\tvar rect = this._getElementRect(this.canvas);\n\t\tpageX -= rect.left;\n\t\tpageY -= rect.top;\n\n\t\tvar w = this.canvas.width;\n\t\tvar h = this.canvas.height;\n\t\tpageX /= (rect.right-rect.left)/w;\n\t\tpageY /= (rect.bottom-rect.top)/h;\n\t\tvar o = this._getPointerData(id);\n\t\tif (o.inBounds = (pageX >= 0 && pageY >= 0 && pageX <= w-1 && pageY <= h-1)) {\n\t\t\to.x = pageX;\n\t\t\to.y = pageY;\n\t\t} else if (this.mouseMoveOutside) {\n\t\t\to.x = pageX < 0 ? 0 : (pageX > w-1 ? w-1 : pageX);\n\t\t\to.y = pageY < 0 ? 0 : (pageY > h-1 ? h-1 : pageY);\n\t\t}\n\n\t\to.posEvtObj = e;\n\t\to.rawX = pageX;\n\t\to.rawY = pageY;\n\n\t\tif (id === this._primaryPointerID || id === -1) {\n\t\t\tthis.mouseX = o.x;\n\t\t\tthis.mouseY = o.y;\n\t\t\tthis.mouseInBounds = o.inBounds;\n\t\t}\n\t};\n\n\t/**\n\t * @method _handleMouseUp\n\t * @protected\n\t * @param {MouseEvent} e\n\t **/\n\tp._handleMouseUp = function(e) {\n\t\tthis._handlePointerUp(-1, e, false);\n\t};\n\n\t/**\n\t * @method _handlePointerUp\n\t * @protected\n\t * @param {Number} id\n\t * @param {Event} e\n\t * @param {Boolean} clear\n\t * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n\t **/\n\tp._handlePointerUp = function(id, e, clear, owner) {\n\t\tvar nextStage = this._nextStage, o = this._getPointerData(id);\n\t\tif (this._prevStage && owner === undefined) { return; } // redundant listener.\n\t\t\n\t\tvar target=null, oTarget = o.target;\n\t\tif (!owner && (oTarget || nextStage)) { target = this._getObjectsUnderPoint(o.x, o.y, null, true); }\n\t\t\n\t\tif (o.down) { this._dispatchMouseEvent(this, \"stagemouseup\", false, id, o, e, target); o.down = false; }\n\t\t\n\t\tif (target == oTarget) { this._dispatchMouseEvent(oTarget, \"click\", true, id, o, e); }\n\t\tthis._dispatchMouseEvent(oTarget, \"pressup\", true, id, o, e);\n\t\t\n\t\tif (clear) {\n\t\t\tif (id==this._primaryPointerID) { this._primaryPointerID = null; }\n\t\t\tdelete(this._pointerData[id]);\n\t\t} else { o.target = null; }\n\t\t\n\t\tnextStage&&nextStage._handlePointerUp(id, e, clear, owner || target && this);\n\t};\n\n\t/**\n\t * @method _handleMouseDown\n\t * @protected\n\t * @param {MouseEvent} e\n\t **/\n\tp._handleMouseDown = function(e) {\n\t\tthis._handlePointerDown(-1, e, e.pageX, e.pageY);\n\t};\n\n\t/**\n\t * @method _handlePointerDown\n\t * @protected\n\t * @param {Number} id\n\t * @param {Event} e\n\t * @param {Number} pageX\n\t * @param {Number} pageY\n\t * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n\t **/\n\tp._handlePointerDown = function(id, e, pageX, pageY, owner) {\n\t\tif (this.preventSelection) { e.preventDefault(); }\n\t\tif (this._primaryPointerID == null || id === -1) { this._primaryPointerID = id; } // mouse always takes over.\n\t\t\n\t\tif (pageY != null) { this._updatePointerPosition(id, e, pageX, pageY); }\n\t\tvar target = null, nextStage = this._nextStage, o = this._getPointerData(id);\n\t\tif (!owner) { target = o.target = this._getObjectsUnderPoint(o.x, o.y, null, true); }\n\n\t\tif (o.inBounds) { this._dispatchMouseEvent(this, \"stagemousedown\", false, id, o, e, target); o.down = true; }\n\t\tthis._dispatchMouseEvent(target, \"mousedown\", true, id, o, e);\n\t\t\n\t\tnextStage&&nextStage._handlePointerDown(id, e, pageX, pageY, owner || target && this);\n\t};\n\n\t/**\n\t * @method _testMouseOver\n\t * @param {Boolean} clear If true, clears the mouseover / rollover (ie. no target)\n\t * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n\t * @param {Stage} eventTarget The stage that the cursor is actively over.\n\t * @protected\n\t **/\n\tp._testMouseOver = function(clear, owner, eventTarget) {\n\t\tif (this._prevStage && owner === undefined) { return; } // redundant listener.\n\t\t\n\t\tvar nextStage = this._nextStage;\n\t\tif (!this._mouseOverIntervalID) {\n\t\t\t// not enabled for mouseover, but should still relay the event.\n\t\t\tnextStage&&nextStage._testMouseOver(clear, owner, eventTarget);\n\t\t\treturn;\n\t\t}\n\t\tvar o = this._getPointerData(-1);\n\t\t// only update if the mouse position has changed. This provides a lot of optimization, but has some trade-offs.\n\t\tif (!o || (!clear && this.mouseX == this._mouseOverX && this.mouseY == this._mouseOverY && this.mouseInBounds)) { return; }\n\t\t\n\t\tvar e = o.posEvtObj;\n\t\tvar isEventTarget = eventTarget || e&&(e.target == this.canvas);\n\t\tvar target=null, common = -1, cursor=\"\", t, i, l;\n\t\t\n\t\tif (!owner && (clear || this.mouseInBounds && isEventTarget)) {\n\t\t\ttarget = this._getObjectsUnderPoint(this.mouseX, this.mouseY, null, true);\n\t\t\tthis._mouseOverX = this.mouseX;\n\t\t\tthis._mouseOverY = this.mouseY;\n\t\t}\n\n\t\tvar oldList = this._mouseOverTarget||[];\n\t\tvar oldTarget = oldList[oldList.length-1];\n\t\tvar list = this._mouseOverTarget = [];\n\n\t\t// generate ancestor list and check for cursor:\n\t\tt = target;\n\t\twhile (t) {\n\t\t\tlist.unshift(t);\n\t\t\tif (!cursor) { cursor = t.cursor; }\n\t\t\tt = t.parent;\n\t\t}\n\t\tthis.canvas.style.cursor = cursor;\n\t\tif (!owner && eventTarget) { eventTarget.canvas.style.cursor = cursor; }\n\n\t\t// find common ancestor:\n\t\tfor (i=0,l=list.length; i<l; i++) {\n\t\t\tif (list[i] != oldList[i]) { break; }\n\t\t\tcommon = i;\n\t\t}\n\n\t\tif (oldTarget != target) {\n\t\t\tthis._dispatchMouseEvent(oldTarget, \"mouseout\", true, -1, o, e, target);\n\t\t}\n\n\t\tfor (i=oldList.length-1; i>common; i--) {\n\t\t\tthis._dispatchMouseEvent(oldList[i], \"rollout\", false, -1, o, e, target);\n\t\t}\n\n\t\tfor (i=list.length-1; i>common; i--) {\n\t\t\tthis._dispatchMouseEvent(list[i], \"rollover\", false, -1, o, e, oldTarget);\n\t\t}\n\n\t\tif (oldTarget != target) {\n\t\t\tthis._dispatchMouseEvent(target, \"mouseover\", true, -1, o, e, oldTarget);\n\t\t}\n\t\t\n\t\tnextStage&&nextStage._testMouseOver(clear, owner || target && this, eventTarget || isEventTarget && this);\n\t};\n\n\t/**\n\t * @method _handleDoubleClick\n\t * @protected\n\t * @param {MouseEvent} e\n\t * @param {Stage} owner Indicates that the event has already been captured & handled by the indicated stage.\n\t **/\n\tp._handleDoubleClick = function(e, owner) {\n\t\tvar target=null, nextStage=this._nextStage, o=this._getPointerData(-1);\n\t\tif (!owner) {\n\t\t\ttarget = this._getObjectsUnderPoint(o.x, o.y, null, true);\n\t\t\tthis._dispatchMouseEvent(target, \"dblclick\", true, -1, o, e);\n\t\t}\n\t\tnextStage&&nextStage._handleDoubleClick(e, owner || target && this);\n\t};\n\n\t/**\n\t * @method _dispatchMouseEvent\n\t * @protected\n\t * @param {DisplayObject} target\n\t * @param {String} type\n\t * @param {Boolean} bubbles\n\t * @param {Number} pointerId\n\t * @param {Object} o\n\t * @param {MouseEvent} [nativeEvent]\n\t * @param {DisplayObject} [relatedTarget]\n\t **/\n\tp._dispatchMouseEvent = function(target, type, bubbles, pointerId, o, nativeEvent, relatedTarget) {\n\t\t// TODO: might be worth either reusing MouseEvent instances, or adding a willTrigger method to avoid GC.\n\t\tif (!target || (!bubbles && !target.hasEventListener(type))) { return; }\n\t\t/*\n\t\t// TODO: account for stage transformations?\n\t\tthis._mtx = this.getConcatenatedMatrix(this._mtx).invert();\n\t\tvar pt = this._mtx.transformPoint(o.x, o.y);\n\t\tvar evt = new createjs.MouseEvent(type, bubbles, false, pt.x, pt.y, nativeEvent, pointerId, pointerId==this._primaryPointerID || pointerId==-1, o.rawX, o.rawY);\n\t\t*/\n\t\tvar evt = new createjs.MouseEvent(type, bubbles, false, o.x, o.y, nativeEvent, pointerId, pointerId === this._primaryPointerID || pointerId === -1, o.rawX, o.rawY, relatedTarget);\n\t\ttarget.dispatchEvent(evt);\n\t};\n\n\n\tcreatejs.Stage = createjs.promote(Stage, \"Container\");\n}());\n\n//##############################################################################\n// Bitmap.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\n\t/**\n\t * A Bitmap represents an Image, Canvas, or Video in the display list. A Bitmap can be instantiated using an existing\n\t * HTML element, or a string.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var bitmap = new createjs.Bitmap(\"imagePath.jpg\");\n\t *\n\t * <strong>Notes:</strong>\n\t * <ol>\n\t *     <li>When a string path or image tag that is not yet loaded is used, the stage may need to be redrawn before it\n\t *      will be displayed.</li>\n\t *     <li>Bitmaps with an SVG source currently will not respect an alpha value other than 0 or 1. To get around this,\n\t *     the Bitmap can be cached.</li>\n\t *     <li>Bitmaps with an SVG source will taint the canvas with cross-origin data, which prevents interactivity. This\n\t *     happens in all browsers except recent Firefox builds.</li>\n\t *     <li>Images loaded cross-origin will throw cross-origin security errors when interacted with using a mouse, using\n\t *     methods such as `getObjectUnderPoint`, or using filters, or caching. You can get around this by setting\n\t *     `crossOrigin` flags on your images before passing them to EaselJS, eg: `img.crossOrigin=\"Anonymous\";`</li>\n\t * </ol>\n\t *\n\t * @class Bitmap\n\t * @extends DisplayObject\n\t * @constructor\n\t * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | String} imageOrUri The source object or URI to an image to\n\t * display. This can be either an Image, Canvas, or Video object, or a string URI to an image file to load and use.\n\t * If it is a URI, a new Image object will be constructed and assigned to the .image property.\n\t **/\n\tfunction Bitmap(imageOrUri) {\n\t\tthis.DisplayObject_constructor();\n\t\t\n\t\t\n\t// public properties:\n\t\t/**\n\t\t * The image to render. This can be an Image, a Canvas, or a Video. Not all browsers (especially\n\t\t * mobile browsers) support drawing video to a canvas.\n\t\t * @property image\n\t\t * @type HTMLImageElement | HTMLCanvasElement | HTMLVideoElement\n\t\t **/\n\t\tif (typeof imageOrUri == \"string\") {\n\t\t\tthis.image = document.createElement(\"img\");\n\t\t\tthis.image.src = imageOrUri;\n\t\t} else {\n\t\t\tthis.image = imageOrUri;\n\t\t}\n\t\n\t\t/**\n\t\t * Specifies an area of the source image to draw. If omitted, the whole image will be drawn.\n\t\t * Note that video sources must have a width / height set to work correctly with `sourceRect`.\n\t\t * @property sourceRect\n\t\t * @type Rectangle\n\t\t * @default null\n\t\t */\n\t\tthis.sourceRect = null;\n\t}\n\tvar p = createjs.extend(Bitmap, createjs.DisplayObject);\n\t\n\t\n// public methods:\n\t/**\n\t * Constructor alias for backwards compatibility. This method will be removed in future versions.\n\t * Subclasses should be updated to use {{#crossLink \"Utility Methods/extends\"}}{{/crossLink}}.\n\t * @method initialize\n\t * @deprecated in favour of `createjs.promote()`\n\t **/\n\tp.initialize = Bitmap; // TODO: deprecated.\n\n\t/**\n\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t **/\n\tp.isVisible = function() {\n\t\tvar image = this.image;\n\t\tvar hasContent = this.cacheCanvas || (image && (image.naturalWidth || image.getContext || image.readyState >= 2));\n\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n\t};\n\n\t/**\n\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t * Returns true if the draw was handled (useful for overriding functionality).\n\t *\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache.\n\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n\t * into itself).\n\t * @return {Boolean}\n\t **/\n\tp.draw = function(ctx, ignoreCache) {\n\t\tif (this.DisplayObject_draw(ctx, ignoreCache) || !this.image) { return true; }\n\t\tvar img = this.image, rect = this.sourceRect;\n\t\tif (rect) {\n\t\t\t// some browsers choke on out of bound values, so we'll fix them:\n\t\t\tvar x1 = rect.x, y1 = rect.y, x2 = x1 + rect.width, y2 = y1 + rect.height, x = 0, y = 0, w = img.width, h = img.height;\n\t\t\tif (x1 < 0) { x -= x1; x1 = 0; }\n\t\t\tif (x2 > w) { x2 = w; }\n\t\t\tif (y1 < 0) { y -= y1; y1 = 0; }\n\t\t\tif (y2 > h) { y2 = h; }\n\t\t\tctx.drawImage(img, x1, y1, x2-x1, y2-y1, x, y, x2-x1, y2-y1);\n\t\t} else {\n\t\t\tctx.drawImage(img, 0, 0);\n\t\t}\n\t\treturn true;\n\t};\n\t\n\t//Note, the doc sections below document using the specified APIs (from DisplayObject)  from\n\t//Bitmap. This is why they have no method implementations.\n\t\n\t/**\n\t * Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\n\t * You should <b>not</b> cache Bitmap instances as it can degrade performance.\n\t *\n\t * <strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>\n\t * To see the API for caching, please visit the DisplayObject {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\n\t * method.\n\t * @method cache\n\t **/\n\t\n\t/**\n\t * Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\n\t * You should <b>not</b> cache Bitmap instances as it can degrade performance.\n\t *\n\t * <strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>\n\t * To see the API for caching, please visit the DisplayObject {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\n\t * method.\n\t * @method updateCache\n\t **/\n\t\n\t/**\n\t * Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\n\t * You should <b>not</b> cache Bitmap instances as it can degrade performance.\n\t *\n\t * <strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>\n\t * To see the API for caching, please visit the DisplayObject {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}}\n\t * method.\n\t * @method uncache\n\t **/\n\n\t/**\n\t * Docced in superclass.\n\t */\n\tp.getBounds = function() {\n\t\tvar rect = this.DisplayObject_getBounds();\n\t\tif (rect) { return rect; }\n\t\tvar image = this.image, o = this.sourceRect || image;\n\t\tvar hasContent = (image && (image.naturalWidth || image.getContext || image.readyState >= 2));\n\t\treturn hasContent ? this._rectangle.setValues(0, 0, o.width, o.height) : null;\n\t};\n\t\n\t/**\n\t * Returns a clone of the Bitmap instance.\n\t * @method clone\n\t * @return {Bitmap} a clone of the Bitmap instance.\n\t **/\n\tp.clone = function() {\n\t\tvar o = new Bitmap(this.image);\n\t\tif (this.sourceRect) { o.sourceRect = this.sourceRect.clone(); }\n\t\tthis._cloneProps(o);\n\t\treturn o;\n\t};\n\t\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Bitmap (name=\"+  this.name +\")]\";\n\t};\n\n\t\n\tcreatejs.Bitmap = createjs.promote(Bitmap, \"DisplayObject\");\n}());\n\n//##############################################################################\n// Sprite.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Displays a frame or sequence of frames (ie. an animation) from a SpriteSheet instance. A sprite sheet is a series of\n\t * images (usually animation frames) combined into a single image. For example, an animation consisting of 8 100x100\n\t * images could be combined into a 400x200 sprite sheet (4 frames across by 2 high). You can display individual frames,\n\t * play frames as an animation, and even sequence animations together.\n\t *\n\t * See the {{#crossLink \"SpriteSheet\"}}{{/crossLink}} class for more information on setting up frames and animations.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var instance = new createjs.Sprite(spriteSheet);\n\t *      instance.gotoAndStop(\"frameName\");\n\t *\n\t * Until {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} or {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}} is called,\n\t * only the first defined frame defined in the sprite sheet will be displayed.\n\t *\n\t * @class Sprite\n\t * @extends DisplayObject\n\t * @constructor\n\t * @param {SpriteSheet} spriteSheet The SpriteSheet instance to play back. This includes the source image(s), frame\n\t * dimensions, and frame data. See {{#crossLink \"SpriteSheet\"}}{{/crossLink}} for more information.\n\t * @param {String|Number} [frameOrAnimation] The frame number or animation to play initially.\n\t **/\n\tfunction Sprite(spriteSheet, frameOrAnimation) {\n\t\tthis.DisplayObject_constructor();\n\t\t\n\t\t\n\t// public properties:\n\t\t/**\n\t\t * The frame index that will be drawn when draw is called. Note that with some {{#crossLink \"SpriteSheet\"}}{{/crossLink}}\n\t\t * definitions, this will advance non-sequentially. This will always be an integer value.\n\t\t * @property currentFrame\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t * @readonly\n\t\t **/\n\t\tthis.currentFrame = 0;\n\t\n\t\t/**\n\t\t * Returns the name of the currently playing animation.\n\t\t * @property currentAnimation\n\t\t * @type {String}\n\t\t * @final\n\t\t * @readonly\n\t\t **/\n\t\tthis.currentAnimation = null;\n\t\n\t\t/**\n\t\t * Prevents the animation from advancing each tick automatically. For example, you could create a sprite\n\t\t * sheet of icons, set paused to true, and display the appropriate icon by setting <code>currentFrame</code>.\n\t\t * @property paused\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t **/\n\t\tthis.paused = true;\n\t\n\t\t/**\n\t\t * The SpriteSheet instance to play back. This includes the source image, frame dimensions, and frame\n\t\t * data. See {{#crossLink \"SpriteSheet\"}}{{/crossLink}} for more information.\n\t\t * @property spriteSheet\n\t\t * @type {SpriteSheet}\n\t\t * @readonly\n\t\t **/\n\t\tthis.spriteSheet = spriteSheet;\n\t\n\t\t/**\n\t\t * Specifies the current frame index within the currently playing animation. When playing normally, this will increase\n\t\t * from 0 to n-1, where n is the number of frames in the current animation.\n\t\t *\n\t\t * This could be a non-integer value if\n\t\t * using time-based playback (see {{#crossLink \"Sprite/framerate\"}}{{/crossLink}}, or if the animation's speed is\n\t\t * not an integer.\n\t\t * @property currentAnimationFrame\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t **/\n\t\tthis.currentAnimationFrame = 0;\n\t\n\t\t/**\n\t\t * By default Sprite instances advance one frame per tick. Specifying a framerate for the Sprite (or its related\n\t\t * SpriteSheet) will cause it to advance based on elapsed time between ticks as appropriate to maintain the target\n\t\t * framerate.\n\t\t *\n\t\t * For example, if a Sprite with a framerate of 10 is placed on a Stage being updated at 40fps, then the Sprite will\n\t\t * advance roughly one frame every 4 ticks. This will not be exact, because the time between each tick will\n\t\t * vary slightly between frames.\n\t\t *\n\t\t * This feature is dependent on the tick event object (or an object with an appropriate \"delta\" property) being\n\t\t * passed into {{#crossLink \"Stage/update\"}}{{/crossLink}}.\n\t\t * @property framerate\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t **/\n\t\tthis.framerate = 0;\n\t\n\t\n\t// private properties:\n\t\t/**\n\t\t * Current animation object.\n\t\t * @property _animation\n\t\t * @protected\n\t\t * @type {Object}\n\t\t * @default null\n\t\t **/\n\t\tthis._animation = null;\n\t\n\t\t/**\n\t\t * Current frame index.\n\t\t * @property _currentFrame\n\t\t * @protected\n\t\t * @type {Number}\n\t\t * @default null\n\t\t **/\n\t\tthis._currentFrame = null;\n\t\t\n\t\t/**\n\t\t * Skips the next auto advance. Used by gotoAndPlay to avoid immediately jumping to the next frame\n\t\t * @property _skipAdvance\n\t\t * @protected\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t **/\n\t\tthis._skipAdvance = false;\n\t\t\n\t\t\n\t\tif (frameOrAnimation != null) { this.gotoAndPlay(frameOrAnimation); }\n\t}\n\tvar p = createjs.extend(Sprite, createjs.DisplayObject);\n\n\t/**\n\t * Constructor alias for backwards compatibility. This method will be removed in future versions.\n\t * Subclasses should be updated to use {{#crossLink \"Utility Methods/extends\"}}{{/crossLink}}.\n\t * @method initialize\n\t * @deprecated in favour of `createjs.promote()`\n\t **/\n\tp.initialize = Sprite; // TODO: Deprecated. This is for backwards support of FlashCC spritesheet export.\n\n\n// events:\n\t/**\n\t * Dispatched when an animation reaches its ends.\n\t * @event animationend\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t * @param {String} name The name of the animation that just ended.\n\t * @param {String} next The name of the next animation that will be played, or null. This will be the same as name if the animation is looping.\n\t * @since 0.6.0\n\t */\n\t \n\t/**\n\t * Dispatched any time the current frame changes. For example, this could be due to automatic advancement on a tick,\n\t * or calling gotoAndPlay() or gotoAndStop().\n\t * @event change\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t */\n\n\n// public methods:\n\t/**\n\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t **/\n\tp.isVisible = function() {\n\t\tvar hasContent = this.cacheCanvas || this.spriteSheet.complete;\n\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n\t};\n\n\t/**\n\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t * Returns true if the draw was handled (useful for overriding functionality).\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Boolean} ignoreCache Indicates whether the draw operation should ignore any current cache.\n\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n\t * into itself).\n\t **/\n\tp.draw = function(ctx, ignoreCache) {\n\t\tif (this.DisplayObject_draw(ctx, ignoreCache)) { return true; }\n\t\tthis._normalizeFrame();\n\t\tvar o = this.spriteSheet.getFrame(this._currentFrame|0);\n\t\tif (!o) { return false; }\n\t\tvar rect = o.rect;\n\t\tif (rect.width && rect.height) { ctx.drawImage(o.image, rect.x, rect.y, rect.width, rect.height, -o.regX, -o.regY, rect.width, rect.height); }\n\t\treturn true;\n\t};\n\n\t//Note, the doc sections below document using the specified APIs (from DisplayObject)  from\n\t//Bitmap. This is why they have no method implementations.\n\n\t/**\n\t * Because the content of a Sprite is already in a raster format, cache is unnecessary for Sprite instances.\n\t * You should not cache Sprite instances as it can degrade performance.\n\t * @method cache\n\t **/\n\n\t/**\n\t * Because the content of a Sprite is already in a raster format, cache is unnecessary for Sprite instances.\n\t * You should not cache Sprite instances as it can degrade performance.\n\t * @method updateCache\n\t **/\n\n\t/**\n\t * Because the content of a Sprite is already in a raster format, cache is unnecessary for Sprite instances.\n\t * You should not cache Sprite instances as it can degrade performance.\n\t * @method uncache\n\t **/\n\n\t/**\n\t * Play (unpause) the current animation. The Sprite will be paused if either {{#crossLink \"Sprite/stop\"}}{{/crossLink}}\n\t * or {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} is called. Single frame animations will remain\n\t * unchanged.\n\t * @method play\n\t **/\n\tp.play = function() {\n\t\tthis.paused = false;\n\t};\n\n\t/**\n\t * Stop playing a running animation. The Sprite will be playing if {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}}\n\t * is called. Note that calling {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}} or {{#crossLink \"Sprite/play\"}}{{/crossLink}}\n\t * will resume playback.\n\t * @method stop\n\t **/\n\tp.stop = function() {\n\t\tthis.paused = true;\n\t};\n\n\t/**\n\t * Sets paused to false and plays the specified animation name, named frame, or frame number.\n\t * @method gotoAndPlay\n\t * @param {String|Number} frameOrAnimation The frame number or animation name that the playhead should move to\n\t * and begin playing.\n\t **/\n\tp.gotoAndPlay = function(frameOrAnimation) {\n\t\tthis.paused = false;\n\t\tthis._skipAdvance = true;\n\t\tthis._goto(frameOrAnimation);\n\t};\n\n\t/**\n\t * Sets paused to true and seeks to the specified animation name, named frame, or frame number.\n\t * @method gotoAndStop\n\t * @param {String|Number} frameOrAnimation The frame number or animation name that the playhead should move to\n\t * and stop.\n\t **/\n\tp.gotoAndStop = function(frameOrAnimation) {\n\t\tthis.paused = true;\n\t\tthis._goto(frameOrAnimation);\n\t};\n\n\t/**\n\t * Advances the playhead. This occurs automatically each tick by default.\n\t * @param [time] {Number} The amount of time in ms to advance by. Only applicable if framerate is set on the Sprite\n\t * or its SpriteSheet.\n\t * @method advance\n\t*/\n\tp.advance = function(time) {\n\t\tvar fps = this.framerate || this.spriteSheet.framerate;\n\t\tvar t = (fps && time != null) ? time/(1000/fps) : 1;\n\t\tthis._normalizeFrame(t);\n\t};\n\t\n\t/**\n\t * Returns a {{#crossLink \"Rectangle\"}}{{/crossLink}} instance defining the bounds of the current frame relative to\n\t * the origin. For example, a 90 x 70 frame with <code>regX=50</code> and <code>regY=40</code> would return a\n\t * rectangle with [x=-50, y=-40, width=90, height=70]. This ignores transformations on the display object.\n\t *\n\t * Also see the SpriteSheet {{#crossLink \"SpriteSheet/getFrameBounds\"}}{{/crossLink}} method.\n\t * @method getBounds\n\t * @return {Rectangle} A Rectangle instance. Returns null if the frame does not exist, or the image is not fully\n\t * loaded.\n\t **/\n\tp.getBounds = function() {\n\t\t// TODO: should this normalizeFrame?\n\t\treturn this.DisplayObject_getBounds() || this.spriteSheet.getFrameBounds(this.currentFrame, this._rectangle);\n\t};\n\n\t/**\n\t * Returns a clone of the Sprite instance. Note that the same SpriteSheet is shared between cloned\n\t * instances.\n\t * @method clone\n\t * @return {Sprite} a clone of the Sprite instance.\n\t **/\n\tp.clone = function() {\n\t\treturn this._cloneProps(new Sprite(this.spriteSheet));\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Sprite (name=\"+  this.name +\")]\";\n\t};\n\n// private methods:\n\t/**\n\t * @method _cloneProps\n\t * @param {Sprite} o\n\t * @return {Sprite} o\n\t * @protected\n\t **/\n\tp._cloneProps = function(o) {\n\t\tthis.DisplayObject__cloneProps(o);\n\t\to.currentFrame = this.currentFrame;\n\t\to.currentAnimation = this.currentAnimation;\n\t\to.paused = this.paused;\n\t\to.currentAnimationFrame = this.currentAnimationFrame;\n\t\to.framerate = this.framerate;\n\t\t\n\t\to._animation = this._animation;\n\t\to._currentFrame = this._currentFrame;\n\t\to._skipAdvance = this._skipAdvance;\n\t\treturn o;\n\t};\n\t\n\t/**\n\t * Advances the <code>currentFrame</code> if paused is not true. This is called automatically when the {{#crossLink \"Stage\"}}{{/crossLink}}\n\t * ticks.\n\t * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\n\t * @protected\n\t * @method _tick\n\t **/\n\tp._tick = function(evtObj) {\n\t\tif (!this.paused) {\n\t\t\tif (!this._skipAdvance) { this.advance(evtObj&&evtObj.delta); }\n\t\t\tthis._skipAdvance = false;\n\t\t}\n\t\tthis.DisplayObject__tick(evtObj);\n\t};\n\n\n\t/**\n\t * Normalizes the current frame, advancing animations and dispatching callbacks as appropriate.\n\t * @protected\n\t * @method _normalizeFrame\n\t **/\n\tp._normalizeFrame = function(frameDelta) {\n\t\tframeDelta = frameDelta || 0;\n\t\tvar animation = this._animation;\n\t\tvar paused = this.paused;\n\t\tvar frame = this._currentFrame;\n\t\tvar l;\n\t\t\n\t\tif (animation) {\n\t\t\tvar speed = animation.speed || 1;\n\t\t\tvar animFrame = this.currentAnimationFrame;\n\t\t\tl = animation.frames.length;\n\t\t\tif (animFrame + frameDelta * speed >= l) {\n\t\t\t\tvar next = animation.next;\n\t\t\t\tif (this._dispatchAnimationEnd(animation, frame, paused, next, l - 1)) {\n\t\t\t\t\t// something changed in the event stack, so we shouldn't make any more changes here.\n\t\t\t\t\treturn;\n\t\t\t\t} else if (next) {\n\t\t\t\t\t// sequence. Automatically calls _normalizeFrame again with the remaining frames.\n\t\t\t\t\treturn this._goto(next, frameDelta - (l - animFrame) / speed);\n\t\t\t\t} else {\n\t\t\t\t\t// end.\n\t\t\t\t\tthis.paused = true;\n\t\t\t\t\tanimFrame = animation.frames.length - 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tanimFrame += frameDelta * speed;\n\t\t\t}\n\t\t\tthis.currentAnimationFrame = animFrame;\n\t\t\tthis._currentFrame = animation.frames[animFrame | 0]\n\t\t} else {\n\t\t\tframe = (this._currentFrame += frameDelta);\n\t\t\tl = this.spriteSheet.getNumFrames();\n\t\t\tif (frame >= l && l > 0) {\n\t\t\t\tif (!this._dispatchAnimationEnd(animation, frame, paused, l - 1)) {\n\t\t\t\t\t// looped.\n\t\t\t\t\tif ((this._currentFrame -= l) >= l) { return this._normalizeFrame(); }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tframe = this._currentFrame | 0;\n\t\tif (this.currentFrame != frame) {\n\t\t\tthis.currentFrame = frame;\n\t\t\tthis.dispatchEvent(\"change\");\n\t\t}\n\t};\n\n\t/**\n\t * Dispatches the \"animationend\" event. Returns true if a handler changed the animation (ex. calling {{#crossLink \"Sprite/stop\"}}{{/crossLink}},\n\t * {{#crossLink \"Sprite/gotoAndPlay\"}}{{/crossLink}}, etc.)\n\t * @property _dispatchAnimationEnd\n\t * @private\n\t * @type {Function}\n\t **/\n\tp._dispatchAnimationEnd = function(animation, frame, paused, next, end) {\n\t\tvar name = animation ? animation.name : null;\n\t\tif (this.hasEventListener(\"animationend\")) {\n\t\t\tvar evt = new createjs.Event(\"animationend\");\n\t\t\tevt.name = name;\n\t\t\tevt.next = next;\n\t\t\tthis.dispatchEvent(evt);\n\t\t}\n\t\t// did the animation get changed in the event stack?:\n\t\tvar changed = (this._animation != animation || this._currentFrame != frame);\n\t\t// if the animation hasn't changed, but the sprite was paused, then we want to stick to the last frame:\n\t\tif (!changed && !paused && this.paused) { this.currentAnimationFrame = end; changed = true; }\n\t\treturn changed;\n\t};\n\n\t/**\n\t * Moves the playhead to the specified frame number or animation.\n\t * @method _goto\n\t * @param {String|Number} frameOrAnimation The frame number or animation that the playhead should move to.\n\t * @param {Boolean} [frame] The frame of the animation to go to. Defaults to 0.\n\t * @protected\n\t **/\n\tp._goto = function(frameOrAnimation, frame) {\n\t\tthis.currentAnimationFrame = 0;\n\t\tif (isNaN(frameOrAnimation)) {\n\t\t\tvar data = this.spriteSheet.getAnimation(frameOrAnimation);\n\t\t\tif (data) {\n\t\t\t\tthis._animation = data;\n\t\t\t\tthis.currentAnimation = frameOrAnimation;\n\t\t\t\tthis._normalizeFrame(frame);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.currentAnimation = this._animation = null;\n\t\t\tthis._currentFrame = frameOrAnimation;\n\t\t\tthis._normalizeFrame();\n\t\t}\n\t};\n\n\n\tcreatejs.Sprite = createjs.promote(Sprite, \"DisplayObject\");\n}());\n\n//##############################################################################\n// Shape.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * A Shape allows you to display vector art in the display list. It composites a {{#crossLink \"Graphics\"}}{{/crossLink}}\n\t * instance which exposes all of the vector drawing methods. The Graphics instance can be shared between multiple Shape\n\t * instances to display the same vector graphics with different positions or transforms.\n\t *\n\t * If the vector art will not\n\t * change between draws, you may want to use the {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}} method to reduce the\n\t * rendering cost.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var graphics = new createjs.Graphics().beginFill(\"#ff0000\").drawRect(0, 0, 100, 100);\n\t *      var shape = new createjs.Shape(graphics);\n\t *\n\t *      //Alternatively use can also use the graphics property of the Shape class to renderer the same as above.\n\t *      var shape = new createjs.Shape();\n\t *      shape.graphics.beginFill(\"#ff0000\").drawRect(0, 0, 100, 100);\n\t *\n\t * @class Shape\n\t * @extends DisplayObject\n\t * @constructor\n\t * @param {Graphics} graphics Optional. The graphics instance to display. If null, a new Graphics instance will be created.\n\t **/\n\tfunction Shape(graphics) {\n\t\tthis.DisplayObject_constructor();\n\t\t\n\t\t\n\t// public properties:\n\t\t/**\n\t\t * The graphics instance to display.\n\t\t * @property graphics\n\t\t * @type Graphics\n\t\t **/\n\t\tthis.graphics = graphics ? graphics : new createjs.Graphics();\n\t}\n\tvar p = createjs.extend(Shape, createjs.DisplayObject);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\n\n// public methods:\n\t/**\n\t * Returns true or false indicating whether the Shape would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Boolean indicating whether the Shape would be visible if drawn to a canvas\n\t **/\n\tp.isVisible = function() {\n\t\tvar hasContent = this.cacheCanvas || (this.graphics && !this.graphics.isEmpty());\n\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n\t};\n\n\t/**\n\t * Draws the Shape into the specified context ignoring its visible, alpha, shadow, and transform. Returns true if\n\t * the draw was handled (useful for overriding functionality).\n\t *\n\t * <i>NOTE: This method is mainly for internal use, though it may be useful for advanced uses.</i>\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache. For example,\n\t * used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).\n\t * @return {Boolean}\n\t **/\n\tp.draw = function(ctx, ignoreCache) {\n\t\tif (this.DisplayObject_draw(ctx, ignoreCache)) { return true; }\n\t\tthis.graphics.draw(ctx, this);\n\t\treturn true;\n\t};\n\n\t/**\n\t * Returns a clone of this Shape. Some properties that are specific to this instance's current context are reverted to\n\t * their defaults (for example .parent).\n\t * @method clone\n\t * @param {Boolean} recursive If true, this Shape's {{#crossLink \"Graphics\"}}{{/crossLink}} instance will also be\n\t * cloned. If false, the Graphics instance will be shared with the new Shape.\n\t **/\n\tp.clone = function(recursive) {\n\t\tvar g = (recursive && this.graphics) ? this.graphics.clone() : this.graphics;\n\t\treturn  this._cloneProps(new Shape(g));\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Shape (name=\"+  this.name +\")]\";\n\t};\n\n\n\tcreatejs.Shape = createjs.promote(Shape, \"DisplayObject\");\n}());\n\n//##############################################################################\n// Text.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Display one or more lines of dynamic text (not user editable) in the display list. Line wrapping support (using the\n\t * lineWidth) is very basic, wrapping on spaces and tabs only. Note that as an alternative to Text, you can position HTML\n\t * text above or below the canvas relative to items in the display list using the {{#crossLink \"DisplayObject/localToGlobal\"}}{{/crossLink}}\n\t * method, or using {{#crossLink \"DOMElement\"}}{{/crossLink}}.\n\t *\n\t * <b>Please note that Text does not support HTML text, and can only display one font style at a time.</b> To use\n\t * multiple font styles, you will need to create multiple text instances, and position them manually.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var text = new createjs.Text(\"Hello World\", \"20px Arial\", \"#ff7700\");\n\t *      text.x = 100;\n\t *      text.textBaseline = \"alphabetic\";\n\t *\n\t * CreateJS Text supports web fonts (the same rules as Canvas). The font must be loaded and supported by the browser\n\t * before it can be displayed.\n\t *\n\t * <strong>Note:</strong> Text can be expensive to generate, so cache instances where possible. Be aware that not all\n\t * browsers will render Text exactly the same.\n\t * @class Text\n\t * @extends DisplayObject\n\t * @constructor\n\t * @param {String} [text] The text to display.\n\t * @param {String} [font] The font style to use. Any valid value for the CSS font attribute is acceptable (ex. \"bold\n\t * 36px Arial\").\n\t * @param {String} [color] The color to draw the text in. Any valid value for the CSS color attribute is acceptable (ex.\n\t * \"#F00\", \"red\", or \"#FF0000\").\n\t **/\n\tfunction Text(text, font, color) {\n\t\tthis.DisplayObject_constructor();\n\t\t\n\t\t\n\t// public properties:\n\t\t/**\n\t\t * The text to display.\n\t\t * @property text\n\t\t * @type String\n\t\t **/\n\t\tthis.text = text;\n\t\n\t\t/**\n\t\t * The font style to use. Any valid value for the CSS font attribute is acceptable (ex. \"bold 36px Arial\").\n\t\t * @property font\n\t\t * @type String\n\t\t **/\n\t\tthis.font = font;\n\t\n\t\t/**\n\t\t * The color to draw the text in. Any valid value for the CSS color attribute is acceptable (ex. \"#F00\"). Default is \"#000\".\n\t\t * It will also accept valid canvas fillStyle values.\n\t\t * @property color\n\t\t * @type String\n\t\t **/\n\t\tthis.color = color;\n\t\n\t\t/**\n\t\t * The horizontal text alignment. Any of \"start\", \"end\", \"left\", \"right\", and \"center\". For detailed\n\t\t * information view the\n\t\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles\">\n\t\t * whatwg spec</a>. Default is \"left\".\n\t\t * @property textAlign\n\t\t * @type String\n\t\t **/\n\t\tthis.textAlign = \"left\";\n\t\n\t\t/**\n\t\t * The vertical alignment point on the font. Any of \"top\", \"hanging\", \"middle\", \"alphabetic\", \"ideographic\", or\n\t\t * \"bottom\". For detailed information view the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles\">\n\t\t * whatwg spec</a>. Default is \"top\".\n\t\t * @property textBaseline\n\t\t * @type String\n\t\t*/\n\t\tthis.textBaseline = \"top\";\n\t\n\t\t/**\n\t\t * The maximum width to draw the text. If maxWidth is specified (not null), the text will be condensed or\n\t\t * shrunk to make it fit in this width. For detailed information view the\n\t\t * <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles\">\n\t\t * whatwg spec</a>.\n\t\t * @property maxWidth\n\t\t * @type Number\n\t\t*/\n\t\tthis.maxWidth = null;\n\t\n\t\t/**\n\t\t * If greater than 0, the text will be drawn as a stroke (outline) of the specified width.\n\t\t * @property outline\n\t\t * @type Number\n\t\t **/\n\t\tthis.outline = 0;\n\t\n\t\t/**\n\t\t * Indicates the line height (vertical distance between baselines) for multi-line text. If null or 0,\n\t\t * the value of getMeasuredLineHeight is used.\n\t\t * @property lineHeight\n\t\t * @type Number\n\t\t **/\n\t\tthis.lineHeight = 0;\n\t\n\t\t/**\n\t\t * Indicates the maximum width for a line of text before it is wrapped to multiple lines. If null,\n\t\t * the text will not be wrapped.\n\t\t * @property lineWidth\n\t\t * @type Number\n\t\t **/\n\t\tthis.lineWidth = null;\n\t}\n\tvar p = createjs.extend(Text, createjs.DisplayObject);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\n\t\n// static properties:\n\t/**\n\t * @property _workingContext\n\t * @type CanvasRenderingContext2D\n\t * @private\n\t **/\n\tvar canvas = (createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"));\n\tif (canvas.getContext) { Text._workingContext = canvas.getContext(\"2d\"); canvas.width = canvas.height = 1; }\n\t\n\t\n// constants:\n\t/**\n\t * Lookup table for the ratio to offset bounds x calculations based on the textAlign property.\n\t * @property H_OFFSETS\n\t * @type Object\n\t * @protected\n\t * @static\n\t **/\n\tText.H_OFFSETS = {start: 0, left: 0, center: -0.5, end: -1, right: -1};\n\t\n\t/**\n\t * Lookup table for the ratio to offset bounds y calculations based on the textBaseline property.\n\t * @property H_OFFSETS\n\t * @type Object\n\t * @protected\n\t * @static\n\t **/\n\tText.V_OFFSETS = {top: 0, hanging: -0.01, middle: -0.4, alphabetic: -0.8, ideographic: -0.85, bottom: -1};\n\n\n// public methods:\n\t/**\n\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Whether the display object would be visible if drawn to a canvas\n\t **/\n\tp.isVisible = function() {\n\t\tvar hasContent = this.cacheCanvas || (this.text != null && this.text !== \"\");\n\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);\n\t};\n\n\t/**\n\t * Draws the Text into the specified context ignoring its visible, alpha, shadow, and transform.\n\t * Returns true if the draw was handled (useful for overriding functionality).\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Boolean} ignoreCache Indicates whether the draw operation should ignore any current cache.\n\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n\t * into itself).\n\t **/\n\tp.draw = function(ctx, ignoreCache) {\n\t\tif (this.DisplayObject_draw(ctx, ignoreCache)) { return true; }\n\n\t\tvar col = this.color || \"#000\";\n\t\tif (this.outline) { ctx.strokeStyle = col; ctx.lineWidth = this.outline*1; }\n\t\telse { ctx.fillStyle = col; }\n\t\t\n\t\tthis._drawText(this._prepContext(ctx));\n\t\treturn true;\n\t};\n\n\t/**\n\t * Returns the measured, untransformed width of the text without wrapping. Use getBounds for a more robust value.\n\t * @method getMeasuredWidth\n\t * @return {Number} The measured, untransformed width of the text.\n\t **/\n\tp.getMeasuredWidth = function() {\n\t\treturn this._getMeasuredWidth(this.text);\n\t};\n\n\t/**\n\t * Returns an approximate line height of the text, ignoring the lineHeight property. This is based on the measured\n\t * width of a \"M\" character multiplied by 1.2, which provides an approximate line height for most fonts.\n\t * @method getMeasuredLineHeight\n\t * @return {Number} an approximate line height of the text, ignoring the lineHeight property. This is\n\t * based on the measured width of a \"M\" character multiplied by 1.2, which approximates em for most fonts.\n\t **/\n\tp.getMeasuredLineHeight = function() {\n\t\treturn this._getMeasuredWidth(\"M\")*1.2;\n\t};\n\n\t/**\n\t * Returns the approximate height of multi-line text by multiplying the number of lines against either the\n\t * <code>lineHeight</code> (if specified) or {{#crossLink \"Text/getMeasuredLineHeight\"}}{{/crossLink}}. Note that\n\t * this operation requires the text flowing logic to run, which has an associated CPU cost.\n\t * @method getMeasuredHeight\n\t * @return {Number} The approximate height of the untransformed multi-line text.\n\t **/\n\tp.getMeasuredHeight = function() {\n\t\treturn this._drawText(null,{}).height;\n\t};\n\n\t/**\n\t * Docced in superclass.\n\t */\n\tp.getBounds = function() {\n\t\tvar rect = this.DisplayObject_getBounds();\n\t\tif (rect) { return rect; }\n\t\tif (this.text == null || this.text === \"\") { return null; }\n\t\tvar o = this._drawText(null, {});\n\t\tvar w = (this.maxWidth && this.maxWidth < o.width) ? this.maxWidth : o.width;\n\t\tvar x = w * Text.H_OFFSETS[this.textAlign||\"left\"];\n\t\tvar lineHeight = this.lineHeight||this.getMeasuredLineHeight();\n\t\tvar y = lineHeight * Text.V_OFFSETS[this.textBaseline||\"top\"];\n\t\treturn this._rectangle.setValues(x, y, w, o.height);\n\t};\n\t\n\t/**\n\t * Returns an object with width, height, and lines properties. The width and height are the visual width and height\n\t * of the drawn text. The lines property contains an array of strings, one for\n\t * each line of text that will be drawn, accounting for line breaks and wrapping. These strings have trailing\n\t * whitespace removed.\n\t * @method getMetrics\n\t * @return {Object} An object with width, height, and lines properties.\n\t **/\n\tp.getMetrics = function() {\n\t\tvar o = {lines:[]};\n\t\to.lineHeight = this.lineHeight || this.getMeasuredLineHeight();\n\t\to.vOffset = o.lineHeight * Text.V_OFFSETS[this.textBaseline||\"top\"];\n\t\treturn this._drawText(null, o, o.lines);\n\t};\n\n\t/**\n\t * Returns a clone of the Text instance.\n\t * @method clone\n\t * @return {Text} a clone of the Text instance.\n\t **/\n\tp.clone = function() {\n\t\treturn this._cloneProps(new Text(this.text, this.font, this.color));\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Text (text=\"+  (this.text.length > 20 ? this.text.substr(0, 17)+\"...\" : this.text) +\")]\";\n\t};\n\n\n// private methods:\n\t/**\n\t * @method _cloneProps\n\t * @param {Text} o\n\t * @protected\n\t * @return {Text} o\n\t **/\n\tp._cloneProps = function(o) {\n\t\tthis.DisplayObject__cloneProps(o);\n\t\to.textAlign = this.textAlign;\n\t\to.textBaseline = this.textBaseline;\n\t\to.maxWidth = this.maxWidth;\n\t\to.outline = this.outline;\n\t\to.lineHeight = this.lineHeight;\n\t\to.lineWidth = this.lineWidth;\n\t\treturn o;\n\t};\n\n\t/**\n\t * @method _getWorkingContext\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @return {CanvasRenderingContext2D}\n\t * @protected\n\t **/\n\tp._prepContext = function(ctx) {\n\t\tctx.font = this.font||\"10px sans-serif\";\n\t\tctx.textAlign = this.textAlign||\"left\";\n\t\tctx.textBaseline = this.textBaseline||\"top\";\n\t\treturn ctx;\n\t};\n\n\t/**\n\t * Draws multiline text.\n\t * @method _drawText\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {Object} o\n\t * @param {Array} lines\n\t * @return {Object}\n\t * @protected\n\t **/\n\tp._drawText = function(ctx, o, lines) {\n\t\tvar paint = !!ctx;\n\t\tif (!paint) {\n\t\t\tctx = Text._workingContext;\n\t\t\tctx.save();\n\t\t\tthis._prepContext(ctx);\n\t\t}\n\t\tvar lineHeight = this.lineHeight||this.getMeasuredLineHeight();\n\t\t\n\t\tvar maxW = 0, count = 0;\n\t\tvar hardLines = String(this.text).split(/(?:\\r\\n|\\r|\\n)/);\n\t\tfor (var i=0, l=hardLines.length; i<l; i++) {\n\t\t\tvar str = hardLines[i];\n\t\t\tvar w = null;\n\t\t\t\n\t\t\tif (this.lineWidth != null && (w = ctx.measureText(str).width) > this.lineWidth) {\n\t\t\t\t// text wrapping:\n\t\t\t\tvar words = str.split(/(\\s)/);\n\t\t\t\tstr = words[0];\n\t\t\t\tw = ctx.measureText(str).width;\n\t\t\t\t\n\t\t\t\tfor (var j=1, jl=words.length; j<jl; j+=2) {\n\t\t\t\t\t// Line needs to wrap:\n\t\t\t\t\tvar wordW = ctx.measureText(words[j] + words[j+1]).width;\n\t\t\t\t\tif (w + wordW > this.lineWidth) {\n\t\t\t\t\t\tif (paint) { this._drawTextLine(ctx, str, count*lineHeight); }\n\t\t\t\t\t\tif (lines) { lines.push(str); }\n\t\t\t\t\t\tif (w > maxW) { maxW = w; }\n\t\t\t\t\t\tstr = words[j+1];\n\t\t\t\t\t\tw = ctx.measureText(str).width;\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstr += words[j] + words[j+1];\n\t\t\t\t\t\tw += wordW;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (paint) { this._drawTextLine(ctx, str, count*lineHeight); }\n\t\t\tif (lines) { lines.push(str); }\n\t\t\tif (o && w == null) { w = ctx.measureText(str).width; }\n\t\t\tif (w > maxW) { maxW = w; }\n\t\t\tcount++;\n\t\t}\n\t\t\n\t\tif (o) {\n\t\t\to.width = maxW;\n\t\t\to.height = count*lineHeight;\n\t\t}\n\t\tif (!paint) { ctx.restore(); }\n\t\treturn o;\n\t};\n\n\t/**\n\t * @method _drawTextLine\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {String} text\n\t * @param {Number} y\n\t * @protected\n\t **/\n\tp._drawTextLine = function(ctx, text, y) {\n\t\t// Chrome 17 will fail to draw the text if the last param is included but null, so we feed it a large value instead:\n\t\tif (this.outline) { ctx.strokeText(text, 0, y, this.maxWidth||0xFFFF); }\n\t\telse { ctx.fillText(text, 0, y, this.maxWidth||0xFFFF); }\n\t};\n\t\n\t\n\t/**\n\t * @method _getMeasuredWidth\n\t * @param {String} text\n\t * @protected\n\t **/\n\tp._getMeasuredWidth = function(text) {\n\t\tvar ctx = Text._workingContext;\n\t\tctx.save();\n\t\tvar w = this._prepContext(ctx).measureText(text).width;\n\t\tctx.restore();\n\t\treturn w;\n\t};\n\n\n\tcreatejs.Text = createjs.promote(Text, \"DisplayObject\");\n}());\n\n//##############################################################################\n// BitmapText.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Displays text using bitmap glyphs defined in a sprite sheet. Multi-line text is supported\n\t * using new line characters, but automatic wrapping is not supported. See the \n\t * {{#crossLink \"BitmapText/spriteSheet:property\"}}{{/crossLink}}\n\t * property for more information on defining glyphs.\n\t * \n\t * <strong>Important:</strong> BitmapText extends Container, but is not designed to be used as one.\n\t * As such, methods like addChild and removeChild are disabled.\n\t * @class BitmapText\n\t * @extends DisplayObject\n\t * @param {String} [text=\"\"] The text to display.\n\t * @param {SpriteSheet} [spriteSheet=null] The spritesheet that defines the character glyphs.\n\t * @constructor\n\t **/\n\tfunction BitmapText(text, spriteSheet) {\n\t\tthis.Container_constructor();\n\t\t\n\t\t\n\t// public properties:\n\t\t/**\n\t\t * The text to display.\n\t\t * @property text\n\t\t * @type String\n\t\t * @default \"\"\n\t\t **/\n\t\tthis.text = text||\"\";\n\t\t\n\t\t/**\n\t\t * A SpriteSheet instance that defines the glyphs for this bitmap text. Each glyph/character\n\t\t * should have a single frame animation defined in the sprite sheet named the same as\n\t\t * corresponding character. For example, the following animation definition:\n\t\t *\n\t\t * \t\t\"A\": {frames: [0]}\n\t\t *\n\t\t * would indicate that the frame at index 0 of the spritesheet should be drawn for the \"A\" character. The short form\n\t\t * is also acceptable:\n\t\t * \n\t\t * \t\t\"A\": 0\n\t\t *\n\t\t * Note that if a character in the text is not found in the sprite sheet, it will also\n\t\t * try to use the alternate case (upper or lower).\n\t\t *\n\t\t * See SpriteSheet for more information on defining sprite sheet data.\n\t\t * @property spriteSheet\n\t\t * @type SpriteSheet\n\t\t * @default null\n\t\t **/\n\t\tthis.spriteSheet = spriteSheet;\n\t\n\t\t/**\n\t\t * The height of each line of text. If 0, then it will use a line height calculated\n\t\t * by checking for the height of the \"1\", \"T\", or \"L\" character (in that order). If\n\t\t * those characters are not defined, it will use the height of the first frame of the\n\t\t * sprite sheet.\n\t\t * @property lineHeight\n\t\t * @type Number\n\t\t * @default 0\n\t\t **/\n\t\tthis.lineHeight = 0;\n\t\n\t\t/**\n\t\t * This spacing (in pixels) will be added after each character in the output.\n\t\t * @property letterSpacing\n\t\t * @type Number\n\t\t * @default 0\n\t\t **/\n\t\tthis.letterSpacing = 0;\n\t\n\t\t/**\n\t\t * If a space character is not defined in the sprite sheet, then empty pixels equal to\n\t\t * spaceWidth will be inserted instead. If 0, then it will use a value calculated\n\t\t * by checking for the width of the \"1\", \"l\", \"E\", or \"A\" character (in that order). If\n\t\t * those characters are not defined, it will use the width of the first frame of the\n\t\t * sprite sheet.\n\t\t * @property spaceWidth\n\t\t * @type Number\n\t\t * @default 0\n\t\t **/\n\t\tthis.spaceWidth = 0;\n\t\t\n\t\t\n\t// private properties:\n\t \t/**\n\t\t * @property _oldProps\n\t\t * @type Object\n\t\t * @protected\n\t\t **/\n\t\tthis._oldProps = {text:0,spriteSheet:0,lineHeight:0,letterSpacing:0,spaceWidth:0};\n\t}\n\tvar p = createjs.extend(BitmapText, createjs.Container);\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n// static properties:\n\t/**\n\t * BitmapText uses Sprite instances to draw text. To reduce the creation and destruction of instances (and thus garbage collection), it maintains\n\t * an internal object pool of sprite instances to reuse. Increasing this value can cause more sprites to be\n\t * retained, slightly increasing memory use, but reducing instantiation.\n\t * @property maxPoolSize\n\t * @type Number\n\t * @static\n\t * @default 100\n\t **/\n\tBitmapText.maxPoolSize = 100;\n\t\n\t/**\n\t * Sprite object pool.\n\t * @type {Array}\n\t * @static\n\t * @private\n\t */\n\tBitmapText._spritePool = [];\n\n\t\n// public methods:\n\t/**\n\t * Docced in superclass.\n\t **/\n\tp.draw = function(ctx, ignoreCache) {\n\t\tif (this.DisplayObject_draw(ctx, ignoreCache)) { return; }\n\t\tthis._updateText();\n\t\tthis.Container_draw(ctx, ignoreCache);\n\t};\n\t\n\t/**\n\t * Docced in superclass.\n\t **/\n\tp.getBounds = function() {\n\t\tthis._updateText();\n\t\treturn this.Container_getBounds();\n\t};\n\t\n\t/**\n\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t **/\n\tp.isVisible = function() {\n\t\tvar hasContent = this.cacheCanvas || (this.spriteSheet && this.spriteSheet.complete && this.text);\n\t\treturn !!(this.visible && this.alpha > 0 && this.scaleX !== 0 && this.scaleY !== 0 && hasContent);\n\t};\n\t\n\tp.clone = function() {\n\t\treturn this._cloneProps(new BitmapText(this.text, this.spriteSheet));\n\t};\n\t\n\t/**\n\t * <strong>Disabled in BitmapText.</strong>\n\t * @method addChild\n\t **/\n\t/**\n\t * <strong>Disabled in BitmapText.</strong>\n\t * @method addChildAt\n\t **/\n\t/**\n\t * <strong>Disabled in BitmapText.</strong>\n\t * @method removeChild\n\t **/\n\t/**\n\t * <strong>Disabled in BitmapText.</strong>\n\t * @method removeChildAt\n\t **/\n\t/**\n\t * <strong>Disabled in BitmapText.</strong>\n\t * @method removeAllChildren\n\t **/\n\tp.addChild = p.addChildAt = p.removeChild = p.removeChildAt = p.removeAllChildren = function() {};\n\n\n// private methods:\n \t/**\n\t * @method _cloneProps\n\t * @param {BitmapText} o\n\t * @return {BitmapText} o\n\t * @protected\n\t **/\n\tp._cloneProps = function(o) {\n\t\tthis.Container__cloneProps(o);\n\t\to.lineHeight = this.lineHeight;\n\t\to.letterSpacing = this.letterSpacing;\n\t\to.spaceWidth = this.spaceWidth;\n\t\treturn o;\n\t};\n\t\n\t/**\n\t * @method _getFrameIndex\n\t * @param {String} character\n\t * @param {SpriteSheet} spriteSheet\n\t * @return {Number}\n\t * @protected\n\t **/\n\tp._getFrameIndex = function(character, spriteSheet) {\n\t\tvar c, o = spriteSheet.getAnimation(character);\n\t\tif (!o) {\n\t\t\t(character != (c = character.toUpperCase())) || (character != (c = character.toLowerCase())) || (c=null);\n\t\t\tif (c) { o = spriteSheet.getAnimation(c); }\n\t\t}\n\t\treturn o && o.frames[0];\n\t};\n\t\n\t/**\n\t * @method _getFrame\n\t * @param {String} character\n\t * @param {SpriteSheet} spriteSheet\n\t * @return {Object}\n\t * @protected\n\t **/\n\tp._getFrame = function(character, spriteSheet) {\n\t\tvar index = this._getFrameIndex(character, spriteSheet);\n\t\treturn index == null ? index : spriteSheet.getFrame(index);\n\t};\n\t\n\t/**\n\t * @method _getLineHeight\n\t * @param {SpriteSheet} ss\n\t * @return {Number}\n\t * @protected\n\t **/\n\tp._getLineHeight = function(ss) {\n\t\tvar frame = this._getFrame(\"1\",ss) || this._getFrame(\"T\",ss) || this._getFrame(\"L\",ss) || ss.getFrame(0);\n\t\treturn frame ? frame.rect.height : 1;\n\t};\n\t/**\n\t * @method _getSpaceWidth\n\t * @param {SpriteSheet} ss\n\t * @return {Number}\n\t * @protected\n\t **/\n\tp._getSpaceWidth = function(ss) {\n\t\tvar frame = this._getFrame(\"1\",ss) || this._getFrame(\"l\",ss) || this._getFrame(\"e\",ss) || this._getFrame(\"a\",ss) || ss.getFrame(0);\n\t\treturn frame ? frame.rect.width : 1;\n\t};\n\t\n\t/**\n\t * @method _drawText\n\t * @protected\n\t **/\n\tp._updateText = function() {\n\t\tvar x=0, y=0, o=this._oldProps, change=false, spaceW=this.spaceWidth, lineH=this.lineHeight, ss=this.spriteSheet;\n\t\tvar pool=BitmapText._spritePool, kids=this.children, childIndex=0, numKids=kids.length, sprite;\n\t\t\n\t\tfor (var n in o) {\n\t\t\tif (o[n] != this[n]) {\n\t\t\t\to[n] = this[n];\n\t\t\t\tchange = true;\n\t\t\t}\n\t\t}\n\t\tif (!change) { return; }\n\t\t\n\t\tvar hasSpace = !!this._getFrame(\" \", ss);\n\t\tif (!hasSpace && !spaceW) { spaceW = this._getSpaceWidth(ss); }\n\t\tif (!lineH) { lineH = this._getLineHeight(ss); }\n\t\t\n\t\tfor(var i=0, l=this.text.length; i<l; i++) {\n\t\t\tvar character = this.text.charAt(i);\n\t\t\tif (character == \" \" && !hasSpace) {\n\t\t\t\tx += spaceW;\n\t\t\t\tcontinue;\n\t\t\t} else if (character==\"\\n\" || character==\"\\r\") {\n\t\t\t\tif (character==\"\\r\" && this.text.charAt(i+1) == \"\\n\") { i++; } // crlf\n\t\t\t\tx = 0;\n\t\t\t\ty += lineH;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar index = this._getFrameIndex(character, ss);\n\t\t\tif (index == null) { continue; }\n\t\t\t\n\t\t\tif (childIndex < numKids) {\n\t\t\t\tsprite = kids[childIndex];\n\t\t\t} else {\n\t\t\t\tkids.push(sprite = pool.length ? pool.pop() : new createjs.Sprite());\n\t\t\t\tsprite.parent = this;\n\t\t\t\tnumKids++;\n\t\t\t}\n\t\t\tsprite.spriteSheet = ss;\n\t\t\tsprite.gotoAndStop(index);\n\t\t\tsprite.x = x;\n\t\t\tsprite.y = y;\n\t\t\tchildIndex++;\n\t\t\t\n\t\t\tx += sprite.getBounds().width + this.letterSpacing;\n\t\t}\n\t\twhile (numKids > childIndex) {\n\t\t\t // faster than removeChild.\n\t\t\tpool.push(sprite = kids.pop());\n\t\t\tsprite.parent = null;\n\t\t\tnumKids--;\n\t\t}\n\t\tif (pool.length > BitmapText.maxPoolSize) { pool.length = BitmapText.maxPoolSize; }\n\t};\n\n\n\tcreatejs.BitmapText = createjs.promote(BitmapText, \"Container\");\n}());\n\n//##############################################################################\n// SpriteSheetUtils.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\r\n\r\n(function() {\r\n\t\"use strict\";\r\n\t\r\n\t\r\n// constructor:\r\n\t/**\r\n\t * The SpriteSheetUtils class is a collection of static methods for working with {{#crossLink \"SpriteSheet\"}}{{/crossLink}}s.\r\n\t * A sprite sheet is a series of images (usually animation frames) combined into a single image on a regular grid. For\r\n\t * example, an animation consisting of 8 100x100 images could be combined into a 400x200 sprite sheet (4 frames across\r\n\t * by 2 high). The SpriteSheetUtils class uses a static interface and should not be instantiated.\r\n\t * @class SpriteSheetUtils\r\n\t * @static\r\n\t **/\r\n\tfunction SpriteSheetUtils() {\r\n\t\tthrow \"SpriteSheetUtils cannot be instantiated\";\r\n\t}\r\n\r\n\r\n// private static properties:\r\n\t/**\r\n\t * @property _workingCanvas\r\n\t * @static\r\n\t * @type HTMLCanvasElement | Object\r\n\t * @protected\r\n\t*/\r\n\t/**\r\n\t * @property _workingContext\r\n\t * @static\r\n\t * @type CanvasRenderingContext2D\r\n\t * @protected\r\n\t*/\r\n\tvar canvas = (createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"));\r\n\tif (canvas.getContext) {\r\n\t\tSpriteSheetUtils._workingCanvas = canvas;\r\n\t\tSpriteSheetUtils._workingContext = canvas.getContext(\"2d\");\r\n\t\tcanvas.width = canvas.height = 1;\r\n\t}\r\n\r\n\r\n// public static methods:\r\n\t/**\r\n\t * <b>This is an experimental method, and may be buggy. Please report issues.</b><br/><br/>\r\n\t * Extends the existing sprite sheet by flipping the original frames horizontally, vertically, or both,\r\n\t * and adding appropriate animation & frame data. The flipped animations will have a suffix added to their names\r\n\t * (_h, _v, _hv as appropriate). Make sure the sprite sheet images are fully loaded before using this method.\r\n\t * <br/><br/>\r\n\t * For example:<br/>\r\n\t * SpriteSheetUtils.addFlippedFrames(mySpriteSheet, true, true);\r\n\t * The above would add frames that are flipped horizontally AND frames that are flipped vertically.\r\n\t * <br/><br/>\r\n\t * Note that you can also flip any display object by setting its scaleX or scaleY to a negative value. On some\r\n\t * browsers (especially those without hardware accelerated canvas) this can result in slightly degraded performance,\r\n\t * which is why addFlippedFrames is available.\r\n\t * @method addFlippedFrames\r\n\t * @static\r\n\t * @param {SpriteSheet} spriteSheet\r\n\t * @param {Boolean} horizontal If true, horizontally flipped frames will be added.\r\n\t * @param {Boolean} vertical If true, vertically flipped frames will be added.\r\n\t * @param {Boolean} both If true, frames that are flipped both horizontally and vertically will be added.\r\n\t * @deprecated Modern browsers perform better when flipping via a transform (ex. scaleX=-1) rendering this obsolete.\r\n\t **/\r\n\tSpriteSheetUtils.addFlippedFrames = function(spriteSheet, horizontal, vertical, both) {\r\n\t\tif (!horizontal && !vertical && !both) { return; }\r\n\r\n\t\tvar count = 0;\r\n\t\tif (horizontal) { SpriteSheetUtils._flip(spriteSheet,++count,true,false); }\r\n\t\tif (vertical) { SpriteSheetUtils._flip(spriteSheet,++count,false,true); }\r\n\t\tif (both) { SpriteSheetUtils._flip(spriteSheet,++count,true,true); }\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a single frame of the specified sprite sheet as a new PNG image. An example of when this may be useful is\r\n\t * to use a spritesheet frame as the source for a bitmap fill.\r\n\t *\r\n\t * <strong>WARNING:</strong> In almost all cases it is better to display a single frame using a {{#crossLink \"Sprite\"}}{{/crossLink}}\r\n\t * with a {{#crossLink \"Sprite/gotoAndStop\"}}{{/crossLink}} call than it is to slice out a frame using this\r\n\t * method and display it with a Bitmap instance. You can also crop an image using the {{#crossLink \"Bitmap/sourceRect\"}}{{/crossLink}}\r\n\t * property of {{#crossLink \"Bitmap\"}}{{/crossLink}}.\r\n\t *\r\n\t * The extractFrame method may cause cross-domain warnings since it accesses pixels directly on the canvas.\r\n\t * @method extractFrame\r\n\t * @static\r\n\t * @param {SpriteSheet} spriteSheet The SpriteSheet instance to extract a frame from.\r\n\t * @param {Number|String} frameOrAnimation The frame number or animation name to extract. If an animation\r\n\t * name is specified, only the first frame of the animation will be extracted.\r\n\t * @return {HTMLImageElement} a single frame of the specified sprite sheet as a new PNG image.\r\n\t*/\r\n\tSpriteSheetUtils.extractFrame = function(spriteSheet, frameOrAnimation) {\r\n\t\tif (isNaN(frameOrAnimation)) {\r\n\t\t\tframeOrAnimation = spriteSheet.getAnimation(frameOrAnimation).frames[0];\r\n\t\t}\r\n\t\tvar data = spriteSheet.getFrame(frameOrAnimation);\r\n\t\tif (!data) { return null; }\r\n\t\tvar r = data.rect;\r\n\t\tvar canvas = SpriteSheetUtils._workingCanvas;\r\n\t\tcanvas.width = r.width;\r\n\t\tcanvas.height = r.height;\r\n\t\tSpriteSheetUtils._workingContext.drawImage(data.image, r.x, r.y, r.width, r.height, 0, 0, r.width, r.height);\r\n\t\tvar img = document.createElement(\"img\");\r\n\t\timg.src = canvas.toDataURL(\"image/png\");\r\n\t\treturn img;\r\n\t};\r\n\r\n\t/**\r\n\t * Merges the rgb channels of one image with the alpha channel of another. This can be used to combine a compressed\r\n\t * JPEG image containing color data with a PNG32 monochromatic image containing alpha data. With certain types of\r\n\t * images (those with detail that lend itself to JPEG compression) this can provide significant file size savings\r\n\t * versus a single RGBA PNG32. This method is very fast (generally on the order of 1-2 ms to run).\r\n\t * @method mergeAlpha\r\n\t * @static\r\n\t * @param {HTMLImageElement} rbgImage The image (or canvas) containing the RGB channels to use.\r\n\t * @param {HTMLImageElement} alphaImage The image (or canvas) containing the alpha channel to use.\r\n\t * @param {HTMLCanvasElement} canvas Optional. If specified, this canvas will be used and returned. If not, a new canvas will be created.\r\n\t * @return {HTMLCanvasElement} A canvas with the combined image data. This can be used as a source for Bitmap or SpriteSheet.\r\n\t * @deprecated Tools such as ImageAlpha generally provide better results. This will be moved to sandbox in the future.\r\n\t*/\r\n\tSpriteSheetUtils.mergeAlpha = function(rgbImage, alphaImage, canvas) {\r\n\t\tif (!canvas) { canvas = createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\"); }\r\n\t\tcanvas.width = Math.max(alphaImage.width, rgbImage.width);\r\n\t\tcanvas.height = Math.max(alphaImage.height, rgbImage.height);\r\n\t\tvar ctx = canvas.getContext(\"2d\");\r\n\t\tctx.save();\r\n\t\tctx.drawImage(rgbImage,0,0);\r\n\t\tctx.globalCompositeOperation = \"destination-in\";\r\n\t\tctx.drawImage(alphaImage,0,0);\r\n\t\tctx.restore();\r\n\t\treturn canvas;\r\n\t};\r\n\r\n\r\n// private static methods:\r\n\tSpriteSheetUtils._flip = function(spriteSheet, count, h, v) {\r\n\t\tvar imgs = spriteSheet._images;\r\n\t\tvar canvas = SpriteSheetUtils._workingCanvas;\r\n\t\tvar ctx = SpriteSheetUtils._workingContext;\r\n\t\tvar il = imgs.length/count;\r\n\t\tfor (var i=0;i<il;i++) {\r\n\t\t\tvar src = imgs[i];\r\n\t\t\tsrc.__tmp = i; // a bit hacky, but faster than doing indexOf below.\r\n\t\t\tctx.setTransform(1,0,0,1,0,0);\r\n\t\t\tctx.clearRect(0,0,canvas.width+1,canvas.height+1);\r\n\t\t\tcanvas.width = src.width;\r\n\t\t\tcanvas.height = src.height;\r\n\t\t\tctx.setTransform(h?-1:1, 0, 0, v?-1:1, h?src.width:0, v?src.height:0);\r\n\t\t\tctx.drawImage(src,0,0);\r\n\t\t\tvar img = document.createElement(\"img\");\r\n\t\t\timg.src = canvas.toDataURL(\"image/png\");\r\n\t\t\t// work around a strange bug in Safari:\r\n\t\t\timg.width = src.width;\r\n\t\t\timg.height = src.height;\r\n\t\t\timgs.push(img);\r\n\t\t}\r\n\r\n\t\tvar frames = spriteSheet._frames;\r\n\t\tvar fl = frames.length/count;\r\n\t\tfor (i=0;i<fl;i++) {\r\n\t\t\tsrc = frames[i];\r\n\t\t\tvar rect = src.rect.clone();\r\n\t\t\timg = imgs[src.image.__tmp+il*count];\r\n\r\n\t\t\tvar frame = {image:img,rect:rect,regX:src.regX,regY:src.regY};\r\n\t\t\tif (h) {\r\n\t\t\t\trect.x = img.width-rect.x-rect.width; // update rect\r\n\t\t\t\tframe.regX = rect.width-src.regX; // update registration point\r\n\t\t\t}\r\n\t\t\tif (v) {\r\n\t\t\t\trect.y = img.height-rect.y-rect.height;  // update rect\r\n\t\t\t\tframe.regY = rect.height-src.regY; // update registration point\r\n\t\t\t}\r\n\t\t\tframes.push(frame);\r\n\t\t}\r\n\r\n\t\tvar sfx = \"_\"+(h?\"h\":\"\")+(v?\"v\":\"\");\r\n\t\tvar names = spriteSheet._animations;\r\n\t\tvar data = spriteSheet._data;\r\n\t\tvar al = names.length/count;\r\n\t\tfor (i=0;i<al;i++) {\r\n\t\t\tvar name = names[i];\r\n\t\t\tsrc = data[name];\r\n\t\t\tvar anim = {name:name+sfx,speed:src.speed,next:src.next,frames:[]};\r\n\t\t\tif (src.next) { anim.next += sfx; }\r\n\t\t\tframes = src.frames;\r\n\t\t\tfor (var j=0,l=frames.length;j<l;j++) {\r\n\t\t\t\tanim.frames.push(frames[j]+fl*count);\r\n\t\t\t}\r\n\t\t\tdata[anim.name] = anim;\r\n\t\t\tnames.push(anim.name);\r\n\t\t}\r\n\t};\r\n\r\n\r\n\tcreatejs.SpriteSheetUtils = SpriteSheetUtils;\r\n}());\n\n//##############################################################################\n// SpriteSheetBuilder.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * The SpriteSheetBuilder allows you to generate sprite sheets at run time from any display object. This can allow\n\t * you to maintain your assets as vector graphics (for low file size), and render them at run time as sprite sheets\n\t * for better performance.\n\t *\n\t * Sprite sheets can be built either synchronously, or asynchronously, so that large sprite sheets can be generated\n\t * without locking the UI.\n\t *\n\t * Note that the \"images\" used in the generated sprite sheet are actually canvas elements, and that they will be sized\n\t * to the nearest power of 2 up to the value of <code>maxWidth</code> or <code>maxHeight</code>.\n\t * @class SpriteSheetBuilder\n\t * @extends EventDispatcher\n\t * @constructor\n\t **/\n\tfunction SpriteSheetBuilder() {\n\t\tthis.EventDispatcher_constructor();\n\t\t\n\t// public properties:\n\t\t/**\n\t\t * The maximum width for the images (not individual frames) in the generated sprite sheet. It is recommended to use\n\t\t * a power of 2 for this value (ex. 1024, 2048, 4096). If the frames cannot all fit within the max dimensions, then\n\t\t * additional images will be created as needed.\n\t\t * @property maxWidth\n\t\t * @type Number\n\t\t * @default 2048\n\t\t*/\n\t\tthis.maxWidth = 2048;\n\t\n\t\t/**\n\t\t * The maximum height for the images (not individual frames) in the generated sprite sheet. It is recommended to use\n\t\t * a power of 2 for this value (ex. 1024, 2048, 4096). If the frames cannot all fit within the max dimensions, then\n\t\t * additional images will be created as needed.\n\t\t * @property maxHeight\n\t\t * @type Number\n\t\t * @default 2048\n\t\t **/\n\t\tthis.maxHeight = 2048;\n\t\n\t\t/**\n\t\t * The sprite sheet that was generated. This will be null before a build is completed successfully.\n\t\t * @property spriteSheet\n\t\t * @type SpriteSheet\n\t\t **/\n\t\tthis.spriteSheet = null;\n\t\n\t\t/**\n\t\t * The scale to apply when drawing all frames to the sprite sheet. This is multiplied against any scale specified\n\t\t * in the addFrame call. This can be used, for example, to generate a sprite sheet at run time that is tailored to\n\t\t * the a specific device resolution (ex. tablet vs mobile).\n\t\t * @property scale\n\t\t * @type Number\n\t\t * @default 1\n\t\t **/\n\t\tthis.scale = 1;\n\t\n\t\t/**\n\t\t* The padding to use between frames. This is helpful to preserve antialiasing on drawn vector content.\n\t\t* @property padding\n\t\t* @type Number\n\t\t* @default 1\n\t\t**/\n\t\tthis.padding = 1;\n\t\n\t\t/**\n\t\t * A number from 0.01 to 0.99 that indicates what percentage of time the builder can use. This can be\n\t\t * thought of as the number of seconds per second the builder will use. For example, with a timeSlice value of 0.3,\n\t\t * the builder will run 20 times per second, using approximately 15ms per build (30% of available time, or 0.3s per second).\n\t\t * Defaults to 0.3.\n\t\t * @property timeSlice\n\t\t * @type Number\n\t\t * @default 0.3\n\t\t **/\n\t\tthis.timeSlice = 0.3;\n\t\n\t\t/**\n\t\t * A value between 0 and 1 that indicates the progress of a build, or -1 if a build has not\n\t\t * been initiated.\n\t\t * @property progress\n\t\t * @type Number\n\t\t * @default -1\n\t\t * @readonly\n\t\t **/\n\t\tthis.progress = -1;\n\t\n\t\n\t// private properties:\n\t\t/**\n\t\t * @property _frames\n\t\t * @protected\n\t\t * @type Array\n\t\t **/\n\t\tthis._frames = [];\n\t\n\t\t/**\n\t\t * @property _animations\n\t\t * @protected\n\t\t * @type Array\n\t\t **/\n\t\tthis._animations = {};\n\t\n\t\t/**\n\t\t * @property _data\n\t\t * @protected\n\t\t * @type Array\n\t\t **/\n\t\tthis._data = null;\n\t\n\t\t/**\n\t\t * @property _nextFrameIndex\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._nextFrameIndex = 0;\n\t\n\t\t/**\n\t\t * @property _index\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._index = 0;\n\t\n\t\t/**\n\t\t * @property _timerID\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._timerID = null;\n\t\n\t\t/**\n\t\t * @property _scale\n\t\t * @protected\n\t\t * @type Number\n\t\t **/\n\t\tthis._scale = 1;\n\t}\n\tvar p = createjs.extend(SpriteSheetBuilder, createjs.EventDispatcher);\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\n// constants:\n\tSpriteSheetBuilder.ERR_DIMENSIONS = \"frame dimensions exceed max spritesheet dimensions\";\n\tSpriteSheetBuilder.ERR_RUNNING = \"a build is already running\";\n\n// events:\n\t/**\n\t * Dispatched when a build completes.\n\t * @event complete\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t * @since 0.6.0\n\t */\n\n\t/**\n\t * Dispatched when an asynchronous build has progress.\n\t * @event progress\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t * @param {Number} progress The current progress value (0-1).\n\t * @since 0.6.0\n\t */\n\n\n// public methods:\n\t/**\n\t * Adds a frame to the {{#crossLink \"SpriteSheet\"}}{{/crossLink}}. Note that the frame will not be drawn until you\n\t * call {{#crossLink \"SpriteSheetBuilder/build\"}}{{/crossLink}} method. The optional setup params allow you to have\n\t * a function run immediately before the draw occurs. For example, this allows you to add a single source multiple\n\t * times, but manipulate it or its children to change it to generate different frames.\n\t *\n\t * Note that the source's transformations (x, y, scale, rotate, alpha) will be ignored, except for regX/Y. To apply\n\t * transforms to a source object and have them captured in the sprite sheet, simply place it into a {{#crossLink \"Container\"}}{{/crossLink}}\n\t * and pass in the Container as the source.\n\t * @method addFrame\n\t * @param {DisplayObject} source The source {{#crossLink \"DisplayObject\"}}{{/crossLink}}  to draw as the frame.\n\t * @param {Rectangle} [sourceRect] A {{#crossLink \"Rectangle\"}}{{/crossLink}} defining the portion of the\n\t * source to draw to the frame. If not specified, it will look for a <code>getBounds</code> method, bounds property,\n\t * or <code>nominalBounds</code> property on the source to use. If one is not found, the frame will be skipped.\n\t * @param {Number} [scale=1] Optional. The scale to draw this frame at. Default is 1.\n\t * @param {Function} [setupFunction] A function to call immediately before drawing this frame. It will be called with two parameters: the source, and setupData.\n\t * @param {Object} [setupData] Arbitrary setup data to pass to setupFunction as the second parameter.\n\t * @return {Number} The index of the frame that was just added, or null if a sourceRect could not be determined.\n\t **/\n\tp.addFrame = function(source, sourceRect, scale, setupFunction, setupData) {\n\t\tif (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }\n\t\tvar rect = sourceRect||source.bounds||source.nominalBounds;\n\t\tif (!rect&&source.getBounds) { rect = source.getBounds(); }\n\t\tif (!rect) { return null; }\n\t\tscale = scale||1;\n\t\treturn this._frames.push({source:source, sourceRect:rect, scale:scale, funct:setupFunction, data:setupData, index:this._frames.length, height:rect.height*scale})-1;\n\t};\n\n\t/**\n\t * Adds an animation that will be included in the created sprite sheet.\n\t * @method addAnimation\n\t * @param {String} name The name for the animation.\n\t * @param {Array} frames An array of frame indexes that comprise the animation. Ex. [3,6,5] would describe an animation\n\t * that played frame indexes 3, 6, and 5 in that order.\n\t * @param {String} [next] Specifies the name of the animation to continue to after this animation ends. You can\n\t * also pass false to have the animation stop when it ends. By default it will loop to the start of the same animation.\n\t * @param {Number} [frequency] Specifies a frame advance frequency for this animation. For example, a value\n\t * of 2 would cause the animation to advance every second tick.\n\t **/\n\tp.addAnimation = function(name, frames, next, frequency) {\n\t\tif (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }\n\t\tthis._animations[name] = {frames:frames, next:next, frequency:frequency};\n\t};\n\n\t/**\n\t * This will take a MovieClip instance, and add its frames and labels to this builder. Labels will be added as an animation\n\t * running from the label index to the next label. For example, if there is a label named \"foo\" at frame 0 and a label\n\t * named \"bar\" at frame 10, in a MovieClip with 15 frames, it will add an animation named \"foo\" that runs from frame\n\t * index 0 to 9, and an animation named \"bar\" that runs from frame index 10 to 14.\n\t *\n\t * Note that this will iterate through the full MovieClip with actionsEnabled set to false, ending on the last frame.\n\t * @method addMovieClip\n\t * @param {MovieClip} source The source MovieClip instance to add to the sprite sheet.\n\t * @param {Rectangle} [sourceRect] A {{#crossLink \"Rectangle\"}}{{/crossLink}} defining the portion of the source to\n\t * draw to the frame. If not specified, it will look for a <code>getBounds</code> method, <code>frameBounds</code>\n\t * Array, <code>bounds</code> property, or <code>nominalBounds</code> property on the source to use. If one is not\n\t * found, the MovieClip will be skipped.\n\t * @param {Number} [scale=1] The scale to draw the movie clip at.\n\t * @param {Function} [setupFunction] A function to call immediately before drawing each frame. It will be called with three parameters: the source, setupData, and the frame index.\n\t * @param {Object} [setupData] Arbitrary setup data to pass to setupFunction as the second parameter.\n\t * @param {Function} [labelFunction] This method will be called for each movieclip label that is added with four parameters: the label name, the source movieclip instance, the starting frame index (in the movieclip timeline) and the end index. It must return a new name for the label/animation, or false to exclude the label.\n\t **/\n\tp.addMovieClip = function(source, sourceRect, scale, setupFunction, setupData, labelFunction) {\n\t\tif (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }\n\t\tvar rects = source.frameBounds;\n\t\tvar rect = sourceRect||source.bounds||source.nominalBounds;\n\t\tif (!rect&&source.getBounds) { rect = source.getBounds(); }\n\t\tif (!rect && !rects) { return; }\n\n\t\tvar i, l, baseFrameIndex = this._frames.length;\n\t\tvar duration = source.timeline.duration;\n\t\tfor (i=0; i<duration; i++) {\n\t\t\tvar r = (rects&&rects[i]) ? rects[i] : rect;\n\t\t\tthis.addFrame(source, r, scale, this._setupMovieClipFrame, {i:i, f:setupFunction, d:setupData});\n\t\t}\n\t\tvar labels = source.timeline._labels;\n\t\tvar lbls = [];\n\t\tfor (var n in labels) {\n\t\t\tlbls.push({index:labels[n], label:n});\n\t\t}\n\t\tif (lbls.length) {\n\t\t\tlbls.sort(function(a,b){ return a.index-b.index; });\n\t\t\tfor (i=0,l=lbls.length; i<l; i++) {\n\t\t\t\tvar label = lbls[i].label;\n\t\t\t\tvar start = baseFrameIndex+lbls[i].index;\n\t\t\t\tvar end = baseFrameIndex+((i == l-1) ? duration : lbls[i+1].index);\n\t\t\t\tvar frames = [];\n\t\t\t\tfor (var j=start; j<end; j++) { frames.push(j); }\n\t\t\t\tif (labelFunction) {\n\t\t\t\t\tlabel = labelFunction(label, source, start, end);\n\t\t\t\t\tif (!label) { continue; }\n\t\t\t\t}\n\t\t\t\tthis.addAnimation(label, frames, true); // for now, this loops all animations.\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Builds a SpriteSheet instance based on the current frames.\n\t * @method build\n\t * @return {SpriteSheet} The created SpriteSheet instance, or null if a build is already running or an error occurred.\n\t **/\n\tp.build = function() {\n\t\tif (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }\n\t\tthis._startBuild();\n\t\twhile (this._drawNext()) {}\n\t\tthis._endBuild();\n\t\treturn this.spriteSheet;\n\t};\n\n\t/**\n\t * Asynchronously builds a {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instance based on the current frames. It will\n\t * run 20 times per second, using an amount of time defined by <code>timeSlice</code>. When it is complete it will\n\t * call the specified callback.\n\t * @method buildAsync\n\t * @param {Number} [timeSlice] Sets the timeSlice property on this instance.\n\t **/\n\tp.buildAsync = function(timeSlice) {\n\t\tif (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }\n\t\tthis.timeSlice = timeSlice;\n\t\tthis._startBuild();\n\t\tvar _this = this;\n\t\tthis._timerID = setTimeout(function() { _this._run(); }, 50-Math.max(0.01, Math.min(0.99, this.timeSlice||0.3))*50);\n\t};\n\n\t/**\n\t * Stops the current asynchronous build.\n\t * @method stopAsync\n\t **/\n\tp.stopAsync = function() {\n\t\tclearTimeout(this._timerID);\n\t\tthis._data = null;\n\t};\n\n\t/**\n\t * SpriteSheetBuilder instances cannot be cloned.\n\t * @method clone\n\t **/\n\tp.clone = function() {\n\t\tthrow(\"SpriteSheetBuilder cannot be cloned.\");\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[SpriteSheetBuilder]\";\n\t};\n\n\n// private methods:\n\t/**\n\t * @method _startBuild\n\t * @protected\n\t **/\n\tp._startBuild = function() {\n\t\tvar pad = this.padding||0;\n\t\tthis.progress = 0;\n\t\tthis.spriteSheet = null;\n\t\tthis._index = 0;\n\t\tthis._scale = this.scale;\n\t\tvar dataFrames = [];\n\t\tthis._data = {\n\t\t\timages: [],\n\t\t\tframes: dataFrames,\n\t\t\tanimations: this._animations // TODO: should we \"clone\" _animations in case someone adds more animations after a build?\n\t\t};\n\n\t\tvar frames = this._frames.slice();\n\t\tframes.sort(function(a,b) { return (a.height<=b.height) ? -1 : 1; });\n\n\t\tif (frames[frames.length-1].height+pad*2 > this.maxHeight) { throw SpriteSheetBuilder.ERR_DIMENSIONS; }\n\t\tvar y=0, x=0;\n\t\tvar img = 0;\n\t\twhile (frames.length) {\n\t\t\tvar o = this._fillRow(frames, y, img, dataFrames, pad);\n\t\t\tif (o.w > x) { x = o.w; }\n\t\t\ty += o.h;\n\t\t\tif (!o.h || !frames.length) {\n\t\t\t\tvar canvas = createjs.createCanvas?createjs.createCanvas():document.createElement(\"canvas\");\n\t\t\t\tcanvas.width = this._getSize(x,this.maxWidth);\n\t\t\t\tcanvas.height = this._getSize(y,this.maxHeight);\n\t\t\t\tthis._data.images[img] = canvas;\n\t\t\t\tif (!o.h) {\n\t\t\t\t\tx=y=0;\n\t\t\t\t\timg++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t\n\t/**\n\t * @method _setupMovieClipFrame\n\t * @protected\n\t * @return {Number} The width & height of the row.\n\t **/\n\tp._setupMovieClipFrame = function(source, data) {\n\t\tvar ae = source.actionsEnabled;\n\t\tsource.actionsEnabled = false;\n\t\tsource.gotoAndStop(data.i);\n\t\tsource.actionsEnabled = ae;\n\t\tdata.f&&data.f(source, data.d, data.i);\n\t};\n\n\t/**\n\t * @method _getSize\n\t * @protected\n\t * @return {Number} The width & height of the row.\n\t **/\n\tp._getSize = function(size,max) {\n\t\tvar pow = 4;\n\t\twhile (Math.pow(2,++pow) < size){}\n\t\treturn Math.min(max,Math.pow(2,pow));\n\t};\n\n\t/**\n\t * @method _fillRow\n\t * @param {Array} frames\n\t * @param {Number} y\n\t * @param {HTMLImageElement} img\n\t * @param {Object} dataFrames\n\t * @param {Number} pad\n\t * @protected\n\t * @return {Number} The width & height of the row.\n\t **/\n\tp._fillRow = function(frames, y, img, dataFrames, pad) {\n\t\tvar w = this.maxWidth;\n\t\tvar maxH = this.maxHeight;\n\t\ty += pad;\n\t\tvar h = maxH-y;\n\t\tvar x = pad;\n\t\tvar height = 0;\n\t\tfor (var i=frames.length-1; i>=0; i--) {\n\t\t\tvar frame = frames[i];\n\t\t\tvar sc = this._scale*frame.scale;\n\t\t\tvar rect = frame.sourceRect;\n\t\t\tvar source = frame.source;\n\t\t\tvar rx = Math.floor(sc*rect.x-pad);\n\t\t\tvar ry = Math.floor(sc*rect.y-pad);\n\t\t\tvar rh = Math.ceil(sc*rect.height+pad*2);\n\t\t\tvar rw = Math.ceil(sc*rect.width+pad*2);\n\t\t\tif (rw > w) { throw SpriteSheetBuilder.ERR_DIMENSIONS; }\n\t\t\tif (rh > h || x+rw > w) { continue; }\n\t\t\tframe.img = img;\n\t\t\tframe.rect = new createjs.Rectangle(x,y,rw,rh);\n\t\t\theight = height || rh;\n\t\t\tframes.splice(i,1);\n\t\t\tdataFrames[frame.index] = [x,y,rw,rh,img,Math.round(-rx+sc*source.regX-pad),Math.round(-ry+sc*source.regY-pad)];\n\t\t\tx += rw;\n\t\t}\n\t\treturn {w:x, h:height};\n\t};\n\n\t/**\n\t * @method _endBuild\n\t * @protected\n\t **/\n\tp._endBuild = function() {\n\t\tthis.spriteSheet = new createjs.SpriteSheet(this._data);\n\t\tthis._data = null;\n\t\tthis.progress = 1;\n\t\tthis.dispatchEvent(\"complete\");\n\t};\n\n\t/**\n\t * @method _run\n\t * @protected\n\t **/\n\tp._run = function() {\n\t\tvar ts = Math.max(0.01, Math.min(0.99, this.timeSlice||0.3))*50;\n\t\tvar t = (new Date()).getTime()+ts;\n\t\tvar complete = false;\n\t\twhile (t > (new Date()).getTime()) {\n\t\t\tif (!this._drawNext()) { complete = true; break; }\n\t\t}\n\t\tif (complete) {\n\t\t\tthis._endBuild();\n\t\t} else {\n\t\t\tvar _this = this;\n\t\t\tthis._timerID = setTimeout(function() { _this._run(); }, 50-ts);\n\t\t}\n\t\tvar p = this.progress = this._index/this._frames.length;\n\t\tif (this.hasEventListener(\"progress\")) {\n\t\t\tvar evt = new createjs.Event(\"progress\");\n\t\t\tevt.progress = p;\n\t\t\tthis.dispatchEvent(evt);\n\t\t}\n\t};\n\n\t/**\n\t * @method _drawNext\n\t * @protected\n\t * @return Boolean Returns false if this is the last draw.\n\t **/\n\tp._drawNext = function() {\n\t\tvar frame = this._frames[this._index];\n\t\tvar sc = frame.scale*this._scale;\n\t\tvar rect = frame.rect;\n\t\tvar sourceRect = frame.sourceRect;\n\t\tvar canvas = this._data.images[frame.img];\n\t\tvar ctx = canvas.getContext(\"2d\");\n\t\tframe.funct&&frame.funct(frame.source, frame.data);\n\t\tctx.save();\n\t\tctx.beginPath();\n\t\tctx.rect(rect.x, rect.y, rect.width, rect.height);\n\t\tctx.clip();\n\t\tctx.translate(Math.ceil(rect.x-sourceRect.x*sc), Math.ceil(rect.y-sourceRect.y*sc));\n\t\tctx.scale(sc,sc);\n\t\tframe.source.draw(ctx); // display object will draw itself.\n\t\tctx.restore();\n\t\treturn (++this._index) < this._frames.length;\n\t};\n\n\n\tcreatejs.SpriteSheetBuilder = createjs.promote(SpriteSheetBuilder, \"EventDispatcher\");\n}());\n\n//##############################################################################\n// DOMElement.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * <b>This class is still experimental, and more advanced use is likely to be buggy. Please report bugs.</b>\n\t *\n\t * A DOMElement allows you to associate a HTMLElement with the display list. It will be transformed\n\t * within the DOM as though it is child of the {{#crossLink \"Container\"}}{{/crossLink}} it is added to. However, it is\n\t * not rendered to canvas, and as such will retain whatever z-index it has relative to the canvas (ie. it will be\n\t * drawn in front of or behind the canvas).\n\t *\n\t * The position of a DOMElement is relative to their parent node in the DOM. It is recommended that\n\t * the DOM Object be added to a div that also contains the canvas so that they share the same position\n\t * on the page.\n\t *\n\t * DOMElement is useful for positioning HTML elements over top of canvas content, and for elements\n\t * that you want to display outside the bounds of the canvas. For example, a tooltip with rich HTML\n\t * content.\n\t *\n\t * <h4>Mouse Interaction</h4>\n\t *\n\t * DOMElement instances are not full EaselJS display objects, and do not participate in EaselJS mouse\n\t * events or support methods like hitTest. To get mouse events from a DOMElement, you must instead add handlers to\n\t * the htmlElement (note, this does not support EventDispatcher)\n\t *\n\t *      var domElement = new createjs.DOMElement(htmlElement);\n\t *      domElement.htmlElement.onclick = function() {\n\t *          console.log(\"clicked\");\n\t *      }\n\t *\n\t * @class DOMElement\n\t * @extends DisplayObject\n\t * @constructor\n\t * @param {HTMLElement} htmlElement A reference or id for the DOM element to manage.\n\t */\n\tfunction DOMElement(htmlElement) {\n\t\tthis.DisplayObject_constructor();\n\t\t\n\t\tif (typeof(htmlElement)==\"string\") { htmlElement = document.getElementById(htmlElement); }\n\t\tthis.mouseEnabled = false;\n\t\t\n\t\tvar style = htmlElement.style;\n\t\tstyle.position = \"absolute\";\n\t\tstyle.transformOrigin = style.WebkitTransformOrigin = style.msTransformOrigin = style.MozTransformOrigin = style.OTransformOrigin = \"0% 0%\";\n\t\t\n\t\t\n\t// public properties:\n\t\t/**\n\t\t * The DOM object to manage.\n\t\t * @property htmlElement\n\t\t * @type HTMLElement\n\t\t */\n\t\tthis.htmlElement = htmlElement;\n\t\n\t\n\t// private properties:\n\t\t/**\n\t\t * @property _oldMtx\n\t\t * @type Matrix2D\n\t\t * @protected\n\t\t */\n\t\tthis._oldProps = null;\n\t}\n\tvar p = createjs.extend(DOMElement, createjs.DisplayObject);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\n\n// public methods:\n\t/**\n\t * Returns true or false indicating whether the display object would be visible if drawn to a canvas.\n\t * This does not account for whether it would be visible within the boundaries of the stage.\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method isVisible\n\t * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas\n\t */\n\tp.isVisible = function() {\n\t\treturn this.htmlElement != null;\n\t};\n\n\t/**\n\t * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.\n\t * Returns true if the draw was handled (useful for overriding functionality).\n\t * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.\n\t * @method draw\n\t * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.\n\t * @param {Boolean} ignoreCache Indicates whether the draw operation should ignore any current cache.\n\t * For example, used for drawing the cache (to prevent it from simply drawing an existing cache back\n\t * into itself).\n\t * @return {Boolean}\n\t */\n\tp.draw = function(ctx, ignoreCache) {\n\t\t// this relies on the _tick method because draw isn't called if the parent is not visible.\n\t\t// the actual update happens in _handleDrawEnd\n\t\treturn true;\n\t};\n\n\t/**\n\t * Not applicable to DOMElement.\n\t * @method cache\n\t */\n\tp.cache = function() {};\n\n\t/**\n\t * Not applicable to DOMElement.\n\t * @method uncache\n\t */\n\tp.uncache = function() {};\n\n\t/**\n\t * Not applicable to DOMElement.\n\t * @method updateCache\n\t */\n\tp.updateCache = function() {};\n\n\t/**\n\t * Not applicable to DOMElement.\n\t * @method hitTest\n\t */\n\tp.hitTest = function() {};\n\n\t/**\n\t * Not applicable to DOMElement.\n\t * @method localToGlobal\n\t */\n\tp.localToGlobal = function() {};\n\n\t/**\n\t * Not applicable to DOMElement.\n\t * @method globalToLocal\n\t */\n\tp.globalToLocal = function() {};\n\n\t/**\n\t * Not applicable to DOMElement.\n\t * @method localToLocal\n\t */\n\tp.localToLocal = function() {};\n\n\t/**\n\t * DOMElement cannot be cloned. Throws an error.\n\t * @method clone\n\t */\n\tp.clone = function() {\n\t\tthrow(\"DOMElement cannot be cloned.\")\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t */\n\tp.toString = function() {\n\t\treturn \"[DOMElement (name=\"+  this.name +\")]\";\n\t};\n\n\t/**\n     * Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances\n\t * are not full EaselJS display objects and do not participate in EaselJS mouse events.\n\t * @event click\n\t */\n\n     /**\n     * Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances\n \t * are not full EaselJS display objects and do not participate in EaselJS mouse events.\n\t * @event dblClick\n\t */\n\n     /**\n      * Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances\n \t  * are not full EaselJS display objects and do not participate in EaselJS mouse events.\n\t  * @event mousedown\n\t  */\n\n     /**\n      * The HTMLElement can listen for the mouseover event, not the DOMElement instance.\n      * Since DOMElement instances are not full EaselJS display objects and do not participate in EaselJS mouse events.\n      * @event mouseover\n\t  */\n\n     /**\n      * Not applicable to DOMElement.\n\t  * @event tick\n\t  */\n\n\n// private methods:\n\t/**\n\t * @method _tick\n\t * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.\n\t * function.\n\t * @protected\n\t */\n\tp._tick = function(evtObj) {\n\t\tvar stage = this.getStage();\n\t\tstage&&stage.on(\"drawend\", this._handleDrawEnd, this, true);\n\t\tthis.DisplayObject__tick(evtObj);\n\t};\n\t\n\t/**\n\t * @method _handleDrawEnd\n\t * @param {Event} evt\n\t * @protected\n\t */\n\tp._handleDrawEnd = function(evt) {\n\t\tvar o = this.htmlElement;\n\t\tif (!o) { return; }\n\t\tvar style = o.style;\n\t\t\n\t\tvar props = this.getConcatenatedDisplayProps(this._props), mtx = props.matrix;\n\t\t\n\t\tvar visibility = props.visible ? \"visible\" : \"hidden\";\n\t\tif (visibility != style.visibility) { style.visibility = visibility; }\n\t\tif (!props.visible) { return; }\n\t\t\n\t\tvar oldProps = this._oldProps, oldMtx = oldProps&&oldProps.matrix;\n\t\tvar n = 10000; // precision\n\t\t\n\t\tif (!oldMtx || !oldMtx.equals(mtx)) {\n\t\t\tvar str = \"matrix(\" + (mtx.a*n|0)/n +\",\"+ (mtx.b*n|0)/n +\",\"+ (mtx.c*n|0)/n +\",\"+ (mtx.d*n|0)/n +\",\"+ (mtx.tx+0.5|0);\n\t\t\tstyle.transform = style.WebkitTransform = style.OTransform = style.msTransform = str +\",\"+ (mtx.ty+0.5|0) +\")\";\n\t\t\tstyle.MozTransform = str +\"px,\"+ (mtx.ty+0.5|0) +\"px)\";\n\t\t\tif (!oldProps) { oldProps = this._oldProps = new createjs.DisplayProps(true, NaN); }\n\t\t\toldProps.matrix.copy(mtx);\n\t\t}\n\t\t\n\t\tif (oldProps.alpha != props.alpha) {\n\t\t\tstyle.opacity = \"\"+(props.alpha*n|0)/n;\n\t\t\toldProps.alpha = props.alpha;\n\t\t}\n\t};\n\n\n\tcreatejs.DOMElement = createjs.promote(DOMElement, \"DisplayObject\");\n}());\n\n//##############################################################################\n// Filter.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Base class that all filters should inherit from. Filters need to be applied to objects that have been cached using\n\t * the {{#crossLink \"DisplayObject/cache\"}}{{/crossLink}} method. If an object changes, please cache it again, or use\n\t * {{#crossLink \"DisplayObject/updateCache\"}}{{/crossLink}}. Note that the filters must be applied before caching.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      myInstance.filters = [\n\t *          new createjs.ColorFilter(0, 0, 0, 1, 255, 0, 0),\n\t *          new createjs.BlurFilter(5, 5, 10)\n\t *      ];\n\t *      myInstance.cache(0,0, 100, 100);\n\t *\n\t * Note that each filter can implement a {{#crossLink \"Filter/getBounds\"}}{{/crossLink}} method, which returns the\n\t * margins that need to be applied in order to fully display the filter. For example, the {{#crossLink \"BlurFilter\"}}{{/crossLink}}\n\t * will cause an object to feather outwards, resulting in a margin around the shape.\n\t *\n\t * <h4>EaselJS Filters</h4>\n\t * EaselJS comes with a number of pre-built filters. Note that individual filters are not compiled into the minified\n\t * version of EaselJS. To use them, you must include them manually in the HTML.\n\t * <ul><li>{{#crossLink \"AlphaMapFilter\"}}{{/crossLink}} : Map a greyscale image to the alpha channel of a display object</li>\n\t *      <li>{{#crossLink \"AlphaMaskFilter\"}}{{/crossLink}}: Map an image's alpha channel to the alpha channel of a display object</li>\n\t *      <li>{{#crossLink \"BlurFilter\"}}{{/crossLink}}: Apply vertical and horizontal blur to a display object</li>\n\t *      <li>{{#crossLink \"ColorFilter\"}}{{/crossLink}}: Color transform a display object</li>\n\t *      <li>{{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}: Transform an image using a {{#crossLink \"ColorMatrix\"}}{{/crossLink}}</li>\n\t * </ul>\n\t *\n\t * @class Filter\n\t * @constructor\n\t **/\n\tfunction Filter() {}\n\tvar p = Filter.prototype;\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\n// public methods:\n\t/**\n\t * Provides padding values for this filter. That is, how much the filter will extend the visual bounds of an object it is applied to.\n\t * @method getBounds\n\t * @param {Rectangle} [rect] If specified, the provided Rectangle instance will be expanded by the padding amounts and returned.\n\t * @return {Rectangle} If a `rect` param was provided, it is returned. If not, either a new rectangle with the padding values, or null if no padding is required for this filter.\n\t **/\n\tp.getBounds = function(rect) {\n\t\treturn rect;\n\t};\n\n\t/**\n\t * Applies the filter to the specified context.\n\t * @method applyFilter\n\t * @param {CanvasRenderingContext2D} ctx The 2D context to use as the source.\n\t * @param {Number} x The x position to use for the source rect.\n\t * @param {Number} y The y position to use for the source rect.\n\t * @param {Number} width The width to use for the source rect.\n\t * @param {Number} height The height to use for the source rect.\n\t * @param {CanvasRenderingContext2D} [targetCtx] The 2D context to draw the result to. Defaults to the context passed to ctx.\n\t * @param {Number} [targetX] The x position to draw the result to. Defaults to the value passed to x.\n\t * @param {Number} [targetY] The y position to draw the result to. Defaults to the value passed to y.\n\t * @return {Boolean} If the filter was applied successfully.\n\t **/\n\tp.applyFilter = function(ctx, x, y, width, height, targetCtx, targetX, targetY) {\n\t\t// this is the default behaviour because most filters access pixel data. It is overridden when not needed.\n\t\ttargetCtx = targetCtx || ctx;\n\t\tif (targetX == null) { targetX = x; }\n\t\tif (targetY == null) { targetY = y; }\n\t\ttry {\n\t\t\tvar imageData = ctx.getImageData(x, y, width, height);\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._applyFilter(imageData)) {\n\t\t\ttargetCtx.putImageData(imageData, targetX, targetY);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Filter]\";\n\t};\n\n\t/**\n\t * Returns a clone of this Filter instance.\n\t * @method clone\n\t * @return {Filter} A clone of the current Filter instance.\n\t **/\n\tp.clone = function() {\n\t\treturn new Filter();\n\t};\n\t\n// private methods:\n\t/**\n\t * @method _applyFilter\n\t * @param {ImageData} imageData Target ImageData instance.\n\t * @return {Boolean}\n\t **/\n\tp._applyFilter = function(imageData) { return true; };\n\n\n\tcreatejs.Filter = Filter;\n}());\n\n//##############################################################################\n// BlurFilter.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Applies a box blur to DisplayObjects. Note that this filter is fairly CPU intensive, particularly if the quality is\n\t * set higher than 1.\n\t *\n\t * <h4>Example</h4>\n\t * This example creates a red circle, and then applies a 5 pixel blur to it. It uses the {{#crossLink \"Filter/getBounds\"}}{{/crossLink}}\n\t * method to account for the spread that the blur causes.\n\t *\n\t *      var shape = new createjs.Shape().set({x:100,y:100});\n\t *      shape.graphics.beginFill(\"#ff0000\").drawCircle(0,0,50);\n\t *\n\t *      var blurFilter = new createjs.BlurFilter(5, 5, 1);\n\t *      shape.filters = [blurFilter];\n\t *      var bounds = blurFilter.getBounds();\n\t *\n\t *      shape.cache(-50+bounds.x, -50+bounds.y, 100+bounds.width, 100+bounds.height);\n\t *\n\t * See {{#crossLink \"Filter\"}}{{/crossLink}} for an more information on applying filters.\n\t * @class BlurFilter\n\t * @extends Filter\n\t * @constructor\n\t * @param {Number} [blurX=0] The horizontal blur radius in pixels.\n\t * @param {Number} [blurY=0] The vertical blur radius in pixels.\n\t * @param {Number} [quality=1] The number of blur iterations.\n\t **/\n\tfunction BlurFilter( blurX, blurY, quality) {\n\t\tif ( isNaN(blurX) || blurX < 0 ) blurX = 0;\n\t\tif ( isNaN(blurY) || blurY < 0 ) blurY = 0;\n\t\tif ( isNaN(quality) || quality < 1  ) quality = 1;\n\n\n\t\t// public properties:\n\t\t/**\n\t\t * Horizontal blur radius in pixels\n\t\t * @property blurX\n\t\t * @default 0\n\t\t * @type Number\n\t\t **/\n\t\tthis.blurX = blurX | 0;\n\n\t\t/**\n\t\t * Vertical blur radius in pixels\n\t\t * @property blurY\n\t\t * @default 0\n\t\t * @type Number\n\t\t **/\n\t\tthis.blurY = blurY | 0;\n\n\t\t/**\n\t\t * Number of blur iterations. For example, a value of 1 will produce a rough blur. A value of 2 will produce a\n\t\t * smoother blur, but take twice as long to run.\n\t\t * @property quality\n\t\t * @default 1\n\t\t * @type Number\n\t\t **/\n\t\tthis.quality = quality | 0;\n\t}\n\tvar p = createjs.extend(BlurFilter, createjs.Filter);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\n\n// constants:\n\t/**\n\t * Array of multiply values for blur calculations.\n\t * @property MUL_TABLE\n\t * @type Array\n\t * @protected\n\t * @static\n\t **/\n\tBlurFilter.MUL_TABLE = [1, 171, 205, 293, 57, 373, 79, 137, 241, 27, 391, 357, 41, 19, 283, 265, 497, 469, 443, 421, 25, 191, 365, 349, 335, 161, 155, 149, 9, 278, 269, 261, 505, 245, 475, 231, 449, 437, 213, 415, 405, 395, 193, 377, 369, 361, 353, 345, 169, 331, 325, 319, 313, 307, 301, 37, 145, 285, 281, 69, 271, 267, 263, 259, 509, 501, 493, 243, 479, 118, 465, 459, 113, 446, 55, 435, 429, 423, 209, 413, 51, 403, 199, 393, 97, 3, 379, 375, 371, 367, 363, 359, 355, 351, 347, 43, 85, 337, 333, 165, 327, 323, 5, 317, 157, 311, 77, 305, 303, 75, 297, 294, 73, 289, 287, 71, 141, 279, 277, 275, 68, 135, 67, 133, 33, 262, 260, 129, 511, 507, 503, 499, 495, 491, 61, 121, 481, 477, 237, 235, 467, 232, 115, 457, 227, 451, 7, 445, 221, 439, 218, 433, 215, 427, 425, 211, 419, 417, 207, 411, 409, 203, 202, 401, 399, 396, 197, 49, 389, 387, 385, 383, 95, 189, 47, 187, 93, 185, 23, 183, 91, 181, 45, 179, 89, 177, 11, 175, 87, 173, 345, 343, 341, 339, 337, 21, 167, 83, 331, 329, 327, 163, 81, 323, 321, 319, 159, 79, 315, 313, 39, 155, 309, 307, 153, 305, 303, 151, 75, 299, 149, 37, 295, 147, 73, 291, 145, 289, 287, 143, 285, 71, 141, 281, 35, 279, 139, 69, 275, 137, 273, 17, 271, 135, 269, 267, 133, 265, 33, 263, 131, 261, 130, 259, 129, 257, 1];\n\n\t/**\n\t * Array of shift values for blur calculations.\n\t * @property SHG_TABLE\n\t * @type Array\n\t * @protected\n\t * @static\n\t **/\n\tBlurFilter.SHG_TABLE = [0, 9, 10, 11, 9, 12, 10, 11, 12, 9, 13, 13, 10, 9, 13, 13, 14, 14, 14, 14, 10, 13, 14, 14, 14, 13, 13, 13, 9, 14, 14, 14, 15, 14, 15, 14, 15, 15, 14, 15, 15, 15, 14, 15, 15, 15, 15, 15, 14, 15, 15, 15, 15, 15, 15, 12, 14, 15, 15, 13, 15, 15, 15, 15, 16, 16, 16, 15, 16, 14, 16, 16, 14, 16, 13, 16, 16, 16, 15, 16, 13, 16, 15, 16, 14, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 13, 14, 16, 16, 15, 16, 16, 10, 16, 15, 16, 14, 16, 16, 14, 16, 16, 14, 16, 16, 14, 15, 16, 16, 16, 14, 15, 14, 15, 13, 16, 16, 15, 17, 17, 17, 17, 17, 17, 14, 15, 17, 17, 16, 16, 17, 16, 15, 17, 16, 17, 11, 17, 16, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 16, 17, 17, 17, 16, 14, 17, 17, 17, 17, 15, 16, 14, 16, 15, 16, 13, 16, 15, 16, 14, 16, 15, 16, 12, 16, 15, 16, 17, 17, 17, 17, 17, 13, 16, 15, 17, 17, 17, 16, 15, 17, 17, 17, 16, 15, 17, 17, 14, 16, 17, 17, 16, 17, 17, 16, 15, 17, 16, 14, 17, 16, 15, 17, 16, 17, 17, 16, 17, 15, 16, 17, 14, 17, 16, 15, 17, 16, 17, 13, 17, 16, 17, 17, 16, 17, 14, 17, 16, 17, 16, 17, 16, 17, 9];\n\n// public methods:\n\t/** docced in super class **/\n\tp.getBounds = function (rect) {\n\t\tvar x = this.blurX|0, y = this.blurY| 0;\n\t\tif (x <= 0 && y <= 0) { return rect; }\n\t\tvar q = Math.pow(this.quality, 0.2);\n\t\treturn (rect || new createjs.Rectangle()).pad(x*q+1,y*q+1,x*q+1,y*q+1);\n\t};\n\n\t/** docced in super class **/\n\tp.clone = function() {\n\t\treturn new BlurFilter(this.blurX, this.blurY, this.quality);\n\t};\n\n\t/** docced in super class **/\n\tp.toString = function() {\n\t\treturn \"[BlurFilter]\";\n\t};\n\n\n// private methods:\n\n\t/** docced in super class **/\n\tp._applyFilter = function (imageData) {\n\n\t\tvar radiusX = this.blurX >> 1;\n\t\tif (isNaN(radiusX) || radiusX < 0) return false;\n\t\tvar radiusY = this.blurY >> 1;\n\t\tif (isNaN(radiusY) || radiusY < 0) return false;\n\t\tif (radiusX == 0 && radiusY == 0) return false;\n\n\t\tvar iterations = this.quality;\n\t\tif (isNaN(iterations) || iterations < 1) iterations = 1;\n\t\titerations |= 0;\n\t\tif (iterations > 3) iterations = 3;\n\t\tif (iterations < 1) iterations = 1;\n\n\t\tvar px = imageData.data;\n\t\tvar x=0, y=0, i=0, p=0, yp=0, yi=0, yw=0, r=0, g=0, b=0, a=0, pr=0, pg=0, pb=0, pa=0;\n\n\t\tvar divx = (radiusX + radiusX + 1) | 0;\n\t\tvar divy = (radiusY + radiusY + 1) | 0;\n\t\tvar w = imageData.width | 0;\n\t\tvar h = imageData.height | 0;\n\n\t\tvar w1 = (w - 1) | 0;\n\t\tvar h1 = (h - 1) | 0;\n\t\tvar rxp1 = (radiusX + 1) | 0;\n\t\tvar ryp1 = (radiusY + 1) | 0;\n\n\t\tvar ssx = {r:0,b:0,g:0,a:0};\n\t\tvar sx = ssx;\n\t\tfor ( i = 1; i < divx; i++ )\n\t\t{\n\t\t\tsx = sx.n = {r:0,b:0,g:0,a:0};\n\t\t}\n\t\tsx.n = ssx;\n\n\t\tvar ssy = {r:0,b:0,g:0,a:0};\n\t\tvar sy = ssy;\n\t\tfor ( i = 1; i < divy; i++ )\n\t\t{\n\t\t\tsy = sy.n = {r:0,b:0,g:0,a:0};\n\t\t}\n\t\tsy.n = ssy;\n\n\t\tvar si = null;\n\n\n\t\tvar mtx = BlurFilter.MUL_TABLE[radiusX] | 0;\n\t\tvar stx = BlurFilter.SHG_TABLE[radiusX] | 0;\n\t\tvar mty = BlurFilter.MUL_TABLE[radiusY] | 0;\n\t\tvar sty = BlurFilter.SHG_TABLE[radiusY] | 0;\n\n\t\twhile (iterations-- > 0) {\n\n\t\t\tyw = yi = 0;\n\t\t\tvar ms = mtx;\n\t\t\tvar ss = stx;\n\t\t\tfor (y = h; --y > -1;) {\n\t\t\t\tr = rxp1 * (pr = px[(yi) | 0]);\n\t\t\t\tg = rxp1 * (pg = px[(yi + 1) | 0]);\n\t\t\t\tb = rxp1 * (pb = px[(yi + 2) | 0]);\n\t\t\t\ta = rxp1 * (pa = px[(yi + 3) | 0]);\n\n\t\t\t\tsx = ssx;\n\n\t\t\t\tfor( i = rxp1; --i > -1; )\n\t\t\t\t{\n\t\t\t\t\tsx.r = pr;\n\t\t\t\t\tsx.g = pg;\n\t\t\t\t\tsx.b = pb;\n\t\t\t\t\tsx.a = pa;\n\t\t\t\t\tsx = sx.n;\n\t\t\t\t}\n\n\t\t\t\tfor( i = 1; i < rxp1; i++ )\n\t\t\t\t{\n\t\t\t\t\tp = (yi + ((w1 < i ? w1 : i) << 2)) | 0;\n\t\t\t\t\tr += ( sx.r = px[p]);\n\t\t\t\t\tg += ( sx.g = px[p+1]);\n\t\t\t\t\tb += ( sx.b = px[p+2]);\n\t\t\t\t\ta += ( sx.a = px[p+3]);\n\n\t\t\t\t\tsx = sx.n;\n\t\t\t\t}\n\n\t\t\t\tsi = ssx;\n\t\t\t\tfor ( x = 0; x < w; x++ )\n\t\t\t\t{\n\t\t\t\t\tpx[yi++] = (r * ms) >>> ss;\n\t\t\t\t\tpx[yi++] = (g * ms) >>> ss;\n\t\t\t\t\tpx[yi++] = (b * ms) >>> ss;\n\t\t\t\t\tpx[yi++] = (a * ms) >>> ss;\n\n\t\t\t\t\tp = ((yw + ((p = x + radiusX + 1) < w1 ? p : w1)) << 2);\n\n\t\t\t\t\tr -= si.r - ( si.r = px[p]);\n\t\t\t\t\tg -= si.g - ( si.g = px[p+1]);\n\t\t\t\t\tb -= si.b - ( si.b = px[p+2]);\n\t\t\t\t\ta -= si.a - ( si.a = px[p+3]);\n\n\t\t\t\t\tsi = si.n;\n\n\t\t\t\t}\n\t\t\t\tyw += w;\n\t\t\t}\n\n\t\t\tms = mty;\n\t\t\tss = sty;\n\t\t\tfor (x = 0; x < w; x++) {\n\t\t\t\tyi = (x << 2) | 0;\n\n\t\t\t\tr = (ryp1 * (pr = px[yi])) | 0;\n\t\t\t\tg = (ryp1 * (pg = px[(yi + 1) | 0])) | 0;\n\t\t\t\tb = (ryp1 * (pb = px[(yi + 2) | 0])) | 0;\n\t\t\t\ta = (ryp1 * (pa = px[(yi + 3) | 0])) | 0;\n\n\t\t\t\tsy = ssy;\n\t\t\t\tfor( i = 0; i < ryp1; i++ )\n\t\t\t\t{\n\t\t\t\t\tsy.r = pr;\n\t\t\t\t\tsy.g = pg;\n\t\t\t\t\tsy.b = pb;\n\t\t\t\t\tsy.a = pa;\n\t\t\t\t\tsy = sy.n;\n\t\t\t\t}\n\n\t\t\t\typ = w;\n\n\t\t\t\tfor( i = 1; i <= radiusY; i++ )\n\t\t\t\t{\n\t\t\t\t\tyi = ( yp + x ) << 2;\n\n\t\t\t\t\tr += ( sy.r = px[yi]);\n\t\t\t\t\tg += ( sy.g = px[yi+1]);\n\t\t\t\t\tb += ( sy.b = px[yi+2]);\n\t\t\t\t\ta += ( sy.a = px[yi+3]);\n\n\t\t\t\t\tsy = sy.n;\n\n\t\t\t\t\tif( i < h1 )\n\t\t\t\t\t{\n\t\t\t\t\t\typ += w;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tyi = x;\n\t\t\t\tsi = ssy;\n\t\t\t\tif ( iterations > 0 )\n\t\t\t\t{\n\t\t\t\t\tfor ( y = 0; y < h; y++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tp = yi << 2;\n\t\t\t\t\t\tpx[p+3] = pa =(a * ms) >>> ss;\n\t\t\t\t\t\tif ( pa > 0 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpx[p]   = ((r * ms) >>> ss );\n\t\t\t\t\t\t\tpx[p+1] = ((g * ms) >>> ss );\n\t\t\t\t\t\t\tpx[p+2] = ((b * ms) >>> ss );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpx[p] = px[p+1] = px[p+2] = 0\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp = ( x + (( ( p = y + ryp1) < h1 ? p : h1 ) * w )) << 2;\n\n\t\t\t\t\t\tr -= si.r - ( si.r = px[p]);\n\t\t\t\t\t\tg -= si.g - ( si.g = px[p+1]);\n\t\t\t\t\t\tb -= si.b - ( si.b = px[p+2]);\n\t\t\t\t\t\ta -= si.a - ( si.a = px[p+3]);\n\n\t\t\t\t\t\tsi = si.n;\n\n\t\t\t\t\t\tyi += w;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor ( y = 0; y < h; y++ )\n\t\t\t\t\t{\n\t\t\t\t\t\tp = yi << 2;\n\t\t\t\t\t\tpx[p+3] = pa =(a * ms) >>> ss;\n\t\t\t\t\t\tif ( pa > 0 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpa = 255 / pa;\n\t\t\t\t\t\t\tpx[p]   = ((r * ms) >>> ss ) * pa;\n\t\t\t\t\t\t\tpx[p+1] = ((g * ms) >>> ss ) * pa;\n\t\t\t\t\t\t\tpx[p+2] = ((b * ms) >>> ss ) * pa;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpx[p] = px[p+1] = px[p+2] = 0\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp = ( x + (( ( p = y + ryp1) < h1 ? p : h1 ) * w )) << 2;\n\n\t\t\t\t\t\tr -= si.r - ( si.r = px[p]);\n\t\t\t\t\t\tg -= si.g - ( si.g = px[p+1]);\n\t\t\t\t\t\tb -= si.b - ( si.b = px[p+2]);\n\t\t\t\t\t\ta -= si.a - ( si.a = px[p+3]);\n\n\t\t\t\t\t\tsi = si.n;\n\n\t\t\t\t\t\tyi += w;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\treturn true;\n\t};\n\n\tcreatejs.BlurFilter = createjs.promote(BlurFilter, \"Filter\");\n}());\n\n//##############################################################################\n// AlphaMapFilter.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\t\n\t\n// constructor:\n\t/**\n\t * Applies a greyscale alpha map image (or canvas) to the target, such that the alpha channel of the result will\n\t * be copied from the red channel of the map, and the RGB channels will be copied from the target.\n\t *\n\t * Generally, it is recommended that you use {{#crossLink \"AlphaMaskFilter\"}}{{/crossLink}}, because it has much\n\t * better performance.\n\t *\n\t * <h4>Example</h4>\n\t * This example draws a red->blue box, caches it, and then uses the cache canvas as an alpha map on a 100x100 image.\n\t *\n\t *       var box = new createjs.Shape();\n\t *       box.graphics.beginLinearGradientFill([\"#ff0000\", \"#0000ff\"], [0, 1], 0, 0, 0, 100)\n\t *       box.graphics.drawRect(0, 0, 100, 100);\n\t *       box.cache(0, 0, 100, 100);\n\t *\n\t *       var bmp = new createjs.Bitmap(\"path/to/image.jpg\");\n\t *       bmp.filters = [\n\t *           new createjs.AlphaMapFilter(box.cacheCanvas)\n\t *       ];\n\t *       bmp.cache(0, 0, 100, 100);\n\t *       stage.addChild(bmp);\n\t *\n\t * See {{#crossLink \"Filter\"}}{{/crossLink}} for more information on applying filters.\n\t * @class AlphaMapFilter\n\t * @extends Filter\n\t * @constructor\n\t * @param {HTMLImageElement|HTMLCanvasElement} alphaMap The greyscale image (or canvas) to use as the alpha value for the\n\t * result. This should be exactly the same dimensions as the target.\n\t **/\n\tfunction AlphaMapFilter(alphaMap) {\n\t\n\t\n\t// public properties:\n\t\t/**\n\t\t * The greyscale image (or canvas) to use as the alpha value for the result. This should be exactly the same\n\t\t * dimensions as the target.\n\t\t * @property alphaMap\n\t\t * @type HTMLImageElement|HTMLCanvasElement\n\t\t **/\n\t\tthis.alphaMap = alphaMap;\n\t\t\n\t\t\n\t// private properties:\n\t\t/**\n\t\t * @property _alphaMap\n\t\t * @protected\n\t\t * @type HTMLImageElement|HTMLCanvasElement\n\t\t **/\n\t\tthis._alphaMap = null;\n\t\t\n\t\t/**\n\t\t * @property _mapData\n\t\t * @protected\n\t\t * @type Uint8ClampedArray\n\t\t **/\n\t\tthis._mapData = null;\n\t}\n\tvar p = createjs.extend(AlphaMapFilter, createjs.Filter);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\n\n// public methods:\n\t/** docced in super class **/\n\tp.clone = function () {\n\t\tvar o = new AlphaMapFilter(this.alphaMap);\n\t\to._alphaMap = this._alphaMap;\n\t\to._mapData = this._mapData;\n\t\treturn o;\n\t};\n\n\t/** docced in super class **/\n\tp.toString = function () {\n\t\treturn \"[AlphaMapFilter]\";\n\t};\n\n\n// private methods:\n\t/** docced in super class **/\n\tp._applyFilter = function (imageData) {\n\t\tif (!this.alphaMap) { return true; }\n\t\tif (!this._prepAlphaMap()) { return false; }\n\t\t\n\t\t// TODO: update to support scenarios where the target has different dimensions.\n\t\tvar data = imageData.data;\n\t\tvar map = this._mapData;\n\t\tfor(var i=0, l=data.length; i<l; i += 4) { data[i + 3] = map[i] || 0; }\n\t\t\n\t\treturn true;\n\t};\n\n\t/**\n\t * @method _prepAlphaMap\n\t * @protected\n\t **/\n\tp._prepAlphaMap = function () {\n\t\tif (!this.alphaMap) { return false; }\n\t\tif (this.alphaMap == this._alphaMap && this._mapData) { return true; }\n\n\t\tthis._mapData = null;\n\t\tvar map = this._alphaMap = this.alphaMap;\n\t\tvar canvas = map;\n\t\tvar ctx;\n\t\tif (map instanceof HTMLCanvasElement) {\n\t\t\tctx = canvas.getContext(\"2d\");\n\t\t} else {\n\t\t\tcanvas = createjs.createCanvas ? createjs.createCanvas() : document.createElement(\"canvas\");\n\t\t\tcanvas.width = map.width;\n\t\t\tcanvas.height = map.height;\n\t\t\tctx = canvas.getContext(\"2d\");\n\t\t\tctx.drawImage(map, 0, 0);\n\t\t}\n\n\t\ttry {\n\t\t\tvar imgData = ctx.getImageData(0, 0, map.width, map.height);\n\t\t} catch (e) {\n\t\t\t//if (!this.suppressCrossDomainErrors) throw new Error(\"unable to access local image data: \" + e);\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tthis._mapData = imgData.data;\n\t\treturn true;\n\t};\n\n\n\tcreatejs.AlphaMapFilter = createjs.promote(AlphaMapFilter, \"Filter\");\n}());\n\n//##############################################################################\n// AlphaMaskFilter.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Applies the alpha from the mask image (or canvas) to the target, such that the alpha channel of the result will\n\t * be derived from the mask, and the RGB channels will be copied from the target. This can be used, for example, to\n\t * apply an alpha mask to a display object. This can also be used to combine a JPG compressed RGB image with a PNG32\n\t * alpha mask, which can result in a much smaller file size than a single PNG32 containing ARGB.\n\t *\n\t * <b>IMPORTANT NOTE: This filter currently does not support the targetCtx, or targetX/Y parameters correctly.</b>\n\t *\n\t * <h4>Example</h4>\n\t * This example draws a gradient box, then caches it and uses the \"cacheCanvas\" as the alpha mask on a 100x100 image.\n\t *\n\t *      var box = new createjs.Shape();\n\t *      box.graphics.beginLinearGradientFill([\"#000000\", \"rgba(0, 0, 0, 0)\"], [0, 1], 0, 0, 100, 100)\n\t *      box.graphics.drawRect(0, 0, 100, 100);\n\t *      box.cache(0, 0, 100, 100);\n\t *\n\t *      var bmp = new createjs.Bitmap(\"path/to/image.jpg\");\n\t *      bmp.filters = [\n\t *          new createjs.AlphaMaskFilter(box.cacheCanvas)\n\t *      ];\n\t *      bmp.cache(0, 0, 100, 100);\n\t *\n\t * See {{#crossLink \"Filter\"}}{{/crossLink}} for more information on applying filters.\n\t * @class AlphaMaskFilter\n\t * @extends Filter\n\t * @constructor\n\t * @param {HTMLImageElement|HTMLCanvasElement} mask\n\t **/\n\tfunction AlphaMaskFilter(mask) {\n\t\n\t\n\t// public properties:\n\t\t/**\n\t\t * The image (or canvas) to use as the mask.\n\t\t * @property mask\n\t\t * @type HTMLImageElement|HTMLCanvasElement\n\t\t **/\n\t\tthis.mask = mask;\n\t}\n\tvar p = createjs.extend(AlphaMaskFilter, createjs.Filter);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\t\n\n// public methods:\n\t/**\n\t * Applies the filter to the specified context.\n\t *\n\t * <strong>IMPORTANT NOTE: This filter currently does not support the targetCtx, or targetX/Y parameters\n\t * correctly.</strong>\n\t * @method applyFilter\n\t * @param {CanvasRenderingContext2D} ctx The 2D context to use as the source.\n\t * @param {Number} x The x position to use for the source rect.\n\t * @param {Number} y The y position to use for the source rect.\n\t * @param {Number} width The width to use for the source rect.\n\t * @param {Number} height The height to use for the source rect.\n\t * @param {CanvasRenderingContext2D} [targetCtx] NOT SUPPORTED IN THIS FILTER. The 2D context to draw the result to. Defaults to the context passed to ctx.\n\t * @param {Number} [targetX] NOT SUPPORTED IN THIS FILTER. The x position to draw the result to. Defaults to the value passed to x.\n\t * @param {Number} [targetY] NOT SUPPORTED IN THIS FILTER. The y position to draw the result to. Defaults to the value passed to y.\n\t * @return {Boolean} If the filter was applied successfully.\n\t **/\n\tp.applyFilter = function (ctx, x, y, width, height, targetCtx, targetX, targetY) {\n\t\tif (!this.mask) { return true; }\n\t\ttargetCtx = targetCtx || ctx;\n\t\tif (targetX == null) { targetX = x; }\n\t\tif (targetY == null) { targetY = y; }\n\n\t\ttargetCtx.save();\n\t\tif (ctx != targetCtx) {\n\t\t\t// TODO: support targetCtx and targetX/Y\n\t\t\t// clearRect, then draw the ctx in?\n\t\t\treturn false;\n\t\t}\n\n\t\ttargetCtx.globalCompositeOperation = \"destination-in\";\n\t\ttargetCtx.drawImage(this.mask, targetX, targetY);\n\t\ttargetCtx.restore();\n\t\treturn true;\n\t};\n\n\t/** docced in super class **/\n\tp.clone = function () {\n\t\treturn new AlphaMaskFilter(this.mask);\n\t};\n\n\t/** docced in super class **/\n\tp.toString = function () {\n\t\treturn \"[AlphaMaskFilter]\";\n\t};\n\n\n\tcreatejs.AlphaMaskFilter = createjs.promote(AlphaMaskFilter, \"Filter\");\n}());\n\n//##############################################################################\n// ColorFilter.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Applies a color transform to DisplayObjects.\n\t *\n\t * <h4>Example</h4>\n\t * This example draws a red circle, and then transforms it to Blue. This is accomplished by multiplying all the channels\n\t * to 0 (except alpha, which is set to 1), and then adding 255 to the blue channel.\n\t *\n\t *      var shape = new createjs.Shape().set({x:100,y:100});\n\t *      shape.graphics.beginFill(\"#ff0000\").drawCircle(0,0,50);\n\t *\n\t *      shape.filters = [\n\t *          new createjs.ColorFilter(0,0,0,1, 0,0,255,0)\n\t *      ];\n\t *      shape.cache(-50, -50, 100, 100);\n\t *\n\t * See {{#crossLink \"Filter\"}}{{/crossLink}} for an more information on applying filters.\n\t * @class ColorFilter\n\t * @param {Number} [redMultiplier=1] The amount to multiply against the red channel. This is a range between 0 and 1.\n\t * @param {Number} [greenMultiplier=1] The amount to multiply against the green channel. This is a range between 0 and 1.\n\t * @param {Number} [blueMultiplier=1] The amount to multiply against the blue channel. This is a range between 0 and 1.\n\t * @param {Number} [alphaMultiplier=1] The amount to multiply against the alpha channel. This is a range between 0 and 1.\n\t * @param {Number} [redOffset=0] The amount to add to the red channel after it has been multiplied. This is a range\n\t * between -255 and 255.\n\t * @param {Number} [greenOffset=0] The amount to add to the green channel after it has been multiplied. This is a range\n\t  * between -255 and 255.\n\t * @param {Number} [blueOffset=0] The amount to add to the blue channel after it has been multiplied. This is a range\n\t  * between -255 and 255.\n\t * @param {Number} [alphaOffset=0] The amount to add to the alpha channel after it has been multiplied. This is a range\n\t  * between -255 and 255.\n\t * @constructor\n\t * @extends Filter\n\t **/\n\tfunction ColorFilter(redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier, redOffset, greenOffset, blueOffset, alphaOffset) {\n\t\t\n\t\n\t// public properties:\n\t\t/**\n\t\t * Red channel multiplier.\n\t\t * @property redMultiplier\n\t\t * @type Number\n\t\t **/\n\t\tthis.redMultiplier = redMultiplier != null ? redMultiplier : 1;\n\t\n\t\t/**\n\t\t * Green channel multiplier.\n\t\t * @property greenMultiplier\n\t\t * @type Number\n\t\t **/\n\t\tthis.greenMultiplier = greenMultiplier != null ? greenMultiplier : 1;\n\t\n\t\t/**\n\t\t * Blue channel multiplier.\n\t\t * @property blueMultiplier\n\t\t * @type Number\n\t\t **/\n\t\tthis.blueMultiplier = blueMultiplier != null ? blueMultiplier : 1;\n\t\n\t\t/**\n\t\t * Alpha channel multiplier.\n\t\t * @property alphaMultiplier\n\t\t * @type Number\n\t\t **/\n\t\tthis.alphaMultiplier = alphaMultiplier != null ? alphaMultiplier : 1;\n\t\n\t\t/**\n\t\t * Red channel offset (added to value).\n\t\t * @property redOffset\n\t\t * @type Number\n\t\t **/\n\t\tthis.redOffset = redOffset || 0;\n\t\n\t\t/**\n\t\t * Green channel offset (added to value).\n\t\t * @property greenOffset\n\t\t * @type Number\n\t\t **/\n\t\tthis.greenOffset = greenOffset || 0;\n\t\n\t\t/**\n\t\t * Blue channel offset (added to value).\n\t\t * @property blueOffset\n\t\t * @type Number\n\t\t **/\n\t\tthis.blueOffset = blueOffset || 0;\n\t\n\t\t/**\n\t\t * Alpha channel offset (added to value).\n\t\t * @property alphaOffset\n\t\t * @type Number\n\t\t **/\n\t\tthis.alphaOffset = alphaOffset || 0;\n\t}\n\tvar p = createjs.extend(ColorFilter, createjs.Filter);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\n\n// public methods:\n\t/** docced in super class **/\n\tp.toString = function() {\n\t\treturn \"[ColorFilter]\";\n\t};\n\n\t/** docced in super class **/\n\tp.clone = function() {\n\t\treturn new ColorFilter(this.redMultiplier, this.greenMultiplier, this.blueMultiplier, this.alphaMultiplier, this.redOffset, this.greenOffset, this.blueOffset, this.alphaOffset);\n\t};\n\t\n\n// private methods:\n\t/** docced in super class **/\n\tp._applyFilter = function(imageData) {\n\t\tvar data = imageData.data;\n\t\tvar l = data.length;\n\t\tfor (var i=0; i<l; i+=4) {\n\t\t\tdata[i] = data[i]*this.redMultiplier+this.redOffset;\n\t\t\tdata[i+1] = data[i+1]*this.greenMultiplier+this.greenOffset;\n\t\t\tdata[i+2] = data[i+2]*this.blueMultiplier+this.blueOffset;\n\t\t\tdata[i+3] = data[i+3]*this.alphaMultiplier+this.alphaOffset;\n\t\t}\n\t\treturn true;\n\t};\n\n\n\tcreatejs.ColorFilter = createjs.promote(ColorFilter, \"Filter\");\n}());\n\n//##############################################################################\n// ColorMatrix.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Provides helper functions for assembling a matrix for use with the {{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}.\n\t * Most methods return the instance to facilitate chained calls.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      myColorMatrix.adjustHue(20).adjustBrightness(50);\n\t *\n\t * See {{#crossLink \"Filter\"}}{{/crossLink}} for an example of how to apply filters, or {{#crossLink \"ColorMatrixFilter\"}}{{/crossLink}}\n\t * for an example of how to use ColorMatrix to change a DisplayObject's color.\n\t * @class ColorMatrix\n\t * @param {Number} brightness\n\t * @param {Number} contrast\n\t * @param {Number} saturation\n\t * @param {Number} hue\n\t * @constructor\n\t **/\n\tfunction ColorMatrix(brightness, contrast, saturation, hue) {\n\t\tthis.setColor(brightness, contrast, saturation, hue);\n\t}\n\tvar p = ColorMatrix.prototype;\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\n// constants:\n\t/**\n\t * Array of delta values for contrast calculations.\n\t * @property DELTA_INDEX\n\t * @type Array\n\t * @protected\n\t * @static\n\t **/\n\tColorMatrix.DELTA_INDEX = [\n\t\t0,    0.01, 0.02, 0.04, 0.05, 0.06, 0.07, 0.08, 0.1,  0.11,\n\t\t0.12, 0.14, 0.15, 0.16, 0.17, 0.18, 0.20, 0.21, 0.22, 0.24,\n\t\t0.25, 0.27, 0.28, 0.30, 0.32, 0.34, 0.36, 0.38, 0.40, 0.42,\n\t\t0.44, 0.46, 0.48, 0.5,  0.53, 0.56, 0.59, 0.62, 0.65, 0.68,\n\t\t0.71, 0.74, 0.77, 0.80, 0.83, 0.86, 0.89, 0.92, 0.95, 0.98,\n\t\t1.0,  1.06, 1.12, 1.18, 1.24, 1.30, 1.36, 1.42, 1.48, 1.54,\n\t\t1.60, 1.66, 1.72, 1.78, 1.84, 1.90, 1.96, 2.0,  2.12, 2.25,\n\t\t2.37, 2.50, 2.62, 2.75, 2.87, 3.0,  3.2,  3.4,  3.6,  3.8,\n\t\t4.0,  4.3,  4.7,  4.9,  5.0,  5.5,  6.0,  6.5,  6.8,  7.0,\n\t\t7.3,  7.5,  7.8,  8.0,  8.4,  8.7,  9.0,  9.4,  9.6,  9.8,\n\t\t10.0\n\t];\n\n\t/**\n\t * Identity matrix values.\n\t * @property IDENTITY_MATRIX\n\t * @type Array\n\t * @protected\n\t * @static\n\t **/\n\tColorMatrix.IDENTITY_MATRIX = [\n\t\t1,0,0,0,0,\n\t\t0,1,0,0,0,\n\t\t0,0,1,0,0,\n\t\t0,0,0,1,0,\n\t\t0,0,0,0,1\n\t];\n\n\t/**\n\t * The constant length of a color matrix.\n\t * @property LENGTH\n\t * @type Number\n\t * @protected\n\t * @static\n\t **/\n\tColorMatrix.LENGTH = ColorMatrix.IDENTITY_MATRIX.length;\n\n\n// public methods:\n\t/**\n\t * Resets the instance with the specified values.\n\t * @method setColor\n\t * @param {Number} brightness\n\t * @param {Number} contrast\n\t * @param {Number} saturation\n\t * @param {Number} hue\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tp.setColor = function(brightness,contrast,saturation,hue) {\n\t\treturn this.reset().adjustColor(brightness,contrast,saturation,hue);\n\t};\n\n\t/**\n\t * Resets the matrix to identity values.\n\t * @method reset\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t */\n\tp.reset = function() {\n\t\treturn this.copy(ColorMatrix.IDENTITY_MATRIX);\n\t};\n\n\t/**\n\t * Shortcut method to adjust brightness, contrast, saturation and hue.\n\t * Equivalent to calling adjustHue(hue), adjustContrast(contrast),\n\t * adjustBrightness(brightness), adjustSaturation(saturation), in that order.\n\t * @method adjustColor\n\t * @param {Number} brightness\n\t * @param {Number} contrast\n\t * @param {Number} saturation\n\t * @param {Number} hue\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.adjustColor = function(brightness,contrast,saturation,hue) {\n\t\tthis.adjustHue(hue);\n\t\tthis.adjustContrast(contrast);\n\t\tthis.adjustBrightness(brightness);\n\t\treturn this.adjustSaturation(saturation);\n\t};\n\n\t/**\n\t * Adjusts the brightness of pixel color by adding the specified value to the red, green and blue channels.\n\t * Positive values will make the image brighter, negative values will make it darker.\n\t * @method adjustBrightness\n\t * @param {Number} value A value between -255 & 255 that will be added to the RGB channels.\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.adjustBrightness = function(value) {\n\t\tif (value == 0 || isNaN(value)) { return this; }\n\t\tvalue = this._cleanValue(value,255);\n\t\tthis._multiplyMatrix([\n\t\t\t1,0,0,0,value,\n\t\t\t0,1,0,0,value,\n\t\t\t0,0,1,0,value,\n\t\t\t0,0,0,1,0,\n\t\t\t0,0,0,0,1\n\t\t]);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Adjusts the contrast of pixel color.\n\t * Positive values will increase contrast, negative values will decrease contrast.\n\t * @method adjustContrast\n\t * @param {Number} value A value between -100 & 100.\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.adjustContrast = function(value) {\n\t\tif (value == 0 || isNaN(value)) { return this; }\n\t\tvalue = this._cleanValue(value,100);\n\t\tvar x;\n\t\tif (value<0) {\n\t\t\tx = 127+value/100*127;\n\t\t} else {\n\t\t\tx = value%1;\n\t\t\tif (x == 0) {\n\t\t\t\tx = ColorMatrix.DELTA_INDEX[value];\n\t\t\t} else {\n\t\t\t\tx = ColorMatrix.DELTA_INDEX[(value<<0)]*(1-x)+ColorMatrix.DELTA_INDEX[(value<<0)+1]*x; // use linear interpolation for more granularity.\n\t\t\t}\n\t\t\tx = x*127+127;\n\t\t}\n\t\tthis._multiplyMatrix([\n\t\t\tx/127,0,0,0,0.5*(127-x),\n\t\t\t0,x/127,0,0,0.5*(127-x),\n\t\t\t0,0,x/127,0,0.5*(127-x),\n\t\t\t0,0,0,1,0,\n\t\t\t0,0,0,0,1\n\t\t]);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Adjusts the color saturation of the pixel.\n\t * Positive values will increase saturation, negative values will decrease saturation (trend towards greyscale).\n\t * @method adjustSaturation\n\t * @param {Number} value A value between -100 & 100.\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.adjustSaturation = function(value) {\n\t\tif (value == 0 || isNaN(value)) { return this; }\n\t\tvalue = this._cleanValue(value,100);\n\t\tvar x = 1+((value > 0) ? 3*value/100 : value/100);\n\t\tvar lumR = 0.3086;\n\t\tvar lumG = 0.6094;\n\t\tvar lumB = 0.0820;\n\t\tthis._multiplyMatrix([\n\t\t\tlumR*(1-x)+x,lumG*(1-x),lumB*(1-x),0,0,\n\t\t\tlumR*(1-x),lumG*(1-x)+x,lumB*(1-x),0,0,\n\t\t\tlumR*(1-x),lumG*(1-x),lumB*(1-x)+x,0,0,\n\t\t\t0,0,0,1,0,\n\t\t\t0,0,0,0,1\n\t\t]);\n\t\treturn this;\n\t};\n\n\n\t/**\n\t * Adjusts the hue of the pixel color.\n\t * @method adjustHue\n\t * @param {Number} value A value between -180 & 180.\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.adjustHue = function(value) {\n\t\tif (value == 0 || isNaN(value)) { return this; }\n\t\tvalue = this._cleanValue(value,180)/180*Math.PI;\n\t\tvar cosVal = Math.cos(value);\n\t\tvar sinVal = Math.sin(value);\n\t\tvar lumR = 0.213;\n\t\tvar lumG = 0.715;\n\t\tvar lumB = 0.072;\n\t\tthis._multiplyMatrix([\n\t\t\tlumR+cosVal*(1-lumR)+sinVal*(-lumR),lumG+cosVal*(-lumG)+sinVal*(-lumG),lumB+cosVal*(-lumB)+sinVal*(1-lumB),0,0,\n\t\t\tlumR+cosVal*(-lumR)+sinVal*(0.143),lumG+cosVal*(1-lumG)+sinVal*(0.140),lumB+cosVal*(-lumB)+sinVal*(-0.283),0,0,\n\t\t\tlumR+cosVal*(-lumR)+sinVal*(-(1-lumR)),lumG+cosVal*(-lumG)+sinVal*(lumG),lumB+cosVal*(1-lumB)+sinVal*(lumB),0,0,\n\t\t\t0,0,0,1,0,\n\t\t\t0,0,0,0,1\n\t\t]);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Concatenates (multiplies) the specified matrix with this one.\n\t * @method concat\n\t * @param {Array} matrix An array or ColorMatrix instance.\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.concat = function(matrix) {\n\t\tmatrix = this._fixMatrix(matrix);\n\t\tif (matrix.length != ColorMatrix.LENGTH) { return this; }\n\t\tthis._multiplyMatrix(matrix);\n\t\treturn this;\n\t};\n\n\t/**\n\t * Returns a clone of this ColorMatrix.\n\t * @method clone\n\t * @return {ColorMatrix} A clone of this ColorMatrix.\n\t **/\n\tp.clone = function() {\n\t\treturn (new ColorMatrix()).copy(this);\n\t};\n\n\t/**\n\t * Return a length 25 (5x5) array instance containing this matrix's values.\n\t * @method toArray\n\t * @return {Array} An array holding this matrix's values.\n\t **/\n\tp.toArray = function() {\n\t\tvar arr = [];\n\t\tfor (var i= 0, l=ColorMatrix.LENGTH; i<l; i++) {\n\t\t\tarr[i] = this[i];\n\t\t}\n\t\treturn arr;\n\t};\n\n\t/**\n\t * Copy the specified matrix's values to this matrix.\n\t * @method copy\n\t * @param {Array} matrix An array or ColorMatrix instance.\n\t * @return {ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t **/\n\tp.copy = function(matrix) {\n\t\tvar l = ColorMatrix.LENGTH;\n\t\tfor (var i=0;i<l;i++) {\n\t\t\tthis[i] = matrix[i];\n\t\t}\n\t\treturn this;\n\t};\n\t\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[ColorMatrix]\";\n\t};\n\n\n// private methods:\n\t/**\n\t * @method _multiplyMatrix\n\t * @param {Array} matrix\n\t * @protected\n\t **/\n\tp._multiplyMatrix = function(matrix) {\n\t\tvar i, j, k, col = [];\n\n\t\tfor (i=0;i<5;i++) {\n\t\t\tfor (j=0;j<5;j++) {\n\t\t\t\tcol[j] = this[j+i*5];\n\t\t\t}\n\t\t\tfor (j=0;j<5;j++) {\n\t\t\t\tvar val=0;\n\t\t\t\tfor (k=0;k<5;k++) {\n\t\t\t\t\tval += matrix[j+k*5]*col[k];\n\t\t\t\t}\n\t\t\t\tthis[j+i*5] = val;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Make sure values are within the specified range, hue has a limit of 180, brightness is 255, others are 100.\n\t * @method _cleanValue\n\t * @param {Number} value The raw number\n\t * @param {Number} limit The maximum that the number can be. The minimum is the limit * -1.\n\t * @protected\n\t **/\n\tp._cleanValue = function(value, limit) {\n\t\treturn Math.min(limit,Math.max(-limit,value));\n\t};\n\n\t/**\n\t * Makes sure matrixes are 5x5 (25 long).\n\t * @method _fixMatrix\n\t * @param {Array} matrix\n\t * @protected\n\t **/\n\tp._fixMatrix = function(matrix) {\n\t\tif (matrix instanceof ColorMatrix) { matrix = matrix.toArray(); }\n\t\tif (matrix.length < ColorMatrix.LENGTH) {\n\t\t\tmatrix = matrix.slice(0,matrix.length).concat(ColorMatrix.IDENTITY_MATRIX.slice(matrix.length,ColorMatrix.LENGTH));\n\t\t} else if (matrix.length > ColorMatrix.LENGTH) {\n\t\t\tmatrix = matrix.slice(0,ColorMatrix.LENGTH);\n\t\t}\n\t\treturn matrix;\n\t};\n\n\n\tcreatejs.ColorMatrix = ColorMatrix;\n}());\n\n//##############################################################################\n// ColorMatrixFilter.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * Allows you to carry out complex color operations such as modifying saturation, brightness, or inverting. See the\n\t * {{#crossLink \"ColorMatrix\"}}{{/crossLink}} for more information on changing colors. For an easier color transform,\n\t * consider the {{#crossLink \"ColorFilter\"}}{{/crossLink}}.\n\t *\n\t * <h4>Example</h4>\n\t * This example creates a red circle, inverts its hue, and then saturates it to brighten it up.\n\t *\n\t *      var shape = new createjs.Shape().set({x:100,y:100});\n\t *      shape.graphics.beginFill(\"#ff0000\").drawCircle(0,0,50);\n\t *\n\t *      var matrix = new createjs.ColorMatrix().adjustHue(180).adjustSaturation(100);\n\t *      shape.filters = [\n\t *          new createjs.ColorMatrixFilter(matrix)\n\t *      ];\n\t *\n\t *      shape.cache(-50, -50, 100, 100);\n\t *\n\t * See {{#crossLink \"Filter\"}}{{/crossLink}} for an more information on applying filters.\n\t * @class ColorMatrixFilter\n\t * @constructor\n\t * @extends Filter\n\t * @param {Array | ColorMatrix} matrix A 4x5 matrix describing the color operation to perform. See also the {{#crossLink \"ColorMatrix\"}}{{/crossLink}}\n\t * class.\n\t **/\n\tfunction ColorMatrixFilter(matrix) {\n\t\n\t\t\n\t// public properties:\n\t\t/**\n\t\t * A 4x5 matrix describing the color operation to perform. See also the {{#crossLink \"ColorMatrix\"}}{{/crossLink}}\n\t\t * @property matrix\n\t\t * @type Array | ColorMatrix\n\t\t **/\n\t\tthis.matrix = matrix;\n\t}\n\tvar p = createjs.extend(ColorMatrixFilter, createjs.Filter);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\t\n\n// public methods:\n\t/** docced in super class **/\n\tp.toString = function() {\n\t\treturn \"[ColorMatrixFilter]\";\n\t};\n\n\t/** docced in super class **/\n\tp.clone = function() {\n\t\treturn new ColorMatrixFilter(this.matrix);\n\t};\n\n// private methods:\n\t/** docced in super class **/\n\tp._applyFilter = function(imageData) { \n\t\tvar data = imageData.data;\n\t\tvar l = data.length;\n\t\tvar r,g,b,a;\n\t\tvar mtx = this.matrix;\n\t\tvar m0 =  mtx[0],  m1 =  mtx[1],  m2 =  mtx[2],  m3 =  mtx[3],  m4 =  mtx[4];\n\t\tvar m5 =  mtx[5],  m6 =  mtx[6],  m7 =  mtx[7],  m8 =  mtx[8],  m9 =  mtx[9];\n\t\tvar m10 = mtx[10], m11 = mtx[11], m12 = mtx[12], m13 = mtx[13], m14 = mtx[14];\n\t\tvar m15 = mtx[15], m16 = mtx[16], m17 = mtx[17], m18 = mtx[18], m19 = mtx[19];\n\n\t\tfor (var i=0; i<l; i+=4) {\n\t\t\tr = data[i];\n\t\t\tg = data[i+1];\n\t\t\tb = data[i+2];\n\t\t\ta = data[i+3];\n\t\t\tdata[i] = r*m0+g*m1+b*m2+a*m3+m4; // red\n\t\t\tdata[i+1] = r*m5+g*m6+b*m7+a*m8+m9; // green\n\t\t\tdata[i+2] = r*m10+g*m11+b*m12+a*m13+m14; // blue\n\t\t\tdata[i+3] = r*m15+g*m16+b*m17+a*m18+m19; // alpha\n\t\t}\n\t\treturn true;\n\t};\n\n\n\tcreatejs.ColorMatrixFilter = createjs.promote(ColorMatrixFilter, \"Filter\");\n}());\n\n//##############################################################################\n// Touch.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n * Global utility for working with multi-touch enabled devices in EaselJS. Currently supports W3C Touch API (iOS and\n * modern Android browser) and the Pointer API (IE), including ms-prefixed events in IE10, and unprefixed in IE11.\n *\n * Ensure that you {{#crossLink \"Touch/disable\"}}{{/crossLink}} touch when cleaning up your application. You do not have\n * to check if touch is supported to enable it, as it will fail gracefully if it is not supported.\n *\n * <h4>Example</h4>\n *\n *      var stage = new createjs.Stage(\"canvasId\");\n *      createjs.Touch.enable(stage);\n *\n * <strong>Note:</strong> It is important to disable Touch on a stage that you are no longer using:\n *\n *      createjs.Touch.disable(stage);\n *\n * @class Touch\n * @static\n **/\n\tfunction Touch() {\n\t\tthrow \"Touch cannot be instantiated\";\n\t}\n\n\n// public static methods:\n\t/**\n\t * Returns `true` if touch is supported in the current browser.\n\t * @method isSupported\n\t * @return {Boolean} Indicates whether touch is supported in the current browser.\n\t * @static\n\t **/\n\tTouch.isSupported = function() {\n\t\treturn\t!!(('ontouchstart' in window) // iOS & Android\n\t\t\t|| (window.navigator['msPointerEnabled'] && window.navigator['msMaxTouchPoints'] > 0) // IE10\n\t\t\t|| (window.navigator['pointerEnabled'] && window.navigator['maxTouchPoints'] > 0)); // IE11+\n\t};\n\n\t/**\n\t * Enables touch interaction for the specified EaselJS {{#crossLink \"Stage\"}}{{/crossLink}}. Currently supports iOS\n\t * (and compatible browsers, such as modern Android browsers), and IE10/11. Supports both single touch and\n\t * multi-touch modes. Extends the EaselJS {{#crossLink \"MouseEvent\"}}{{/crossLink}} model, but without support for\n\t * double click or over/out events. See the MouseEvent {{#crossLink \"MouseEvent/pointerId:property\"}}{{/crossLink}}\n\t * for more information.\n\t * @method enable\n\t * @param {Stage} stage The {{#crossLink \"Stage\"}}{{/crossLink}} to enable touch on.\n\t * @param {Boolean} [singleTouch=false] If `true`, only a single touch will be active at a time.\n\t * @param {Boolean} [allowDefault=false] If `true`, then default gesture actions (ex. scrolling, zooming) will be\n\t * allowed when the user is interacting with the target canvas.\n\t * @return {Boolean} Returns `true` if touch was successfully enabled on the target stage.\n\t * @static\n\t **/\n\tTouch.enable = function(stage, singleTouch, allowDefault) {\n\t\tif (!stage || !stage.canvas || !Touch.isSupported()) { return false; }\n\t\tif (stage.__touch) { return true; }\n\n\t\t// inject required properties on stage:\n\t\tstage.__touch = {pointers:{}, multitouch:!singleTouch, preventDefault:!allowDefault, count:0};\n\n\t\t// note that in the future we may need to disable the standard mouse event model before adding\n\t\t// these to prevent duplicate calls. It doesn't seem to be an issue with iOS devices though.\n\t\tif ('ontouchstart' in window) { Touch._IOS_enable(stage); }\n\t\telse if (window.navigator['msPointerEnabled'] || window.navigator[\"pointerEnabled\"]) { Touch._IE_enable(stage); }\n\t\treturn true;\n\t};\n\n\t/**\n\t * Removes all listeners that were set up when calling `Touch.enable()` on a stage.\n\t * @method disable\n\t * @param {Stage} stage The {{#crossLink \"Stage\"}}{{/crossLink}} to disable touch on.\n\t * @static\n\t **/\n\tTouch.disable = function(stage) {\n\t\tif (!stage) { return; }\n\t\tif ('ontouchstart' in window) { Touch._IOS_disable(stage); }\n\t\telse if (window.navigator['msPointerEnabled'] || window.navigator[\"pointerEnabled\"]) { Touch._IE_disable(stage); }\n\t\t\n\t\tdelete stage.__touch;\n\t};\n\n\n// Private static methods:\n\t/**\n\t * @method _IOS_enable\n\t * @protected\n\t * @param {Stage} stage\n\t * @static\n\t **/\n\tTouch._IOS_enable = function(stage) {\n\t\tvar canvas = stage.canvas;\n\t\tvar f = stage.__touch.f = function(e) { Touch._IOS_handleEvent(stage,e); };\n\t\tcanvas.addEventListener(\"touchstart\", f, false);\n\t\tcanvas.addEventListener(\"touchmove\", f, false);\n\t\tcanvas.addEventListener(\"touchend\", f, false);\n\t\tcanvas.addEventListener(\"touchcancel\", f, false);\n\t};\n\n\t/**\n\t * @method _IOS_disable\n\t * @protected\n\t * @param {Stage} stage\n\t * @static\n\t **/\n\tTouch._IOS_disable = function(stage) {\n\t\tvar canvas = stage.canvas;\n\t\tif (!canvas) { return; }\n\t\tvar f = stage.__touch.f;\n\t\tcanvas.removeEventListener(\"touchstart\", f, false);\n\t\tcanvas.removeEventListener(\"touchmove\", f, false);\n\t\tcanvas.removeEventListener(\"touchend\", f, false);\n\t\tcanvas.removeEventListener(\"touchcancel\", f, false);\n\t};\n\n\t/**\n\t * @method _IOS_handleEvent\n\t * @param {Stage} stage\n\t * @param {Object} e The event to handle\n\t * @protected\n\t * @static\n\t **/\n\tTouch._IOS_handleEvent = function(stage, e) {\n\t\tif (!stage) { return; }\n\t\tif (stage.__touch.preventDefault) { e.preventDefault&&e.preventDefault(); }\n\t\tvar touches = e.changedTouches;\n\t\tvar type = e.type;\n\t\tfor (var i= 0,l=touches.length; i<l; i++) {\n\t\t\tvar touch = touches[i];\n\t\t\tvar id = touch.identifier;\n\t\t\tif (touch.target != stage.canvas) { continue; }\n\n\t\t\tif (type == \"touchstart\") {\n\t\t\t\tthis._handleStart(stage, id, e, touch.pageX, touch.pageY);\n\t\t\t} else if (type == \"touchmove\") {\n\t\t\t\tthis._handleMove(stage, id, e, touch.pageX, touch.pageY);\n\t\t\t} else if (type == \"touchend\" || type == \"touchcancel\") {\n\t\t\t\tthis._handleEnd(stage, id, e);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * @method _IE_enable\n\t * @protected\n\t * @param {Stage} stage\n\t * @static\n\t **/\n\tTouch._IE_enable = function(stage) {\n\t\tvar canvas = stage.canvas;\n\t\tvar f = stage.__touch.f = function(e) { Touch._IE_handleEvent(stage,e); };\n\n\t\tif (window.navigator[\"pointerEnabled\"] === undefined) {\n\t\t\tcanvas.addEventListener(\"MSPointerDown\", f, false);\n\t\t\twindow.addEventListener(\"MSPointerMove\", f, false);\n\t\t\twindow.addEventListener(\"MSPointerUp\", f, false);\n\t\t\twindow.addEventListener(\"MSPointerCancel\", f, false);\n\t\t\tif (stage.__touch.preventDefault) { canvas.style.msTouchAction = \"none\"; }\n\t\t} else {\n\t\t\tcanvas.addEventListener(\"pointerdown\", f, false);\n\t\t\twindow.addEventListener(\"pointermove\", f, false);\n\t\t\twindow.addEventListener(\"pointerup\", f, false);\n\t\t\twindow.addEventListener(\"pointercancel\", f, false);\n\t\t\tif (stage.__touch.preventDefault) { canvas.style.touchAction = \"none\"; }\n\n\t\t}\n\t\tstage.__touch.activeIDs = {};\n\t};\n\n\t/**\n\t * @method _IE_disable\n\t * @protected\n\t * @param {Stage} stage\n\t * @static\n\t **/\n\tTouch._IE_disable = function(stage) {\n\t\tvar f = stage.__touch.f;\n\n\t\tif (window.navigator[\"pointerEnabled\"] === undefined) {\n\t\t\twindow.removeEventListener(\"MSPointerMove\", f, false);\n\t\t\twindow.removeEventListener(\"MSPointerUp\", f, false);\n\t\t\twindow.removeEventListener(\"MSPointerCancel\", f, false);\n\t\t\tif (stage.canvas) {\n\t\t\t\tstage.canvas.removeEventListener(\"MSPointerDown\", f, false);\n\t\t\t}\n\t\t} else {\n\t\t\twindow.removeEventListener(\"pointermove\", f, false);\n\t\t\twindow.removeEventListener(\"pointerup\", f, false);\n\t\t\twindow.removeEventListener(\"pointercancel\", f, false);\n\t\t\tif (stage.canvas) {\n\t\t\t\tstage.canvas.removeEventListener(\"pointerdown\", f, false);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * @method _IE_handleEvent\n\t * @param {Stage} stage\n\t * @param {Object} e The event to handle.\n\t * @protected\n\t * @static\n\t **/\n\tTouch._IE_handleEvent = function(stage, e) {\n\t\tif (!stage) { return; }\n\t\tif (stage.__touch.preventDefault) { e.preventDefault && e.preventDefault(); }\n\t\tvar type = e.type;\n\t\tvar id = e.pointerId;\n\t\tvar ids = stage.__touch.activeIDs;\n\n\t\tif (type == \"MSPointerDown\" || type == \"pointerdown\") {\n\t\t\tif (e.srcElement != stage.canvas) { return; }\n\t\t\tids[id] = true;\n\t\t\tthis._handleStart(stage, id, e, e.pageX, e.pageY);\n\t\t} else if (ids[id]) { // it's an id we're watching\n\t\t\tif (type == \"MSPointerMove\" || type == \"pointermove\") {\n\t\t\t\tthis._handleMove(stage, id, e, e.pageX, e.pageY);\n\t\t\t} else if (type == \"MSPointerUp\" || type == \"MSPointerCancel\"\n\t\t\t\t\t|| type == \"pointerup\" || type == \"pointercancel\") {\n\t\t\t\tdelete(ids[id]);\n\t\t\t\tthis._handleEnd(stage, id, e);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * @method _handleStart\n\t * @param {Stage} stage\n\t * @param {String|Number} id\n\t * @param {Object} e\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @protected\n\t **/\n\tTouch._handleStart = function(stage, id, e, x, y) {\n\t\tvar props = stage.__touch;\n\t\tif (!props.multitouch && props.count) { return; }\n\t\tvar ids = props.pointers;\n\t\tif (ids[id]) { return; }\n\t\tids[id] = true;\n\t\tprops.count++;\n\t\tstage._handlePointerDown(id, e, x, y);\n\t};\n\n\t/**\n\t * @method _handleMove\n\t * @param {Stage} stage\n\t * @param {String|Number} id\n\t * @param {Object} e\n\t * @param {Number} x\n\t * @param {Number} y\n\t * @protected\n\t **/\n\tTouch._handleMove = function(stage, id, e, x, y) {\n\t\tif (!stage.__touch.pointers[id]) { return; }\n\t\tstage._handlePointerMove(id, e, x, y);\n\t};\n\n\t/**\n\t * @method _handleEnd\n\t * @param {Stage} stage\n\t * @param {String|Number} id\n\t * @param {Object} e\n\t * @protected\n\t **/\n\tTouch._handleEnd = function(stage, id, e) {\n\t\t// TODO: cancel should be handled differently for proper UI (ex. an up would trigger a click, a cancel would more closely resemble an out).\n\t\tvar props = stage.__touch;\n\t\tvar ids = props.pointers;\n\t\tif (!ids[id]) { return; }\n\t\tprops.count--;\n\t\tstage._handlePointerUp(id, e, true);\n\t\tdelete(ids[id]);\n\t};\n\n\n\tcreatejs.Touch = Touch;\n}());\n\n//##############################################################################\n// version.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function() {\n\t\"use strict\";\n\n\t/**\n\t * Static class holding library specific information such as the version and buildDate of\n\t * the library.\n\t * @class EaselJS\n\t **/\n\tvar s = createjs.EaselJS = createjs.EaselJS || {};\n\n\t/**\n\t * The version string for this release.\n\t * @property version\n\t * @type String\n\t * @static\n\t **/\n\ts.version = /*=version*/\"0.8.1\"; // injected by build process\n\n\t/**\n\t * The build date for this release in UTC format.\n\t * @property buildDate\n\t * @type String\n\t * @static\n\t **/\n\ts.buildDate = /*=date*/\"Thu, 21 May 2015 16:17:39 GMT\"; // injected by build process\n\n})();\n/*!\n* PreloadJS\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2010 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\n//##############################################################################\n// version.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t/**\n\t * Static class holding library specific information such as the version and buildDate of the library.\n\t * @class PreloadJS\n\t **/\n\tvar s = createjs.PreloadJS = createjs.PreloadJS || {};\n\n\t/**\n\t * The version string for this release.\n\t * @property version\n\t * @type {String}\n\t * @static\n\t **/\n\ts.version = /*=version*/\"0.6.1\"; // injected by build process\n\n\t/**\n\t * The build date for this release in UTC format.\n\t * @property buildDate\n\t * @type {String}\n\t * @static\n\t **/\n\ts.buildDate = /*=date*/\"Thu, 21 May 2015 16:17:37 GMT\"; // injected by build process\n\n})();\n\n//##############################################################################\n// extend.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n/**\n * @class Utility Methods\n */\n\n/**\n * Sets up the prototype chain and constructor property for a new class.\n *\n * This should be called right after creating the class constructor.\n *\n * \tfunction MySubClass() {}\n * \tcreatejs.extend(MySubClass, MySuperClass);\n * \tClassB.prototype.doSomething = function() { }\n *\n * \tvar foo = new MySubClass();\n * \tconsole.log(foo instanceof MySuperClass); // true\n * \tconsole.log(foo.prototype.constructor === MySubClass); // true\n *\n * @method extend\n * @param {Function} subclass The subclass.\n * @param {Function} superclass The superclass to extend.\n * @return {Function} Returns the subclass's new prototype.\n */\ncreatejs.extend = function(subclass, superclass) {\n\t\"use strict\";\n\n\tfunction o() { this.constructor = subclass; }\n\to.prototype = superclass.prototype;\n\treturn (subclass.prototype = new o());\n};\n\n//##############################################################################\n// promote.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n/**\n * @class Utility Methods\n */\n\n/**\n * Promotes any methods on the super class that were overridden, by creating an alias in the format `prefix_methodName`.\n * It is recommended to use the super class's name as the prefix.\n * An alias to the super class's constructor is always added in the format `prefix_constructor`.\n * This allows the subclass to call super class methods without using `function.call`, providing better performance.\n *\n * For example, if `MySubClass` extends `MySuperClass`, and both define a `draw` method, then calling `promote(MySubClass, \"MySuperClass\")`\n * would add a `MySuperClass_constructor` method to MySubClass and promote the `draw` method on `MySuperClass` to the\n * prototype of `MySubClass` as `MySuperClass_draw`.\n *\n * This should be called after the class's prototype is fully defined.\n *\n * \tfunction ClassA(name) {\n * \t\tthis.name = name;\n * \t}\n * \tClassA.prototype.greet = function() {\n * \t\treturn \"Hello \"+this.name;\n * \t}\n *\n * \tfunction ClassB(name, punctuation) {\n * \t\tthis.ClassA_constructor(name);\n * \t\tthis.punctuation = punctuation;\n * \t}\n * \tcreatejs.extend(ClassB, ClassA);\n * \tClassB.prototype.greet = function() {\n * \t\treturn this.ClassA_greet()+this.punctuation;\n * \t}\n * \tcreatejs.promote(ClassB, \"ClassA\");\n *\n * \tvar foo = new ClassB(\"World\", \"!?!\");\n * \tconsole.log(foo.greet()); // Hello World!?!\n *\n * @method promote\n * @param {Function} subclass The class to promote super class methods on.\n * @param {String} prefix The prefix to add to the promoted method names. Usually the name of the superclass.\n * @return {Function} Returns the subclass.\n */\ncreatejs.promote = function(subclass, prefix) {\n\t\"use strict\";\n\n\tvar subP = subclass.prototype, supP = (Object.getPrototypeOf&&Object.getPrototypeOf(subP))||subP.__proto__;\n\tif (supP) {\n\t\tsubP[(prefix+=\"_\") + \"constructor\"] = supP.constructor; // constructor is not always innumerable\n\t\tfor (var n in supP) {\n\t\t\tif (subP.hasOwnProperty(n) && (typeof supP[n] == \"function\")) { subP[prefix + n] = supP[n]; }\n\t\t}\n\t}\n\treturn subclass;\n};\n\n//##############################################################################\n// indexOf.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n/**\n * @class Utility Methods\n */\n\n/**\n * Finds the first occurrence of a specified value searchElement in the passed in array, and returns the index of\n * that value.  Returns -1 if value is not found.\n *\n *      var i = createjs.indexOf(myArray, myElementToFind);\n *\n * @method indexOf\n * @param {Array} array Array to search for searchElement\n * @param searchElement Element to find in array.\n * @return {Number} The first index of searchElement in array.\n */\ncreatejs.indexOf = function (array, searchElement){\n\t\"use strict\";\n\n\tfor (var i = 0,l=array.length; i < l; i++) {\n\t\tif (searchElement === array[i]) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\n\n//##############################################################################\n// proxy.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n/**\n * Various utilities that the CreateJS Suite uses. Utilities are created as separate files, and will be available on the\n * createjs namespace directly.\n *\n * <h4>Example</h4>\n *\n *      myObject.addEventListener(\"change\", createjs.proxy(myMethod, scope));\n *\n * @class Utility Methods\n * @main Utility Methods\n */\n\n(function() {\n\t\"use strict\";\n\n\t/**\n\t * A function proxy for methods. By default, JavaScript methods do not maintain scope, so passing a method as a\n\t * callback will result in the method getting called in the scope of the caller. Using a proxy ensures that the\n\t * method gets called in the correct scope.\n\t *\n\t * Additional arguments can be passed that will be applied to the function when it is called.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      myObject.addEventListener(\"event\", createjs.proxy(myHandler, this, arg1, arg2));\n\t *\n\t *      function myHandler(arg1, arg2) {\n\t *           // This gets called when myObject.myCallback is executed.\n\t *      }\n\t *\n\t * @method proxy\n\t * @param {Function} method The function to call\n\t * @param {Object} scope The scope to call the method name on\n\t * @param {mixed} [arg] * Arguments that are appended to the callback for additional params.\n\t * @public\n\t * @static\n\t */\n\tcreatejs.proxy = function (method, scope) {\n\t\tvar aArgs = Array.prototype.slice.call(arguments, 2);\n\t\treturn function () {\n\t\t\treturn method.apply(scope, Array.prototype.slice.call(arguments, 0).concat(aArgs));\n\t\t};\n\t}\n\n}());\n\n//##############################################################################\n// BrowserDetect.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n/**\n * @class Utility Methods\n */\n(function() {\n\t\"use strict\";\n\n\t/**\n\t * An object that determines the current browser, version, operating system, and other environment\n\t * variables via user agent string.\n\t *\n\t * Used for audio because feature detection is unable to detect the many limitations of mobile devices.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      if (createjs.BrowserDetect.isIOS) { // do stuff }\n\t *\n\t * @property BrowserDetect\n\t * @type {Object}\n\t * @param {Boolean} isFirefox True if our browser is Firefox.\n\t * @param {Boolean} isOpera True if our browser is opera.\n\t * @param {Boolean} isChrome True if our browser is Chrome.  Note that Chrome for Android returns true, but is a\n\t * completely different browser with different abilities.\n\t * @param {Boolean} isIOS True if our browser is safari for iOS devices (iPad, iPhone, and iPod).\n\t * @param {Boolean} isAndroid True if our browser is Android.\n\t * @param {Boolean} isBlackberry True if our browser is Blackberry.\n\t * @constructor\n\t * @static\n\t */\n\tfunction BrowserDetect() {\n\t\tthrow \"BrowserDetect cannot be instantiated\";\n\t}\n\n\tvar agent = BrowserDetect.agent = window.navigator.userAgent;\n\tBrowserDetect.isWindowPhone = (agent.indexOf(\"IEMobile\") > -1) || (agent.indexOf(\"Windows Phone\") > -1);\n\tBrowserDetect.isFirefox = (agent.indexOf(\"Firefox\") > -1);\n\tBrowserDetect.isOpera = (window.opera != null);\n\tBrowserDetect.isChrome = (agent.indexOf(\"Chrome\") > -1);  // NOTE that Chrome on Android returns true but is a completely different browser with different abilities\n\tBrowserDetect.isIOS = (agent.indexOf(\"iPod\") > -1 || agent.indexOf(\"iPhone\") > -1 || agent.indexOf(\"iPad\") > -1) && !BrowserDetect.isWindowPhone;\n\tBrowserDetect.isAndroid = (agent.indexOf(\"Android\") > -1) && !BrowserDetect.isWindowPhone;\n\tBrowserDetect.isBlackberry = (agent.indexOf(\"Blackberry\") > -1);\n\n\tcreatejs.BrowserDetect = BrowserDetect;\n\n}());\n\n//##############################################################################\n// Event.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n// constructor:\n\t/**\n\t * Contains properties and methods shared by all events for use with\n\t * {{#crossLink \"EventDispatcher\"}}{{/crossLink}}.\n\t * \n\t * Note that Event objects are often reused, so you should never\n\t * rely on an event object's state outside of the call stack it was received in.\n\t * @class Event\n\t * @param {String} type The event type.\n\t * @param {Boolean} bubbles Indicates whether the event will bubble through the display list.\n\t * @param {Boolean} cancelable Indicates whether the default behaviour of this event can be cancelled.\n\t * @constructor\n\t **/\n\tfunction Event(type, bubbles, cancelable) {\n\t\t\n\t\n\t// public properties:\n\t\t/**\n\t\t * The type of event.\n\t\t * @property type\n\t\t * @type String\n\t\t **/\n\t\tthis.type = type;\n\t\n\t\t/**\n\t\t * The object that generated an event.\n\t\t * @property target\n\t\t * @type Object\n\t\t * @default null\n\t\t * @readonly\n\t\t*/\n\t\tthis.target = null;\n\t\n\t\t/**\n\t\t * The current target that a bubbling event is being dispatched from. For non-bubbling events, this will\n\t\t * always be the same as target. For example, if childObj.parent = parentObj, and a bubbling event\n\t\t * is generated from childObj, then a listener on parentObj would receive the event with\n\t\t * target=childObj (the original target) and currentTarget=parentObj (where the listener was added).\n\t\t * @property currentTarget\n\t\t * @type Object\n\t\t * @default null\n\t\t * @readonly\n\t\t*/\n\t\tthis.currentTarget = null;\n\t\n\t\t/**\n\t\t * For bubbling events, this indicates the current event phase:<OL>\n\t\t * \t<LI> capture phase: starting from the top parent to the target</LI>\n\t\t * \t<LI> at target phase: currently being dispatched from the target</LI>\n\t\t * \t<LI> bubbling phase: from the target to the top parent</LI>\n\t\t * </OL>\n\t\t * @property eventPhase\n\t\t * @type Number\n\t\t * @default 0\n\t\t * @readonly\n\t\t*/\n\t\tthis.eventPhase = 0;\n\t\n\t\t/**\n\t\t * Indicates whether the event will bubble through the display list.\n\t\t * @property bubbles\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.bubbles = !!bubbles;\n\t\n\t\t/**\n\t\t * Indicates whether the default behaviour of this event can be cancelled via\n\t\t * {{#crossLink \"Event/preventDefault\"}}{{/crossLink}}. This is set via the Event constructor.\n\t\t * @property cancelable\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.cancelable = !!cancelable;\n\t\n\t\t/**\n\t\t * The epoch time at which this event was created.\n\t\t * @property timeStamp\n\t\t * @type Number\n\t\t * @default 0\n\t\t * @readonly\n\t\t*/\n\t\tthis.timeStamp = (new Date()).getTime();\n\t\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/preventDefault\"}}{{/crossLink}} has been called\n\t\t * on this event.\n\t\t * @property defaultPrevented\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.defaultPrevented = false;\n\t\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/stopPropagation\"}}{{/crossLink}} or\n\t\t * {{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called on this event.\n\t\t * @property propagationStopped\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.propagationStopped = false;\n\t\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called\n\t\t * on this event.\n\t\t * @property immediatePropagationStopped\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.immediatePropagationStopped = false;\n\t\t\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/remove\"}}{{/crossLink}} has been called on this event.\n\t\t * @property removed\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.removed = false;\n\t}\n\tvar p = Event.prototype;\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\t\n\n// public methods:\n\t/**\n\t * Sets {{#crossLink \"Event/defaultPrevented\"}}{{/crossLink}} to true.\n\t * Mirrors the DOM event standard.\n\t * @method preventDefault\n\t **/\n\tp.preventDefault = function() {\n\t\tthis.defaultPrevented = this.cancelable&&true;\n\t};\n\n\t/**\n\t * Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} to true.\n\t * Mirrors the DOM event standard.\n\t * @method stopPropagation\n\t **/\n\tp.stopPropagation = function() {\n\t\tthis.propagationStopped = true;\n\t};\n\n\t/**\n\t * Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} and\n\t * {{#crossLink \"Event/immediatePropagationStopped\"}}{{/crossLink}} to true.\n\t * Mirrors the DOM event standard.\n\t * @method stopImmediatePropagation\n\t **/\n\tp.stopImmediatePropagation = function() {\n\t\tthis.immediatePropagationStopped = this.propagationStopped = true;\n\t};\n\t\n\t/**\n\t * Causes the active listener to be removed via removeEventListener();\n\t * \n\t * \t\tmyBtn.addEventListener(\"click\", function(evt) {\n\t * \t\t\t// do stuff...\n\t * \t\t\tevt.remove(); // removes this listener.\n\t * \t\t});\n\t * \n\t * @method remove\n\t **/\n\tp.remove = function() {\n\t\tthis.removed = true;\n\t};\n\t\n\t/**\n\t * Returns a clone of the Event instance.\n\t * @method clone\n\t * @return {Event} a clone of the Event instance.\n\t **/\n\tp.clone = function() {\n\t\treturn new Event(this.type, this.bubbles, this.cancelable);\n\t};\n\t\n\t/**\n\t * Provides a chainable shortcut method for setting a number of properties on the instance.\n\t *\n\t * @method set\n\t * @param {Object} props A generic object containing properties to copy to the instance.\n\t * @return {Event} Returns the instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t*/\n\tp.set = function(props) {\n\t\tfor (var n in props) { this[n] = props[n]; }\n\t\treturn this;\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Event (type=\"+this.type+\")]\";\n\t};\n\n\tcreatejs.Event = Event;\n}());\n\n//##############################################################################\n// ErrorEvent.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\t/**\n\t * A general error {{#crossLink \"Event\"}}{{/crossLink}}, that describes an error that occurred, as well as any details.\n\t * @class ErrorEvent\n\t * @param {String} [title] The error title\n\t * @param {String} [message] The error description\n\t * @param {Object} [data] Additional error data\n\t * @constructor\n\t */\n\tfunction ErrorEvent(title, message, data) {\n\t\tthis.Event_constructor(\"error\");\n\n\t\t/**\n\t\t * The short error title, which indicates the type of error that occurred.\n\t\t * @property title\n\t\t * @type String\n\t\t */\n\t\tthis.title = title;\n\n\t\t/**\n\t\t * The verbose error message, containing details about the error.\n\t\t * @property message\n\t\t * @type String\n\t\t */\n\t\tthis.message = message;\n\n\t\t/**\n\t\t * Additional data attached to an error.\n\t\t * @property data\n\t\t * @type {Object}\n\t\t */\n\t\tthis.data = data;\n\t}\n\n\tvar p = createjs.extend(ErrorEvent, createjs.Event);\n\n\tp.clone = function() {\n\t\treturn new createjs.ErrorEvent(this.title, this.message, this.data);\n\t};\n\n\tcreatejs.ErrorEvent = createjs.promote(ErrorEvent, \"Event\");\n\n}());\n\n//##############################################################################\n// EventDispatcher.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\r\n\r\n(function() {\r\n\t\"use strict\";\r\n\r\n\r\n// constructor:\r\n\t/**\r\n\t * EventDispatcher provides methods for managing queues of event listeners and dispatching events.\r\n\t *\r\n\t * You can either extend EventDispatcher or mix its methods into an existing prototype or instance by using the\r\n\t * EventDispatcher {{#crossLink \"EventDispatcher/initialize\"}}{{/crossLink}} method.\r\n\t * \r\n\t * Together with the CreateJS Event class, EventDispatcher provides an extended event model that is based on the\r\n\t * DOM Level 2 event model, including addEventListener, removeEventListener, and dispatchEvent. It supports\r\n\t * bubbling / capture, preventDefault, stopPropagation, stopImmediatePropagation, and handleEvent.\r\n\t * \r\n\t * EventDispatcher also exposes a {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}} method, which makes it easier\r\n\t * to create scoped listeners, listeners that only run once, and listeners with associated arbitrary data. The \r\n\t * {{#crossLink \"EventDispatcher/off\"}}{{/crossLink}} method is merely an alias to\r\n\t * {{#crossLink \"EventDispatcher/removeEventListener\"}}{{/crossLink}}.\r\n\t * \r\n\t * Another addition to the DOM Level 2 model is the {{#crossLink \"EventDispatcher/removeAllEventListeners\"}}{{/crossLink}}\r\n\t * method, which can be used to listeners for all events, or listeners for a specific event. The Event object also \r\n\t * includes a {{#crossLink \"Event/remove\"}}{{/crossLink}} method which removes the active listener.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t * Add EventDispatcher capabilities to the \"MyClass\" class.\r\n\t *\r\n\t *      EventDispatcher.initialize(MyClass.prototype);\r\n\t *\r\n\t * Add an event (see {{#crossLink \"EventDispatcher/addEventListener\"}}{{/crossLink}}).\r\n\t *\r\n\t *      instance.addEventListener(\"eventName\", handlerMethod);\r\n\t *      function handlerMethod(event) {\r\n\t *          console.log(event.target + \" Was Clicked\");\r\n\t *      }\r\n\t *\r\n\t * <b>Maintaining proper scope</b><br />\r\n\t * Scope (ie. \"this\") can be be a challenge with events. Using the {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}}\r\n\t * method to subscribe to events simplifies this.\r\n\t *\r\n\t *      instance.addEventListener(\"click\", function(event) {\r\n\t *          console.log(instance == this); // false, scope is ambiguous.\r\n\t *      });\r\n\t *      \r\n\t *      instance.on(\"click\", function(event) {\r\n\t *          console.log(instance == this); // true, \"on\" uses dispatcher scope by default.\r\n\t *      });\r\n\t * \r\n\t * If you want to use addEventListener instead, you may want to use function.bind() or a similar proxy to manage scope.\r\n\t *      \r\n\t *\r\n\t * @class EventDispatcher\r\n\t * @constructor\r\n\t **/\r\n\tfunction EventDispatcher() {\r\n\t\r\n\t\r\n\t// private properties:\r\n\t\t/**\r\n\t\t * @protected\r\n\t\t * @property _listeners\r\n\t\t * @type Object\r\n\t\t **/\r\n\t\tthis._listeners = null;\r\n\t\t\r\n\t\t/**\r\n\t\t * @protected\r\n\t\t * @property _captureListeners\r\n\t\t * @type Object\r\n\t\t **/\r\n\t\tthis._captureListeners = null;\r\n\t}\r\n\tvar p = EventDispatcher.prototype;\r\n\r\n\t/**\r\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\r\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\r\n\t * for details.\r\n\t *\r\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\r\n\t *\r\n\t * @method initialize\r\n\t * @protected\r\n\t * @deprecated\r\n\t */\r\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\r\n\r\n\r\n// static public methods:\r\n\t/**\r\n\t * Static initializer to mix EventDispatcher methods into a target object or prototype.\r\n\t * \r\n\t * \t\tEventDispatcher.initialize(MyClass.prototype); // add to the prototype of the class\r\n\t * \t\tEventDispatcher.initialize(myObject); // add to a specific instance\r\n\t * \r\n\t * @method initialize\r\n\t * @static\r\n\t * @param {Object} target The target object to inject EventDispatcher methods into. This can be an instance or a\r\n\t * prototype.\r\n\t **/\r\n\tEventDispatcher.initialize = function(target) {\r\n\t\ttarget.addEventListener = p.addEventListener;\r\n\t\ttarget.on = p.on;\r\n\t\ttarget.removeEventListener = target.off =  p.removeEventListener;\r\n\t\ttarget.removeAllEventListeners = p.removeAllEventListeners;\r\n\t\ttarget.hasEventListener = p.hasEventListener;\r\n\t\ttarget.dispatchEvent = p.dispatchEvent;\r\n\t\ttarget._dispatchEvent = p._dispatchEvent;\r\n\t\ttarget.willTrigger = p.willTrigger;\r\n\t};\r\n\t\r\n\r\n// public methods:\r\n\t/**\r\n\t * Adds the specified event listener. Note that adding multiple listeners to the same function will result in\r\n\t * multiple callbacks getting fired.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      displayObject.addEventListener(\"click\", handleClick);\r\n\t *      function handleClick(event) {\r\n\t *         // Click happened.\r\n\t *      }\r\n\t *\r\n\t * @method addEventListener\r\n\t * @param {String} type The string type of the event.\r\n\t * @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when\r\n\t * the event is dispatched.\r\n\t * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\r\n\t * @return {Function | Object} Returns the listener for chaining or assignment.\r\n\t **/\r\n\tp.addEventListener = function(type, listener, useCapture) {\r\n\t\tvar listeners;\r\n\t\tif (useCapture) {\r\n\t\t\tlisteners = this._captureListeners = this._captureListeners||{};\r\n\t\t} else {\r\n\t\t\tlisteners = this._listeners = this._listeners||{};\r\n\t\t}\r\n\t\tvar arr = listeners[type];\r\n\t\tif (arr) { this.removeEventListener(type, listener, useCapture); }\r\n\t\tarr = listeners[type]; // remove may have deleted the array\r\n\t\tif (!arr) { listeners[type] = [listener];  }\r\n\t\telse { arr.push(listener); }\r\n\t\treturn listener;\r\n\t};\r\n\t\r\n\t/**\r\n\t * A shortcut method for using addEventListener that makes it easier to specify an execution scope, have a listener\r\n\t * only run once, associate arbitrary data with the listener, and remove the listener.\r\n\t * \r\n\t * This method works by creating an anonymous wrapper function and subscribing it with addEventListener.\r\n\t * The created anonymous function is returned for use with .removeEventListener (or .off).\r\n\t * \r\n\t * <h4>Example</h4>\r\n\t * \r\n\t * \t\tvar listener = myBtn.on(\"click\", handleClick, null, false, {count:3});\r\n\t * \t\tfunction handleClick(evt, data) {\r\n\t * \t\t\tdata.count -= 1;\r\n\t * \t\t\tconsole.log(this == myBtn); // true - scope defaults to the dispatcher\r\n\t * \t\t\tif (data.count == 0) {\r\n\t * \t\t\t\talert(\"clicked 3 times!\");\r\n\t * \t\t\t\tmyBtn.off(\"click\", listener);\r\n\t * \t\t\t\t// alternately: evt.remove();\r\n\t * \t\t\t}\r\n\t * \t\t}\r\n\t * \r\n\t * @method on\r\n\t * @param {String} type The string type of the event.\r\n\t * @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when\r\n\t * the event is dispatched.\r\n\t * @param {Object} [scope] The scope to execute the listener in. Defaults to the dispatcher/currentTarget for function listeners, and to the listener itself for object listeners (ie. using handleEvent).\r\n\t * @param {Boolean} [once=false] If true, the listener will remove itself after the first time it is triggered.\r\n\t * @param {*} [data] Arbitrary data that will be included as the second parameter when the listener is called.\r\n\t * @param {Boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\r\n\t * @return {Function} Returns the anonymous function that was created and assigned as the listener. This is needed to remove the listener later using .removeEventListener.\r\n\t **/\r\n\tp.on = function(type, listener, scope, once, data, useCapture) {\r\n\t\tif (listener.handleEvent) {\r\n\t\t\tscope = scope||listener;\r\n\t\t\tlistener = listener.handleEvent;\r\n\t\t}\r\n\t\tscope = scope||this;\r\n\t\treturn this.addEventListener(type, function(evt) {\r\n\t\t\t\tlistener.call(scope, evt, data);\r\n\t\t\t\tonce&&evt.remove();\r\n\t\t\t}, useCapture);\r\n\t};\r\n\r\n\t/**\r\n\t * Removes the specified event listener.\r\n\t *\r\n\t * <b>Important Note:</b> that you must pass the exact function reference used when the event was added. If a proxy\r\n\t * function, or function closure is used as the callback, the proxy/closure reference must be used - a new proxy or\r\n\t * closure will not work.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      displayObject.removeEventListener(\"click\", handleClick);\r\n\t *\r\n\t * @method removeEventListener\r\n\t * @param {String} type The string type of the event.\r\n\t * @param {Function | Object} listener The listener function or object.\r\n\t * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\r\n\t **/\r\n\tp.removeEventListener = function(type, listener, useCapture) {\r\n\t\tvar listeners = useCapture ? this._captureListeners : this._listeners;\r\n\t\tif (!listeners) { return; }\r\n\t\tvar arr = listeners[type];\r\n\t\tif (!arr) { return; }\r\n\t\tfor (var i=0,l=arr.length; i<l; i++) {\r\n\t\t\tif (arr[i] == listener) {\r\n\t\t\t\tif (l==1) { delete(listeners[type]); } // allows for faster checks.\r\n\t\t\t\telse { arr.splice(i,1); }\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\t/**\r\n\t * A shortcut to the removeEventListener method, with the same parameters and return value. This is a companion to the\r\n\t * .on method.\r\n\t *\r\n\t * @method off\r\n\t * @param {String} type The string type of the event.\r\n\t * @param {Function | Object} listener The listener function or object.\r\n\t * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\r\n\t **/\r\n\tp.off = p.removeEventListener;\r\n\r\n\t/**\r\n\t * Removes all listeners for the specified type, or all listeners of all types.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      // Remove all listeners\r\n\t *      displayObject.removeAllEventListeners();\r\n\t *\r\n\t *      // Remove all click listeners\r\n\t *      displayObject.removeAllEventListeners(\"click\");\r\n\t *\r\n\t * @method removeAllEventListeners\r\n\t * @param {String} [type] The string type of the event. If omitted, all listeners for all types will be removed.\r\n\t **/\r\n\tp.removeAllEventListeners = function(type) {\r\n\t\tif (!type) { this._listeners = this._captureListeners = null; }\r\n\t\telse {\r\n\t\t\tif (this._listeners) { delete(this._listeners[type]); }\r\n\t\t\tif (this._captureListeners) { delete(this._captureListeners[type]); }\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Dispatches the specified event to all listeners.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      // Use a string event\r\n\t *      this.dispatchEvent(\"complete\");\r\n\t *\r\n\t *      // Use an Event instance\r\n\t *      var event = new createjs.Event(\"progress\");\r\n\t *      this.dispatchEvent(event);\r\n\t *\r\n\t * @method dispatchEvent\r\n\t * @param {Object | String | Event} eventObj An object with a \"type\" property, or a string type.\r\n\t * While a generic object will work, it is recommended to use a CreateJS Event instance. If a string is used,\r\n\t * dispatchEvent will construct an Event instance with the specified type.\r\n\t * @return {Boolean} Returns the value of eventObj.defaultPrevented.\r\n\t **/\r\n\tp.dispatchEvent = function(eventObj) {\r\n\t\tif (typeof eventObj == \"string\") {\r\n\t\t\t// won't bubble, so skip everything if there's no listeners:\r\n\t\t\tvar listeners = this._listeners;\r\n\t\t\tif (!listeners || !listeners[eventObj]) { return false; }\r\n\t\t\teventObj = new createjs.Event(eventObj);\r\n\t\t} else if (eventObj.target && eventObj.clone) {\r\n\t\t\t// redispatching an active event object, so clone it:\r\n\t\t\teventObj = eventObj.clone();\r\n\t\t}\r\n\t\ttry { eventObj.target = this; } catch (e) {} // try/catch allows redispatching of native events\r\n\r\n\t\tif (!eventObj.bubbles || !this.parent) {\r\n\t\t\tthis._dispatchEvent(eventObj, 2);\r\n\t\t} else {\r\n\t\t\tvar top=this, list=[top];\r\n\t\t\twhile (top.parent) { list.push(top = top.parent); }\r\n\t\t\tvar i, l=list.length;\r\n\r\n\t\t\t// capture & atTarget\r\n\t\t\tfor (i=l-1; i>=0 && !eventObj.propagationStopped; i--) {\r\n\t\t\t\tlist[i]._dispatchEvent(eventObj, 1+(i==0));\r\n\t\t\t}\r\n\t\t\t// bubbling\r\n\t\t\tfor (i=1; i<l && !eventObj.propagationStopped; i++) {\r\n\t\t\t\tlist[i]._dispatchEvent(eventObj, 3);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn eventObj.defaultPrevented;\r\n\t};\r\n\r\n\t/**\r\n\t * Indicates whether there is at least one listener for the specified event type.\r\n\t * @method hasEventListener\r\n\t * @param {String} type The string type of the event.\r\n\t * @return {Boolean} Returns true if there is at least one listener for the specified event.\r\n\t **/\r\n\tp.hasEventListener = function(type) {\r\n\t\tvar listeners = this._listeners, captureListeners = this._captureListeners;\r\n\t\treturn !!((listeners && listeners[type]) || (captureListeners && captureListeners[type]));\r\n\t};\r\n\t\r\n\t/**\r\n\t * Indicates whether there is at least one listener for the specified event type on this object or any of its\r\n\t * ancestors (parent, parent's parent, etc). A return value of true indicates that if a bubbling event of the\r\n\t * specified type is dispatched from this object, it will trigger at least one listener.\r\n\t * \r\n\t * This is similar to {{#crossLink \"EventDispatcher/hasEventListener\"}}{{/crossLink}}, but it searches the entire\r\n\t * event flow for a listener, not just this object.\r\n\t * @method willTrigger\r\n\t * @param {String} type The string type of the event.\r\n\t * @return {Boolean} Returns `true` if there is at least one listener for the specified event.\r\n\t **/\r\n\tp.willTrigger = function(type) {\r\n\t\tvar o = this;\r\n\t\twhile (o) {\r\n\t\t\tif (o.hasEventListener(type)) { return true; }\r\n\t\t\to = o.parent;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @method toString\r\n\t * @return {String} a string representation of the instance.\r\n\t **/\r\n\tp.toString = function() {\r\n\t\treturn \"[EventDispatcher]\";\r\n\t};\r\n\r\n\r\n// private methods:\r\n\t/**\r\n\t * @method _dispatchEvent\r\n\t * @param {Object | String | Event} eventObj\r\n\t * @param {Object} eventPhase\r\n\t * @protected\r\n\t **/\r\n\tp._dispatchEvent = function(eventObj, eventPhase) {\r\n\t\tvar l, listeners = (eventPhase==1) ? this._captureListeners : this._listeners;\r\n\t\tif (eventObj && listeners) {\r\n\t\t\tvar arr = listeners[eventObj.type];\r\n\t\t\tif (!arr||!(l=arr.length)) { return; }\r\n\t\t\ttry { eventObj.currentTarget = this; } catch (e) {}\r\n\t\t\ttry { eventObj.eventPhase = eventPhase; } catch (e) {}\r\n\t\t\teventObj.removed = false;\r\n\t\t\t\r\n\t\t\tarr = arr.slice(); // to avoid issues with items being removed or added during the dispatch\r\n\t\t\tfor (var i=0; i<l && !eventObj.immediatePropagationStopped; i++) {\r\n\t\t\t\tvar o = arr[i];\r\n\t\t\t\tif (o.handleEvent) { o.handleEvent(eventObj); }\r\n\t\t\t\telse { o(eventObj); }\r\n\t\t\t\tif (eventObj.removed) {\r\n\t\t\t\t\tthis.off(eventObj.type, o, eventPhase==1);\r\n\t\t\t\t\teventObj.removed = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\r\n\tcreatejs.EventDispatcher = EventDispatcher;\r\n}());\n\n//##############################################################################\n// ProgressEvent.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function (scope) {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * A CreateJS {{#crossLink \"Event\"}}{{/crossLink}} that is dispatched when progress changes.\n\t * @class ProgressEvent\n\t * @param {Number} loaded The amount that has been loaded. This can be any number relative to the total.\n\t * @param {Number} [total=1] The total amount that will load. This will default to 1, so if the `loaded` value is\n\t * a percentage (between 0 and 1), it can be omitted.\n\t * @todo Consider having this event be a \"fileprogress\" event as well\n\t * @constructor\n\t */\n\tfunction ProgressEvent(loaded, total) {\n\t\tthis.Event_constructor(\"progress\");\n\n\t\t/**\n\t\t * The amount that has been loaded (out of a total amount)\n\t\t * @property loaded\n\t\t * @type {Number}\n\t\t */\n\t\tthis.loaded = loaded;\n\n\t\t/**\n\t\t * The total \"size\" of the load.\n\t\t * @property total\n\t\t * @type {Number}\n\t\t * @default 1\n\t\t */\n\t\tthis.total = (total == null) ? 1 : total;\n\n\t\t/**\n\t\t * The percentage (out of 1) that the load has been completed. This is calculated using `loaded/total`.\n\t\t * @property progress\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis.progress = (total == 0) ? 0 : this.loaded / this.total;\n\t};\n\n\tvar p = createjs.extend(ProgressEvent, createjs.Event);\n\n\t/**\n\t * Returns a clone of the ProgressEvent instance.\n\t * @method clone\n\t * @return {ProgressEvent} a clone of the Event instance.\n\t **/\n\tp.clone = function() {\n\t\treturn new createjs.ProgressEvent(this.loaded, this.total);\n\t};\n\n\tcreatejs.ProgressEvent = createjs.promote(ProgressEvent, \"Event\");\n\n}(window));\n\n//##############################################################################\n// json3.js\n//##############################################################################\n\n/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */\n;(function () {\n  // Detect the `define` function exposed by asynchronous module loaders. The\n  // strict `define` check is necessary for compatibility with `r.js`.\n  var isLoader = \"function\" === \"function\" && __webpack_require__(4);\n\n  // A set of types used to distinguish objects from primitives.\n  var objectTypes = {\n    \"function\": true,\n    \"object\": true\n  };\n\n  // Detect the `exports` object exposed by CommonJS implementations.\n  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;\n\n  // Use the `global` object exposed by Node (including Browserify via\n  // `insert-module-globals`), Narwhal, and Ringo as the default context,\n  // and the `window` object in browsers. Rhino exports a `global` function\n  // instead.\n  var root = objectTypes[typeof window] && window || this,\n      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == \"object\" && global;\n\n  if (freeGlobal && (freeGlobal[\"global\"] === freeGlobal || freeGlobal[\"window\"] === freeGlobal || freeGlobal[\"self\"] === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  // Public: Initializes JSON 3 using the given `context` object, attaching the\n  // `stringify` and `parse` functions to the specified `exports` object.\n  function runInContext(context, exports) {\n    context || (context = root[\"Object\"]());\n    exports || (exports = root[\"Object\"]());\n\n    // Native constructor aliases.\n    var Number = context[\"Number\"] || root[\"Number\"],\n        String = context[\"String\"] || root[\"String\"],\n        Object = context[\"Object\"] || root[\"Object\"],\n        Date = context[\"Date\"] || root[\"Date\"],\n        SyntaxError = context[\"SyntaxError\"] || root[\"SyntaxError\"],\n        TypeError = context[\"TypeError\"] || root[\"TypeError\"],\n        Math = context[\"Math\"] || root[\"Math\"],\n        nativeJSON = context[\"JSON\"] || root[\"JSON\"];\n\n    // Delegate to the native `stringify` and `parse` implementations.\n    if (typeof nativeJSON == \"object\" && nativeJSON) {\n      exports.stringify = nativeJSON.stringify;\n      exports.parse = nativeJSON.parse;\n    }\n\n    // Convenience aliases.\n    var objectProto = Object.prototype,\n        getClass = objectProto.toString,\n        isProperty, forEach, undef;\n\n    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.\n    var isExtended = new Date(-3509827334573292);\n    try {\n      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical\n      // results for certain dates in Opera >= 10.53.\n      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&\n        // Safari < 2.0.2 stores the internal millisecond time value correctly,\n        // but clips the values returned by the date methods to the range of\n        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).\n        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;\n    } catch (exception) {}\n\n    // Internal: Determines whether the native `JSON.stringify` and `parse`\n    // implementations are spec-compliant. Based on work by Ken Snyder.\n    function has(name) {\n      if (has[name] !== undef) {\n        // Return cached feature test result.\n        return has[name];\n      }\n      var isSupported;\n      if (name == \"bug-string-char-index\") {\n        // IE <= 7 doesn't support accessing string characters using square\n        // bracket notation. IE 8 only supports this for primitives.\n        isSupported = \"a\"[0] != \"a\";\n      } else if (name == \"json\") {\n        // Indicates whether both `JSON.stringify` and `JSON.parse` are\n        // supported.\n        isSupported = has(\"json-stringify\") && has(\"json-parse\");\n      } else {\n        var value, serialized = '{\"a\":[1,true,false,null,\"\\\\u0000\\\\b\\\\n\\\\f\\\\r\\\\t\"]}';\n        // Test `JSON.stringify`.\n        if (name == \"json-stringify\") {\n          var stringify = exports.stringify, stringifySupported = typeof stringify == \"function\" && isExtended;\n          if (stringifySupported) {\n            // A test function object with a custom `toJSON` method.\n            (value = function () {\n              return 1;\n            }).toJSON = value;\n            try {\n              stringifySupported =\n                // Firefox 3.1b1 and b2 serialize string, number, and boolean\n                // primitives as object literals.\n                stringify(0) === \"0\" &&\n                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object\n                // literals.\n                stringify(new Number()) === \"0\" &&\n                stringify(new String()) == '\"\"' &&\n                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or\n                // does not define a canonical JSON representation (this applies to\n                // objects with `toJSON` properties as well, *unless* they are nested\n                // within an object or array).\n                stringify(getClass) === undef &&\n                // IE 8 serializes `undefined` as `\"undefined\"`. Safari <= 5.1.7 and\n                // FF 3.1b3 pass this test.\n                stringify(undef) === undef &&\n                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,\n                // respectively, if the value is omitted entirely.\n                stringify() === undef &&\n                // FF 3.1b1, 2 throw an error if the given value is not a number,\n                // string, array, object, Boolean, or `null` literal. This applies to\n                // objects with custom `toJSON` methods as well, unless they are nested\n                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`\n                // methods entirely.\n                stringify(value) === \"1\" &&\n                stringify([value]) == \"[1]\" &&\n                // Prototype <= 1.6.1 serializes `[undefined]` as `\"[]\"` instead of\n                // `\"[null]\"`.\n                stringify([undef]) == \"[null]\" &&\n                // YUI 3.0.0b1 fails to serialize `null` literals.\n                stringify(null) == \"null\" &&\n                // FF 3.1b1, 2 halts serialization if an array contains a function:\n                // `[1, true, getClass, 1]` serializes as \"[1,true,],\". FF 3.1b3\n                // elides non-JSON values from objects and arrays, unless they\n                // define custom `toJSON` methods.\n                stringify([undef, getClass, null]) == \"[null,null,null]\" &&\n                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences\n                // where character escape codes are expected (e.g., `\\b` => `\\u0008`).\n                stringify({ \"a\": [value, true, false, null, \"\\x00\\b\\n\\f\\r\\t\"] }) == serialized &&\n                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.\n                stringify(null, value) === \"1\" &&\n                stringify([1, 2], null, 1) == \"[\\n 1,\\n 2\\n]\" &&\n                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly\n                // serialize extended years.\n                stringify(new Date(-8.64e15)) == '\"-271821-04-20T00:00:00.000Z\"' &&\n                // The milliseconds are optional in ES 5, but required in 5.1.\n                stringify(new Date(8.64e15)) == '\"+275760-09-13T00:00:00.000Z\"' &&\n                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative\n                // four-digit years instead of six-digit years. Credits: @Yaffle.\n                stringify(new Date(-621987552e5)) == '\"-000001-01-01T00:00:00.000Z\"' &&\n                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond\n                // values less than 1000. Credits: @Yaffle.\n                stringify(new Date(-1)) == '\"1969-12-31T23:59:59.999Z\"';\n            } catch (exception) {\n              stringifySupported = false;\n            }\n          }\n          isSupported = stringifySupported;\n        }\n        // Test `JSON.parse`.\n        if (name == \"json-parse\") {\n          var parse = exports.parse;\n          if (typeof parse == \"function\") {\n            try {\n              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.\n              // Conforming implementations should also coerce the initial argument to\n              // a string prior to parsing.\n              if (parse(\"0\") === 0 && !parse(false)) {\n                // Simple parsing test.\n                value = parse(serialized);\n                var parseSupported = value[\"a\"].length == 5 && value[\"a\"][0] === 1;\n                if (parseSupported) {\n                  try {\n                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.\n                    parseSupported = !parse('\"\\t\"');\n                  } catch (exception) {}\n                  if (parseSupported) {\n                    try {\n                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading\n                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow\n                      // certain octal literals.\n                      parseSupported = parse(\"01\") !== 1;\n                    } catch (exception) {}\n                  }\n                  if (parseSupported) {\n                    try {\n                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal\n                      // points. These environments, along with FF 3.1b1 and 2,\n                      // also allow trailing commas in JSON objects and arrays.\n                      parseSupported = parse(\"1.\") !== 1;\n                    } catch (exception) {}\n                  }\n                }\n              }\n            } catch (exception) {\n              parseSupported = false;\n            }\n          }\n          isSupported = parseSupported;\n        }\n      }\n      return has[name] = !!isSupported;\n    }\n\n    if (!has(\"json\")) {\n      // Common `[[Class]]` name aliases.\n      var functionClass = \"[object Function]\",\n          dateClass = \"[object Date]\",\n          numberClass = \"[object Number]\",\n          stringClass = \"[object String]\",\n          arrayClass = \"[object Array]\",\n          booleanClass = \"[object Boolean]\";\n\n      // Detect incomplete support for accessing string characters by index.\n      var charIndexBuggy = has(\"bug-string-char-index\");\n\n      // Define additional utility methods if the `Date` methods are buggy.\n      if (!isExtended) {\n        var floor = Math.floor;\n        // A mapping between the months of the year and the number of days between\n        // January 1st and the first of the respective month.\n        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n        // Internal: Calculates the number of days between the Unix epoch and the\n        // first day of the given month.\n        var getDay = function (year, month) {\n          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);\n        };\n      }\n\n      // Internal: Determines if a property is a direct property of the given\n      // object. Delegates to the native `Object#hasOwnProperty` method.\n      if (!(isProperty = objectProto.hasOwnProperty)) {\n        isProperty = function (property) {\n          var members = {}, constructor;\n          if ((members.__proto__ = null, members.__proto__ = {\n            // The *proto* property cannot be set multiple times in recent\n            // versions of Firefox and SeaMonkey.\n            \"toString\": 1\n          }, members).toString != getClass) {\n            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but\n            // supports the mutable *proto* property.\n            isProperty = function (property) {\n              // Capture and break the object's prototype chain (see section 8.6.2\n              // of the ES 5.1 spec). The parenthesized expression prevents an\n              // unsafe transformation by the Closure Compiler.\n              var original = this.__proto__, result = property in (this.__proto__ = null, this);\n              // Restore the original prototype chain.\n              this.__proto__ = original;\n              return result;\n            };\n          } else {\n            // Capture a reference to the top-level `Object` constructor.\n            constructor = members.constructor;\n            // Use the `constructor` property to simulate `Object#hasOwnProperty` in\n            // other environments.\n            isProperty = function (property) {\n              var parent = (this.constructor || constructor).prototype;\n              return property in this && !(property in parent && this[property] === parent[property]);\n            };\n          }\n          members = null;\n          return isProperty.call(this, property);\n        };\n      }\n\n      // Internal: Normalizes the `for...in` iteration algorithm across\n      // environments. Each enumerated key is yielded to a `callback` function.\n      forEach = function (object, callback) {\n        var size = 0, Properties, members, property;\n\n        // Tests for bugs in the current environment's `for...in` algorithm. The\n        // `valueOf` property inherits the non-enumerable flag from\n        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.\n        (Properties = function () {\n          this.valueOf = 0;\n        }).prototype.valueOf = 0;\n\n        // Iterate over a new instance of the `Properties` class.\n        members = new Properties();\n        for (property in members) {\n          // Ignore all properties inherited from `Object.prototype`.\n          if (isProperty.call(members, property)) {\n            size++;\n          }\n        }\n        Properties = members = null;\n\n        // Normalize the iteration algorithm.\n        if (!size) {\n          // A list of non-enumerable properties inherited from `Object.prototype`.\n          members = [\"valueOf\", \"toString\", \"toLocaleString\", \"propertyIsEnumerable\", \"isPrototypeOf\", \"hasOwnProperty\", \"constructor\"];\n          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable\n          // properties.\n          forEach = function (object, callback) {\n            var isFunction = getClass.call(object) == functionClass, property, length;\n            var hasProperty = !isFunction && typeof object.constructor != \"function\" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;\n            for (property in object) {\n              // Gecko <= 1.0 enumerates the `prototype` property of functions under\n              // certain conditions; IE does not.\n              if (!(isFunction && property == \"prototype\") && hasProperty.call(object, property)) {\n                callback(property);\n              }\n            }\n            // Manually invoke the callback for each non-enumerable property.\n            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));\n          };\n        } else if (size == 2) {\n          // Safari <= 2.0.4 enumerates shadowed properties twice.\n          forEach = function (object, callback) {\n            // Create a set of iterated properties.\n            var members = {}, isFunction = getClass.call(object) == functionClass, property;\n            for (property in object) {\n              // Store each property name to prevent double enumeration. The\n              // `prototype` property of functions is not enumerated due to cross-\n              // environment inconsistencies.\n              if (!(isFunction && property == \"prototype\") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {\n                callback(property);\n              }\n            }\n          };\n        } else {\n          // No bugs detected; use the standard `for...in` algorithm.\n          forEach = function (object, callback) {\n            var isFunction = getClass.call(object) == functionClass, property, isConstructor;\n            for (property in object) {\n              if (!(isFunction && property == \"prototype\") && isProperty.call(object, property) && !(isConstructor = property === \"constructor\")) {\n                callback(property);\n              }\n            }\n            // Manually invoke the callback for the `constructor` property due to\n            // cross-environment inconsistencies.\n            if (isConstructor || isProperty.call(object, (property = \"constructor\"))) {\n              callback(property);\n            }\n          };\n        }\n        return forEach(object, callback);\n      };\n\n      // Public: Serializes a JavaScript `value` as a JSON string. The optional\n      // `filter` argument may specify either a function that alters how object and\n      // array members are serialized, or an array of strings and numbers that\n      // indicates which properties should be serialized. The optional `width`\n      // argument may be either a string or number that specifies the indentation\n      // level of the output.\n      if (!has(\"json-stringify\")) {\n        // Internal: A map of control characters and their escaped equivalents.\n        var Escapes = {\n          92: \"\\\\\\\\\",\n          34: '\\\\\"',\n          8: \"\\\\b\",\n          12: \"\\\\f\",\n          10: \"\\\\n\",\n          13: \"\\\\r\",\n          9: \"\\\\t\"\n        };\n\n        // Internal: Converts `value` into a zero-padded string such that its\n        // length is at least equal to `width`. The `width` must be <= 6.\n        var leadingZeroes = \"000000\";\n        var toPaddedString = function (width, value) {\n          // The `|| 0` expression is necessary to work around a bug in\n          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== \"0\"`.\n          return (leadingZeroes + (value || 0)).slice(-width);\n        };\n\n        // Internal: Double-quotes a string `value`, replacing all ASCII control\n        // characters (characters with code unit values between 0 and 31) with\n        // their escaped equivalents. This is an implementation of the\n        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.\n        var unicodePrefix = \"\\\\u00\";\n        var quote = function (value) {\n          var result = '\"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;\n          var symbols = useCharIndex && (charIndexBuggy ? value.split(\"\") : value);\n          for (; index < length; index++) {\n            var charCode = value.charCodeAt(index);\n            // If the character is a control character, append its Unicode or\n            // shorthand escape sequence; otherwise, append the character as-is.\n            switch (charCode) {\n              case 8: case 9: case 10: case 12: case 13: case 34: case 92:\n                result += Escapes[charCode];\n                break;\n              default:\n                if (charCode < 32) {\n                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));\n                  break;\n                }\n                result += useCharIndex ? symbols[index] : value.charAt(index);\n            }\n          }\n          return result + '\"';\n        };\n\n        // Internal: Recursively serializes an object. Implements the\n        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.\n        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {\n          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;\n          try {\n            // Necessary for host object support.\n            value = object[property];\n          } catch (exception) {}\n          if (typeof value == \"object\" && value) {\n            className = getClass.call(value);\n            if (className == dateClass && !isProperty.call(value, \"toJSON\")) {\n              if (value > -1 / 0 && value < 1 / 0) {\n                // Dates are serialized according to the `Date#toJSON` method\n                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15\n                // for the ISO 8601 date time string format.\n                if (getDay) {\n                  // Manually compute the year, month, date, hours, minutes,\n                  // seconds, and milliseconds if the `getUTC*` methods are\n                  // buggy. Adapted from @Yaffle's `date-shim` project.\n                  date = floor(value / 864e5);\n                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);\n                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);\n                  date = 1 + date - getDay(year, month);\n                  // The `time` value specifies the time within the day (see ES\n                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used\n                  // to compute `A modulo B`, as the `%` operator does not\n                  // correspond to the `modulo` operation for negative numbers.\n                  time = (value % 864e5 + 864e5) % 864e5;\n                  // The hours, minutes, seconds, and milliseconds are obtained by\n                  // decomposing the time within the day. See section 15.9.1.10.\n                  hours = floor(time / 36e5) % 24;\n                  minutes = floor(time / 6e4) % 60;\n                  seconds = floor(time / 1e3) % 60;\n                  milliseconds = time % 1e3;\n                } else {\n                  year = value.getUTCFullYear();\n                  month = value.getUTCMonth();\n                  date = value.getUTCDate();\n                  hours = value.getUTCHours();\n                  minutes = value.getUTCMinutes();\n                  seconds = value.getUTCSeconds();\n                  milliseconds = value.getUTCMilliseconds();\n                }\n                // Serialize extended years correctly.\n                value = (year <= 0 || year >= 1e4 ? (year < 0 ? \"-\" : \"+\") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +\n                  \"-\" + toPaddedString(2, month + 1) + \"-\" + toPaddedString(2, date) +\n                  // Months, dates, hours, minutes, and seconds should have two\n                  // digits; milliseconds should have three.\n                  \"T\" + toPaddedString(2, hours) + \":\" + toPaddedString(2, minutes) + \":\" + toPaddedString(2, seconds) +\n                  // Milliseconds are optional in ES 5.0, but required in 5.1.\n                  \".\" + toPaddedString(3, milliseconds) + \"Z\";\n              } else {\n                value = null;\n              }\n            } else if (typeof value.toJSON == \"function\" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, \"toJSON\"))) {\n              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the\n              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3\n              // ignores all `toJSON` methods on these objects unless they are\n              // defined directly on an instance.\n              value = value.toJSON(property);\n            }\n          }\n          if (callback) {\n            // If a replacement function was provided, call it to obtain the value\n            // for serialization.\n            value = callback.call(object, property, value);\n          }\n          if (value === null) {\n            return \"null\";\n          }\n          className = getClass.call(value);\n          if (className == booleanClass) {\n            // Booleans are represented literally.\n            return \"\" + value;\n          } else if (className == numberClass) {\n            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as\n            // `\"null\"`.\n            return value > -1 / 0 && value < 1 / 0 ? \"\" + value : \"null\";\n          } else if (className == stringClass) {\n            // Strings are double-quoted and escaped.\n            return quote(\"\" + value);\n          }\n          // Recursively serialize objects and arrays.\n          if (typeof value == \"object\") {\n            // Check for cyclic structures. This is a linear search; performance\n            // is inversely proportional to the number of unique nested objects.\n            for (length = stack.length; length--;) {\n              if (stack[length] === value) {\n                // Cyclic structures cannot be serialized by `JSON.stringify`.\n                throw TypeError();\n              }\n            }\n            // Add the object to the stack of traversed objects.\n            stack.push(value);\n            results = [];\n            // Save the current indentation level and indent one additional level.\n            prefix = indentation;\n            indentation += whitespace;\n            if (className == arrayClass) {\n              // Recursively serialize array elements.\n              for (index = 0, length = value.length; index < length; index++) {\n                element = serialize(index, value, callback, properties, whitespace, indentation, stack);\n                results.push(element === undef ? \"null\" : element);\n              }\n              result = results.length ? (whitespace ? \"[\\n\" + indentation + results.join(\",\\n\" + indentation) + \"\\n\" + prefix + \"]\" : (\"[\" + results.join(\",\") + \"]\")) : \"[]\";\n            } else {\n              // Recursively serialize object members. Members are selected from\n              // either a user-specified list of property names, or the object\n              // itself.\n              forEach(properties || value, function (property) {\n                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);\n                if (element !== undef) {\n                  // According to ES 5.1 section 15.12.3: \"If `gap` {whitespace}\n                  // is not the empty string, let `member` {quote(property) + \":\"}\n                  // be the concatenation of `member` and the `space` character.\"\n                  // The \"`space` character\" refers to the literal space\n                  // character, not the `space` {width} argument provided to\n                  // `JSON.stringify`.\n                  results.push(quote(property) + \":\" + (whitespace ? \" \" : \"\") + element);\n                }\n              });\n              result = results.length ? (whitespace ? \"{\\n\" + indentation + results.join(\",\\n\" + indentation) + \"\\n\" + prefix + \"}\" : (\"{\" + results.join(\",\") + \"}\")) : \"{}\";\n            }\n            // Remove the object from the traversed object stack.\n            stack.pop();\n            return result;\n          }\n        };\n\n        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.\n        exports.stringify = function (source, filter, width) {\n          var whitespace, callback, properties, className;\n          if (objectTypes[typeof filter] && filter) {\n            if ((className = getClass.call(filter)) == functionClass) {\n              callback = filter;\n            } else if (className == arrayClass) {\n              // Convert the property names array into a makeshift set.\n              properties = {};\n              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));\n            }\n          }\n          if (width) {\n            if ((className = getClass.call(width)) == numberClass) {\n              // Convert the `width` to an integer and create a string containing\n              // `width` number of space characters.\n              if ((width -= width % 1) > 0) {\n                for (whitespace = \"\", width > 10 && (width = 10); whitespace.length < width; whitespace += \" \");\n              }\n            } else if (className == stringClass) {\n              whitespace = width.length <= 10 ? width : width.slice(0, 10);\n            }\n          }\n          // Opera <= 7.54u2 discards the values associated with empty string keys\n          // (`\"\"`) only if they are used directly within an object member list\n          // (e.g., `!(\"\" in { \"\": 1})`).\n          return serialize(\"\", (value = {}, value[\"\"] = source, value), callback, properties, whitespace, \"\", []);\n        };\n      }\n\n      // Public: Parses a JSON source string.\n      if (!has(\"json-parse\")) {\n        var fromCharCode = String.fromCharCode;\n\n        // Internal: A map of escaped control characters and their unescaped\n        // equivalents.\n        var Unescapes = {\n          92: \"\\\\\",\n          34: '\"',\n          47: \"/\",\n          98: \"\\b\",\n          116: \"\\t\",\n          110: \"\\n\",\n          102: \"\\f\",\n          114: \"\\r\"\n        };\n\n        // Internal: Stores the parser state.\n        var Index, Source;\n\n        // Internal: Resets the parser state and throws a `SyntaxError`.\n        var abort = function () {\n          Index = Source = null;\n          throw SyntaxError();\n        };\n\n        // Internal: Returns the next token, or `\"$\"` if the parser has reached\n        // the end of the source string. A token may be a string, number, `null`\n        // literal, or Boolean literal.\n        var lex = function () {\n          var source = Source, length = source.length, value, begin, position, isSigned, charCode;\n          while (Index < length) {\n            charCode = source.charCodeAt(Index);\n            switch (charCode) {\n              case 9: case 10: case 13: case 32:\n                // Skip whitespace tokens, including tabs, carriage returns, line\n                // feeds, and space characters.\n                Index++;\n                break;\n              case 123: case 125: case 91: case 93: case 58: case 44:\n                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at\n                // the current position.\n                value = charIndexBuggy ? source.charAt(Index) : source[Index];\n                Index++;\n                return value;\n              case 34:\n                // `\"` delimits a JSON string; advance to the next character and\n                // begin parsing the string. String tokens are prefixed with the\n                // sentinel `@` character to distinguish them from punctuators and\n                // end-of-string tokens.\n                for (value = \"@\", Index++; Index < length;) {\n                  charCode = source.charCodeAt(Index);\n                  if (charCode < 32) {\n                    // Unescaped ASCII control characters (those with a code unit\n                    // less than the space character) are not permitted.\n                    abort();\n                  } else if (charCode == 92) {\n                    // A reverse solidus (`\\`) marks the beginning of an escaped\n                    // control character (including `\"`, `\\`, and `/`) or Unicode\n                    // escape sequence.\n                    charCode = source.charCodeAt(++Index);\n                    switch (charCode) {\n                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:\n                        // Revive escaped control characters.\n                        value += Unescapes[charCode];\n                        Index++;\n                        break;\n                      case 117:\n                        // `\\u` marks the beginning of a Unicode escape sequence.\n                        // Advance to the first character and validate the\n                        // four-digit code point.\n                        begin = ++Index;\n                        for (position = Index + 4; Index < position; Index++) {\n                          charCode = source.charCodeAt(Index);\n                          // A valid sequence comprises four hexdigits (case-\n                          // insensitive) that form a single hexadecimal value.\n                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {\n                            // Invalid Unicode escape sequence.\n                            abort();\n                          }\n                        }\n                        // Revive the escaped character.\n                        value += fromCharCode(\"0x\" + source.slice(begin, Index));\n                        break;\n                      default:\n                        // Invalid escape sequence.\n                        abort();\n                    }\n                  } else {\n                    if (charCode == 34) {\n                      // An unescaped double-quote character marks the end of the\n                      // string.\n                      break;\n                    }\n                    charCode = source.charCodeAt(Index);\n                    begin = Index;\n                    // Optimize for the common case where a string is valid.\n                    while (charCode >= 32 && charCode != 92 && charCode != 34) {\n                      charCode = source.charCodeAt(++Index);\n                    }\n                    // Append the string as-is.\n                    value += source.slice(begin, Index);\n                  }\n                }\n                if (source.charCodeAt(Index) == 34) {\n                  // Advance to the next character and return the revived string.\n                  Index++;\n                  return value;\n                }\n                // Unterminated string.\n                abort();\n              default:\n                // Parse numbers and literals.\n                begin = Index;\n                // Advance past the negative sign, if one is specified.\n                if (charCode == 45) {\n                  isSigned = true;\n                  charCode = source.charCodeAt(++Index);\n                }\n                // Parse an integer or floating-point value.\n                if (charCode >= 48 && charCode <= 57) {\n                  // Leading zeroes are interpreted as octal literals.\n                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {\n                    // Illegal octal literal.\n                    abort();\n                  }\n                  isSigned = false;\n                  // Parse the integer component.\n                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);\n                  // Floats cannot contain a leading decimal point; however, this\n                  // case is already accounted for by the parser.\n                  if (source.charCodeAt(Index) == 46) {\n                    position = ++Index;\n                    // Parse the decimal component.\n                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);\n                    if (position == Index) {\n                      // Illegal trailing decimal.\n                      abort();\n                    }\n                    Index = position;\n                  }\n                  // Parse exponents. The `e` denoting the exponent is\n                  // case-insensitive.\n                  charCode = source.charCodeAt(Index);\n                  if (charCode == 101 || charCode == 69) {\n                    charCode = source.charCodeAt(++Index);\n                    // Skip past the sign following the exponent, if one is\n                    // specified.\n                    if (charCode == 43 || charCode == 45) {\n                      Index++;\n                    }\n                    // Parse the exponential component.\n                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);\n                    if (position == Index) {\n                      // Illegal empty exponent.\n                      abort();\n                    }\n                    Index = position;\n                  }\n                  // Coerce the parsed value to a JavaScript number.\n                  return +source.slice(begin, Index);\n                }\n                // A negative sign may only precede numbers.\n                if (isSigned) {\n                  abort();\n                }\n                // `true`, `false`, and `null` literals.\n                if (source.slice(Index, Index + 4) == \"true\") {\n                  Index += 4;\n                  return true;\n                } else if (source.slice(Index, Index + 5) == \"false\") {\n                  Index += 5;\n                  return false;\n                } else if (source.slice(Index, Index + 4) == \"null\") {\n                  Index += 4;\n                  return null;\n                }\n                // Unrecognized token.\n                abort();\n            }\n          }\n          // Return the sentinel `$` character if the parser has reached the end\n          // of the source string.\n          return \"$\";\n        };\n\n        // Internal: Parses a JSON `value` token.\n        var get = function (value) {\n          var results, hasMembers;\n          if (value == \"$\") {\n            // Unexpected end of input.\n            abort();\n          }\n          if (typeof value == \"string\") {\n            if ((charIndexBuggy ? value.charAt(0) : value[0]) == \"@\") {\n              // Remove the sentinel `@` character.\n              return value.slice(1);\n            }\n            // Parse object and array literals.\n            if (value == \"[\") {\n              // Parses a JSON array, returning a new JavaScript array.\n              results = [];\n              for (;; hasMembers || (hasMembers = true)) {\n                value = lex();\n                // A closing square bracket marks the end of the array literal.\n                if (value == \"]\") {\n                  break;\n                }\n                // If the array literal contains elements, the current token\n                // should be a comma separating the previous element from the\n                // next.\n                if (hasMembers) {\n                  if (value == \",\") {\n                    value = lex();\n                    if (value == \"]\") {\n                      // Unexpected trailing `,` in array literal.\n                      abort();\n                    }\n                  } else {\n                    // A `,` must separate each array element.\n                    abort();\n                  }\n                }\n                // Elisions and leading commas are not permitted.\n                if (value == \",\") {\n                  abort();\n                }\n                results.push(get(value));\n              }\n              return results;\n            } else if (value == \"{\") {\n              // Parses a JSON object, returning a new JavaScript object.\n              results = {};\n              for (;; hasMembers || (hasMembers = true)) {\n                value = lex();\n                // A closing curly brace marks the end of the object literal.\n                if (value == \"}\") {\n                  break;\n                }\n                // If the object literal contains members, the current token\n                // should be a comma separator.\n                if (hasMembers) {\n                  if (value == \",\") {\n                    value = lex();\n                    if (value == \"}\") {\n                      // Unexpected trailing `,` in object literal.\n                      abort();\n                    }\n                  } else {\n                    // A `,` must separate each object member.\n                    abort();\n                  }\n                }\n                // Leading commas are not permitted, object property names must be\n                // double-quoted strings, and a `:` must separate each property\n                // name and value.\n                if (value == \",\" || typeof value != \"string\" || (charIndexBuggy ? value.charAt(0) : value[0]) != \"@\" || lex() != \":\") {\n                  abort();\n                }\n                results[value.slice(1)] = get(lex());\n              }\n              return results;\n            }\n            // Unexpected token encountered.\n            abort();\n          }\n          return value;\n        };\n\n        // Internal: Updates a traversed object member.\n        var update = function (source, property, callback) {\n          var element = walk(source, property, callback);\n          if (element === undef) {\n            delete source[property];\n          } else {\n            source[property] = element;\n          }\n        };\n\n        // Internal: Recursively traverses a parsed JSON object, invoking the\n        // `callback` function for each value. This is an implementation of the\n        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.\n        var walk = function (source, property, callback) {\n          var value = source[property], length;\n          if (typeof value == \"object\" && value) {\n            // `forEach` can't be used to traverse an array in Opera <= 8.54\n            // because its `Object#hasOwnProperty` implementation returns `false`\n            // for array indices (e.g., `![1, 2, 3].hasOwnProperty(\"0\")`).\n            if (getClass.call(value) == arrayClass) {\n              for (length = value.length; length--;) {\n                update(value, length, callback);\n              }\n            } else {\n              forEach(value, function (property) {\n                update(value, property, callback);\n              });\n            }\n          }\n          return callback.call(source, property, value);\n        };\n\n        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.\n        exports.parse = function (source, callback) {\n          var result, value;\n          Index = 0;\n          Source = \"\" + source;\n          result = get(lex());\n          // If a JSON string contains multiple tokens, it is invalid.\n          if (lex() != \"$\") {\n            abort();\n          }\n          // Reset the parser state.\n          Index = Source = null;\n          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[\"\"] = result, value), \"\", callback) : result;\n        };\n      }\n    }\n\n    exports[\"runInContext\"] = runInContext;\n    return exports;\n  }\n\n  if (freeExports && !isLoader) {\n    // Export for CommonJS environments.\n    runInContext(root, freeExports);\n  } else {\n    // Export for web browsers and JavaScript engines.\n    var nativeJSON = root.JSON,\n        previousJSON = root[\"JSON3\"],\n        isRestored = false;\n\n    var JSON3 = runInContext(root, (root[\"JSON3\"] = {\n      // Public: Restores the original value of the global `JSON` object and\n      // returns a reference to the `JSON3` object.\n      \"noConflict\": function () {\n        if (!isRestored) {\n          isRestored = true;\n          root.JSON = nativeJSON;\n          root[\"JSON3\"] = previousJSON;\n          nativeJSON = previousJSON = null;\n        }\n        return JSON3;\n      }\n    }));\n\n    root.JSON = {\n      \"parse\": JSON3.parse,\n      \"stringify\": JSON3.stringify\n    };\n  }\n\n  // Export for asynchronous module loaders.\n  if (isLoader) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n      return JSON3;\n    }.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n}).call(this);\n\n//##############################################################################\n// DomUtils.js\n//##############################################################################\n\n(function () {\n\n\t/**\n\t * A few utilities for interacting with the dom.\n\t * @class DomUtils\n\t */\n\tvar s = {};\n\n\ts.appendToHead = function (el) {\n\t\ts.getHead().appendChild(el)\n\t}\n\n\ts.getHead = function () {\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\n\t}\n\n\ts.getBody = function () {\n\t\treturn document.body || document.getElementsByTagName(\"body\")[0];\n\t}\n\n\tcreatejs.DomUtils = s;\n\n}());\n\n//##############################################################################\n// DataUtils.js\n//##############################################################################\n\n(function () {\n\n\t/**\n\t * A few data utilities for formatting different data types.\n\t * @class DataUtils\n\t */\n\tvar s = {};\n\n\t// static methods\n\t/**\n\t * Parse XML using the DOM. This is required when preloading XML or SVG.\n\t * @method parseXML\n\t * @param {String} text The raw text or XML that is loaded by XHR.\n\t * @param {String} type The mime type of the XML. Use \"text/xml\" for XML, and  \"image/svg+xml\" for SVG parsing.\n\t * @return {XML} An XML document\n\t * @static\n\t */\n\ts.parseXML = function (text, type) {\n\t\tvar xml = null;\n\t\t// CocoonJS does not support XML parsing with either method.\n\n\t\t// Most browsers will use DOMParser\n\t\t// IE fails on certain SVG files, so we have a fallback below.\n\t\ttry {\n\t\t\tif (window.DOMParser) {\n\t\t\t\tvar parser = new DOMParser();\n\t\t\t\txml = parser.parseFromString(text, type);\n\t\t\t}\n\t\t} catch (e) {\n\t\t}\n\n\t\t// Fallback for IE support.\n\t\tif (!xml) {\n\t\t\ttry {\n\t\t\t\txml = new ActiveXObject(\"Microsoft.XMLDOM\");\n\t\t\t\txml.async = false;\n\t\t\t\txml.loadXML(text);\n\t\t\t} catch (e) {\n\t\t\t\txml = null;\n\t\t\t}\n\t\t}\n\n\t\treturn xml;\n\t};\n\n\t/**\n\t * Parse a string into an Object.\n\t * @method parseJSON\n\t * @param {String} value The loaded JSON string\n\t * @returns {Object} A JavaScript object.\n\t */\n\ts.parseJSON = function (value) {\n\t\tif (value == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\treturn JSON.parse(value);\n\t\t} catch (e) {\n\t\t\t// TODO; Handle this with a custom error?\n\t\t\tthrow e;\n\t\t}\n\t};\n\n\tcreatejs.DataUtils = s;\n\n}());\n\n//##############################################################################\n// LoadItem.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t/**\n\t * All loaders accept an item containing the properties defined in this class. If a raw object is passed instead,\n\t * it will not be affected, but it must contain at least a {{#crossLink \"src:property\"}}{{/crossLink}} property. A\n\t * string path or HTML tag is also acceptable, but it will be automatically converted to a LoadItem using the\n\t * {{#crossLink \"create\"}}{{/crossLink}} method by {{#crossLink \"AbstractLoader\"}}{{/crossLink}}\n\t * @class LoadItem\n\t * @constructor\n\t * @since 0.6.0\n\t */\n\tfunction LoadItem() {\n\t\t/**\n\t\t * The source of the file that is being loaded. This property is <b>required</b>. The source can either be a\n\t\t * string (recommended), or an HTML tag.\n\t\t * This can also be an object, but in that case it has to include a type and be handled by a plugin.\n\t\t * @property src\n\t\t * @type {String}\n\t\t * @default null\n\t\t */\n\t\tthis.src = null;\n\n\t\t/**\n\t\t * The type file that is being loaded. The type of the file is usually inferred by the extension, but can also\n\t\t * be set manually. This is helpful in cases where a file does not have an extension.\n\t\t * @property type\n\t\t * @type {String}\n\t\t * @default null\n\t\t */\n\t\tthis.type = null;\n\n\t\t/**\n\t\t * A string identifier which can be used to reference the loaded object. If none is provided, this will be\n\t\t * automatically set to the {{#crossLink \"src:property\"}}{{/crossLink}}.\n\t\t * @property id\n\t\t * @type {String}\n\t\t * @default null\n\t\t */\n\t\tthis.id = null;\n\n\t\t/**\n\t\t * Determines if a manifest will maintain the order of this item, in relation to other items in the manifest\n\t\t * that have also set the `maintainOrder` property to `true`. This only applies when the max connections has\n\t\t * been set above 1 (using {{#crossLink \"LoadQueue/setMaxConnections\"}}{{/crossLink}}). Everything with this\n\t\t * property set to `false` will finish as it is loaded. Ordered items are combined with script tags loading in\n\t\t * order when {{#crossLink \"LoadQueue/maintainScriptOrder:property\"}}{{/crossLink}} is set to `true`.\n\t\t * @property maintainOrder\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.maintainOrder = false;\n\n\t\t/**\n\t\t * A callback used by JSONP requests that defines what global method to call when the JSONP content is loaded.\n\t\t * @property callback\n\t\t * @type {String}\n\t\t * @default null\n\t\t */\n\t\tthis.callback = null;\n\n\t\t/**\n\t\t * An arbitrary data object, which is included with the loaded object.\n\t\t * @property data\n\t\t * @type {Object}\n\t\t * @default null\n\t\t */\n\t\tthis.data = null;\n\n\t\t/**\n\t\t * The request method used for HTTP calls. Both {{#crossLink \"AbstractLoader/GET:property\"}}{{/crossLink}} or\n\t\t * {{#crossLink \"AbstractLoader/POST:property\"}}{{/crossLink}} request types are supported, and are defined as\n\t\t * constants on {{#crossLink \"AbstractLoader\"}}{{/crossLink}}.\n\t\t * @property method\n\t\t * @type {String}\n\t\t * @default get\n\t\t */\n\t\tthis.method = createjs.LoadItem.GET;\n\n\t\t/**\n\t\t * An object hash of name/value pairs to send to the server.\n\t\t * @property values\n\t\t * @type {Object}\n\t\t * @default null\n\t\t */\n\t\tthis.values = null;\n\n\t\t/**\n\t\t * An object hash of headers to attach to an XHR request. PreloadJS will automatically attach some default\n\t\t * headers when required, including \"Origin\", \"Content-Type\", and \"X-Requested-With\". You may override the\n\t\t * default headers by including them in your headers object.\n\t\t * @property headers\n\t\t * @type {Object}\n\t\t * @default null\n\t\t */\n\t\tthis.headers = null;\n\n\t\t/**\n\t\t * Enable credentials for XHR requests.\n\t\t * @property withCredentials\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.withCredentials = false;\n\n\t\t/**\n\t\t * Set the mime type of XHR-based requests. This is automatically set to \"text/plain; charset=utf-8\" for text\n\t\t * based files (json, xml, text, css, js).\n\t\t * @property mimeType\n\t\t * @type {String}\n\t\t * @default null\n\t\t */\n\t\tthis.mimeType = null;\n\n\t\t/**\n\t\t * Sets the crossOrigin attribute for CORS-enabled images loading cross-domain.\n\t\t * @property crossOrigin\n\t\t * @type {boolean}\n\t\t * @default Anonymous\n\t\t */\n\t\tthis.crossOrigin = null;\n\n\t\t/**\n\t\t * The duration in milliseconds to wait before a request times out. This only applies to tag-based and and XHR\n\t\t * (level one) loading, as XHR (level 2) provides its own timeout event.\n\t\t * @property loadTimeout\n\t\t * @type {Number}\n\t\t * @default 8000 (8 seconds)\n\t\t */\n\t\tthis.loadTimeout = s.LOAD_TIMEOUT_DEFAULT;\n\t};\n\n\tvar p = LoadItem.prototype = {};\n\tvar s = LoadItem;\n\n\t/**\n\t * Default duration in milliseconds to wait before a request times out. This only applies to tag-based and and XHR\n\t * (level one) loading, as XHR (level 2) provides its own timeout event.\n\t * @property LOAD_TIMEOUT_DEFAULT\n\t * @type {number}\n\t * @static\n\t */\n\ts.LOAD_TIMEOUT_DEFAULT = 8000;\n\n\t/**\n\t * Create a LoadItem.\n\t * <ul>\n\t *     <li>String-based items are converted to a LoadItem with a populated {{#crossLink \"src:property\"}}{{/crossLink}}.</li>\n\t *     <li>LoadItem instances are returned as-is</li>\n\t *     <li>Objects are returned with any needed properties added</li>\n\t * </ul>\n\t * @method create\n\t * @param {LoadItem|String|Object} value The load item value\n\t * @returns {LoadItem|Object}\n\t * @static\n\t */\n\ts.create = function (value) {\n\t\tif (typeof value == \"string\") {\n\t\t\tvar item = new LoadItem();\n\t\t\titem.src = value;\n\t\t\treturn item;\n\t\t} else if (value instanceof s) {\n\t\t\treturn value;\n\t\t} else if (value instanceof Object && value.src) {\n\t\t\tif (value.loadTimeout == null) {\n\t\t\t\tvalue.loadTimeout = s.LOAD_TIMEOUT_DEFAULT;\n\t\t\t}\n\t\t\treturn value;\n\t\t} else {\n\t\t\tthrow new Error(\"Type not recognized.\");\n\t\t}\n\t};\n\n\t/**\n\t * Provides a chainable shortcut method for setting a number of properties on the instance.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var loadItem = new createjs.LoadItem().set({src:\"image.png\", maintainOrder:true});\n\t *\n\t * @method set\n\t * @param {Object} props A generic object containing properties to copy to the LoadItem instance.\n\t * @return {LoadItem} Returns the instance the method is called on (useful for chaining calls.)\n\t*/\n\tp.set = function(props) {\n\t\tfor (var n in props) { this[n] = props[n]; }\n\t\treturn this;\n\t};\n\n\tcreatejs.LoadItem = s;\n\n}());\n\n//##############################################################################\n// RequestUtils.js\n//##############################################################################\n\n(function () {\n\n\t/**\n\t * Utilities that assist with parsing load items, and determining file types, etc.\n\t * @class RequestUtils\n\t */\n\tvar s = {};\n\n\t/**\n\t * The Regular Expression used to test file URLS for an absolute path.\n\t * @property ABSOLUTE_PATH\n\t * @type {RegExp}\n\t * @static\n\t */\n\ts.ABSOLUTE_PATT = /^(?:\\w+:)?\\/{2}/i;\n\n\t/**\n\t * The Regular Expression used to test file URLS for a relative path.\n\t * @property RELATIVE_PATH\n\t * @type {RegExp}\n\t * @static\n\t */\n\ts.RELATIVE_PATT = (/^[./]*?\\//i);\n\n\t/**\n\t * The Regular Expression used to test file URLS for an extension. Note that URIs must already have the query string\n\t * removed.\n\t * @property EXTENSION_PATT\n\t * @type {RegExp}\n\t * @static\n\t */\n\ts.EXTENSION_PATT = /\\/?[^/]+\\.(\\w{1,5})$/i;\n\n\t/**\n\t * Parse a file path to determine the information we need to work with it. Currently, PreloadJS needs to know:\n\t * <ul>\n\t *     <li>If the path is absolute. Absolute paths start with a protocol (such as `http://`, `file://`, or\n\t *     `//networkPath`)</li>\n\t *     <li>If the path is relative. Relative paths start with `../` or `/path` (or similar)</li>\n\t *     <li>The file extension. This is determined by the filename with an extension. Query strings are dropped, and\n\t *     the file path is expected to follow the format `name.ext`.</li>\n\t * </ul>\n\t * @method parseURI\n\t * @param {String} path\n\t * @returns {Object} An Object with an `absolute` and `relative` Boolean values, as well as an optional 'extension`\n\t * property, which is the lowercase extension.\n\t * @static\n\t */\n\ts.parseURI = function (path) {\n\t\tvar info = {absolute: false, relative: false};\n\t\tif (path == null) { return info; }\n\n\t\t// Drop the query string\n\t\tvar queryIndex = path.indexOf(\"?\");\n\t\tif (queryIndex > -1) {\n\t\t\tpath = path.substr(0, queryIndex);\n\t\t}\n\n\t\t// Absolute\n\t\tvar match;\n\t\tif (s.ABSOLUTE_PATT.test(path)) {\n\t\t\tinfo.absolute = true;\n\n\t\t\t// Relative\n\t\t} else if (s.RELATIVE_PATT.test(path)) {\n\t\t\tinfo.relative = true;\n\t\t}\n\n\t\t// Extension\n\t\tif (match = path.match(s.EXTENSION_PATT)) {\n\t\t\tinfo.extension = match[1].toLowerCase();\n\t\t}\n\t\treturn info;\n\t};\n\n\t/**\n\t * Formats an object into a query string for either a POST or GET request.\n\t * @method formatQueryString\n\t * @param {Object} data The data to convert to a query string.\n\t * @param {Array} [query] Existing name/value pairs to append on to this query.\n\t * @static\n\t */\n\ts.formatQueryString = function (data, query) {\n\t\tif (data == null) {\n\t\t\tthrow new Error('You must specify data.');\n\t\t}\n\t\tvar params = [];\n\t\tfor (var n in data) {\n\t\t\tparams.push(n + '=' + escape(data[n]));\n\t\t}\n\t\tif (query) {\n\t\t\tparams = params.concat(query);\n\t\t}\n\t\treturn params.join('&');\n\t};\n\n\t/**\n\t * A utility method that builds a file path using a source and a data object, and formats it into a new path.\n\t * @method buildPath\n\t * @param {String} src The source path to add values to.\n\t * @param {Object} [data] Object used to append values to this request as a query string. Existing parameters on the\n\t * path will be preserved.\n\t * @returns {string} A formatted string that contains the path and the supplied parameters.\n\t * @static\n\t */\n\ts.buildPath = function (src, data) {\n\t\tif (data == null) {\n\t\t\treturn src;\n\t\t}\n\n\t\tvar query = [];\n\t\tvar idx = src.indexOf('?');\n\n\t\tif (idx != -1) {\n\t\t\tvar q = src.slice(idx + 1);\n\t\t\tquery = query.concat(q.split('&'));\n\t\t}\n\n\t\tif (idx != -1) {\n\t\t\treturn src.slice(0, idx) + '?' + this._formatQueryString(data, query);\n\t\t} else {\n\t\t\treturn src + '?' + this._formatQueryString(data, query);\n\t\t}\n\t};\n\n\t/**\n\t * @method isCrossDomain\n\t * @param {LoadItem|Object} item A load item with a `src` property.\n\t * @return {Boolean} If the load item is loading from a different domain than the current location.\n\t * @static\n\t */\n\ts.isCrossDomain = function (item) {\n\t\tvar target = document.createElement(\"a\");\n\t\ttarget.href = item.src;\n\n\t\tvar host = document.createElement(\"a\");\n\t\thost.href = location.href;\n\n\t\tvar crossdomain = (target.hostname != \"\") &&\n\t\t\t\t\t\t  (target.port != host.port ||\n\t\t\t\t\t\t   target.protocol != host.protocol ||\n\t\t\t\t\t\t   target.hostname != host.hostname);\n\t\treturn crossdomain;\n\t};\n\n\t/**\n\t * @method isLocal\n\t * @param {LoadItem|Object} item A load item with a `src` property\n\t * @return {Boolean} If the load item is loading from the \"file:\" protocol. Assume that the host must be local as\n\t * well.\n\t * @static\n\t */\n\ts.isLocal = function (item) {\n\t\tvar target = document.createElement(\"a\");\n\t\ttarget.href = item.src;\n\t\treturn target.hostname == \"\" && target.protocol == \"file:\";\n\t};\n\n\t/**\n\t * Determine if a specific type should be loaded as a binary file. Currently, only images and items marked\n\t * specifically as \"binary\" are loaded as binary. Note that audio is <b>not</b> a binary type, as we can not play\n\t * back using an audio tag if it is loaded as binary. Plugins can change the item type to binary to ensure they get\n\t * a binary result to work with. Binary files are loaded using XHR2. Types are defined as static constants on\n\t * {{#crossLink \"AbstractLoader\"}}{{/crossLink}}.\n\t * @method isBinary\n\t * @param {String} type The item type.\n\t * @return {Boolean} If the specified type is binary.\n\t * @static\n\t */\n\ts.isBinary = function (type) {\n\t\tswitch (type) {\n\t\t\tcase createjs.AbstractLoader.IMAGE:\n\t\t\tcase createjs.AbstractLoader.BINARY:\n\t\t\t\treturn true;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t};\n\n\t/**\n\t * Check if item is a valid HTMLImageElement\n\t * @method isImageTag\n\t * @param {Object} item\n\t * @returns {Boolean}\n\t * @static\n\t */\n\ts.isImageTag = function(item) {\n\t\treturn item instanceof HTMLImageElement;\n\t};\n\n\t/**\n\t * Check if item is a valid HTMLAudioElement\n\t * @method isAudioTag\n\t * @param {Object} item\n\t * @returns {Boolean}\n\t * @static\n\t */\n\ts.isAudioTag = function(item) {\n\t\tif (window.HTMLAudioElement) {\n\t\t\treturn item instanceof HTMLAudioElement;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t/**\n\t * Check if item is a valid HTMLVideoElement\n\t * @method isVideoTag\n\t * @param {Object} item\n\t * @returns {Boolean}\n\t * @static\n\t */\n\ts.isVideoTag = function(item) {\n\t\tif (window.HTMLVideoElement) {\n\t\t\treturn item instanceof HTMLVideoElement;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t};\n\n\t/**\n\t * Determine if a specific type is a text-based asset, and should be loaded as UTF-8.\n\t * @method isText\n\t * @param {String} type The item type.\n\t * @return {Boolean} If the specified type is text.\n\t * @static\n\t */\n\ts.isText = function (type) {\n\t\tswitch (type) {\n\t\t\tcase createjs.AbstractLoader.TEXT:\n\t\t\tcase createjs.AbstractLoader.JSON:\n\t\t\tcase createjs.AbstractLoader.MANIFEST:\n\t\t\tcase createjs.AbstractLoader.XML:\n\t\t\tcase createjs.AbstractLoader.CSS:\n\t\t\tcase createjs.AbstractLoader.SVG:\n\t\t\tcase createjs.AbstractLoader.JAVASCRIPT:\n\t\t\tcase createjs.AbstractLoader.SPRITESHEET:\n\t\t\t\treturn true;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t};\n\n\t/**\n\t * Determine the type of the object using common extensions. Note that the type can be passed in with the load item\n\t * if it is an unusual extension.\n\t * @method getTypeByExtension\n\t * @param {String} extension The file extension to use to determine the load type.\n\t * @return {String} The determined load type (for example, <code>AbstractLoader.IMAGE</code>). Will return `null` if\n\t * the type can not be determined by the extension.\n\t * @static\n\t */\n\ts.getTypeByExtension = function (extension) {\n\t\tif (extension == null) {\n\t\t\treturn createjs.AbstractLoader.TEXT;\n\t\t}\n\n\t\tswitch (extension.toLowerCase()) {\n\t\t\tcase \"jpeg\":\n\t\t\tcase \"jpg\":\n\t\t\tcase \"gif\":\n\t\t\tcase \"png\":\n\t\t\tcase \"webp\":\n\t\t\tcase \"bmp\":\n\t\t\t\treturn createjs.AbstractLoader.IMAGE;\n\t\t\tcase \"ogg\":\n\t\t\tcase \"mp3\":\n\t\t\tcase \"webm\":\n\t\t\t\treturn createjs.AbstractLoader.SOUND;\n\t\t\tcase \"mp4\":\n\t\t\tcase \"webm\":\n\t\t\tcase \"ts\":\n\t\t\t\treturn createjs.AbstractLoader.VIDEO;\n\t\t\tcase \"json\":\n\t\t\t\treturn createjs.AbstractLoader.JSON;\n\t\t\tcase \"xml\":\n\t\t\t\treturn createjs.AbstractLoader.XML;\n\t\t\tcase \"css\":\n\t\t\t\treturn createjs.AbstractLoader.CSS;\n\t\t\tcase \"js\":\n\t\t\t\treturn createjs.AbstractLoader.JAVASCRIPT;\n\t\t\tcase 'svg':\n\t\t\t\treturn createjs.AbstractLoader.SVG;\n\t\t\tdefault:\n\t\t\t\treturn createjs.AbstractLoader.TEXT;\n\t\t}\n\t};\n\n\tcreatejs.RequestUtils = s;\n\n}());\n\n//##############################################################################\n// AbstractLoader.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n// constructor\n\t/**\n\t * The base loader, which defines all the generic methods, properties, and events. All loaders extend this class,\n\t * including the {{#crossLink \"LoadQueue\"}}{{/crossLink}}.\n\t * @class AbstractLoader\n\t * @param {LoadItem|object|string} loadItem The item to be loaded.\n\t * @param {Boolean} [preferXHR] Determines if the LoadItem should <em>try</em> and load using XHR, or take a\n\t * tag-based approach, which can be better in cross-domain situations. Not all loaders can load using one or the\n\t * other, so this is a suggested directive.\n\t * @param {String} [type] The type of loader. Loader types are defined as constants on the AbstractLoader class,\n\t * such as {{#crossLink \"IMAGE:property\"}}{{/crossLink}}, {{#crossLink \"CSS:property\"}}{{/crossLink}}, etc.\n\t * @extends EventDispatcher\n\t */\n\tfunction AbstractLoader(loadItem, preferXHR, type) {\n\t\tthis.EventDispatcher_constructor();\n\n\t\t// public properties\n\t\t/**\n\t\t * If the loader has completed loading. This provides a quick check, but also ensures that the different approaches\n\t\t * used for loading do not pile up resulting in more than one `complete` {{#crossLink \"Event\"}}{{/crossLink}}.\n\t\t * @property loaded\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.loaded = false;\n\n\t\t/**\n\t\t * Determine if the loader was canceled. Canceled loads will not fire complete events. Note that this property\n\t\t * is readonly, so {{#crossLink \"LoadQueue\"}}{{/crossLink}} queues should be closed using {{#crossLink \"LoadQueue/close\"}}{{/crossLink}}\n\t\t * instead.\n\t\t * @property canceled\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t * @readonly\n\t\t */\n\t\tthis.canceled = false;\n\n\t\t/**\n\t\t * The current load progress (percentage) for this item. This will be a number between 0 and 1.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *     var queue = new createjs.LoadQueue();\n\t\t *     queue.loadFile(\"largeImage.png\");\n\t\t *     queue.on(\"progress\", function() {\n\t\t *         console.log(\"Progress:\", queue.progress, event.progress);\n\t\t *     });\n\t\t *\n\t\t * @property progress\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t */\n\t\tthis.progress = 0;\n\n\t\t/**\n\t\t * The type of item this loader will load. See {{#crossLink \"AbstractLoader\"}}{{/crossLink}} for a full list of\n\t\t * supported types.\n\t\t * @property type\n\t\t * @type {String}\n\t\t */\n\t\tthis.type = type;\n\n\t\t/**\n\t\t * A formatter function that converts the loaded raw result into the final result. For example, the JSONLoader\n\t\t * converts a string of text into a JavaScript object. Not all loaders have a resultFormatter, and this property\n\t\t * can be overridden to provide custom formatting.\n\t\t *\n\t\t * Optionally, a resultFormatter can return a callback function in cases where the formatting needs to be\n\t\t * asynchronous, such as creating a new image.\n\t\t * @property resultFormatter\n\t\t * @type {Function}\n\t\t * @default null\n\t\t */\n\t\tthis.resultFormatter = null;\n\n\t\t// protected properties\n\t\t/**\n\t\t * The {{#crossLink \"LoadItem\"}}{{/crossLink}} this loader represents. Note that this is null in a {{#crossLink \"LoadQueue\"}}{{/crossLink}},\n\t\t * but will be available on loaders such as {{#crossLink \"XMLLoader\"}}{{/crossLink}} and {{#crossLink \"ImageLoader\"}}{{/crossLink}}.\n\t\t * @property _item\n\t\t * @type {LoadItem|Object}\n\t\t * @private\n\t\t */\n\t\tif (loadItem) {\n\t\t\tthis._item = createjs.LoadItem.create(loadItem);\n\t\t} else {\n\t\t\tthis._item = null;\n\t\t}\n\n\t\t/**\n\t\t * Whether the loader will try and load content using XHR (true) or HTML tags (false).\n\t\t * @property _preferXHR\n\t\t * @type {Boolean}\n\t\t * @private\n\t\t */\n\t\tthis._preferXHR = preferXHR;\n\n\t\t/**\n\t\t * The loaded result after it is formatted by an optional {{#crossLink \"resultFormatter\"}}{{/crossLink}}. For\n\t\t * items that are not formatted, this will be the same as the {{#crossLink \"_rawResult:property\"}}{{/crossLink}}.\n\t\t * The result is accessed using the {{#crossLink \"getResult\"}}{{/crossLink}} method.\n\t\t * @property _result\n\t\t * @type {Object|String}\n\t\t * @private\n\t\t */\n\t\tthis._result = null;\n\n\t\t/**\n\t\t * The loaded result before it is formatted. The rawResult is accessed using the {{#crossLink \"getResult\"}}{{/crossLink}}\n\t\t * method, and passing `true`.\n\t\t * @property _rawResult\n\t\t * @type {Object|String}\n\t\t * @private\n\t\t */\n\t\tthis._rawResult = null;\n\n\t\t/**\n\t\t * A list of items that loaders load behind the scenes. This does not include the main item the loader is\n\t\t * responsible for loading. Examples of loaders that have sub-items include the {{#crossLink \"SpriteSheetLoader\"}}{{/crossLink}} and\n\t\t * {{#crossLink \"ManifestLoader\"}}{{/crossLink}}.\n\t\t * @property _loadItems\n\t\t * @type {null}\n\t\t * @protected\n\t\t */\n\t\tthis._loadedItems = null;\n\n\t\t/**\n\t\t * The attribute the items loaded using tags use for the source.\n\t\t * @type {string}\n\t\t * @default null\n\t\t * @private\n\t\t */\n\t\tthis._tagSrcAttribute = null;\n\n\t\t/**\n\t\t * An HTML tag (or similar) that a loader may use to load HTML content, such as images, scripts, etc.\n\t\t * @property _tag\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._tag = null;\n\t};\n\n\tvar p = createjs.extend(AbstractLoader, createjs.EventDispatcher);\n\tvar s = AbstractLoader;\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\n\n\t/**\n\t * Defines a POST request, use for a method value when loading data.\n\t * @property POST\n\t * @type {string}\n\t * @default post\n\t * @static\n\t */\n\ts.POST = \"POST\";\n\n\t/**\n\t * Defines a GET request, use for a method value when loading data.\n\t * @property GET\n\t * @type {string}\n\t * @default get\n\t * @static\n\t */\n\ts.GET = \"GET\";\n\n\t/**\n\t * The preload type for generic binary types. Note that images are loaded as binary files when using XHR.\n\t * @property BINARY\n\t * @type {String}\n\t * @default binary\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.BINARY = \"binary\";\n\n\t/**\n\t * The preload type for css files. CSS files are loaded using a &lt;link&gt; when loaded with XHR, or a\n\t * &lt;style&gt; tag when loaded with tags.\n\t * @property CSS\n\t * @type {String}\n\t * @default css\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.CSS = \"css\";\n\n\t/**\n\t * The preload type for image files, usually png, gif, or jpg/jpeg. Images are loaded into an &lt;image&gt; tag.\n\t * @property IMAGE\n\t * @type {String}\n\t * @default image\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.IMAGE = \"image\";\n\n\t/**\n\t * The preload type for javascript files, usually with the \"js\" file extension. JavaScript files are loaded into a\n\t * &lt;script&gt; tag.\n\t *\n\t * Since version 0.4.1+, due to how tag-loaded scripts work, all JavaScript files are automatically injected into\n\t * the body of the document to maintain parity between XHR and tag-loaded scripts. In version 0.4.0 and earlier,\n\t * only tag-loaded scripts are injected.\n\t * @property JAVASCRIPT\n\t * @type {String}\n\t * @default javascript\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.JAVASCRIPT = \"javascript\";\n\n\t/**\n\t * The preload type for json files, usually with the \"json\" file extension. JSON data is loaded and parsed into a\n\t * JavaScript object. Note that if a `callback` is present on the load item, the file will be loaded with JSONP,\n\t * no matter what the {{#crossLink \"LoadQueue/preferXHR:property\"}}{{/crossLink}} property is set to, and the JSON\n\t * must contain a matching wrapper function.\n\t * @property JSON\n\t * @type {String}\n\t * @default json\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.JSON = \"json\";\n\n\t/**\n\t * The preload type for jsonp files, usually with the \"json\" file extension. JSON data is loaded and parsed into a\n\t * JavaScript object. You are required to pass a callback parameter that matches the function wrapper in the JSON.\n\t * Note that JSONP will always be used if there is a callback present, no matter what the {{#crossLink \"LoadQueue/preferXHR:property\"}}{{/crossLink}}\n\t * property is set to.\n\t * @property JSONP\n\t * @type {String}\n\t * @default jsonp\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.JSONP = \"jsonp\";\n\n\t/**\n\t * The preload type for json-based manifest files, usually with the \"json\" file extension. The JSON data is loaded\n\t * and parsed into a JavaScript object. PreloadJS will then look for a \"manifest\" property in the JSON, which is an\n\t * Array of files to load, following the same format as the {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}\n\t * method. If a \"callback\" is specified on the manifest object, then it will be loaded using JSONP instead,\n\t * regardless of what the {{#crossLink \"LoadQueue/preferXHR:property\"}}{{/crossLink}} property is set to.\n\t * @property MANIFEST\n\t * @type {String}\n\t * @default manifest\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.MANIFEST = \"manifest\";\n\n\t/**\n\t * The preload type for sound files, usually mp3, ogg, or wav. When loading via tags, audio is loaded into an\n\t * &lt;audio&gt; tag.\n\t * @property SOUND\n\t * @type {String}\n\t * @default sound\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.SOUND = \"sound\";\n\n\t/**\n\t * The preload type for video files, usually mp4, ts, or ogg. When loading via tags, video is loaded into an\n\t * &lt;video&gt; tag.\n\t * @property VIDEO\n\t * @type {String}\n\t * @default video\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.VIDEO = \"video\";\n\n\t/**\n\t * The preload type for SpriteSheet files. SpriteSheet files are JSON files that contain string image paths.\n\t * @property SPRITESHEET\n\t * @type {String}\n\t * @default spritesheet\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.SPRITESHEET = \"spritesheet\";\n\n\t/**\n\t * The preload type for SVG files.\n\t * @property SVG\n\t * @type {String}\n\t * @default svg\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.SVG = \"svg\";\n\n\t/**\n\t * The preload type for text files, which is also the default file type if the type can not be determined. Text is\n\t * loaded as raw text.\n\t * @property TEXT\n\t * @type {String}\n\t * @default text\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.TEXT = \"text\";\n\n\t/**\n\t * The preload type for xml files. XML is loaded into an XML document.\n\t * @property XML\n\t * @type {String}\n\t * @default xml\n\t * @static\n\t * @since 0.6.0\n\t */\n\ts.XML = \"xml\";\n\n// Events\n\t/**\n\t * The {{#crossLink \"ProgressEvent\"}}{{/crossLink}} that is fired when the overall progress changes. Prior to\n\t * version 0.6.0, this was just a regular {{#crossLink \"Event\"}}{{/crossLink}}.\n\t * @event progress\n\t * @since 0.3.0\n\t */\n\n\t/**\n\t * The {{#crossLink \"Event\"}}{{/crossLink}} that is fired when a load starts.\n\t * @event loadstart\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t * @since 0.3.1\n\t */\n\n\t/**\n\t * The {{#crossLink \"Event\"}}{{/crossLink}} that is fired when the entire queue has been loaded.\n\t * @event complete\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t * @since 0.3.0\n\t */\n\n\t/**\n\t * The {{#crossLink \"ErrorEvent\"}}{{/crossLink}} that is fired when the loader encounters an error. If the error was\n\t * encountered by a file, the event will contain the item that caused the error. Prior to version 0.6.0, this was\n\t * just a regular {{#crossLink \"Event\"}}{{/crossLink}}.\n\t * @event error\n\t * @since 0.3.0\n\t */\n\n\t/**\n\t * The {{#crossLink \"Event\"}}{{/crossLink}} that is fired when the loader encounters an internal file load error.\n\t * This enables loaders to maintain internal queues, and surface file load errors.\n\t * @event fileerror\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The even type (\"fileerror\")\n\t * @param {LoadItem|object} The item that encountered the error\n\t * @since 0.6.0\n\t */\n\n\t/**\n\t * The {{#crossLink \"Event\"}}{{/crossLink}} that is fired when a loader internally loads a file. This enables\n\t * loaders such as {{#crossLink \"ManifestLoader\"}}{{/crossLink}} to maintain internal {{#crossLink \"LoadQueue\"}}{{/crossLink}}s\n\t * and notify when they have loaded a file. The {{#crossLink \"LoadQueue\"}}{{/crossLink}} class dispatches a\n\t * slightly different {{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}} event.\n\t * @event fileload\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type (\"fileload\")\n\t * @param {Object} item The file item which was specified in the {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}}\n\t * or {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}} call. If only a string path or tag was specified, the\n\t * object will contain that value as a `src` property.\n\t * @param {Object} result The HTML tag or parsed result of the loaded item.\n\t * @param {Object} rawResult The unprocessed result, usually the raw text or binary data before it is converted\n\t * to a usable object.\n\t * @since 0.6.0\n\t */\n\n\t/**\n\t * The {{#crossLink \"Event\"}}{{/crossLink}} that is fired after the internal request is created, but before a load.\n\t * This allows updates to the loader for specific loading needs, such as binary or XHR image loading.\n\t * @event initialize\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type (\"initialize\")\n\t * @param {AbstractLoader} loader The loader that has been initialized.\n\t */\n\n\n\t/**\n\t * Get a reference to the manifest item that is loaded by this loader. In some cases this will be the value that was\n\t * passed into {{#crossLink \"LoadQueue\"}}{{/crossLink}} using {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}} or\n\t * {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}. However if only a String path was passed in, then it will\n\t * be a {{#crossLink \"LoadItem\"}}{{/crossLink}}.\n\t * @method getItem\n\t * @return {Object} The manifest item that this loader is responsible for loading.\n\t * @since 0.6.0\n\t */\n\tp.getItem = function () {\n\t\treturn this._item;\n\t};\n\n\t/**\n\t * Get a reference to the content that was loaded by the loader (only available after the {{#crossLink \"complete:event\"}}{{/crossLink}}\n\t * event is dispatched.\n\t * @method getResult\n\t * @param {Boolean} [raw=false] Determines if the returned result will be the formatted content, or the raw loaded\n\t * data (if it exists).\n\t * @return {Object}\n\t * @since 0.6.0\n\t */\n\tp.getResult = function (raw) {\n\t\treturn raw ? this._rawResult : this._result;\n\t};\n\n\t/**\n\t * Return the `tag` this object creates or uses for loading.\n\t * @method getTag\n\t * @return {Object} The tag instance\n\t * @since 0.6.0\n\t */\n\tp.getTag = function () {\n\t\treturn this._tag;\n\t};\n\n\t/**\n\t * Set the `tag` this item uses for loading.\n\t * @method setTag\n\t * @param {Object} tag The tag instance\n\t * @since 0.6.0\n\t */\n\tp.setTag = function(tag) {\n\t  this._tag = tag;\n\t};\n\n\t/**\n\t * Begin loading the item. This method is required when using a loader by itself.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var queue = new createjs.LoadQueue();\n\t *      queue.on(\"complete\", handleComplete);\n\t *      queue.loadManifest(fileArray, false); // Note the 2nd argument that tells the queue not to start loading yet\n\t *      queue.load();\n\t *\n\t * @method load\n\t */\n\tp.load = function () {\n\t\tthis._createRequest();\n\n\t\tthis._request.on(\"complete\", this, this);\n\t\tthis._request.on(\"progress\", this, this);\n\t\tthis._request.on(\"loadStart\", this, this);\n\t\tthis._request.on(\"abort\", this, this);\n\t\tthis._request.on(\"timeout\", this, this);\n\t\tthis._request.on(\"error\", this, this);\n\n\t\tvar evt = new createjs.Event(\"initialize\");\n\t\tevt.loader = this._request;\n\t\tthis.dispatchEvent(evt);\n\n\t\tthis._request.load();\n\t};\n\n\t/**\n\t * Close the the item. This will stop any open requests (although downloads using HTML tags may still continue in\n\t * the background), but events will not longer be dispatched.\n\t * @method cancel\n\t */\n\tp.cancel = function () {\n\t\tthis.canceled = true;\n\t\tthis.destroy();\n\t};\n\n\t/**\n\t * Clean up the loader.\n\t * @method destroy\n\t */\n\tp.destroy = function() {\n\t\tif (this._request) {\n\t\t\tthis._request.removeAllEventListeners();\n\t\t\tthis._request.destroy();\n\t\t}\n\n\t\tthis._request = null;\n\n\t\tthis._item = null;\n\t\tthis._rawResult = null;\n\t\tthis._result = null;\n\n\t\tthis._loadItems = null;\n\n\t\tthis.removeAllEventListeners();\n\t};\n\n\t/**\n\t * Get any items loaded internally by the loader. The enables loaders such as {{#crossLink \"ManifestLoader\"}}{{/crossLink}}\n\t * to expose items it loads internally.\n\t * @method getLoadedItems\n\t * @return {Array} A list of the items loaded by the loader.\n\t * @since 0.6.0\n\t */\n\tp.getLoadedItems = function () {\n\t\treturn this._loadedItems;\n\t};\n\n\n\t// Private methods\n\t/**\n\t * Create an internal request used for loading. By default, an {{#crossLink \"XHRRequest\"}}{{/crossLink}} or\n\t * {{#crossLink \"TagRequest\"}}{{/crossLink}} is created, depending on the value of {{#crossLink \"preferXHR:property\"}}{{/crossLink}}.\n\t * Other loaders may override this to use different request types, such as {{#crossLink \"ManifestLoader\"}}{{/crossLink}},\n\t * which uses {{#crossLink \"JSONLoader\"}}{{/crossLink}} or {{#crossLink \"JSONPLoader\"}}{{/crossLink}} under the hood.\n\t * @method _createRequest\n\t * @protected\n\t */\n\tp._createRequest = function() {\n\t\tif (!this._preferXHR) {\n\t\t\tthis._request = new createjs.TagRequest(this._item, this._tag || this._createTag(), this._tagSrcAttribute);\n\t\t} else {\n\t\t\tthis._request = new createjs.XHRRequest(this._item);\n\t\t}\n\t};\n\n\t/**\n\t * Create the HTML tag used for loading. This method does nothing by default, and needs to be implemented\n\t * by loaders that require tag loading.\n\t * @method _createTag\n\t * @param {String} src The tag source\n\t * @return {HTMLElement} The tag that was created\n\t * @protected\n\t */\n\tp._createTag = function(src) { return null; };\n\n\t/**\n\t * Dispatch a loadstart {{#crossLink \"Event\"}}{{/crossLink}}. Please see the {{#crossLink \"AbstractLoader/loadstart:event\"}}{{/crossLink}}\n\t * event for details on the event payload.\n\t * @method _sendLoadStart\n\t * @protected\n\t */\n\tp._sendLoadStart = function () {\n\t\tif (this._isCanceled()) { return; }\n\t\tthis.dispatchEvent(\"loadstart\");\n\t};\n\n\t/**\n\t * Dispatch a {{#crossLink \"ProgressEvent\"}}{{/crossLink}}.\n\t * @method _sendProgress\n\t * @param {Number | Object} value The progress of the loaded item, or an object containing <code>loaded</code>\n\t * and <code>total</code> properties.\n\t * @protected\n\t */\n\tp._sendProgress = function (value) {\n\t\tif (this._isCanceled()) { return; }\n\t\tvar event = null;\n\t\tif (typeof(value) == \"number\") {\n\t\t\tthis.progress = value;\n\t\t\tevent = new createjs.ProgressEvent(this.progress);\n\t\t} else {\n\t\t\tevent = value;\n\t\t\tthis.progress = value.loaded / value.total;\n\t\t\tevent.progress = this.progress;\n\t\t\tif (isNaN(this.progress) || this.progress == Infinity) { this.progress = 0; }\n\t\t}\n\t\tthis.hasEventListener(\"progress\") && this.dispatchEvent(event);\n\t};\n\n\t/**\n\t * Dispatch a complete {{#crossLink \"Event\"}}{{/crossLink}}. Please see the {{#crossLink \"AbstractLoader/complete:event\"}}{{/crossLink}} event\n\t * @method _sendComplete\n\t * @protected\n\t */\n\tp._sendComplete = function () {\n\t\tif (this._isCanceled()) { return; }\n\n\t\tthis.loaded = true;\n\n\t\tvar event = new createjs.Event(\"complete\");\n\t\tevent.rawResult = this._rawResult;\n\n\t\tif (this._result != null) {\n\t\t\tevent.result = this._result;\n\t\t}\n\n\t\tthis.dispatchEvent(event);\n\t};\n\n\t/**\n\t * Dispatch an error {{#crossLink \"Event\"}}{{/crossLink}}. Please see the {{#crossLink \"AbstractLoader/error:event\"}}{{/crossLink}}\n\t * event for details on the event payload.\n\t * @method _sendError\n\t * @param {ErrorEvent} event The event object containing specific error properties.\n\t * @protected\n\t */\n\tp._sendError = function (event) {\n\t\tif (this._isCanceled() || !this.hasEventListener(\"error\")) { return; }\n\t\tif (event == null) {\n\t\t\tevent = new createjs.ErrorEvent(\"PRELOAD_ERROR_EMPTY\"); // TODO: Populate error\n\t\t}\n\t\tthis.dispatchEvent(event);\n\t};\n\n\t/**\n\t * Determine if the load has been canceled. This is important to ensure that method calls or asynchronous events\n\t * do not cause issues after the queue has been cleaned up.\n\t * @method _isCanceled\n\t * @return {Boolean} If the loader has been canceled.\n\t * @protected\n\t */\n\tp._isCanceled = function () {\n\t\tif (window.createjs == null || this.canceled) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t};\n\n\t/**\n\t * A custom result formatter function, which is called just before a request dispatches its complete event. Most\n\t * loader types already have an internal formatter, but this can be user-overridden for custom formatting. The\n\t * formatted result will be available on Loaders using {{#crossLink \"getResult\"}}{{/crossLink}}, and passing `true`.\n\t * @property resultFormatter\n\t * @type Function\n\t * @return {Object} The formatted result\n\t * @since 0.6.0\n\t */\n\tp.resultFormatter = null;\n\n\t/**\n\t * Handle events from internal requests. By default, loaders will handle, and redispatch the necessary events, but\n\t * this method can be overridden for custom behaviours.\n\t * @method handleEvent\n\t * @param {Event} event The event that the internal request dispatches.\n\t * @protected\n\t * @since 0.6.0\n\t */\n\tp.handleEvent = function (event) {\n\t\tswitch (event.type) {\n\t\t\tcase \"complete\":\n\t\t\t\tthis._rawResult = event.target._response;\n\t\t\t\tvar result = this.resultFormatter && this.resultFormatter(this);\n\t\t\t\tvar _this = this;\n\t\t\t\tif (result instanceof Function) {\n\t\t\t\t\tresult(function(result) {\n\t\t\t\t\t\t_this._result = result;\n\t\t\t\t\t\t_this._sendComplete();\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis._result =  result || this._rawResult;\n\t\t\t\t\tthis._sendComplete();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"progress\":\n\t\t\t\tthis._sendProgress(event);\n\t\t\t\tbreak;\n\t\t\tcase \"error\":\n\t\t\t\tthis._sendError(event);\n\t\t\t\tbreak;\n\t\t\tcase \"loadstart\":\n\t\t\t\tthis._sendLoadStart();\n\t\t\t\tbreak;\n\t\t\tcase \"abort\":\n\t\t\tcase \"timeout\":\n\t\t\t\tif (!this._isCanceled()) {\n\t\t\t\t\tthis.dispatchEvent(event.type);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\t/**\n\t * @method buildPath\n\t * @protected\n\t * @deprecated Use the {{#crossLink \"RequestUtils\"}}{{/crossLink}} method {{#crossLink \"RequestUtils/buildPath\"}}{{/crossLink}}\n\t * instead.\n\t */\n\tp.buildPath = function (src, data) {\n\t\treturn createjs.RequestUtils.buildPath(src, data);\n\t};\n\n\t/**\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t */\n\tp.toString = function () {\n\t\treturn \"[PreloadJS AbstractLoader]\";\n\t};\n\n\tcreatejs.AbstractLoader = createjs.promote(AbstractLoader, \"EventDispatcher\");\n\n}());\n\n//##############################################################################\n// AbstractMediaLoader.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * The AbstractMediaLoader is a base class that handles some of the shared methods and properties of loaders that\n\t * handle HTML media elements, such as Video and Audio.\n\t * @class AbstractMediaLoader\n\t * @param {LoadItem|Object} loadItem\n\t * @param {Boolean} preferXHR\n\t * @param {String} type The type of media to load. Usually \"video\" or \"audio\".\n\t * @extends AbstractLoader\n\t * @constructor\n\t */\n\tfunction AbstractMediaLoader(loadItem, preferXHR, type) {\n\t\tthis.AbstractLoader_constructor(loadItem, preferXHR, type);\n\n\t\t// public properties\n\t\tthis.resultFormatter = this._formatResult;\n\n\t\t// protected properties\n\t\tthis._tagSrcAttribute = \"src\";\n\t};\n\n\tvar p = createjs.extend(AbstractMediaLoader, createjs.AbstractLoader);\n\n\t// static properties\n\t// public methods\n\tp.load = function () {\n\t\t// TagRequest will handle most of this, but Sound / Video need a few custom properties, so just handle them here.\n\t\tif (!this._tag) {\n\t\t\tthis._tag = this._createTag(this._item.src);\n\t\t}\n\n\t\tthis._tag.preload = \"auto\";\n\t\tthis._tag.load();\n\n\t\tthis.AbstractLoader_load();\n\t};\n\n\t// protected methods\n\t/**\n\t * Creates a new tag for loading if it doesn't exist yet.\n\t * @method _createTag\n\t * @private\n\t */\n\tp._createTag = function () {};\n\n\n\tp._createRequest = function() {\n\t\tif (!this._preferXHR) {\n\t\t\tthis._request = new createjs.MediaTagRequest(this._item, this._tag || this._createTag(), this._tagSrcAttribute);\n\t\t} else {\n\t\t\tthis._request = new createjs.XHRRequest(this._item);\n\t\t}\n\t};\n\n\t/**\n\t * The result formatter for media files.\n\t * @method _formatResult\n\t * @param {AbstractLoader} loader\n\t * @returns {HTMLVideoElement|HTMLAudioElement}\n\t * @private\n\t */\n\tp._formatResult = function (loader) {\n\t\tthis._tag.removeEventListener && this._tag.removeEventListener(\"canplaythrough\", this._loadedHandler);\n\t\tthis._tag.onstalled = null;\n\t\tif (this._preferXHR) {\n\t\t\tloader.getTag().src = loader.getResult(true);\n\t\t}\n\t\treturn loader.getTag();\n\t};\n\n\tcreatejs.AbstractMediaLoader = createjs.promote(AbstractMediaLoader, \"AbstractLoader\");\n\n}());\n\n//##############################################################################\n// AbstractRequest.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t/**\n\t * A base class for actual data requests, such as {{#crossLink \"XHRRequest\"}}{{/crossLink}}, {{#crossLink \"TagRequest\"}}{{/crossLink}},\n\t * and {{#crossLink \"MediaRequest\"}}{{/crossLink}}. PreloadJS loaders will typically use a data loader under the\n\t * hood to get data.\n\t * @class AbstractRequest\n\t * @param {LoadItem} item\n\t * @constructor\n\t */\n\tvar AbstractRequest = function (item) {\n\t\tthis._item = item;\n\t};\n\n\tvar p = createjs.extend(AbstractRequest, createjs.EventDispatcher);\n\n\t// public methods\n\t/**\n\t * Begin a load.\n\t * @method load\n\t */\n\tp.load =  function() {};\n\n\t/**\n\t * Clean up a request.\n\t * @method destroy\n\t */\n\tp.destroy = function() {};\n\n\t/**\n\t * Cancel an in-progress request.\n\t * @method cancel\n\t */\n\tp.cancel = function() {};\n\n\tcreatejs.AbstractRequest = createjs.promote(AbstractRequest, \"EventDispatcher\");\n\n}());\n\n//##############################################################################\n// TagRequest.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * An {{#crossLink \"AbstractRequest\"}}{{/crossLink}} that loads HTML tags, such as images and scripts.\n\t * @class TagRequest\n\t * @param {LoadItem} loadItem\n\t * @param {HTMLElement} tag\n\t * @param {String} srcAttribute The tag attribute that specifies the source, such as \"src\", \"href\", etc.\n\t */\n\tfunction TagRequest(loadItem, tag, srcAttribute) {\n\t\tthis.AbstractRequest_constructor(loadItem);\n\n\t\t// protected properties\n\t\t/**\n\t\t * The HTML tag instance that is used to load.\n\t\t * @property _tag\n\t\t * @type {HTMLElement}\n\t\t * @protected\n\t\t */\n\t\tthis._tag = tag;\n\n\t\t/**\n\t\t * The tag attribute that specifies the source, such as \"src\", \"href\", etc.\n\t\t * @property _tagSrcAttribute\n\t\t * @type {String}\n\t\t * @protected\n\t\t */\n\t\tthis._tagSrcAttribute = srcAttribute;\n\n\t\t/**\n\t\t * A method closure used for handling the tag load event.\n\t\t * @property _loadedHandler\n\t\t * @type {Function}\n\t\t * @private\n\t\t */\n\t\tthis._loadedHandler = createjs.proxy(this._handleTagComplete, this);\n\n\t\t/**\n\t\t * Determines if the element was added to the DOM automatically by PreloadJS, so it can be cleaned up after.\n\t\t * @property _addedToDOM\n\t\t * @type {Boolean}\n\t\t * @private\n\t\t */\n\t\tthis._addedToDOM = false;\n\n\t\t/**\n\t\t * Determines what the tags initial style.visibility was, so we can set it correctly after a load.\n\t\t *\n\t\t * @type {null}\n\t\t * @private\n\t\t */\n\t\tthis._startTagVisibility = null;\n\t};\n\n\tvar p = createjs.extend(TagRequest, createjs.AbstractRequest);\n\n\t// public methods\n\tp.load = function () {\n\t\tthis._tag.onload = createjs.proxy(this._handleTagComplete, this);\n\t\tthis._tag.onreadystatechange = createjs.proxy(this._handleReadyStateChange, this);\n\t\tthis._tag.onerror = createjs.proxy(this._handleError, this);\n\n\t\tvar evt = new createjs.Event(\"initialize\");\n\t\tevt.loader = this._tag;\n\n\t\tthis.dispatchEvent(evt);\n\n\t\tthis._hideTag();\n\n\t\tthis._loadTimeout = setTimeout(createjs.proxy(this._handleTimeout, this), this._item.loadTimeout);\n\n\t\tthis._tag[this._tagSrcAttribute] = this._item.src;\n\n\t\t// wdg:: Append the tag AFTER setting the src, or SVG loading on iOS will fail.\n\t\tif (this._tag.parentNode == null) {\n\t\t\twindow.document.body.appendChild(this._tag);\n\t\t\tthis._addedToDOM = true;\n\t\t}\n\t};\n\n\tp.destroy = function() {\n\t\tthis._clean();\n\t\tthis._tag = null;\n\n\t\tthis.AbstractRequest_destroy();\n\t};\n\n\t// private methods\n\t/**\n\t * Handle the readyStateChange event from a tag. We need this in place of the `onload` callback (mainly SCRIPT\n\t * and LINK tags), but other cases may exist.\n\t * @method _handleReadyStateChange\n\t * @private\n\t */\n\tp._handleReadyStateChange = function () {\n\t\tclearTimeout(this._loadTimeout);\n\t\t// This is strictly for tags in browsers that do not support onload.\n\t\tvar tag = this._tag;\n\n\t\t// Complete is for old IE support.\n\t\tif (tag.readyState == \"loaded\" || tag.readyState == \"complete\") {\n\t\t\tthis._handleTagComplete();\n\t\t}\n\t};\n\n\t/**\n\t * Handle any error events from the tag.\n\t * @method _handleError\n\t * @protected\n\t */\n\tp._handleError = function() {\n\t\tthis._clean();\n\t\tthis.dispatchEvent(\"error\");\n\t};\n\n\t/**\n\t * Handle the tag's onload callback.\n\t * @method _handleTagComplete\n\t * @private\n\t */\n\tp._handleTagComplete = function () {\n\t\tthis._rawResult = this._tag;\n\t\tthis._result = this.resultFormatter && this.resultFormatter(this) || this._rawResult;\n\n\t\tthis._clean();\n\t\tthis._showTag();\n\n\t\tthis.dispatchEvent(\"complete\");\n\t};\n\n\t/**\n\t * The tag request has not loaded within the time specified in loadTimeout.\n\t * @method _handleError\n\t * @param {Object} event The XHR error event.\n\t * @private\n\t */\n\tp._handleTimeout = function () {\n\t\tthis._clean();\n\t\tthis.dispatchEvent(new createjs.Event(\"timeout\"));\n\t};\n\n\t/**\n\t * Remove event listeners, but don't destroy the request object\n\t * @method _clean\n\t * @private\n\t */\n\tp._clean = function() {\n\t\tthis._tag.onload = null;\n\t\tthis._tag.onreadystatechange = null;\n\t\tthis._tag.onerror = null;\n\t\tif (this._addedToDOM && this._tag.parentNode != null) {\n\t\t\tthis._tag.parentNode.removeChild(this._tag);\n\t\t}\n\t\tclearTimeout(this._loadTimeout);\n\t};\n\n\tp._hideTag = function() {\n\t\tthis._startTagVisibility = this._tag.style.visibility;\n\t\tthis._tag.style.visibility = \"hidden\";\n\t};\n\n\tp._showTag = function() {\n\t\tthis._tag.style.visibility = this._startTagVisibility;\n\t};\n\n\t/**\n\t * Handle a stalled audio event. The main place this happens is with HTMLAudio in Chrome when playing back audio\n\t * that is already in a load, but not complete.\n\t * @method _handleStalled\n\t * @private\n\t */\n\tp._handleStalled = function () {\n\t\t//Ignore, let the timeout take care of it. Sometimes its not really stopped.\n\t};\n\n\tcreatejs.TagRequest = createjs.promote(TagRequest, \"AbstractRequest\");\n\n}());\n\n//##############################################################################\n// MediaTagRequest.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * An {{#crossLink \"TagRequest\"}}{{/crossLink}} that loads HTML tags for video and audio.\n\t * @class MediaTagRequest\n\t * @param {LoadItem} loadItem\n\t * @param {HTMLAudioElement|HTMLVideoElement} tag\n\t * @param {String} srcAttribute The tag attribute that specifies the source, such as \"src\", \"href\", etc.\n\t * @constructor\n\t */\n\tfunction MediaTagRequest(loadItem, tag, srcAttribute) {\n\t\tthis.AbstractRequest_constructor(loadItem);\n\n\t\t// protected properties\n\t\tthis._tag = tag;\n\t\tthis._tagSrcAttribute = srcAttribute;\n\t\tthis._loadedHandler = createjs.proxy(this._handleTagComplete, this);\n\t};\n\n\tvar p = createjs.extend(MediaTagRequest, createjs.TagRequest);\n\tvar s = MediaTagRequest;\n\n\t// public methods\n\tp.load = function () {\n\t\tvar sc = createjs.proxy(this._handleStalled, this);\n\t\tthis._stalledCallback = sc;\n\n\t\tvar pc = createjs.proxy(this._handleProgress, this);\n\t\tthis._handleProgress = pc;\n\n\t\tthis._tag.addEventListener(\"stalled\", sc);\n\t\tthis._tag.addEventListener(\"progress\", pc);\n\n\t\t// This will tell us when audio is buffered enough to play through, but not when its loaded.\n\t\t// The tag doesn't keep loading in Chrome once enough has buffered, and we have decided that behaviour is sufficient.\n\t\tthis._tag.addEventListener && this._tag.addEventListener(\"canplaythrough\", this._loadedHandler, false); // canplaythrough callback doesn't work in Chrome, so we use an event.\n\n\t\tthis.TagRequest_load();\n\t};\n\n\t// private methods\n\tp._handleReadyStateChange = function () {\n\t\tclearTimeout(this._loadTimeout);\n\t\t// This is strictly for tags in browsers that do not support onload.\n\t\tvar tag = this._tag;\n\n\t\t// Complete is for old IE support.\n\t\tif (tag.readyState == \"loaded\" || tag.readyState == \"complete\") {\n\t\t\tthis._handleTagComplete();\n\t\t}\n\t};\n\n\tp._handleStalled = function () {\n\t\t//Ignore, let the timeout take care of it. Sometimes its not really stopped.\n\t};\n\n\t/**\n\t * An XHR request has reported progress.\n\t * @method _handleProgress\n\t * @param {Object} event The XHR progress event.\n\t * @private\n\t */\n\tp._handleProgress = function (event) {\n\t\tif (!event || event.loaded > 0 && event.total == 0) {\n\t\t\treturn; // Sometimes we get no \"total\", so just ignore the progress event.\n\t\t}\n\n\t\tvar newEvent = new createjs.ProgressEvent(event.loaded, event.total);\n\t\tthis.dispatchEvent(newEvent);\n\t};\n\n\t// protected methods\n\tp._clean = function () {\n\t\tthis._tag.removeEventListener && this._tag.removeEventListener(\"canplaythrough\", this._loadedHandler);\n\t\tthis._tag.removeEventListener(\"stalled\", this._stalledCallback);\n\t\tthis._tag.removeEventListener(\"progress\", this._progressCallback);\n\n\t\tthis.TagRequest__clean();\n\t};\n\n\tcreatejs.MediaTagRequest = createjs.promote(MediaTagRequest, \"TagRequest\");\n\n}());\n\n//##############################################################################\n// XHRRequest.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n// constructor\n\t/**\n\t * A preloader that loads items using XHR requests, usually XMLHttpRequest. However XDomainRequests will be used\n\t * for cross-domain requests if possible, and older versions of IE fall back on to ActiveX objects when necessary.\n\t * XHR requests load the content as text or binary data, provide progress and consistent completion events, and\n\t * can be canceled during load. Note that XHR is not supported in IE 6 or earlier, and is not recommended for\n\t * cross-domain loading.\n\t * @class XHRRequest\n\t * @constructor\n\t * @param {Object} item The object that defines the file to load. Please see the {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}}\n\t * for an overview of supported file properties.\n\t * @extends AbstractLoader\n\t */\n\tfunction XHRRequest (item) {\n\t\tthis.AbstractRequest_constructor(item);\n\n\t\t// protected properties\n\t\t/**\n\t\t * A reference to the XHR request used to load the content.\n\t\t * @property _request\n\t\t * @type {XMLHttpRequest | XDomainRequest | ActiveX.XMLHTTP}\n\t\t * @private\n\t\t */\n\t\tthis._request = null;\n\n\t\t/**\n\t\t * A manual load timeout that is used for browsers that do not support the onTimeout event on XHR (XHR level 1,\n\t\t * typically IE9).\n\t\t * @property _loadTimeout\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t\tthis._loadTimeout = null;\n\n\t\t/**\n\t\t * The browser's XHR (XMLHTTPRequest) version. Supported versions are 1 and 2. There is no official way to detect\n\t\t * the version, so we use capabilities to make a best guess.\n\t\t * @property _xhrLevel\n\t\t * @type {Number}\n\t\t * @default 1\n\t\t * @private\n\t\t */\n\t\tthis._xhrLevel = 1;\n\n\t\t/**\n\t\t * The response of a loaded file. This is set because it is expensive to look up constantly. This property will be\n\t\t * null until the file is loaded.\n\t\t * @property _response\n\t\t * @type {mixed}\n\t\t * @private\n\t\t */\n\t\tthis._response = null;\n\n\t\t/**\n\t\t * The response of the loaded file before it is modified. In most cases, content is converted from raw text to\n\t\t * an HTML tag or a formatted object which is set to the <code>result</code> property, but the developer may still\n\t\t * want to access the raw content as it was loaded.\n\t\t * @property _rawResponse\n\t\t * @type {String|Object}\n\t\t * @private\n\t\t */\n\t\tthis._rawResponse = null;\n\n\t\tthis._canceled = false;\n\n\t\t// Setup our event handlers now.\n\t\tthis._handleLoadStartProxy = createjs.proxy(this._handleLoadStart, this);\n\t\tthis._handleProgressProxy = createjs.proxy(this._handleProgress, this);\n\t\tthis._handleAbortProxy = createjs.proxy(this._handleAbort, this);\n\t\tthis._handleErrorProxy = createjs.proxy(this._handleError, this);\n\t\tthis._handleTimeoutProxy = createjs.proxy(this._handleTimeout, this);\n\t\tthis._handleLoadProxy = createjs.proxy(this._handleLoad, this);\n\t\tthis._handleReadyStateChangeProxy = createjs.proxy(this._handleReadyStateChange, this);\n\n\t\tif (!this._createXHR(item)) {\n\t\t\t//TODO: Throw error?\n\t\t}\n\t};\n\n\tvar p = createjs.extend(XHRRequest, createjs.AbstractRequest);\n\n// static properties\n\t/**\n\t * A list of XMLHTTP object IDs to try when building an ActiveX object for XHR requests in earlier versions of IE.\n\t * @property ACTIVEX_VERSIONS\n\t * @type {Array}\n\t * @since 0.4.2\n\t * @private\n\t */\n\tXHRRequest.ACTIVEX_VERSIONS = [\n\t\t\"Msxml2.XMLHTTP.6.0\",\n\t\t\"Msxml2.XMLHTTP.5.0\",\n\t\t\"Msxml2.XMLHTTP.4.0\",\n\t\t\"MSXML2.XMLHTTP.3.0\",\n\t\t\"MSXML2.XMLHTTP\",\n\t\t\"Microsoft.XMLHTTP\"\n\t];\n\n// Public methods\n\t/**\n\t * Look up the loaded result.\n\t * @method getResult\n\t * @param {Boolean} [raw=false] Return a raw result instead of a formatted result. This applies to content\n\t * loaded via XHR such as scripts, XML, CSS, and Images. If there is no raw result, the formatted result will be\n\t * returned instead.\n\t * @return {Object} A result object containing the content that was loaded, such as:\n\t * <ul>\n\t *      <li>An image tag (&lt;image /&gt;) for images</li>\n\t *      <li>A script tag for JavaScript (&lt;script /&gt;). Note that scripts loaded with tags may be added to the\n\t *      HTML head.</li>\n\t *      <li>A style tag for CSS (&lt;style /&gt;)</li>\n\t *      <li>Raw text for TEXT</li>\n\t *      <li>A formatted JavaScript object defined by JSON</li>\n\t *      <li>An XML document</li>\n\t *      <li>An binary arraybuffer loaded by XHR</li>\n\t * </ul>\n\t * Note that if a raw result is requested, but not found, the result will be returned instead.\n\t */\n\tp.getResult = function (raw) {\n\t\tif (raw && this._rawResponse) {\n\t\t\treturn this._rawResponse;\n\t\t}\n\t\treturn this._response;\n\t};\n\n\t// Overrides abstract method in AbstractRequest\n\tp.cancel = function () {\n\t\tthis.canceled = true;\n\t\tthis._clean();\n\t\tthis._request.abort();\n\t};\n\n\t// Overrides abstract method in AbstractLoader\n\tp.load = function () {\n\t\tif (this._request == null) {\n\t\t\tthis._handleError();\n\t\t\treturn;\n\t\t}\n\n\t\t//Events\n\t\tif (this._request.addEventListener != null) {\n\t\t\tthis._request.addEventListener(\"loadstart\", this._handleLoadStartProxy, false);\n\t\t\tthis._request.addEventListener(\"progress\", this._handleProgressProxy, false);\n\t\t\tthis._request.addEventListener(\"abort\", this._handleAbortProxy, false);\n\t\t\tthis._request.addEventListener(\"error\", this._handleErrorProxy, false);\n\t\t\tthis._request.addEventListener(\"timeout\", this._handleTimeoutProxy, false);\n\n\t\t\t// Note: We don't get onload in all browsers (earlier FF and IE). onReadyStateChange handles these.\n\t\t\tthis._request.addEventListener(\"load\", this._handleLoadProxy, false);\n\t\t\tthis._request.addEventListener(\"readystatechange\", this._handleReadyStateChangeProxy, false);\n\t\t} else {\n\t\t\t// IE9 support\n\t\t\tthis._request.onloadstart = this._handleLoadStartProxy;\n\t\t\tthis._request.onprogress = this._handleProgressProxy;\n\t\t\tthis._request.onabort = this._handleAbortProxy;\n\t\t\tthis._request.onerror = this._handleErrorProxy;\n\t\t\tthis._request.ontimeout = this._handleTimeoutProxy;\n\n\t\t\t// Note: We don't get onload in all browsers (earlier FF and IE). onReadyStateChange handles these.\n\t\t\tthis._request.onload = this._handleLoadProxy;\n\t\t\tthis._request.onreadystatechange = this._handleReadyStateChangeProxy;\n\t\t}\n\n\t\t// Set up a timeout if we don't have XHR2\n\t\tif (this._xhrLevel == 1) {\n\t\t\tthis._loadTimeout = setTimeout(createjs.proxy(this._handleTimeout, this), this._item.loadTimeout);\n\t\t}\n\n\t\t// Sometimes we get back 404s immediately, particularly when there is a cross origin request.  // note this does not catch in Chrome\n\t\ttry {\n\t\t\tif (!this._item.values || this._item.method == createjs.AbstractLoader.GET) {\n\t\t\t\tthis._request.send();\n\t\t\t} else if (this._item.method == createjs.AbstractLoader.POST) {\n\t\t\t\tthis._request.send(createjs.RequestUtils.formatQueryString(this._item.values));\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.dispatchEvent(new createjs.ErrorEvent(\"XHR_SEND\", null, error));\n\t\t}\n\t};\n\n\tp.setResponseType = function (type) {\n\t\t// Some old browsers doesn't support blob, so we convert arraybuffer to blob after response is downloaded\n\t\tif (type === 'blob') {\n\t\t\ttype = window.URL ? 'blob' : 'arraybuffer';\n\t\t\tthis._responseType = type;\n\t\t}\n\t\tthis._request.responseType = type;\n\t};\n\n\t/**\n\t * Get all the response headers from the XmlHttpRequest.\n\t *\n\t * <strong>From the docs:</strong> Return all the HTTP headers, excluding headers that are a case-insensitive match\n\t * for Set-Cookie or Set-Cookie2, as a single string, with each header line separated by a U+000D CR U+000A LF pair,\n\t * excluding the status line, and with each header name and header value separated by a U+003A COLON U+0020 SPACE\n\t * pair.\n\t * @method getAllResponseHeaders\n\t * @return {String}\n\t * @since 0.4.1\n\t */\n\tp.getAllResponseHeaders = function () {\n\t\tif (this._request.getAllResponseHeaders instanceof Function) {\n\t\t\treturn this._request.getAllResponseHeaders();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\t/**\n\t * Get a specific response header from the XmlHttpRequest.\n\t *\n\t * <strong>From the docs:</strong> Returns the header field value from the response of which the field name matches\n\t * header, unless the field name is Set-Cookie or Set-Cookie2.\n\t * @method getResponseHeader\n\t * @param {String} header The header name to retrieve.\n\t * @return {String}\n\t * @since 0.4.1\n\t */\n\tp.getResponseHeader = function (header) {\n\t\tif (this._request.getResponseHeader instanceof Function) {\n\t\t\treturn this._request.getResponseHeader(header);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n// protected methods\n\t/**\n\t * The XHR request has reported progress.\n\t * @method _handleProgress\n\t * @param {Object} event The XHR progress event.\n\t * @private\n\t */\n\tp._handleProgress = function (event) {\n\t\tif (!event || event.loaded > 0 && event.total == 0) {\n\t\t\treturn; // Sometimes we get no \"total\", so just ignore the progress event.\n\t\t}\n\n\t\tvar newEvent = new createjs.ProgressEvent(event.loaded, event.total);\n\t\tthis.dispatchEvent(newEvent);\n\t};\n\n\t/**\n\t * The XHR request has reported a load start.\n\t * @method _handleLoadStart\n\t * @param {Object} event The XHR loadStart event.\n\t * @private\n\t */\n\tp._handleLoadStart = function (event) {\n\t\tclearTimeout(this._loadTimeout);\n\t\tthis.dispatchEvent(\"loadstart\");\n\t};\n\n\t/**\n\t * The XHR request has reported an abort event.\n\t * @method handleAbort\n\t * @param {Object} event The XHR abort event.\n\t * @private\n\t */\n\tp._handleAbort = function (event) {\n\t\tthis._clean();\n\t\tthis.dispatchEvent(new createjs.ErrorEvent(\"XHR_ABORTED\", null, event));\n\t};\n\n\t/**\n\t * The XHR request has reported an error event.\n\t * @method _handleError\n\t * @param {Object} event The XHR error event.\n\t * @private\n\t */\n\tp._handleError = function (event) {\n\t\tthis._clean();\n\t\tthis.dispatchEvent(new createjs.ErrorEvent(event.message));\n\t};\n\n\t/**\n\t * The XHR request has reported a readyState change. Note that older browsers (IE 7 & 8) do not provide an onload\n\t * event, so we must monitor the readyStateChange to determine if the file is loaded.\n\t * @method _handleReadyStateChange\n\t * @param {Object} event The XHR readyStateChange event.\n\t * @private\n\t */\n\tp._handleReadyStateChange = function (event) {\n\t\tif (this._request.readyState == 4) {\n\t\t\tthis._handleLoad();\n\t\t}\n\t};\n\n\t/**\n\t * The XHR request has completed. This is called by the XHR request directly, or by a readyStateChange that has\n\t * <code>request.readyState == 4</code>. Only the first call to this method will be processed.\n\t * @method _handleLoad\n\t * @param {Object} event The XHR load event.\n\t * @private\n\t */\n\tp._handleLoad = function (event) {\n\t\tif (this.loaded) {\n\t\t\treturn;\n\t\t}\n\t\tthis.loaded = true;\n\n\t\tvar error = this._checkError();\n\t\tif (error) {\n\t\t\tthis._handleError(error);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._response = this._getResponse();\n\t\t// Convert arraybuffer back to blob\n\t\tif (this._responseType === 'arraybuffer') {\n\t\t\ttry {\n\t\t\t\tthis._response = new Blob([this._response]);\n\t\t\t} catch (e) {\n\t\t\t\t// Fallback to use BlobBuilder if Blob constructor is not supported\n\t\t\t\t// Tested on Android 2.3 ~ 4.2 and iOS5 safari\n\t\t\t\twindow.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\t\t\t\tif (e.name === 'TypeError' && window.BlobBuilder) {\n\t\t\t\t\tvar builder = new BlobBuilder();\n\t\t\t\t\tbuilder.append(this._response);\n\t\t\t\t\tthis._response = builder.getBlob();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._clean();\n\n\t\tthis.dispatchEvent(new createjs.Event(\"complete\"));\n\t};\n\n\t/**\n\t * The XHR request has timed out. This is called by the XHR request directly, or via a <code>setTimeout</code>\n\t * callback.\n\t * @method _handleTimeout\n\t * @param {Object} [event] The XHR timeout event. This is occasionally null when called by the backup setTimeout.\n\t * @private\n\t */\n\tp._handleTimeout = function (event) {\n\t\tthis._clean();\n\n\t\tthis.dispatchEvent(new createjs.ErrorEvent(\"PRELOAD_TIMEOUT\", null, event));\n\t};\n\n// Protected\n\t/**\n\t * Determine if there is an error in the current load. This checks the status of the request for problem codes. Note\n\t * that this does not check for an actual response. Currently, it only checks for 404 or 0 error code.\n\t * @method _checkError\n\t * @return {int} If the request status returns an error code.\n\t * @private\n\t */\n\tp._checkError = function () {\n\t\t//LM: Probably need additional handlers here, maybe 501\n\t\tvar status = parseInt(this._request.status);\n\n\t\tswitch (status) {\n\t\t\tcase 404:   // Not Found\n\t\t\tcase 0:     // Not Loaded\n\t\t\t\treturn new Error(status);\n\t\t}\n\t\treturn null;\n\t};\n\n\t/**\n\t * Validate the response. Different browsers have different approaches, some of which throw errors when accessed\n\t * in other browsers. If there is no response, the <code>_response</code> property will remain null.\n\t * @method _getResponse\n\t * @private\n\t */\n\tp._getResponse = function () {\n\t\tif (this._response != null) {\n\t\t\treturn this._response;\n\t\t}\n\n\t\tif (this._request.response != null) {\n\t\t\treturn this._request.response;\n\t\t}\n\n\t\t// Android 2.2 uses .responseText\n\t\ttry {\n\t\t\tif (this._request.responseText != null) {\n\t\t\t\treturn this._request.responseText;\n\t\t\t}\n\t\t} catch (e) {\n\t\t}\n\n\t\t// When loading XML, IE9 does not return .response, instead it returns responseXML.xml\n\t\ttry {\n\t\t\tif (this._request.responseXML != null) {\n\t\t\t\treturn this._request.responseXML;\n\t\t\t}\n\t\t} catch (e) {\n\t\t}\n\n\t\treturn null;\n\t};\n\n\t/**\n\t * Create an XHR request. Depending on a number of factors, we get totally different results.\n\t * <ol><li>Some browsers get an <code>XDomainRequest</code> when loading cross-domain.</li>\n\t *      <li>XMLHttpRequest are created when available.</li>\n\t *      <li>ActiveX.XMLHTTP objects are used in older IE browsers.</li>\n\t *      <li>Text requests override the mime type if possible</li>\n\t *      <li>Origin headers are sent for crossdomain requests in some browsers.</li>\n\t *      <li>Binary loads set the response type to \"arraybuffer\"</li></ol>\n\t * @method _createXHR\n\t * @param {Object} item The requested item that is being loaded.\n\t * @return {Boolean} If an XHR request or equivalent was successfully created.\n\t * @private\n\t */\n\tp._createXHR = function (item) {\n\t\t// Check for cross-domain loads. We can't fully support them, but we can try.\n\t\tvar crossdomain = createjs.RequestUtils.isCrossDomain(item);\n\t\tvar headers = {};\n\n\t\t// Create the request. Fallback to whatever support we have.\n\t\tvar req = null;\n\t\tif (window.XMLHttpRequest) {\n\t\t\treq = new XMLHttpRequest();\n\t\t\t// This is 8 or 9, so use XDomainRequest instead.\n\t\t\tif (crossdomain && req.withCredentials === undefined && window.XDomainRequest) {\n\t\t\t\treq = new XDomainRequest();\n\t\t\t}\n\t\t} else { // Old IE versions use a different approach\n\t\t\tfor (var i = 0, l = s.ACTIVEX_VERSIONS.length; i < l; i++) {\n\t\t\t\tvar axVersion = s.ACTIVEX_VERSIONS[i];\n\t\t\t\ttry {\n\t\t\t\t\treq = new ActiveXObject(axVersion);\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (e) {\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (req == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Default to utf-8 for Text requests.\n\t\tif (item.mimeType == null && createjs.RequestUtils.isText(item.type)) {\n\t\t\titem.mimeType = \"text/plain; charset=utf-8\";\n\t\t}\n\n\t\t// IE9 doesn't support overrideMimeType(), so we need to check for it.\n\t\tif (item.mimeType && req.overrideMimeType) {\n\t\t\treq.overrideMimeType(item.mimeType);\n\t\t}\n\n\t\t// Determine the XHR level\n\t\tthis._xhrLevel = (typeof req.responseType === \"string\") ? 2 : 1;\n\n\t\tvar src = null;\n\t\tif (item.method == createjs.AbstractLoader.GET) {\n\t\t\tsrc = createjs.RequestUtils.buildPath(item.src, item.values);\n\t\t} else {\n\t\t\tsrc = item.src;\n\t\t}\n\n\t\t// Open the request.  Set cross-domain flags if it is supported (XHR level 1 only)\n\t\treq.open(item.method || createjs.AbstractLoader.GET, src, true);\n\n\t\tif (crossdomain && req instanceof XMLHttpRequest && this._xhrLevel == 1) {\n\t\t\theaders[\"Origin\"] = location.origin;\n\t\t}\n\n\t\t// To send data we need to set the Content-type header)\n\t\tif (item.values && item.method == createjs.AbstractLoader.POST) {\n\t\t\theaders[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n\t\t}\n\n\t\tif (!crossdomain && !headers[\"X-Requested-With\"]) {\n\t\t\theaders[\"X-Requested-With\"] = \"XMLHttpRequest\";\n\t\t}\n\n\t\tif (item.headers) {\n\t\t\tfor (var n in item.headers) {\n\t\t\t\theaders[n] = item.headers[n];\n\t\t\t}\n\t\t}\n\n\t\tfor (n in headers) {\n\t\t\treq.setRequestHeader(n, headers[n])\n\t\t}\n\n\t\tif (req instanceof XMLHttpRequest && item.withCredentials !== undefined) {\n\t\t\treq.withCredentials = item.withCredentials;\n\t\t}\n\n\t\tthis._request = req;\n\n\t\treturn true;\n\t};\n\n\t/**\n\t * A request has completed (or failed or canceled), and needs to be disposed.\n\t * @method _clean\n\t * @private\n\t */\n\tp._clean = function () {\n\t\tclearTimeout(this._loadTimeout);\n\n\t\tif (this._request.removeEventListener != null) {\n\t\t\tthis._request.removeEventListener(\"loadstart\", this._handleLoadStartProxy);\n\t\t\tthis._request.removeEventListener(\"progress\", this._handleProgressProxy);\n\t\t\tthis._request.removeEventListener(\"abort\", this._handleAbortProxy);\n\t\t\tthis._request.removeEventListener(\"error\", this._handleErrorProxy);\n\t\t\tthis._request.removeEventListener(\"timeout\", this._handleTimeoutProxy);\n\t\t\tthis._request.removeEventListener(\"load\", this._handleLoadProxy);\n\t\t\tthis._request.removeEventListener(\"readystatechange\", this._handleReadyStateChangeProxy);\n\t\t} else {\n\t\t\tthis._request.onloadstart = null;\n\t\t\tthis._request.onprogress = null;\n\t\t\tthis._request.onabort = null;\n\t\t\tthis._request.onerror = null;\n\t\t\tthis._request.ontimeout = null;\n\t\t\tthis._request.onload = null;\n\t\t\tthis._request.onreadystatechange = null;\n\t\t}\n\t};\n\n\tp.toString = function () {\n\t\treturn \"[PreloadJS XHRRequest]\";\n\t};\n\n\tcreatejs.XHRRequest = createjs.promote(XHRRequest, \"AbstractRequest\");\n\n}());\n\n//##############################################################################\n// LoadQueue.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n/*\n TODO: WINDOWS ISSUES\n * No error for HTML audio in IE 678\n * SVG no failure error in IE 67 (maybe 8) TAGS AND XHR\n * No script complete handler in IE 67 TAGS (XHR is fine)\n * No XML/JSON in IE6 TAGS\n * Need to hide loading SVG in Opera TAGS\n * No CSS onload/readystatechange in Safari or Android TAGS (requires rule checking)\n * SVG no load or failure in Opera XHR\n * Reported issues with IE7/8\n */\n\n(function () {\n\t\"use strict\";\n\n// constructor\n\t/**\n\t * The LoadQueue class is the main API for preloading content. LoadQueue is a load manager, which can preload either\n\t * a single file, or queue of files.\n\t *\n\t * <b>Creating a Queue</b><br />\n\t * To use LoadQueue, create a LoadQueue instance. If you want to force tag loading where possible, set the preferXHR\n\t * argument to false.\n\t *\n\t *      var queue = new createjs.LoadQueue(true);\n\t *\n\t * <b>Listening for Events</b><br />\n\t * Add any listeners you want to the queue. Since PreloadJS 0.3.0, the {{#crossLink \"EventDispatcher\"}}{{/crossLink}}\n\t * lets you add as many listeners as you want for events. You can subscribe to the following events:<ul>\n\t *     <li>{{#crossLink \"AbstractLoader/complete:event\"}}{{/crossLink}}: fired when a queue completes loading all\n\t *     files</li>\n\t *     <li>{{#crossLink \"AbstractLoader/error:event\"}}{{/crossLink}}: fired when the queue encounters an error with\n\t *     any file.</li>\n\t *     <li>{{#crossLink \"AbstractLoader/progress:event\"}}{{/crossLink}}: Progress for the entire queue has\n\t *     changed.</li>\n\t *     <li>{{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}}: A single file has completed loading.</li>\n\t *     <li>{{#crossLink \"LoadQueue/fileprogress:event\"}}{{/crossLink}}: Progress for a single file has changes. Note\n\t *     that only files loaded with XHR (or possibly by plugins) will fire progress events other than 0 or 100%.</li>\n\t * </ul>\n\t *\n\t *      queue.on(\"fileload\", handleFileLoad, this);\n\t *      queue.on(\"complete\", handleComplete, this);\n\t *\n\t * <b>Adding files and manifests</b><br />\n\t * Add files you want to load using {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}} or add multiple files at a\n\t * time using a list or a manifest definition using {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}. Files are\n\t * appended to the end of the active queue, so you can use these methods as many times as you like, whenever you\n\t * like.\n\t *\n\t *      queue.loadFile(\"filePath/file.jpg\");\n\t *      queue.loadFile({id:\"image\", src:\"filePath/file.jpg\"});\n\t *      queue.loadManifest([\"filePath/file.jpg\", {id:\"image\", src:\"filePath/file.jpg\"}]);\n\t *\n\t *      // Use an external manifest\n\t *      queue.loadManifest(\"path/to/manifest.json\");\n\t *      queue.loadManifest({src:\"manifest.json\", type:\"manifest\"});\n\t *\n\t * If you pass `false` as the `loadNow` parameter, the queue will not kick of the load of the files, but it will not\n\t * stop if it has already been started. Call the {{#crossLink \"AbstractLoader/load\"}}{{/crossLink}} method to begin\n\t * a paused queue. Note that a paused queue will automatically resume when new files are added to it with a\n\t * `loadNow` argument of `true`.\n\t *\n\t *      queue.load();\n\t *\n\t * <b>File Types</b><br />\n\t * The file type of a manifest item is auto-determined by the file extension. The pattern matching in PreloadJS\n\t * should handle the majority of standard file and url formats, and works with common file extensions. If you have\n\t * either a non-standard file extension, or are serving the file using a proxy script, then you can pass in a\n\t * <code>type</code> property with any manifest item.\n\t *\n\t *      queue.loadFile({src:\"path/to/myFile.mp3x\", type:createjs.AbstractLoader.SOUND});\n\t *\n\t *      // Note that PreloadJS will not read a file extension from the query string\n\t *      queue.loadFile({src:\"http://server.com/proxy?file=image.jpg\", type:createjs.AbstractLoader.IMAGE});\n\t *\n\t * Supported types are defined on the {{#crossLink \"AbstractLoader\"}}{{/crossLink}} class, and include:\n\t * <ul>\n\t *     <li>{{#crossLink \"AbstractLoader/BINARY:property\"}}{{/crossLink}}: Raw binary data via XHR</li>\n\t *     <li>{{#crossLink \"AbstractLoader/CSS:property\"}}{{/crossLink}}: CSS files</li>\n\t *     <li>{{#crossLink \"AbstractLoader/IMAGE:property\"}}{{/crossLink}}: Common image formats</li>\n\t *     <li>{{#crossLink \"AbstractLoader/JAVASCRIPT:property\"}}{{/crossLink}}: JavaScript files</li>\n\t *     <li>{{#crossLink \"AbstractLoader/JSON:property\"}}{{/crossLink}}: JSON data</li>\n\t *     <li>{{#crossLink \"AbstractLoader/JSONP:property\"}}{{/crossLink}}: JSON files cross-domain</li>\n\t *     <li>{{#crossLink \"AbstractLoader/MANIFEST:property\"}}{{/crossLink}}: A list of files to load in JSON format, see\n\t *     {{#crossLink \"AbstractLoader/loadManifest\"}}{{/crossLink}}</li>\n\t *     <li>{{#crossLink \"AbstractLoader/SOUND:property\"}}{{/crossLink}}: Audio file formats</li>\n\t *     <li>{{#crossLink \"AbstractLoader/SPRITESHEET:property\"}}{{/crossLink}}: JSON SpriteSheet definiteions. This\n\t *     will also load sub-images, and provide a {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instance.</li>\n\t *     <li>{{#crossLink \"AbstractLoader/SVG:property\"}}{{/crossLink}}: SVG files</li>\n\t *     <li>{{#crossLink \"AbstractLoader/TEXT:property\"}}{{/crossLink}}: Text files - XHR only</li>\n\t *     <li>{{#crossLink \"AbstractLoader/XML:property\"}}{{/crossLink}}: XML data</li>\n\t * </ul>\n\t *\n\t * <em>Note: Loader types used to be defined on LoadQueue, but have been moved to AbstractLoader for better\n\t * portability of loader classes, which can be used individually now. The properties on LoadQueue still exist, but\n\t * are deprecated.</em>\n\t *\n\t * <b>Handling Results</b><br />\n\t * When a file is finished downloading, a {{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}} event is\n\t * dispatched. In an example above, there is an event listener snippet for fileload. Loaded files are usually a\n\t * formatted object that can be used immediately, including:\n\t * <ul>\n\t *     <li>Binary: The binary loaded result</li>\n\t *     <li>CSS: A &lt;link /&gt; tag</li>\n\t *     <li>Image: An &lt;img /&gt; tag</li>\n\t *     <li>JavaScript: A &lt;script /&gt; tag</li>\n\t *     <li>JSON/JSONP: A formatted JavaScript Object</li>\n\t *     <li>Manifest: A JavaScript object.\n\t *     <li>Sound: An &lt;audio /&gt; tag</a>\n\t *     <li>SpriteSheet: A {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instance, containing loaded images.\n\t *     <li>SVG: An &lt;object /&gt; tag</li>\n\t *     <li>Text: Raw text</li>\n\t *     <li>XML: An XML DOM node</li>\n\t * </ul>\n\t *\n\t *      function handleFileLoad(event) {\n\t *          var item = event.item; // A reference to the item that was passed in to the LoadQueue\n\t *          var type = item.type;\n\t *\n\t *          // Add any images to the page body.\n\t *          if (type == createjs.LoadQueue.IMAGE) {\n\t *              document.body.appendChild(event.result);\n\t *          }\n\t *      }\n\t *\n\t * At any time after the file has been loaded (usually after the queue has completed), any result can be looked up\n\t * via its \"id\" using {{#crossLink \"LoadQueue/getResult\"}}{{/crossLink}}. If no id was provided, then the\n\t * \"src\" or file path can be used instead, including the `path` defined by a manifest, but <strong>not including</strong>\n\t * a base path defined on the LoadQueue. It is recommended to always pass an id if you want to look up content.\n\t *\n\t *      var image = queue.getResult(\"image\");\n\t *      document.body.appendChild(image);\n\t *\n\t * Raw loaded content can be accessed using the <code>rawResult</code> property of the {{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}}\n\t * event, or can be looked up using {{#crossLink \"LoadQueue/getResult\"}}{{/crossLink}}, passing `true` as the 2nd\n\t * argument. This is only applicable for content that has been parsed for the browser, specifically: JavaScript,\n\t * CSS, XML, SVG, and JSON objects, or anything loaded with XHR.\n\t *\n\t *      var image = queue.getResult(\"image\", true); // load the binary image data loaded with XHR.\n\t *\n\t * <b>Plugins</b><br />\n\t * LoadQueue has a simple plugin architecture to help process and preload content. For example, to preload audio,\n\t * make sure to install the <a href=\"http://soundjs.com\">SoundJS</a> Sound class, which will help load HTML audio,\n\t * Flash audio, and WebAudio files. This should be installed <strong>before</strong> loading any audio files.\n\t *\n\t *      queue.installPlugin(createjs.Sound);\n\t *\n\t * <h4>Known Browser Issues</h4>\n\t * <ul>\n\t *     <li>Browsers without audio support can not load audio files.</li>\n\t *     <li>Safari on Mac OS X can only play HTML audio if QuickTime is installed</li>\n\t *     <li>HTML Audio tags will only download until their <code>canPlayThrough</code> event is fired. Browsers other\n\t *     than Chrome will continue to download in the background.</li>\n\t *     <li>When loading scripts using tags, they are automatically added to the document.</li>\n\t *     <li>Scripts loaded via XHR may not be properly inspectable with browser tools.</li>\n\t *     <li>IE6 and IE7 (and some other browsers) may not be able to load XML, Text, or JSON, since they require\n\t *     XHR to work.</li>\n\t *     <li>Content loaded via tags will not show progress, and will continue to download in the background when\n\t *     canceled, although no events will be dispatched.</li>\n\t * </ul>\n\t *\n\t * @class LoadQueue\n\t * @param {Boolean} [preferXHR=true] Determines whether the preload instance will favor loading with XHR (XML HTTP\n\t * Requests), or HTML tags. When this is `false`, the queue will use tag loading when possible, and fall back on XHR\n\t * when necessary.\n\t * @param {String} [basePath=\"\"] A path that will be prepended on to the source parameter of all items in the queue\n\t * before they are loaded.  Sources beginning with a protocol such as `http://` or a relative path such as `../`\n\t * will not receive a base path.\n\t * @param {String|Boolean} [crossOrigin=\"\"] An optional flag to support images loaded from a CORS-enabled server. To\n\t * use it, set this value to `true`, which will default the crossOrigin property on images to \"Anonymous\". Any\n\t * string value will be passed through, but only \"\" and \"Anonymous\" are recommended. <strong>Note: The crossOrigin\n\t * parameter is deprecated. Use LoadItem.crossOrigin instead</strong>\n\t *\n\t * @constructor\n\t * @extends AbstractLoader\n\t */\n\tfunction LoadQueue (preferXHR, basePath, crossOrigin) {\n\t\tthis.AbstractLoader_constructor();\n\n\t\t/**\n\t\t * An array of the plugins registered using {{#crossLink \"LoadQueue/installPlugin\"}}{{/crossLink}}.\n\t\t * @property _plugins\n\t\t * @type {Array}\n\t\t * @private\n\t\t * @since 0.6.1\n\t\t */\n\t\tthis._plugins = [];\n\n\t\t/**\n\t\t * An object hash of callbacks that are fired for each file type before the file is loaded, giving plugins the\n\t\t * ability to override properties of the load. Please see the {{#crossLink \"LoadQueue/installPlugin\"}}{{/crossLink}}\n\t\t * method for more information.\n\t\t * @property _typeCallbacks\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._typeCallbacks = {};\n\n\t\t/**\n\t\t * An object hash of callbacks that are fired for each file extension before the file is loaded, giving plugins the\n\t\t * ability to override properties of the load. Please see the {{#crossLink \"LoadQueue/installPlugin\"}}{{/crossLink}}\n\t\t * method for more information.\n\t\t * @property _extensionCallbacks\n\t\t * @type {null}\n\t\t * @private\n\t\t */\n\t\tthis._extensionCallbacks = {};\n\n\t\t/**\n\t\t * The next preload queue to process when this one is complete. If an error is thrown in the current queue, and\n\t\t * {{#crossLink \"LoadQueue/stopOnError:property\"}}{{/crossLink}} is `true`, the next queue will not be processed.\n\t\t * @property next\n\t\t * @type {LoadQueue}\n\t\t * @default null\n\t\t */\n\t\tthis.next = null;\n\n\t\t/**\n\t\t * Ensure loaded scripts \"complete\" in the order they are specified. Loaded scripts are added to the document head\n\t\t * once they are loaded. Scripts loaded via tags will load one-at-a-time when this property is `true`, whereas\n\t\t * scripts loaded using XHR can load in any order, but will \"finish\" and be added to the document in the order\n\t\t * specified.\n\t\t *\n\t\t * Any items can be set to load in order by setting the {{#crossLink \"maintainOrder:property\"}}{{/crossLink}}\n\t\t * property on the load item, or by ensuring that only one connection can be open at a time using\n\t\t * {{#crossLink \"LoadQueue/setMaxConnections\"}}{{/crossLink}}. Note that when the `maintainScriptOrder` property\n\t\t * is set to `true`, scripts items are automatically set to `maintainOrder=true`, and changing the\n\t\t * `maintainScriptOrder` to `false` during a load will not change items already in a queue.\n\t\t *\n\t\t * <h4>Example</h4>\n\t\t *\n\t\t *      var queue = new createjs.LoadQueue();\n\t\t *      queue.setMaxConnections(3); // Set a higher number to load multiple items at once\n\t\t *      queue.maintainScriptOrder = true; // Ensure scripts are loaded in order\n\t\t *      queue.loadManifest([\n\t\t *          \"script1.js\",\n\t\t *          \"script2.js\",\n\t\t *          \"image.png\", // Load any time\n\t\t *          {src: \"image2.png\", maintainOrder: true} // Will wait for script2.js\n\t\t *          \"image3.png\",\n\t\t *          \"script3.js\" // Will wait for image2.png before loading (or completing when loading with XHR)\n\t\t *      ]);\n\t\t *\n\t\t * @property maintainScriptOrder\n\t\t * @type {Boolean}\n\t\t * @default true\n\t\t */\n\t\tthis.maintainScriptOrder = true;\n\n\t\t/**\n\t\t * Determines if the LoadQueue will stop processing the current queue when an error is encountered.\n\t\t * @property stopOnError\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.stopOnError = false;\n\n\t\t/**\n\t\t * The number of maximum open connections that a loadQueue tries to maintain. Please see\n\t\t * {{#crossLink \"LoadQueue/setMaxConnections\"}}{{/crossLink}} for more information.\n\t\t * @property _maxConnections\n\t\t * @type {Number}\n\t\t * @default 1\n\t\t * @private\n\t\t */\n\t\tthis._maxConnections = 1;\n\n\t\t/**\n\t\t * An internal list of all the default Loaders that are included with PreloadJS. Before an item is loaded, the\n\t\t * available loader list is iterated, in the order they are included, and as soon as a loader indicates it can\n\t\t * handle the content, it will be selected. The default loader, ({{#crossLink \"TextLoader\"}}{{/crossLink}} is\n\t\t * last in the list, so it will be used if no other match is found. Typically, loaders will match based on the\n\t\t * {{#crossLink \"LoadItem/type\"}}{{/crossLink}}, which is automatically determined using the file extension of\n\t\t * the {{#crossLink \"LoadItem/src:property\"}}{{/crossLink}}.\n\t\t *\n\t\t * Loaders can be removed from PreloadJS by simply not including them.\n\t\t *\n\t\t * Custom loaders installed using {{#crossLink \"registerLoader\"}}{{/crossLink}} will be prepended to this list\n\t\t * so that they are checked first.\n\t\t * @property _availableLoaders\n\t\t * @type {Array}\n\t\t * @private\n\t\t * @since 0.6.0\n\t\t */\n\t\tthis._availableLoaders = [\n\t\t\tcreatejs.ImageLoader,\n\t\t\tcreatejs.JavaScriptLoader,\n\t\t\tcreatejs.CSSLoader,\n\t\t\tcreatejs.JSONLoader,\n\t\t\tcreatejs.JSONPLoader,\n\t\t\tcreatejs.SoundLoader,\n\t\t\tcreatejs.ManifestLoader,\n\t\t\tcreatejs.SpriteSheetLoader,\n\t\t\tcreatejs.XMLLoader,\n\t\t\tcreatejs.SVGLoader,\n\t\t\tcreatejs.BinaryLoader,\n\t\t\tcreatejs.VideoLoader,\n\t\t\tcreatejs.TextLoader,\n\t\t];\n\n\t\t/**\n\t\t * The number of built in loaders, so they can't be removed by {{#crossLink \"unregisterLoader\"}}{{/crossLink}.\n\t\t\t\t * @property _defaultLoaderLength\n\t\t * @type {Number}\n\t\t * @private\n\t\t * @since 0.6.0\n\t\t */\n\t\tthis._defaultLoaderLength = this._availableLoaders.length;\n\n\t\tthis.init(preferXHR, basePath, crossOrigin);\n\t}\n\n\tvar p = createjs.extend(LoadQueue, createjs.AbstractLoader);\n\tvar s = LoadQueue;\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\n\t/**\n\t * An internal initialization method, which is used for initial set up, but also to reset the LoadQueue.\n\t * @method init\n\t * @param preferXHR\n\t * @param basePath\n\t * @param crossOrigin\n\t * @private\n\t */\n\tp.init = function (preferXHR, basePath, crossOrigin) {\n\n\t\t// public properties\n\t\t/**\n\t\t * @property useXHR\n\t\t * @type {Boolean}\n\t\t * @readonly\n\t\t * @default true\n\t\t * @deprecated Use preferXHR instead.\n\t\t */\n\t\tthis.useXHR = true;\n\n\t\t/**\n\t\t * Try and use XMLHttpRequest (XHR) when possible. Note that LoadQueue will default to tag loading or XHR\n\t\t * loading depending on the requirements for a media type. For example, HTML audio can not be loaded with XHR,\n\t\t * and plain text can not be loaded with tags, so it will default the the correct type instead of using the\n\t\t * user-defined type.\n\t\t * @type {Boolean}\n\t\t * @default true\n\t\t * @since 0.6.0\n\t\t */\n\t\tthis.preferXHR = true; //TODO: Get/Set\n\t\tthis._preferXHR = true;\n\t\tthis.setPreferXHR(preferXHR);\n\n\t\t// protected properties\n\t\t/**\n\t\t * Whether the queue is currently paused or not.\n\t\t * @property _paused\n\t\t * @type {boolean}\n\t\t * @private\n\t\t */\n\t\tthis._paused = false;\n\n\t\t/**\n\t\t * A path that will be prepended on to the item's {{#crossLink \"LoadItem/src:property\"}}{{/crossLink}}. The\n\t\t * `_basePath` property will only be used if an item's source is relative, and does not include a protocol such\n\t\t * as `http://`, or a relative path such as `../`.\n\t\t * @property _basePath\n\t\t * @type {String}\n\t\t * @private\n\t\t * @since 0.3.1\n\t\t */\n\t\tthis._basePath = basePath;\n\n\t\t/**\n\t\t * An optional flag to set on images that are loaded using PreloadJS, which enables CORS support. Images loaded\n\t\t * cross-domain by servers that support CORS require the crossOrigin flag to be loaded and interacted with by\n\t\t * a canvas. When loading locally, or with a server with no CORS support, this flag can cause other security issues,\n\t\t * so it is recommended to only set it if you are sure the server supports it. Currently, supported values are \"\"\n\t\t * and \"Anonymous\".\n\t\t * @property _crossOrigin\n\t\t * @type {String}\n\t\t * @default \"\"\n\t\t * @private\n\t\t * @since 0.4.1\n\t\t */\n\t\tthis._crossOrigin = crossOrigin;\n\n\t\t/**\n\t\t * Determines if the loadStart event was dispatched already. This event is only fired one time, when the first\n\t\t * file is requested.\n\t\t * @property _loadStartWasDispatched\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t * @private\n\t\t */\n\t\tthis._loadStartWasDispatched = false;\n\n\t\t/**\n\t\t * Determines if there is currently a script loading. This helps ensure that only a single script loads at once when\n\t\t * using a script tag to do preloading.\n\t\t * @property _currentlyLoadingScript\n\t\t * @type {Boolean}\n\t\t * @private\n\t\t */\n\t\tthis._currentlyLoadingScript = null;\n\n\t\t/**\n\t\t * An array containing the currently downloading files.\n\t\t * @property _currentLoads\n\t\t * @type {Array}\n\t\t * @private\n\t\t */\n\t\tthis._currentLoads = [];\n\n\t\t/**\n\t\t * An array containing the queued items that have not yet started downloading.\n\t\t * @property _loadQueue\n\t\t * @type {Array}\n\t\t * @private\n\t\t */\n\t\tthis._loadQueue = [];\n\n\t\t/**\n\t\t * An array containing downloads that have not completed, so that the LoadQueue can be properly reset.\n\t\t * @property _loadQueueBackup\n\t\t * @type {Array}\n\t\t * @private\n\t\t */\n\t\tthis._loadQueueBackup = [];\n\n\t\t/**\n\t\t * An object hash of items that have finished downloading, indexed by the {{#crossLink \"LoadItem\"}}{{/crossLink}}\n\t\t * id.\n\t\t * @property _loadItemsById\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._loadItemsById = {};\n\n\t\t/**\n\t\t * An object hash of items that have finished downloading, indexed by {{#crossLink \"LoadItem\"}}{{/crossLink}}\n\t\t * source.\n\t\t * @property _loadItemsBySrc\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._loadItemsBySrc = {};\n\n\t\t/**\n\t\t * An object hash of loaded items, indexed by the ID of the {{#crossLink \"LoadItem\"}}{{/crossLink}}.\n\t\t * @property _loadedResults\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._loadedResults = {};\n\n\t\t/**\n\t\t * An object hash of un-parsed loaded items, indexed by the ID of the {{#crossLink \"LoadItem\"}}{{/crossLink}}.\n\t\t * @property _loadedRawResults\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._loadedRawResults = {};\n\n\t\t/**\n\t\t * The number of items that have been requested. This helps manage an overall progress without knowing how large\n\t\t * the files are before they are downloaded. This does not include items inside of loaders such as the\n\t\t * {{#crossLink \"ManifestLoader\"}}{{/crossLink}}.\n\t\t * @property _numItems\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t * @private\n\t\t */\n\t\tthis._numItems = 0;\n\n\t\t/**\n\t\t * The number of items that have completed loaded. This helps manage an overall progress without knowing how large\n\t\t * the files are before they are downloaded.\n\t\t * @property _numItemsLoaded\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t * @private\n\t\t */\n\t\tthis._numItemsLoaded = 0;\n\n\t\t/**\n\t\t * A list of scripts in the order they were requested. This helps ensure that scripts are \"completed\" in the right\n\t\t * order.\n\t\t * @property _scriptOrder\n\t\t * @type {Array}\n\t\t * @private\n\t\t */\n\t\tthis._scriptOrder = [];\n\n\t\t/**\n\t\t * A list of scripts that have been loaded. Items are added to this list as <code>null</code> when they are\n\t\t * requested, contain the loaded item if it has completed, but not been dispatched to the user, and <code>true</true>\n\t\t * once they are complete and have been dispatched.\n\t\t * @property _loadedScripts\n\t\t * @type {Array}\n\t\t * @private\n\t\t */\n\t\tthis._loadedScripts = [];\n\n\t\t/**\n\t\t * The last progress amount. This is used to suppress duplicate progress events.\n\t\t * @property _lastProgress\n\t\t * @type {Number}\n\t\t * @private\n\t\t * @since 0.6.0\n\t\t */\n\t\tthis._lastProgress = NaN;\n\n\t};\n\n// static properties\n\t/**\n\t * The time in milliseconds to assume a load has failed. An {{#crossLink \"AbstractLoader/error:event\"}}{{/crossLink}}\n\t * event is dispatched if the timeout is reached before any data is received.\n\t * @property loadTimeout\n\t * @type {Number}\n\t * @default 8000\n\t * @static\n\t * @since 0.4.1\n\t * @deprecated In favour of {{#crossLink \"LoadItem/LOAD_TIMEOUT_DEFAULT:property}}{{/crossLink}} property.\n\t */\n\ts.loadTimeout = 8000;\n\n\t/**\n\t * The time in milliseconds to assume a load has failed.\n\t * @property LOAD_TIMEOUT\n\t * @type {Number}\n\t * @default 0\n\t * @deprecated in favor of the {{#crossLink \"LoadQueue/loadTimeout:property\"}}{{/crossLink}} property.\n\t */\n\ts.LOAD_TIMEOUT = 0;\n\n// Preload Types\n\t/**\n\t * @property BINARY\n\t * @type {String}\n\t * @default binary\n\t * @static\n\t * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/BINARY:property\"}}{{/crossLink}} instead.\n\t */\n\ts.BINARY = createjs.AbstractLoader.BINARY;\n\n\t/**\n\t * @property CSS\n\t * @type {String}\n\t * @default css\n\t * @static\n\t * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/CSS:property\"}}{{/crossLink}} instead.\n\t */\n\ts.CSS = createjs.AbstractLoader.CSS;\n\n\t/**\n\t * @property IMAGE\n\t * @type {String}\n\t * @default image\n\t * @static\n\t * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/CSS:property\"}}{{/crossLink}} instead.\n\t */\n\ts.IMAGE = createjs.AbstractLoader.IMAGE;\n\n\t/**\n\t * @property JAVASCRIPT\n\t * @type {String}\n\t * @default javascript\n\t * @static\n\t * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/JAVASCRIPT:property\"}}{{/crossLink}} instead.\n\t */\n\ts.JAVASCRIPT = createjs.AbstractLoader.JAVASCRIPT;\n\n\t/**\n\t * @property JSON\n\t * @type {String}\n\t * @default json\n\t * @static\n\t * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/JSON:property\"}}{{/crossLink}} instead.\n\t */\n\ts.JSON = createjs.AbstractLoader.JSON;\n\n\t/**\n\t * @property JSONP\n\t * @type {String}\n\t * @default jsonp\n\t * @static\n\t * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/JSONP:property\"}}{{/crossLink}} instead.\n\t */\n\ts.JSONP = createjs.AbstractLoader.JSONP;\n\n\t/**\n\t * @property MANIFEST\n\t * @type {String}\n\t * @default manifest\n\t * @static\n\t * @since 0.4.1\n\t * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/MANIFEST:property\"}}{{/crossLink}} instead.\n\t */\n\ts.MANIFEST = createjs.AbstractLoader.MANIFEST;\n\n\t/**\n\t * @property SOUND\n\t * @type {String}\n\t * @default sound\n\t * @static\n\t * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/JAVASCRIPT:property\"}}{{/crossLink}} instead.\n\t */\n\ts.SOUND = createjs.AbstractLoader.SOUND;\n\n\t/**\n\t * @property VIDEO\n\t * @type {String}\n\t * @default video\n\t * @static\n\t * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/JAVASCRIPT:property\"}}{{/crossLink}} instead.\n\t */\n\ts.VIDEO = createjs.AbstractLoader.VIDEO;\n\n\t/**\n\t * @property SVG\n\t * @type {String}\n\t * @default svg\n\t * @static\n\t * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/SVG:property\"}}{{/crossLink}} instead.\n\t */\n\ts.SVG = createjs.AbstractLoader.SVG;\n\n\t/**\n\t * @property TEXT\n\t * @type {String}\n\t * @default text\n\t * @static\n\t * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/TEXT:property\"}}{{/crossLink}} instead.\n\t */\n\ts.TEXT = createjs.AbstractLoader.TEXT;\n\n\t/**\n\t * @property XML\n\t * @type {String}\n\t * @default xml\n\t * @static\n\t * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/XML:property\"}}{{/crossLink}} instead.\n\t */\n\ts.XML = createjs.AbstractLoader.XML;\n\n\t/**\n\t * @property POST\n\t * @type {string}\n\t * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/POST:property\"}}{{/crossLink}} instead.\n\t */\n\ts.POST = createjs.AbstractLoader.POST;\n\n\t/**\n\t * @property GET\n\t * @type {string}\n\t * @deprecated Use the AbstractLoader {{#crossLink \"AbstractLoader/GET:property\"}}{{/crossLink}} instead.\n\t */\n\ts.GET = createjs.AbstractLoader.GET;\n\n// events\n\t/**\n\t * This event is fired when an individual file has loaded, and been processed.\n\t * @event fileload\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t * @param {Object} item The file item which was specified in the {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}}\n\t * or {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}} call. If only a string path or tag was specified, the\n\t * object will contain that value as a `src` property.\n\t * @param {Object} result The HTML tag or parsed result of the loaded item.\n\t * @param {Object} rawResult The unprocessed result, usually the raw text or binary data before it is converted\n\t * to a usable object.\n\t * @since 0.3.0\n\t */\n\n\t/**\n\t * This {{#crossLink \"ProgressEvent\"}}{{/crossLink}} that is fired when an an individual file's progress changes.\n\t * @event fileprogress\n\t * @since 0.3.0\n\t */\n\n\t/**\n\t * This event is fired when an individual file starts to load.\n\t * @event filestart\n\t * @param {Object} The object that dispatched the event.\n\t * @param {String} type The event type.\n\t * @param {Object} item The file item which was specified in the {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}}\n\t * or {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}} call. If only a string path or tag was specified, the\n\t * object will contain that value as a property.\n\t */\n\n// public methods\n\t/**\n\t * Register a custom loaders class. New loaders are given precedence over loaders added earlier and default loaders.\n\t * It is recommended that loaders extend {{#crossLink \"AbstractLoader\"}}{{/crossLink}}. Loaders can only be added\n\t * once, and will be prepended to the list of available loaders.\n\t * @method registerLoader\n\t * @param {Function|AbstractLoader} loader The AbstractLoader class to add.\n\t * @since 0.6.0\n\t */\n\tp.registerLoader = function (loader) {\n\t\tif (!loader || !loader.canLoadItem) {\n\t\t\tthrow new Error(\"loader is of an incorrect type.\");\n\t\t} else if (this._availableLoaders.indexOf(loader) != -1) {\n\t\t\tthrow new Error(\"loader already exists.\"); //LM: Maybe just silently fail here\n\t\t}\n\n\t\tthis._availableLoaders.unshift(loader);\n\t};\n\n\t/**\n\t * Remove a custom loader added usig {{#crossLink \"registerLoader\"}}{{/crossLink}}. Only custom loaders can be\n\t * unregistered, the default loaders will always be available.\n\t * @method unregisterLoader\n\t * @param {Function|AbstractLoader} loader The AbstractLoader class to remove\n\t */\n\tp.unregisterLoader = function (loader) {\n\t\tvar idx = this._availableLoaders.indexOf(loader);\n\t\tif (idx != -1 && idx < this._defaultLoaderLength - 1) {\n\t\t\tthis._availableLoaders.splice(idx, 1);\n\t\t}\n\t};\n\n\t/**\n\t * @method setUseXHR\n\t * @param {Boolean} value The new useXHR value to set.\n\t * @return {Boolean} The new useXHR value. If XHR is not supported by the browser, this will return false, even if\n\t * the provided value argument was true.\n\t * @since 0.3.0\n\t * @deprecated use the {{#crossLink \"preferXHR:property\"}}{{/crossLink}} property, or the {{#crossLink \"setUseXHR\"}}{{/crossLink}}\n\t * method instead.\n\t */\n\tp.setUseXHR = function (value) {\n\t\treturn this.setPreferXHR(value);\n\t};\n\n\t/**\n\t * Change the {{#crossLink \"preferXHR:property\"}}{{/crossLink}} value. Note that if this is set to `true`, it may\n\t * fail, or be ignored depending on the browser's capabilities and the load type.\n\t * @method setPreferXHR\n\t * @param {Boolean} value\n\t * @returns {Boolean} The value of {{#crossLink \"preferXHR\"}}{{/crossLink}} that was successfully set.\n\t * @since 0.6.0\n\t */\n\tp.setPreferXHR = function (value) {\n\t\t// Determine if we can use XHR. XHR defaults to TRUE, but the browser may not support it.\n\t\t//TODO: Should we be checking for the other XHR types? Might have to do a try/catch on the different types similar to createXHR.\n\t\tthis.preferXHR = (value != false && window.XMLHttpRequest != null);\n\t\treturn this.preferXHR;\n\t};\n\n\t/**\n\t * Stops all queued and loading items, and clears the queue. This also removes all internal references to loaded\n\t * content, and allows the queue to be used again.\n\t * @method removeAll\n\t * @since 0.3.0\n\t */\n\tp.removeAll = function () {\n\t\tthis.remove();\n\t};\n\n\t/**\n\t * Stops an item from being loaded, and removes it from the queue. If nothing is passed, all items are removed.\n\t * This also removes internal references to loaded item(s).\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      queue.loadManifest([\n\t *          {src:\"test.png\", id:\"png\"},\n\t *          {src:\"test.jpg\", id:\"jpg\"},\n\t *          {src:\"test.mp3\", id:\"mp3\"}\n\t *      ]);\n\t *      queue.remove(\"png\"); // Single item by ID\n\t *      queue.remove(\"png\", \"test.jpg\"); // Items as arguments. Mixed id and src.\n\t *      queue.remove([\"test.png\", \"jpg\"]); // Items in an Array. Mixed id and src.\n\t *\n\t * @method remove\n\t * @param {String | Array} idsOrUrls* The id or ids to remove from this queue. You can pass an item, an array of\n\t * items, or multiple items as arguments.\n\t * @since 0.3.0\n\t */\n\tp.remove = function (idsOrUrls) {\n\t\tvar args = null;\n\n\t\tif (idsOrUrls && !(idsOrUrls instanceof Array)) {\n\t\t\targs = [idsOrUrls];\n\t\t} else if (idsOrUrls) {\n\t\t\targs = idsOrUrls;\n\t\t} else if (arguments.length > 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar itemsWereRemoved = false;\n\n\t\t// Destroy everything\n\t\tif (!args) {\n\t\t\tthis.close();\n\t\t\tfor (var n in this._loadItemsById) {\n\t\t\t\tthis._disposeItem(this._loadItemsById[n]);\n\t\t\t}\n\t\t\tthis.init(this.preferXHR, this._basePath);\n\n\t\t\t// Remove specific items\n\t\t} else {\n\t\t\twhile (args.length) {\n\t\t\t\tvar item = args.pop();\n\t\t\t\tvar r = this.getResult(item);\n\n\t\t\t\t//Remove from the main load Queue\n\t\t\t\tfor (i = this._loadQueue.length - 1; i >= 0; i--) {\n\t\t\t\t\tloadItem = this._loadQueue[i].getItem();\n\t\t\t\t\tif (loadItem.id == item || loadItem.src == item) {\n\t\t\t\t\t\tthis._loadQueue.splice(i, 1)[0].cancel();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//Remove from the backup queue\n\t\t\t\tfor (i = this._loadQueueBackup.length - 1; i >= 0; i--) {\n\t\t\t\t\tloadItem = this._loadQueueBackup[i].getItem();\n\t\t\t\t\tif (loadItem.id == item || loadItem.src == item) {\n\t\t\t\t\t\tthis._loadQueueBackup.splice(i, 1)[0].cancel();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (r) {\n\t\t\t\t\tthis._disposeItem(this.getItem(item));\n\t\t\t\t} else {\n\t\t\t\t\tfor (var i = this._currentLoads.length - 1; i >= 0; i--) {\n\t\t\t\t\t\tvar loadItem = this._currentLoads[i].getItem();\n\t\t\t\t\t\tif (loadItem.id == item || loadItem.src == item) {\n\t\t\t\t\t\t\tthis._currentLoads.splice(i, 1)[0].cancel();\n\t\t\t\t\t\t\titemsWereRemoved = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If this was called during a load, try to load the next item.\n\t\t\tif (itemsWereRemoved) {\n\t\t\t\tthis._loadNext();\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Stops all open loads, destroys any loaded items, and resets the queue, so all items can\n\t * be reloaded again by calling {{#crossLink \"AbstractLoader/load\"}}{{/crossLink}}. Items are not removed from the\n\t * queue. To remove items use the {{#crossLink \"LoadQueue/remove\"}}{{/crossLink}} or\n\t * {{#crossLink \"LoadQueue/removeAll\"}}{{/crossLink}} method.\n\t * @method reset\n\t * @since 0.3.0\n\t */\n\tp.reset = function () {\n\t\tthis.close();\n\t\tfor (var n in this._loadItemsById) {\n\t\t\tthis._disposeItem(this._loadItemsById[n]);\n\t\t}\n\n\t\t//Reset the queue to its start state\n\t\tvar a = [];\n\t\tfor (var i = 0, l = this._loadQueueBackup.length; i < l; i++) {\n\t\t\ta.push(this._loadQueueBackup[i].getItem());\n\t\t}\n\n\t\tthis.loadManifest(a, false);\n\t};\n\n\t/**\n\t * Register a plugin. Plugins can map to load types (sound, image, etc), or specific extensions (png, mp3, etc).\n\t * Currently, only one plugin can exist per type/extension.\n\t *\n\t * When a plugin is installed, a <code>getPreloadHandlers()</code> method will be called on it. For more information\n\t * on this method, check out the {{#crossLink \"SamplePlugin/getPreloadHandlers\"}}{{/crossLink}} method in the\n\t * {{#crossLink \"SamplePlugin\"}}{{/crossLink}} class.\n\t *\n\t * Before a file is loaded, a matching plugin has an opportunity to modify the load. If a `callback` is returned\n\t * from the {{#crossLink \"SamplePlugin/getPreloadHandlers\"}}{{/crossLink}} method, it will be invoked first, and its\n\t * result may cancel or modify the item. The callback method can also return a `completeHandler` to be fired when\n\t * the file is loaded, or a `tag` object, which will manage the actual download. For more information on these\n\t * methods, check out the {{#crossLink \"SamplePlugin/preloadHandler\"}}{{/crossLink}} and {{#crossLink \"SamplePlugin/fileLoadHandler\"}}{{/crossLink}}\n\t * methods on the {{#crossLink \"SamplePlugin\"}}{{/crossLink}}.\n\t *\n\t * @method installPlugin\n\t * @param {Function} plugin The plugin class to install.\n\t */\n\tp.installPlugin = function (plugin) {\n\t\tif (plugin == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (plugin.getPreloadHandlers != null) {\n\t\t\tthis._plugins.push(plugin);\n\t\t\tvar map = plugin.getPreloadHandlers();\n\t\t\tmap.scope = plugin;\n\n\t\t\tif (map.types != null) {\n\t\t\t\tfor (var i = 0, l = map.types.length; i < l; i++) {\n\t\t\t\t\tthis._typeCallbacks[map.types[i]] = map;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (map.extensions != null) {\n\t\t\t\tfor (i = 0, l = map.extensions.length; i < l; i++) {\n\t\t\t\t\tthis._extensionCallbacks[map.extensions[i]] = map;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Set the maximum number of concurrent connections. Note that browsers and servers may have a built-in maximum\n\t * number of open connections, so any additional connections may remain in a pending state until the browser\n\t * opens the connection. When loading scripts using tags, and when {{#crossLink \"LoadQueue/maintainScriptOrder:property\"}}{{/crossLink}}\n\t * is `true`, only one script is loaded at a time due to browser limitations.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      var queue = new createjs.LoadQueue();\n\t *      queue.setMaxConnections(10); // Allow 10 concurrent loads\n\t *\n\t * @method setMaxConnections\n\t * @param {Number} value The number of concurrent loads to allow. By default, only a single connection per LoadQueue\n\t * is open at any time.\n\t */\n\tp.setMaxConnections = function (value) {\n\t\tthis._maxConnections = value;\n\t\tif (!this._paused && this._loadQueue.length > 0) {\n\t\t\tthis._loadNext();\n\t\t}\n\t};\n\n\t/**\n\t * Load a single file. To add multiple files at once, use the {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}\n\t * method.\n\t *\n\t * Files are always appended to the current queue, so this method can be used multiple times to add files.\n\t * To clear the queue first, use the {{#crossLink \"AbstractLoader/close\"}}{{/crossLink}} method.\n\t * @method loadFile\n\t * @param {LoadItem|Object|String} file The file object or path to load. A file can be either\n\t * <ul>\n\t *     <li>A {{#crossLink \"LoadItem\"}}{{/crossLink}} instance</li>\n\t *     <li>An object containing properties defined by {{#crossLink \"LoadItem\"}}{{/crossLink}}</li>\n\t *     <li>OR A string path to a resource. Note that this kind of load item will be converted to a {{#crossLink \"LoadItem\"}}{{/crossLink}}\n\t *     in the background.</li>\n\t * </ul>\n\t * @param {Boolean} [loadNow=true] Kick off an immediate load (true) or wait for a load call (false). The default\n\t * value is true. If the queue is paused using {{#crossLink \"LoadQueue/setPaused\"}}{{/crossLink}}, and the value is\n\t * `true`, the queue will resume automatically.\n\t * @param {String} [basePath] A base path that will be prepended to each file. The basePath argument overrides the\n\t * path specified in the constructor. Note that if you load a manifest using a file of type {{#crossLink \"AbstractLoader/MANIFEST:property\"}}{{/crossLink}},\n\t * its files will <strong>NOT</strong> use the basePath parameter. <strong>The basePath parameter is deprecated.</strong>\n\t * This parameter will be removed in a future version. Please either use the `basePath` parameter in the LoadQueue\n\t * constructor, or a `path` property in a manifest definition.\n\t */\n\tp.loadFile = function (file, loadNow, basePath) {\n\t\tif (file == null) {\n\t\t\tvar event = new createjs.ErrorEvent(\"PRELOAD_NO_FILE\");\n\t\t\tthis._sendError(event);\n\t\t\treturn;\n\t\t}\n\t\tthis._addItem(file, null, basePath);\n\n\t\tif (loadNow !== false) {\n\t\t\tthis.setPaused(false);\n\t\t} else {\n\t\t\tthis.setPaused(true);\n\t\t}\n\t};\n\n\t/**\n\t * Load an array of files. To load a single file, use the {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}} method.\n\t * The files in the manifest are requested in the same order, but may complete in a different order if the max\n\t * connections are set above 1 using {{#crossLink \"LoadQueue/setMaxConnections\"}}{{/crossLink}}. Scripts will load\n\t * in the right order as long as {{#crossLink \"LoadQueue/maintainScriptOrder\"}}{{/crossLink}} is true (which is\n\t * default).\n\t *\n\t * Files are always appended to the current queue, so this method can be used multiple times to add files.\n\t * To clear the queue first, use the {{#crossLink \"AbstractLoader/close\"}}{{/crossLink}} method.\n\t * @method loadManifest\n\t * @param {Array|String|Object} manifest An list of files to load. The loadManifest call supports four types of\n\t * manifests:\n\t * <ol>\n\t *     <li>A string path, which points to a manifest file, which is a JSON file that contains a \"manifest\" property,\n\t *     which defines the list of files to load, and can optionally contain a \"path\" property, which will be\n\t *     prepended to each file in the list.</li>\n\t *     <li>An object which defines a \"src\", which is a JSON or JSONP file. A \"callback\" can be defined for JSONP\n\t *     file. The JSON/JSONP file should contain a \"manifest\" property, which defines the list of files to load,\n\t *     and can optionally contain a \"path\" property, which will be prepended to each file in the list.</li>\n\t *     <li>An object which contains a \"manifest\" property, which defines the list of files to load, and can\n\t *     optionally contain a \"path\" property, which will be prepended to each file in the list.</li>\n\t *     <li>An Array of files to load.</li>\n\t * </ol>\n\t *\n\t * Each \"file\" in a manifest can be either:\n\t * <ul>\n\t *     <li>A {{#crossLink \"LoadItem\"}}{{/crossLink}} instance</li>\n\t *     <li>An object containing properties defined by {{#crossLink \"LoadItem\"}}{{/crossLink}}</li>\n\t *     <li>OR A string path to a resource. Note that this kind of load item will be converted to a {{#crossLink \"LoadItem\"}}{{/crossLink}}\n\t *     in the background.</li>\n\t * </ul>\n\t *\n\t * @param {Boolean} [loadNow=true] Kick off an immediate load (true) or wait for a load call (false). The default\n\t * value is true. If the queue is paused using {{#crossLink \"LoadQueue/setPaused\"}}{{/crossLink}} and this value is\n\t * `true`, the queue will resume automatically.\n\t * @param {String} [basePath] A base path that will be prepended to each file. The basePath argument overrides the\n\t * path specified in the constructor. Note that if you load a manifest using a file of type {{#crossLink \"LoadQueue/MANIFEST:property\"}}{{/crossLink}},\n\t * its files will <strong>NOT</strong> use the basePath parameter. <strong>The basePath parameter is deprecated.</strong>\n\t * This parameter will be removed in a future version. Please either use the `basePath` parameter in the LoadQueue\n\t * constructor, or a `path` property in a manifest definition.\n\t */\n\tp.loadManifest = function (manifest, loadNow, basePath) {\n\t\tvar fileList = null;\n\t\tvar path = null;\n\n\t\t// Array-based list of items\n\t\tif (manifest instanceof Array) {\n\t\t\tif (manifest.length == 0) {\n\t\t\t\tvar event = new createjs.ErrorEvent(\"PRELOAD_MANIFEST_EMPTY\");\n\t\t\t\tthis._sendError(event);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfileList = manifest;\n\n\t\t\t// String-based. Only file manifests can be specified this way. Any other types will cause an error when loaded.\n\t\t} else if (typeof(manifest) === \"string\") {\n\t\t\tfileList = [\n\t\t\t\t{\n\t\t\t\t\tsrc: manifest,\n\t\t\t\t\ttype: s.MANIFEST\n\t\t\t\t}\n\t\t\t];\n\n\t\t} else if (typeof(manifest) == \"object\") {\n\n\t\t\t// An object that defines a manifest path\n\t\t\tif (manifest.src !== undefined) {\n\t\t\t\tif (manifest.type == null) {\n\t\t\t\t\tmanifest.type = s.MANIFEST;\n\t\t\t\t} else if (manifest.type != s.MANIFEST) {\n\t\t\t\t\tvar event = new createjs.ErrorEvent(\"PRELOAD_MANIFEST_TYPE\");\n\t\t\t\t\tthis._sendError(event);\n\t\t\t\t}\n\t\t\t\tfileList = [manifest];\n\n\t\t\t\t// An object that defines a manifest\n\t\t\t} else if (manifest.manifest !== undefined) {\n\t\t\t\tfileList = manifest.manifest;\n\t\t\t\tpath = manifest.path;\n\t\t\t}\n\n\t\t\t// Unsupported. This will throw an error.\n\t\t} else {\n\t\t\tvar event = new createjs.ErrorEvent(\"PRELOAD_MANIFEST_NULL\");\n\t\t\tthis._sendError(event);\n\t\t\treturn;\n\t\t}\n\n\t\tfor (var i = 0, l = fileList.length; i < l; i++) {\n\t\t\tthis._addItem(fileList[i], path, basePath);\n\t\t}\n\n\t\tif (loadNow !== false) {\n\t\t\tthis.setPaused(false);\n\t\t} else {\n\t\t\tthis.setPaused(true);\n\t\t}\n\n\t};\n\n\t/**\n\t * Start a LoadQueue that was created, but not automatically started.\n\t * @method load\n\t */\n\tp.load = function () {\n\t\tthis.setPaused(false);\n\t};\n\n\t/**\n\t * Look up a {{#crossLink \"LoadItem\"}}{{/crossLink}} using either the \"id\" or \"src\" that was specified when loading it. Note that if no \"id\" was\n\t * supplied with the load item, the ID will be the \"src\", including a `path` property defined by a manifest. The\n\t * `basePath` will not be part of the ID.\n\t * @method getItem\n\t * @param {String} value The <code>id</code> or <code>src</code> of the load item.\n\t * @return {Object} The load item that was initially requested using {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}}\n\t * or {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}. This object is also returned via the {{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}}\n\t * event as the `item` parameter.\n\t */\n\tp.getItem = function (value) {\n\t\treturn this._loadItemsById[value] || this._loadItemsBySrc[value];\n\t};\n\n\t/**\n\t * Look up a loaded result using either the \"id\" or \"src\" that was specified when loading it. Note that if no \"id\"\n\t * was supplied with the load item, the ID will be the \"src\", including a `path` property defined by a manifest. The\n\t * `basePath` will not be part of the ID.\n\t * @method getResult\n\t * @param {String} value The <code>id</code> or <code>src</code> of the load item.\n\t * @param {Boolean} [rawResult=false] Return a raw result instead of a formatted result. This applies to content\n\t * loaded via XHR such as scripts, XML, CSS, and Images. If there is no raw result, the formatted result will be\n\t * returned instead.\n\t * @return {Object} A result object containing the content that was loaded, such as:\n\t * <ul>\n\t *      <li>An image tag (&lt;image /&gt;) for images</li>\n\t *      <li>A script tag for JavaScript (&lt;script /&gt;). Note that scripts are automatically added to the HTML\n\t *      DOM.</li>\n\t *      <li>A style tag for CSS (&lt;style /&gt; or &lt;link &gt;)</li>\n\t *      <li>Raw text for TEXT</li>\n\t *      <li>A formatted JavaScript object defined by JSON</li>\n\t *      <li>An XML document</li>\n\t *      <li>A binary arraybuffer loaded by XHR</li>\n\t *      <li>An audio tag (&lt;audio &gt;) for HTML audio. Note that it is recommended to use SoundJS APIs to play\n\t *      loaded audio. Specifically, audio loaded by Flash and WebAudio will return a loader object using this method\n\t *      which can not be used to play audio back.</li>\n\t * </ul>\n\t * This object is also returned via the {{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}} event as the 'item`\n\t * parameter. Note that if a raw result is requested, but not found, the result will be returned instead.\n\t */\n\tp.getResult = function (value, rawResult) {\n\t\tvar item = this._loadItemsById[value] || this._loadItemsBySrc[value];\n\t\tif (item == null) {\n\t\t\treturn null;\n\t\t}\n\t\tvar id = item.id;\n\t\tif (rawResult && this._loadedRawResults[id]) {\n\t\t\treturn this._loadedRawResults[id];\n\t\t}\n\t\treturn this._loadedResults[id];\n\t};\n\n\t/**\n\t * Generate an list of items loaded by this queue.\n\t * @method getItems\n\t * @param {Boolean} loaded Determines if only items that have been loaded should be returned. If false, in-progress\n\t * and failed load items will also be included.\n\t * @returns {Array} A list of objects that have been loaded. Each item includes the {{#crossLink \"LoadItem\"}}{{/crossLink}},\n\t * result, and rawResult.\n\t * @since 0.6.0\n\t */\n\tp.getItems = function (loaded) {\n\t\tvar arr = [];\n\t\tfor (var n in this._loadItemsById) {\n\t\t\tvar item = this._loadItemsById[n];\n\t\t\tvar result = this.getResult(n);\n\t\t\tif (loaded === true && result == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tarr.push({\n\t\t\t\titem: item,\n\t\t\t\tresult: result,\n\t\t\t\trawResult: this.getResult(n, true)\n\t\t\t});\n\t\t}\n\t\treturn arr;\n\t};\n\n\t/**\n\t * Pause or resume the current load. Active loads will not be cancelled, but the next items in the queue will not\n\t * be processed when active loads complete. LoadQueues are not paused by default.\n\t *\n\t * Note that if new items are added to the queue using {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}} or\n\t * {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}, a paused queue will be resumed, unless the `loadNow`\n\t * argument is `false`.\n\t * @method setPaused\n\t * @param {Boolean} value Whether the queue should be paused or not.\n\t */\n\tp.setPaused = function (value) {\n\t\tthis._paused = value;\n\t\tif (!this._paused) {\n\t\t\tthis._loadNext();\n\t\t}\n\t};\n\n\t/**\n\t * Close the active queue. Closing a queue completely empties the queue, and prevents any remaining items from\n\t * starting to download. Note that currently any active loads will remain open, and events may be processed.\n\t *\n\t * To stop and restart a queue, use the {{#crossLink \"LoadQueue/setPaused\"}}{{/crossLink}} method instead.\n\t * @method close\n\t */\n\tp.close = function () {\n\t\twhile (this._currentLoads.length) {\n\t\t\tthis._currentLoads.pop().cancel();\n\t\t}\n\t\tthis._scriptOrder.length = 0;\n\t\tthis._loadedScripts.length = 0;\n\t\tthis.loadStartWasDispatched = false;\n\t\tthis._itemCount = 0;\n\t\tthis._lastProgress = NaN;\n\t};\n\n// protected methods\n\t/**\n\t * Add an item to the queue. Items are formatted into a usable object containing all the properties necessary to\n\t * load the content. The load queue is populated with the loader instance that handles preloading, and not the load\n\t * item that was passed in by the user. To look up the load item by id or src, use the {{#crossLink \"LoadQueue.getItem\"}}{{/crossLink}}\n\t * method.\n\t * @method _addItem\n\t * @param {String|Object} value The item to add to the queue.\n\t * @param {String} [path] An optional path prepended to the `src`. The path will only be prepended if the src is\n\t * relative, and does not start with a protocol such as `http://`, or a path like `../`. If the LoadQueue was\n\t * provided a {{#crossLink \"_basePath\"}}{{/crossLink}}, then it will optionally be prepended after.\n\t * @param {String} [basePath] <strong>Deprecated</strong>An optional basePath passed into a {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}\n\t * or {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}} call. This parameter will be removed in a future tagged\n\t * version.\n\t * @private\n\t */\n\tp._addItem = function (value, path, basePath) {\n\t\tvar item = this._createLoadItem(value, path, basePath); // basePath and manifest path are added to the src.\n\t\tif (item == null) {\n\t\t\treturn;\n\t\t} // Sometimes plugins or types should be skipped.\n\t\tvar loader = this._createLoader(item);\n\t\tif (loader != null) {\n\t\t\tif (\"plugins\" in loader) {\n\t\t\t\tloader.plugins = this._plugins;\n\t\t\t}\n\t\t\titem._loader = loader;\n\t\t\tthis._loadQueue.push(loader);\n\t\t\tthis._loadQueueBackup.push(loader);\n\n\t\t\tthis._numItems++;\n\t\t\tthis._updateProgress();\n\n\t\t\t// Only worry about script order when using XHR to load scripts. Tags are only loading one at a time.\n\t\t\tif ((this.maintainScriptOrder\n\t\t\t\t\t&& item.type == createjs.LoadQueue.JAVASCRIPT\n\t\t\t\t\t\t//&& loader instanceof createjs.XHRLoader //NOTE: Have to track all JS files this way\n\t\t\t\t\t)\n\t\t\t\t\t|| item.maintainOrder === true) {\n\t\t\t\tthis._scriptOrder.push(item);\n\t\t\t\tthis._loadedScripts.push(null);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Create a refined {{#crossLink \"LoadItem\"}}{{/crossLink}}, which contains all the required properties. The type of\n\t * item is determined by browser support, requirements based on the file type, and developer settings. For example,\n\t * XHR is only used for file types that support it in new browsers.\n\t *\n\t * Before the item is returned, any plugins registered to handle the type or extension will be fired, which may\n\t * alter the load item.\n\t * @method _createLoadItem\n\t * @param {String | Object | HTMLAudioElement | HTMLImageElement} value The item that needs to be preloaded.\n\t * @param {String} [path] A path to prepend to the item's source. Sources beginning with http:// or similar will\n\t * not receive a path. Since PreloadJS 0.4.1, the src will be modified to include the `path` and {{#crossLink \"LoadQueue/_basePath:property\"}}{{/crossLink}}\n\t * when it is added.\n\t * @param {String} [basePath] <strong>Deprectated</strong> A base path to prepend to the items source in addition to\n\t * the path argument.\n\t * @return {Object} The loader instance that will be used.\n\t * @private\n\t */\n\tp._createLoadItem = function (value, path, basePath) {\n\t\tvar item = createjs.LoadItem.create(value);\n\t\tif (item == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tvar bp = \"\"; // Store the generated basePath\n\t\tvar useBasePath = basePath || this._basePath;\n\n\t\tif (item.src instanceof Object) {\n\t\t\tif (!item.type) {\n\t\t\t\treturn null;\n\t\t\t} // the the src is an object, type is required to pass off to plugin\n\t\t\tif (path) {\n\t\t\t\tbp = path;\n\t\t\t\tvar pathMatch = createjs.RequestUtils.parseURI(path);\n\t\t\t\t// Also append basePath\n\t\t\t\tif (useBasePath != null && !pathMatch.absolute && !pathMatch.relative) {\n\t\t\t\t\tbp = useBasePath + bp;\n\t\t\t\t}\n\t\t\t} else if (useBasePath != null) {\n\t\t\t\tbp = useBasePath;\n\t\t\t}\n\t\t} else {\n\t\t\t// Determine Extension, etc.\n\t\t\tvar match = createjs.RequestUtils.parseURI(item.src);\n\t\t\tif (match.extension) {\n\t\t\t\titem.ext = match.extension;\n\t\t\t}\n\t\t\tif (item.type == null) {\n\t\t\t\titem.type = createjs.RequestUtils.getTypeByExtension(item.ext);\n\t\t\t}\n\n\t\t\t// Inject path & basePath\n\t\t\tvar autoId = item.src;\n\t\t\tif (!match.absolute && !match.relative) {\n\t\t\t\tif (path) {\n\t\t\t\t\tbp = path;\n\t\t\t\t\tvar pathMatch = createjs.RequestUtils.parseURI(path);\n\t\t\t\t\tautoId = path + autoId;\n\t\t\t\t\t// Also append basePath\n\t\t\t\t\tif (useBasePath != null && !pathMatch.absolute && !pathMatch.relative) {\n\t\t\t\t\t\tbp = useBasePath + bp;\n\t\t\t\t\t}\n\t\t\t\t} else if (useBasePath != null) {\n\t\t\t\t\tbp = useBasePath;\n\t\t\t\t}\n\t\t\t}\n\t\t\titem.src = bp + item.src;\n\t\t}\n\t\titem.path = bp;\n\n\t\t// If there's no id, set one now.\n\t\tif (item.id === undefined || item.id === null || item.id === \"\") {\n\t\t\titem.id = autoId;\n\t\t}\n\n\t\t// Give plugins a chance to modify the loadItem:\n\t\tvar customHandler = this._typeCallbacks[item.type] || this._extensionCallbacks[item.ext];\n\t\tif (customHandler) {\n\t\t\t// Plugins are now passed both the full source, as well as a combined path+basePath (appropriately)\n\t\t\tvar result = customHandler.callback.call(customHandler.scope, item, this);\n\n\t\t\t// The plugin will handle the load, or has canceled it. Ignore it.\n\t\t\tif (result === false) {\n\t\t\t\treturn null;\n\n\t\t\t\t// Load as normal:\n\t\t\t} else if (result === true) {\n\t\t\t\t// Do Nothing\n\n\t\t\t\t// Result is a loader class:\n\t\t\t} else if (result != null) {\n\t\t\t\titem._loader = result;\n\t\t\t}\n\n\t\t\t// Update the extension in case the type changed:\n\t\t\tmatch = createjs.RequestUtils.parseURI(item.src);\n\t\t\tif (match.extension != null) {\n\t\t\t\titem.ext = match.extension;\n\t\t\t}\n\t\t}\n\n\t\t// Store the item for lookup. This also helps clean-up later.\n\t\tthis._loadItemsById[item.id] = item;\n\t\tthis._loadItemsBySrc[item.src] = item;\n\n\t\tif (item.crossOrigin == null) {\n\t\t\titem.crossOrigin = this._crossOrigin;\n\t\t}\n\n\t\treturn item;\n\t};\n\n\t/**\n\t * Create a loader for a load item.\n\t * @method _createLoader\n\t * @param {Object} item A formatted load item that can be used to generate a loader.\n\t * @return {AbstractLoader} A loader that can be used to load content.\n\t * @private\n\t */\n\tp._createLoader = function (item) {\n\t\tif (item._loader != null) { // A plugin already specified a loader\n\t\t\treturn item._loader;\n\t\t}\n\n\t\t// Initially, try and use the provided/supported XHR mode:\n\t\tvar preferXHR = this.preferXHR;\n\n\t\tfor (var i = 0; i < this._availableLoaders.length; i++) {\n\t\t\tvar loader = this._availableLoaders[i];\n\t\t\tif (loader && loader.canLoadItem(item)) {\n\t\t\t\treturn new loader(item, preferXHR);\n\t\t\t}\n\t\t}\n\n\t\t// TODO: Log error (requires createjs.log)\n\t\treturn null;\n\t};\n\n\t/**\n\t * Load the next item in the queue. If the queue is empty (all items have been loaded), then the complete event\n\t * is processed. The queue will \"fill up\" any empty slots, up to the max connection specified using\n\t * {{#crossLink \"LoadQueue.setMaxConnections\"}}{{/crossLink}} method. The only exception is scripts that are loaded\n\t * using tags, which have to be loaded one at a time to maintain load order.\n\t * @method _loadNext\n\t * @private\n\t */\n\tp._loadNext = function () {\n\t\tif (this._paused) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Only dispatch loadstart event when the first file is loaded.\n\t\tif (!this._loadStartWasDispatched) {\n\t\t\tthis._sendLoadStart();\n\t\t\tthis._loadStartWasDispatched = true;\n\t\t}\n\n\t\t// The queue has completed.\n\t\tif (this._numItems == this._numItemsLoaded) {\n\t\t\tthis.loaded = true;\n\t\t\tthis._sendComplete();\n\n\t\t\t// Load the next queue, if it has been defined.\n\t\t\tif (this.next && this.next.load) {\n\t\t\t\tthis.next.load();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.loaded = false;\n\t\t}\n\n\t\t// Must iterate forwards to load in the right order.\n\t\tfor (var i = 0; i < this._loadQueue.length; i++) {\n\t\t\tif (this._currentLoads.length >= this._maxConnections) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar loader = this._loadQueue[i];\n\n\t\t\t// Determine if we should be only loading one tag-script at a time:\n\t\t\t// Note: maintainOrder items don't do anything here because we can hold onto their loaded value\n\t\t\tif (!this._canStartLoad(loader)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis._loadQueue.splice(i, 1);\n\t\t\ti--;\n\t\t\tthis._loadItem(loader);\n\t\t}\n\t};\n\n\t/**\n\t * Begin loading an item. Event listeners are not added to the loaders until the load starts.\n\t * @method _loadItem\n\t * @param {AbstractLoader} loader The loader instance to start. Currently, this will be an XHRLoader or TagLoader.\n\t * @private\n\t */\n\tp._loadItem = function (loader) {\n\t\tloader.on(\"fileload\", this._handleFileLoad, this);\n\t\tloader.on(\"progress\", this._handleProgress, this);\n\t\tloader.on(\"complete\", this._handleFileComplete, this);\n\t\tloader.on(\"error\", this._handleError, this);\n\t\tloader.on(\"fileerror\", this._handleFileError, this);\n\t\tthis._currentLoads.push(loader);\n\t\tthis._sendFileStart(loader.getItem());\n\t\tloader.load();\n\t};\n\n\t/**\n\t * The callback that is fired when a loader loads a file. This enables loaders like {{#crossLink \"ManifestLoader\"}}{{/crossLink}}\n\t * to maintain internal queues, but for this queue to dispatch the {{#crossLink \"fileload:event\"}}{{/crossLink}}\n\t * events.\n\t * @param {Event} event The {{#crossLink \"AbstractLoader/fileload:event\"}}{{/crossLink}} event from the loader.\n\t * @private\n\t * @since 0.6.0\n\t */\n\tp._handleFileLoad = function (event) {\n\t\tevent.target = null;\n\t\tthis.dispatchEvent(event);\n\t};\n\n\t/**\n\t * The callback that is fired when a loader encounters an error from an internal file load operation. This enables\n\t * loaders like M\n\t * @param event\n\t * @private\n\t */\n\tp._handleFileError = function (event) {\n\t\tvar newEvent = new createjs.ErrorEvent(\"FILE_LOAD_ERROR\", null, event.item);\n\t\tthis._sendError(newEvent);\n\t};\n\n\t/**\n\t * The callback that is fired when a loader encounters an error. The queue will continue loading unless {{#crossLink \"LoadQueue/stopOnError:property\"}}{{/crossLink}}\n\t * is set to `true`.\n\t * @method _handleError\n\t * @param {ErrorEvent} event The error event, containing relevant error information.\n\t * @private\n\t */\n\tp._handleError = function (event) {\n\t\tvar loader = event.target;\n\t\tthis._numItemsLoaded++;\n\n\t\tthis._finishOrderedItem(loader, true);\n\t\tthis._updateProgress();\n\n\t\tvar newEvent = new createjs.ErrorEvent(\"FILE_LOAD_ERROR\", null, loader.getItem());\n\t\t// TODO: Propagate actual error message.\n\n\t\tthis._sendError(newEvent);\n\n\t\tif (!this.stopOnError) {\n\t\t\tthis._removeLoadItem(loader);\n\t\t\tthis._cleanLoadItem(loader);\n\t\t\tthis._loadNext();\n\t\t} else {\n\t\t\tthis.setPaused(true);\n\t\t}\n\t};\n\n\t/**\n\t * An item has finished loading. We can assume that it is totally loaded, has been parsed for immediate use, and\n\t * is available as the \"result\" property on the load item. The raw text result for a parsed item (such as JSON, XML,\n\t * CSS, JavaScript, etc) is available as the \"rawResult\" property, and can also be looked up using {{#crossLink \"LoadQueue/getResult\"}}{{/crossLink}}.\n\t * @method _handleFileComplete\n\t * @param {Event} event The event object from the loader.\n\t * @private\n\t */\n\tp._handleFileComplete = function (event) {\n\t\tvar loader = event.target;\n\t\tvar item = loader.getItem();\n\n\t\tvar result = loader.getResult();\n\t\tthis._loadedResults[item.id] = result;\n\t\tvar rawResult = loader.getResult(true);\n\t\tif (rawResult != null && rawResult !== result) {\n\t\t\tthis._loadedRawResults[item.id] = rawResult;\n\t\t}\n\n\t\tthis._saveLoadedItems(loader);\n\n\t\t// Remove the load item\n\t\tthis._removeLoadItem(loader);\n\n\t\tif (!this._finishOrderedItem(loader)) {\n\t\t\t// The item was NOT managed, so process it now\n\t\t\tthis._processFinishedLoad(item, loader);\n\t\t}\n\n\t\t// Clean up the load item\n\t\tthis._cleanLoadItem(loader);\n\t};\n\n\t/**\n\t * Some loaders might load additional content, other than the item they were passed (such as {{#crossLink \"ManifestLoader\"}}{{/crossLink}}).\n\t * Any items exposed by the loader using {{#crossLink \"AbstractLoader/getLoadItems\"}}{{/crossLink}} are added to the\n\t * LoadQueue's look-ups, including {{#crossLink \"getItem\"}}{{/crossLink}} and {{#crossLink \"getResult\"}}{{/crossLink}}\n\t * methods.\n\t * @method _saveLoadedItems\n\t * @param {AbstractLoader} loader\n\t * @protected\n\t * @since 0.6.0\n\t */\n\tp._saveLoadedItems = function (loader) {\n\t\t// TODO: Not sure how to handle this. Would be nice to expose the items.\n\t\t// Loaders may load sub-items. This adds them to this queue\n\t\tvar list = loader.getLoadedItems();\n\t\tif (list === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\tvar item = list[i].item;\n\n\t\t\t// Store item lookups\n\t\t\tthis._loadItemsBySrc[item.src] = item;\n\t\t\tthis._loadItemsById[item.id] = item;\n\n\t\t\t// Store loaded content\n\t\t\tthis._loadedResults[item.id] = list[i].result;\n\t\t\tthis._loadedRawResults[item.id] = list[i].rawResult;\n\t\t}\n\t};\n\n\t/**\n\t * Flag an item as finished. If the item's order is being managed, then ensure that it is allowed to finish, and if\n\t * so, trigger prior items to trigger as well.\n\t * @method _finishOrderedItem\n\t * @param {AbstractLoader} loader\n\t * @param {Boolean} loadFailed\n\t * @return {Boolean} If the item's order is being managed. This allows the caller to take an alternate\n\t * behaviour if it is.\n\t * @private\n\t */\n\tp._finishOrderedItem = function (loader, loadFailed) {\n\t\tvar item = loader.getItem();\n\n\t\tif ((this.maintainScriptOrder && item.type == createjs.LoadQueue.JAVASCRIPT)\n\t\t\t\t|| item.maintainOrder) {\n\n\t\t\t//TODO: Evaluate removal of the _currentlyLoadingScript\n\t\t\tif (loader instanceof createjs.JavaScriptLoader) {\n\t\t\t\tthis._currentlyLoadingScript = false;\n\t\t\t}\n\n\t\t\tvar index = createjs.indexOf(this._scriptOrder, item);\n\t\t\tif (index == -1) {\n\t\t\t\treturn false;\n\t\t\t} // This loader no longer exists\n\t\t\tthis._loadedScripts[index] = (loadFailed === true) ? true : item;\n\n\t\t\tthis._checkScriptLoadOrder();\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t};\n\n\t/**\n\t * Ensure the scripts load and dispatch in the correct order. When using XHR, scripts are stored in an array in the\n\t * order they were added, but with a \"null\" value. When they are completed, the value is set to the load item,\n\t * and then when they are processed and dispatched, the value is set to `true`. This method simply\n\t * iterates the array, and ensures that any loaded items that are not preceded by a `null` value are\n\t * dispatched.\n\t * @method _checkScriptLoadOrder\n\t * @private\n\t */\n\tp._checkScriptLoadOrder = function () {\n\t\tvar l = this._loadedScripts.length;\n\n\t\tfor (var i = 0; i < l; i++) {\n\t\t\tvar item = this._loadedScripts[i];\n\t\t\tif (item === null) {\n\t\t\t\tbreak;\n\t\t\t} // This is still loading. Do not process further.\n\t\t\tif (item === true) {\n\t\t\t\tcontinue;\n\t\t\t} // This has completed, and been processed. Move on.\n\n\t\t\tvar loadItem = this._loadedResults[item.id];\n\t\t\tif (item.type == createjs.LoadQueue.JAVASCRIPT) {\n\t\t\t\t// Append script tags to the head automatically.\n\t\t\t\tcreatejs.DomUtils.appendToHead(loadItem);\n\t\t\t}\n\n\t\t\tvar loader = item._loader;\n\t\t\tthis._processFinishedLoad(item, loader);\n\t\t\tthis._loadedScripts[i] = true;\n\t\t}\n\t};\n\n\t/**\n\t * A file has completed loading, and the LoadQueue can move on. This triggers the complete event, and kick-starts\n\t * the next item.\n\t * @method _processFinishedLoad\n\t * @param {LoadItem|Object} item\n\t * @param {AbstractLoader} loader\n\t * @protected\n\t */\n\tp._processFinishedLoad = function (item, loader) {\n\t\tthis._numItemsLoaded++;\n\n\t\t// Since LoadQueue needs maintain order, we can't append scripts in the loader.\n\t\t// So we do it here instead. Or in _checkScriptLoadOrder();\n\t\tif (!this.maintainScriptOrder && item.type == createjs.LoadQueue.JAVASCRIPT) {\n\t\t\tcreatejs.DomUtils.appendToHead(item.result);\n\t\t}\n\n\t\tthis._updateProgress();\n\t\tthis._sendFileComplete(item, loader);\n\t\tthis._loadNext();\n\t};\n\n\t/**\n\t * Ensure items with `maintainOrder=true` that are before the specified item have loaded. This only applies to\n\t * JavaScript items that are being loaded with a TagLoader, since they have to be loaded and completed <strong>before</strong>\n\t * the script can even be started, since it exist in the DOM while loading.\n\t * @method _canStartLoad\n\t * @param {AbstractLoader} loader The loader for the item\n\t * @return {Boolean} Whether the item can start a load or not.\n\t * @private\n\t */\n\tp._canStartLoad = function (loader) {\n\t\tif (!this.maintainScriptOrder || loader.preferXHR) {\n\t\t\treturn true;\n\t\t}\n\t\tvar item = loader.getItem();\n\t\tif (item.type != createjs.LoadQueue.JAVASCRIPT) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this._currentlyLoadingScript) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar index = this._scriptOrder.indexOf(item);\n\t\tvar i = 0;\n\t\twhile (i < index) {\n\t\t\tvar checkItem = this._loadedScripts[i];\n\t\t\tif (checkItem == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tthis._currentlyLoadingScript = true;\n\t\treturn true;\n\t};\n\n\t/**\n\t * A load item is completed or was canceled, and needs to be removed from the LoadQueue.\n\t * @method _removeLoadItem\n\t * @param {AbstractLoader} loader A loader instance to remove.\n\t * @private\n\t */\n\tp._removeLoadItem = function (loader) {\n\t\tvar l = this._currentLoads.length;\n\t\tfor (var i = 0; i < l; i++) {\n\t\t\tif (this._currentLoads[i] == loader) {\n\t\t\t\tthis._currentLoads.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Remove unneeded references from a loader.\n\t *\n\t * @param loader\n\t * @private\n\t */\n\tp._cleanLoadItem = function(loader) {\n\t\tvar item = loader.getItem();\n\t\tif (item) {\n\t\t\tdelete item._loader;\n\t\t}\n\t}\n\n\t/**\n\t * An item has dispatched progress. Propagate that progress, and update the LoadQueue's overall progress.\n\t * @method _handleProgress\n\t * @param {ProgressEvent} event The progress event from the item.\n\t * @private\n\t */\n\tp._handleProgress = function (event) {\n\t\tvar loader = event.target;\n\t\tthis._sendFileProgress(loader.getItem(), loader.progress);\n\t\tthis._updateProgress();\n\t};\n\n\t/**\n\t * Overall progress has changed, so determine the new progress amount and dispatch it. This changes any time an\n\t * item dispatches progress or completes. Note that since we don't always know the actual filesize of items before\n\t * they are loaded. In this case, we define a \"slot\" for each item (1 item in 10 would get 10%), and then append\n\t * loaded progress on top of the already-loaded items.\n\t *\n\t * For example, if 5/10 items have loaded, and item 6 is 20% loaded, the total progress would be:\n\t * <ul>\n\t *      <li>5/10 of the items in the queue (50%)</li>\n\t *      <li>plus 20% of item 6's slot (2%)</li>\n\t *      <li>equals 52%</li>\n\t * </ul>\n\t * @method _updateProgress\n\t * @private\n\t */\n\tp._updateProgress = function () {\n\t\tvar loaded = this._numItemsLoaded / this._numItems; // Fully Loaded Progress\n\t\tvar remaining = this._numItems - this._numItemsLoaded;\n\t\tif (remaining > 0) {\n\t\t\tvar chunk = 0;\n\t\t\tfor (var i = 0, l = this._currentLoads.length; i < l; i++) {\n\t\t\t\tchunk += this._currentLoads[i].progress;\n\t\t\t}\n\t\t\tloaded += (chunk / remaining) * (remaining / this._numItems);\n\t\t}\n\n\t\tif (this._lastProgress != loaded) {\n\t\t\tthis._sendProgress(loaded);\n\t\t\tthis._lastProgress = loaded;\n\t\t}\n\t};\n\n\t/**\n\t * Clean out item results, to free them from memory. Mainly, the loaded item and results are cleared from internal\n\t * hashes.\n\t * @method _disposeItem\n\t * @param {LoadItem|Object} item The item that was passed in for preloading.\n\t * @private\n\t */\n\tp._disposeItem = function (item) {\n\t\tdelete this._loadedResults[item.id];\n\t\tdelete this._loadedRawResults[item.id];\n\t\tdelete this._loadItemsById[item.id];\n\t\tdelete this._loadItemsBySrc[item.src];\n\t};\n\n\t/**\n\t * Dispatch a \"fileprogress\" {{#crossLink \"Event\"}}{{/crossLink}}. Please see the LoadQueue {{#crossLink \"LoadQueue/fileprogress:event\"}}{{/crossLink}}\n\t * event for details on the event payload.\n\t * @method _sendFileProgress\n\t * @param {LoadItem|Object} item The item that is being loaded.\n\t * @param {Number} progress The amount the item has been loaded (between 0 and 1).\n\t * @protected\n\t */\n\tp._sendFileProgress = function (item, progress) {\n\t\tif (this._isCanceled() || this._paused) {\n\t\t\treturn;\n\t\t}\n\t\tif (!this.hasEventListener(\"fileprogress\")) {\n\t\t\treturn;\n\t\t}\n\n\t\t//LM: Rework ProgressEvent to support this?\n\t\tvar event = new createjs.Event(\"fileprogress\");\n\t\tevent.progress = progress;\n\t\tevent.loaded = progress;\n\t\tevent.total = 1;\n\t\tevent.item = item;\n\n\t\tthis.dispatchEvent(event);\n\t};\n\n\t/**\n\t * Dispatch a fileload {{#crossLink \"Event\"}}{{/crossLink}}. Please see the {{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}} event for\n\t * details on the event payload.\n\t * @method _sendFileComplete\n\t * @param {LoadItemObject} item The item that is being loaded.\n\t * @param {AbstractLoader} loader\n\t * @protected\n\t */\n\tp._sendFileComplete = function (item, loader) {\n\t\tif (this._isCanceled() || this._paused) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar event = new createjs.Event(\"fileload\");\n\t\tevent.loader = loader;\n\t\tevent.item = item;\n\t\tevent.result = this._loadedResults[item.id];\n\t\tevent.rawResult = this._loadedRawResults[item.id];\n\n\t\t// This calls a handler specified on the actual load item. Currently, the SoundJS plugin uses this.\n\t\tif (item.completeHandler) {\n\t\t\titem.completeHandler(event);\n\t\t}\n\n\t\tthis.hasEventListener(\"fileload\") && this.dispatchEvent(event);\n\t};\n\n\t/**\n\t * Dispatch a filestart {{#crossLink \"Event\"}}{{/crossLink}} immediately before a file starts to load. Please see\n\t * the {{#crossLink \"LoadQueue/filestart:event\"}}{{/crossLink}} event for details on the event payload.\n\t * @method _sendFileStart\n\t * @param {LoadItem|Object} item The item that is being loaded.\n\t * @protected\n\t */\n\tp._sendFileStart = function (item) {\n\t\tvar event = new createjs.Event(\"filestart\");\n\t\tevent.item = item;\n\t\tthis.hasEventListener(\"filestart\") && this.dispatchEvent(event);\n\t};\n\n\tp.toString = function () {\n\t\treturn \"[PreloadJS LoadQueue]\";\n\t};\n\n\tcreatejs.LoadQueue = createjs.promote(LoadQueue, \"AbstractLoader\");\n}());\n\n//##############################################################################\n// TextLoader.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * A loader for Text files.\n\t * @class TextLoader\n\t * @param {LoadItem|Object} loadItem\n\t * @extends AbstractLoader\n\t * @constructor\n\t */\n\tfunction TextLoader(loadItem) {\n\t\tthis.AbstractLoader_constructor(loadItem, true, createjs.AbstractLoader.TEXT);\n\t};\n\n\tvar p = createjs.extend(TextLoader, createjs.AbstractLoader);\n\tvar s = TextLoader;\n\n\t// static methods\n\t/**\n\t * Determines if the loader can load a specific item. This loader loads items that are of type {{#crossLink \"AbstractLoader/TEXT:property\"}}{{/crossLink}},\n\t * but is also the default loader if a file type can not be determined.\n\t * @method canLoadItem\n\t * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n\t * @returns {Boolean} Whether the loader can load the item.\n\t * @static\n\t */\n\ts.canLoadItem = function (item) {\n\t\treturn item.type == createjs.AbstractLoader.TEXT;\n\t};\n\n\tcreatejs.TextLoader = createjs.promote(TextLoader, \"AbstractLoader\");\n\n}());\n\n//##############################################################################\n// BinaryLoader.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * A loader for binary files. This is useful for loading web audio, or content that requires an ArrayBuffer.\n\t * @class BinaryLoader\n\t * @param {LoadItem|Object} loadItem\n\t * @extends AbstractLoader\n\t * @constructor\n\t */\n\tfunction BinaryLoader(loadItem) {\n\t\tthis.AbstractLoader_constructor(loadItem, true, createjs.AbstractLoader.BINARY);\n\t\tthis.on(\"initialize\", this._updateXHR, this);\n\t};\n\n\tvar p = createjs.extend(BinaryLoader, createjs.AbstractLoader);\n\tvar s = BinaryLoader;\n\n\t// static methods\n\t/**\n\t * Determines if the loader can load a specific item. This loader can only load items that are of type\n\t * {{#crossLink \"AbstractLoader/BINARY:property\"}}{{/crossLink}}\n\t * @method canLoadItem\n\t * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n\t * @returns {Boolean} Whether the loader can load the item.\n\t * @static\n\t */\n\ts.canLoadItem = function (item) {\n\t\treturn item.type == createjs.AbstractLoader.BINARY;\n\t};\n\n\t// private methods\n\t/**\n\t * Before the item loads, set the response type to \"arraybuffer\"\n\t * @property _updateXHR\n\t * @param {Event} event\n\t * @private\n\t */\n\tp._updateXHR = function (event) {\n\t\tevent.loader.setResponseType(\"arraybuffer\");\n\t};\n\n\tcreatejs.BinaryLoader = createjs.promote(BinaryLoader, \"AbstractLoader\");\n\n}());\n\n//##############################################################################\n// CSSLoader.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * A loader for CSS files.\n\t * @class CSSLoader\n\t * @param {LoadItem|Object} loadItem\n\t * @param {Boolean} preferXHR\n\t * @extends AbstractLoader\n\t * @constructor\n\t */\n\tfunction CSSLoader(loadItem, preferXHR) {\n\t\tthis.AbstractLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.CSS);\n\n\t\t// public properties\n\t\tthis.resultFormatter = this._formatResult;\n\n\t\t// protected properties\n\t\tthis._tagSrcAttribute = \"href\";\n\n\t\tif (preferXHR) {\n\t\t\tthis._tag = document.createElement(\"style\");\n\t\t} else {\n\t\t\tthis._tag = document.createElement(\"link\");\n\t\t}\n\n\t\tthis._tag.rel = \"stylesheet\";\n\t\tthis._tag.type = \"text/css\";\n\t};\n\n\tvar p = createjs.extend(CSSLoader, createjs.AbstractLoader);\n\tvar s = CSSLoader;\n\n\t// static methods\n\t/**\n\t * Determines if the loader can load a specific item. This loader can only load items that are of type\n\t * {{#crossLink \"AbstractLoader/CSS:property\"}}{{/crossLink}}.\n\t * @method canLoadItem\n\t * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n\t * @returns {Boolean} Whether the loader can load the item.\n\t * @static\n\t */\n\ts.canLoadItem = function (item) {\n\t\treturn item.type == createjs.AbstractLoader.CSS;\n\t};\n\n\t// protected methods\n\t/**\n\t * The result formatter for CSS files.\n\t * @method _formatResult\n\t * @param {AbstractLoader} loader\n\t * @returns {HTMLLinkElement|HTMLStyleElement}\n\t * @private\n\t */\n\tp._formatResult = function (loader) {\n\t\tif (this._preferXHR) {\n\t\t\tvar tag = loader.getTag();\n\n\t\t\tif (tag.styleSheet) { // IE\n\t\t\t\ttag.styleSheet.cssText = loader.getResult(true);\n\t\t\t} else {\n\t\t\t\tvar textNode = document.createTextNode(loader.getResult(true));\n\t\t\t\ttag.appendChild(textNode);\n\t\t\t}\n\t\t} else {\n\t\t\ttag = this._tag;\n\t\t}\n\n\t\tcreatejs.DomUtils.appendToHead(tag);\n\n\t\treturn tag;\n\t};\n\n\tcreatejs.CSSLoader = createjs.promote(CSSLoader, \"AbstractLoader\");\n\n}());\n\n//##############################################################################\n// ImageLoader.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * A loader for image files.\n\t * @class ImageLoader\n\t * @param {LoadItem|Object} loadItem\n\t * @param {Boolean} preferXHR\n\t * @extends AbstractLoader\n\t * @constructor\n\t */\n\tfunction ImageLoader (loadItem, preferXHR) {\n\t\tthis.AbstractLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.IMAGE);\n\n\t\t// public properties\n\t\tthis.resultFormatter = this._formatResult;\n\n\t\t// protected properties\n\t\tthis._tagSrcAttribute = \"src\";\n\n\t\t// Check if the preload item is already a tag.\n\t\tif (createjs.RequestUtils.isImageTag(loadItem)) {\n\t\t\tthis._tag = loadItem;\n\t\t} else if (createjs.RequestUtils.isImageTag(loadItem.src)) {\n\t\t\tthis._tag = loadItem.src;\n\t\t} else if (createjs.RequestUtils.isImageTag(loadItem.tag)) {\n\t\t\tthis._tag = loadItem.tag;\n\t\t}\n\n\t\tif (this._tag != null) {\n\t\t\tthis._preferXHR = false;\n\t\t} else {\n\t\t\tthis._tag = document.createElement(\"img\");\n\t\t}\n\n\t\tthis.on(\"initialize\", this._updateXHR, this);\n\t};\n\n\tvar p = createjs.extend(ImageLoader, createjs.AbstractLoader);\n\tvar s = ImageLoader;\n\n\t// static methods\n\t/**\n\t * Determines if the loader can load a specific item. This loader can only load items that are of type\n\t * {{#crossLink \"AbstractLoader/IMAGE:property\"}}{{/crossLink}}.\n\t * @method canLoadItem\n\t * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n\t * @returns {Boolean} Whether the loader can load the item.\n\t * @static\n\t */\n\ts.canLoadItem = function (item) {\n\t\treturn item.type == createjs.AbstractLoader.IMAGE;\n\t};\n\n\t// public methods\n\tp.load = function () {\n\t\tif (this._tag.src != \"\" && this._tag.complete) {\n\t\t\tthis._sendComplete();\n\t\t\treturn;\n\t\t}\n\n\t\tvar crossOrigin = this._item.crossOrigin;\n\t\tif (crossOrigin == true) { crossOrigin = \"Anonymous\"; }\n\t\tif (crossOrigin != null && !createjs.RequestUtils.isLocal(this._item.src)) {\n\t\t\tthis._tag.crossOrigin = crossOrigin;\n\t\t}\n\n\t\tthis.AbstractLoader_load();\n\t};\n\n\t// protected methods\n\t/**\n\t * Before the item loads, set its mimeType and responseType.\n\t * @property _updateXHR\n\t * @param {Event} event\n\t * @private\n\t */\n\tp._updateXHR = function (event) {\n\t\tevent.loader.mimeType = 'text/plain; charset=x-user-defined-binary';\n\n\t\t// Only exists for XHR\n\t\tif (event.loader.setResponseType) {\n\t\t\tevent.loader.setResponseType(\"blob\");\n\t\t}\n\t};\n\n\t/**\n\t * The result formatter for Image files.\n\t * @method _formatResult\n\t * @param {AbstractLoader} loader\n\t * @returns {HTMLImageElement}\n\t * @private\n\t */\n\tp._formatResult = function (loader) {\n\t\tvar _this = this;\n\t\treturn function (done) {\n\t\t\tvar tag = _this._tag;\n\t\t\tvar URL = window.URL || window.webkitURL;\n\n\t\t\tif (!_this._preferXHR) {\n\t\t\t\t//document.body.removeChild(tag);\n\t\t\t} else if (URL) {\n\t\t\t\tvar objURL = URL.createObjectURL(loader.getResult(true));\n\t\t\t\ttag.src = objURL;\n\t\t\t\ttag.onload = function () {\n\t\t\t\t\tURL.revokeObjectURL(_this.src);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttag.src = loader.getItem().src;\n\t\t\t}\n\n\t\t\tif (tag.complete) {\n\t\t\t\tdone(tag);\n\t\t\t} else {\n\t\t\t\ttag.onload = function () {\n\t\t\t\t\tdone(this);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t};\n\n\tcreatejs.ImageLoader = createjs.promote(ImageLoader, \"AbstractLoader\");\n\n}());\n\n//##############################################################################\n// JavaScriptLoader.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * A loader for JavaScript files.\n\t * @class JavaScriptLoader\n\t * @param {LoadItem|Object} loadItem\n\t * @param {Boolean} preferXHR\n\t * @extends AbstractLoader\n\t * @constructor\n\t */\n\tfunction JavaScriptLoader(loadItem, preferXHR) {\n\t\tthis.AbstractLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.JAVASCRIPT);\n\n\t\t// public properties\n\t\tthis.resultFormatter = this._formatResult;\n\n\t\t// protected properties\n\t\tthis._tagSrcAttribute = \"src\";\n\t\tthis.setTag(document.createElement(\"script\"));\n\t};\n\n\tvar p = createjs.extend(JavaScriptLoader, createjs.AbstractLoader);\n\tvar s = JavaScriptLoader;\n\n\t// static methods\n\t/**\n\t * Determines if the loader can load a specific item. This loader can only load items that are of type\n\t * {{#crossLink \"AbstractLoader/JAVASCRIPT:property\"}}{{/crossLink}}\n\t * @method canLoadItem\n\t * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n\t * @returns {Boolean} Whether the loader can load the item.\n\t * @static\n\t */\n\ts.canLoadItem = function (item) {\n\t\treturn item.type == createjs.AbstractLoader.JAVASCRIPT;\n\t};\n\n\t// protected methods\n\t/**\n\t * The result formatter for JavaScript files.\n\t * @method _formatResult\n\t * @param {AbstractLoader} loader\n\t * @returns {HTMLLinkElement|HTMLStyleElement}\n\t * @private\n\t */\n\tp._formatResult = function (loader) {\n\t\tvar tag = loader.getTag();\n\t\tif (this._preferXHR) {\n\t\t\ttag.text = loader.getResult(true);\n\t\t}\n\t\treturn tag;\n\t};\n\n\tcreatejs.JavaScriptLoader = createjs.promote(JavaScriptLoader, \"AbstractLoader\");\n\n}());\n\n//##############################################################################\n// JSONLoader.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * A loader for JSON files. To load JSON cross-domain, use JSONP and the {{#crossLink \"JSONPLoader\"}}{{/crossLink}}\n\t * instead. To load JSON-formatted manifests, use {{#crossLink \"ManifestLoader\"}}{{/crossLink}}, and to\n\t * load EaselJS SpriteSheets, use {{#crossLink \"SpriteSheetLoader\"}}{{/crossLink}}.\n\t * @class JSONLoader\n\t * @param {LoadItem|Object} loadItem\n\t * @extends AbstractLoader\n\t * @constructor\n\t */\n\tfunction JSONLoader(loadItem) {\n\t\tthis.AbstractLoader_constructor(loadItem, true, createjs.AbstractLoader.JSON);\n\n\t\t// public properties\n\t\tthis.resultFormatter = this._formatResult;\n\t};\n\n\tvar p = createjs.extend(JSONLoader, createjs.AbstractLoader);\n\tvar s = JSONLoader;\n\n\t// static methods\n\t/**\n\t * Determines if the loader can load a specific item. This loader can only load items that are of type\n\t * {{#crossLink \"AbstractLoader/JSON:property\"}}{{/crossLink}}.\n\t * @method canLoadItem\n\t * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n\t * @returns {Boolean} Whether the loader can load the item.\n\t * @static\n\t */\n\ts.canLoadItem = function (item) {\n\t\treturn item.type == createjs.AbstractLoader.JSON && !item._loadAsJSONP;\n\t};\n\n\t// protected methods\n\t/**\n\t * The result formatter for JSON files.\n\t * @method _formatResult\n\t * @param {AbstractLoader} loader\n\t * @returns {HTMLLinkElement|HTMLStyleElement}\n\t * @private\n\t */\n\tp._formatResult = function (loader) {\n\t\tvar json = null;\n\t\ttry {\n\t\t\tjson = createjs.DataUtils.parseJSON(loader.getResult(true));\n\t\t} catch (e) {\n\t\t\tvar event = new createjs.ErrorEvent(\"JSON_FORMAT\", null, e);\n\t\t\tthis._sendError(event);\n\t\t\treturn e;\n\t\t}\n\n\t\treturn json;\n\t};\n\n\tcreatejs.JSONLoader = createjs.promote(JSONLoader, \"AbstractLoader\");\n\n}());\n\n//##############################################################################\n// JSONPLoader.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * A loader for JSONP files, which are JSON-formatted text files, wrapped in a callback. To load regular JSON\n\t * without a callback use the {{#crossLink \"JSONLoader\"}}{{/crossLink}} instead. To load JSON-formatted manifests,\n\t * use {{#crossLink \"ManifestLoader\"}}{{/crossLink}}, and to load EaselJS SpriteSheets, use\n\t * {{#crossLink \"SpriteSheetLoader\"}}{{/crossLink}}.\n\t *\n\t * Note that JSONP files loaded concurrently require a <em>unique</em> callback. To ensure JSONP files are loaded\n\t * in order, either use the {{#crossLink \"LoadQueue/setMaxConnections\"}}{{/crossLink}} method (set to 1),\n\t * or set {{#crossLink \"LoadItem/maintainOrder:property\"}}{{/crossLink}} on items with the same callback.\n\t * @class JSONPLoader\n\t * @param {LoadItem|Object} loadItem\n\t * @extends AbstractLoader\n\t * @constructor\n\t */\n\tfunction JSONPLoader(loadItem) {\n\t\tthis.AbstractLoader_constructor(loadItem, false, createjs.AbstractLoader.JSONP);\n\t\tthis.setTag(document.createElement(\"script\"));\n\t\tthis.getTag().type = \"text/javascript\";\n\t};\n\n\tvar p = createjs.extend(JSONPLoader, createjs.AbstractLoader);\n\tvar s = JSONPLoader;\n\n\n\t// static methods\n\t/**\n\t * Determines if the loader can load a specific item. This loader can only load items that are of type\n\t * {{#crossLink \"AbstractLoader/JSONP:property\"}}{{/crossLink}}.\n\t * @method canLoadItem\n\t * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n\t * @returns {Boolean} Whether the loader can load the item.\n\t * @static\n\t */\n\ts.canLoadItem = function (item) {\n\t\treturn item.type == createjs.AbstractLoader.JSONP || item._loadAsJSONP;\n\t};\n\n\t// public methods\n\tp.cancel = function () {\n\t\tthis.AbstractLoader_cancel();\n\t\tthis._dispose();\n\t};\n\n\t/**\n\t * Loads the JSONp file.  Because of the unique loading needs of jsonP\n\t * we don't use the AbstractLoader.load() method.\n\t *\n\t * @method load\n\t *\n\t */\n\tp.load = function () {\n\t\tif (this._item.callback == null) {\n\t\t\tthrow new Error('callback is required for loading JSONP requests.');\n\t\t}\n\n\t\t// TODO: Look into creating our own iFrame to handle the load\n\t\t// In the first attempt, FF did not get the result\n\t\t//   result instanceof Object did not work either\n\t\t//   so we would need to clone the result.\n\t\tif (window[this._item.callback] != null) {\n\t\t\tthrow new Error(\n\t\t\t\t\"JSONP callback '\" +\n\t\t\t\tthis._item.callback +\n\t\t\t\t\"' already exists on window. You need to specify a different callback or re-name the current one.\");\n\t\t}\n\n\t\twindow[this._item.callback] = createjs.proxy(this._handleLoad, this);\n\t\twindow.document.body.appendChild(this._tag);\n\n\t\tthis._loadTimeout = setTimeout(createjs.proxy(this._handleTimeout, this), this._item.loadTimeout);\n\n\t\t// Load the tag\n\t\tthis._tag.src = this._item.src;\n\t};\n\n\t// private methods\n\t/**\n\t * Handle the JSONP callback, which is a public method defined on `window`.\n\t * @method _handleLoad\n\t * @param {Object} data The formatted JSON data.\n\t * @private\n\t */\n\tp._handleLoad = function (data) {\n\t\tthis._result = this._rawResult = data;\n\t\tthis._sendComplete();\n\n\t\tthis._dispose();\n\t};\n\n\t/**\n\t * The tag request has not loaded within the time specfied in loadTimeout.\n\t * @method _handleError\n\t * @param {Object} event The XHR error event.\n\t * @private\n\t */\n\tp._handleTimeout = function () {\n\t\tthis._dispose();\n\t\tthis.dispatchEvent(new createjs.ErrorEvent(\"timeout\"));\n\t};\n\n\t/**\n\t * Clean up the JSONP load. This clears out the callback and script tag that this loader creates.\n\t * @method _dispose\n\t * @private\n\t */\n\tp._dispose = function () {\n\t\twindow.document.body.removeChild(this._tag);\n\t\tdelete window[this._item.callback];\n\n\t\tclearTimeout(this._loadTimeout);\n\t};\n\n\tcreatejs.JSONPLoader = createjs.promote(JSONPLoader, \"AbstractLoader\");\n\n}());\n\n//##############################################################################\n// ManifestLoader.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * A loader for JSON manifests. Items inside the manifest are loaded before the loader completes. To load manifests\n\t * using JSONP, specify a {{#crossLink \"LoadItem/callback:property\"}}{{/crossLink}} as part of the\n\t * {{#crossLink \"LoadItem\"}}{{/crossLink}}.\n\t *\n\t * The list of files in the manifest must be defined on the top-level JSON object in a `manifest` property. This\n\t * example shows a sample manifest definition, as well as how to to include a sub-manifest.\n\t *\n\t * \t\t{\n\t * \t\t\t\"path\": \"assets/\",\n\t *\t \t    \"manifest\": [\n\t *\t\t\t\t\"image.png\",\n\t *\t\t\t\t{\"src\": \"image2.png\", \"id\":\"image2\"},\n\t *\t\t\t\t{\"src\": \"sub-manifest.json\", \"type\":\"manifest\", \"callback\":\"jsonCallback\"}\n\t *\t \t    ]\n\t *\t \t}\n\t *\n\t * When a ManifestLoader has completed loading, the parent loader (usually a {{#crossLink \"LoadQueue\"}}{{/crossLink}},\n\t * but could also be another ManifestLoader) will inherit all the loaded items, so you can access them directly.\n\t *\n\t * Note that the {{#crossLink \"JSONLoader\"}}{{/crossLink}} and {{#crossLink \"JSONPLoader\"}}{{/crossLink}} are\n\t * higher priority loaders, so manifests <strong>must</strong> set the {{#crossLink \"LoadItem\"}}{{/crossLink}}\n\t * {{#crossLink \"LoadItem/type:property\"}}{{/crossLink}} property to {{#crossLink \"AbstractLoader/MANIFEST:property\"}}{{/crossLink}}.\n\t * @class ManifestLoader\n\t * @param {LoadItem|Object} loadItem\n\t * @extends AbstractLoader\n\t * @constructor\n\t */\n\tfunction ManifestLoader(loadItem) {\n\t\tthis.AbstractLoader_constructor(loadItem, null, createjs.AbstractLoader.MANIFEST);\n\n\t// Public Properties\n\t\t/**\n\t\t * An array of the plugins registered using {{#crossLink \"LoadQueue/installPlugin\"}}{{/crossLink}},\n\t\t * used to pass plugins to new LoadQueues that may be created.\n\t\t * @property _plugins\n\t\t * @type {Array}\n\t\t * @private\n\t\t * @since 0.6.1\n\t\t */\n\t\tthis.plugins = null;\n\n\n\t// Protected Properties\n\t\t/**\n\t\t * An internal {{#crossLink \"LoadQueue\"}}{{/crossLink}} that loads the contents of the manifest.\n\t\t * @property _manifestQueue\n\t\t * @type {LoadQueue}\n\t\t * @private\n\t\t */\n\t\tthis._manifestQueue = null;\n\t};\n\n\tvar p = createjs.extend(ManifestLoader, createjs.AbstractLoader);\n\tvar s = ManifestLoader;\n\n\t// static properties\n\t/**\n\t * The amount of progress that the manifest itself takes up.\n\t * @property MANIFEST_PROGRESS\n\t * @type {number}\n\t * @default 0.25 (25%)\n\t * @private\n\t * @static\n\t */\n\ts.MANIFEST_PROGRESS = 0.25;\n\n\t// static methods\n\t/**\n\t * Determines if the loader can load a specific item. This loader can only load items that are of type\n\t * {{#crossLink \"AbstractLoader/MANIFEST:property\"}}{{/crossLink}}\n\t * @method canLoadItem\n\t * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n\t * @returns {Boolean} Whether the loader can load the item.\n\t * @static\n\t */\n\ts.canLoadItem = function (item) {\n\t\treturn item.type == createjs.AbstractLoader.MANIFEST;\n\t};\n\n\t// public methods\n\tp.load = function () {\n\t\tthis.AbstractLoader_load();\n\t};\n\n\t// protected methods\n\tp._createRequest = function() {\n\t\tvar callback = this._item.callback;\n\t\tif (callback != null) {\n\t\t\tthis._request = new createjs.JSONPLoader(this._item);\n\t\t} else {\n\t\t\tthis._request = new createjs.JSONLoader(this._item);\n\t\t}\n\t};\n\n\tp.handleEvent = function (event) {\n\t\tswitch (event.type) {\n\t\t\tcase \"complete\":\n\t\t\t\tthis._rawResult = event.target.getResult(true);\n\t\t\t\tthis._result = event.target.getResult();\n\t\t\t\tthis._sendProgress(s.MANIFEST_PROGRESS);\n\t\t\t\tthis._loadManifest(this._result);\n\t\t\t\treturn;\n\t\t\tcase \"progress\":\n\t\t\t\tevent.loaded *= s.MANIFEST_PROGRESS;\n\t\t\t\tthis.progress = event.loaded / event.total;\n\t\t\t\tif (isNaN(this.progress) || this.progress == Infinity) { this.progress = 0; }\n\t\t\t\tthis._sendProgress(event);\n\t\t\t\treturn;\n\t\t}\n\t\tthis.AbstractLoader_handleEvent(event);\n\t};\n\n\tp.destroy = function() {\n\t\tthis.AbstractLoader_destroy();\n\t\tthis._manifestQueue.close();\n\t};\n\n\t/**\n\t * Create and load the manifest items once the actual manifest has been loaded.\n\t * @method _loadManifest\n\t * @param {Object} json\n\t * @private\n\t */\n\tp._loadManifest = function (json) {\n\t\tif (json && json.manifest) {\n\t\t\tvar queue = this._manifestQueue = new createjs.LoadQueue();\n\t\t\tqueue.on(\"fileload\", this._handleManifestFileLoad, this);\n\t\t\tqueue.on(\"progress\", this._handleManifestProgress, this);\n\t\t\tqueue.on(\"complete\", this._handleManifestComplete, this, true);\n\t\t\tqueue.on(\"error\", this._handleManifestError, this, true);\n\t\t\tfor(var i = 0, l = this.plugins.length; i < l; i++) {\t// conserve order of plugins\n\t\t\t\tqueue.installPlugin(this.plugins[i]);\n\t\t\t}\n\t\t\tqueue.loadManifest(json);\n\t\t} else {\n\t\t\tthis._sendComplete();\n\t\t}\n\t};\n\n\t/**\n\t * An item from the {{#crossLink \"_manifestQueue:property\"}}{{/crossLink}} has completed.\n\t * @method _handleManifestFileLoad\n\t * @param {Event} event\n\t * @private\n\t */\n\tp._handleManifestFileLoad = function (event) {\n\t\tevent.target = null;\n\t\tthis.dispatchEvent(event);\n\t};\n\n\t/**\n\t * The manifest has completed loading. This triggers the {{#crossLink \"AbstractLoader/complete:event\"}}{{/crossLink}}\n\t * {{#crossLink \"Event\"}}{{/crossLink}} from the ManifestLoader.\n\t * @method _handleManifestComplete\n\t * @param {Event} event\n\t * @private\n\t */\n\tp._handleManifestComplete = function (event) {\n\t\tthis._loadedItems = this._manifestQueue.getItems(true);\n\t\tthis._sendComplete();\n\t};\n\n\t/**\n\t * The manifest has reported progress.\n\t * @method _handleManifestProgress\n\t * @param {ProgressEvent} event\n\t * @private\n\t */\n\tp._handleManifestProgress = function (event) {\n\t\tthis.progress = event.progress * (1 - s.MANIFEST_PROGRESS) + s.MANIFEST_PROGRESS;\n\t\tthis._sendProgress(this.progress);\n\t};\n\n\t/**\n\t * The manifest has reported an error with one of the files.\n\t * @method _handleManifestError\n\t * @param {ErrorEvent} event\n\t * @private\n\t */\n\tp._handleManifestError = function (event) {\n\t\tvar newEvent = new createjs.Event(\"fileerror\");\n\t\tnewEvent.item = event.data;\n\t\tthis.dispatchEvent(newEvent);\n\t};\n\n\tcreatejs.ManifestLoader = createjs.promote(ManifestLoader, \"AbstractLoader\");\n\n}());\n\n//##############################################################################\n// SoundLoader.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * A loader for HTML audio files. PreloadJS can not load WebAudio files, as a WebAudio context is required, which\n\t * should be created by either a library playing the sound (such as <a href=\"http://soundjs.com\">SoundJS</a>, or an\n\t * external framework that handles audio playback. To load content that can be played by WebAudio, use the\n\t * {{#crossLink \"BinaryLoader\"}}{{/crossLink}}, and handle the audio context decoding manually.\n\t * @class SoundLoader\n\t * @param {LoadItem|Object} loadItem\n\t * @param {Boolean} preferXHR\n\t * @extends AbstractMediaLoader\n\t * @constructor\n\t */\n\tfunction SoundLoader(loadItem, preferXHR) {\n\t\tthis.AbstractMediaLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.SOUND);\n\n\t\t// protected properties\n\t\tif (createjs.RequestUtils.isAudioTag(loadItem)) {\n\t\t\tthis._tag = loadItem;\n\t\t} else if (createjs.RequestUtils.isAudioTag(loadItem.src)) {\n\t\t\tthis._tag = loadItem;\n\t\t} else if (createjs.RequestUtils.isAudioTag(loadItem.tag)) {\n\t\t\tthis._tag = createjs.RequestUtils.isAudioTag(loadItem) ? loadItem : loadItem.src;\n\t\t}\n\n\t\tif (this._tag != null) {\n\t\t\tthis._preferXHR = false;\n\t\t}\n\t};\n\n\tvar p = createjs.extend(SoundLoader, createjs.AbstractMediaLoader);\n\tvar s = SoundLoader;\n\n\t// static methods\n\t/**\n\t * Determines if the loader can load a specific item. This loader can only load items that are of type\n\t * {{#crossLink \"AbstractLoader/SOUND:property\"}}{{/crossLink}}.\n\t * @method canLoadItem\n\t * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n\t * @returns {Boolean} Whether the loader can load the item.\n\t * @static\n\t */\n\ts.canLoadItem = function (item) {\n\t\treturn item.type == createjs.AbstractLoader.SOUND;\n\t};\n\n\t// protected methods\n\tp._createTag = function (src) {\n\t\tvar tag = document.createElement(\"audio\");\n\t\ttag.autoplay = false;\n\t\ttag.preload = \"none\";\n\n\t\t//LM: Firefox fails when this the preload=\"none\" for other tags, but it needs to be \"none\" to ensure PreloadJS works.\n\t\ttag.src = src;\n\t\treturn tag;\n\t};\n\n\tcreatejs.SoundLoader = createjs.promote(SoundLoader, \"AbstractMediaLoader\");\n\n}());\n\n//##############################################################################\n// VideoLoader.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * A loader for video files.\n\t * @class VideoLoader\n\t * @param {LoadItem|Object} loadItem\n\t * @param {Boolean} preferXHR\n\t * @extends AbstractMediaLoader\n\t * @constructor\n\t */\n\tfunction VideoLoader(loadItem, preferXHR) {\n\t\tthis.AbstractMediaLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.VIDEO);\n\n\t\tif (createjs.RequestUtils.isVideoTag(loadItem) || createjs.RequestUtils.isVideoTag(loadItem.src)) {\n\t\t\tthis.setTag(createjs.RequestUtils.isVideoTag(loadItem)?loadItem:loadItem.src);\n\n\t\t\t// We can't use XHR for a tag that's passed in.\n\t\t\tthis._preferXHR = false;\n\t\t} else {\n\t\t\tthis.setTag(this._createTag());\n\t\t}\n\t};\n\n\tvar p = createjs.extend(VideoLoader, createjs.AbstractMediaLoader);\n\tvar s = VideoLoader;\n\n\t/**\n\t * Create a new video tag\n\t *\n\t * @returns {HTMLElement}\n\t * @private\n\t */\n\tp._createTag = function () {\n\t\treturn document.createElement(\"video\");\n\t};\n\n\t// static methods\n\t/**\n\t * Determines if the loader can load a specific item. This loader can only load items that are of type\n\t * {{#crossLink \"AbstractLoader/VIDEO:property\"}}{{/crossLink}}.\n\t * @method canLoadItem\n\t * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n\t * @returns {Boolean} Whether the loader can load the item.\n\t * @static\n\t */\n\ts.canLoadItem = function (item) {\n\t\treturn item.type == createjs.AbstractLoader.VIDEO;\n\t};\n\n\tcreatejs.VideoLoader = createjs.promote(VideoLoader, \"AbstractMediaLoader\");\n\n}());\n\n//##############################################################################\n// SpriteSheetLoader.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * A loader for EaselJS SpriteSheets. Images inside the spritesheet definition are loaded before the loader\n\t * completes. To load SpriteSheets using JSONP, specify a {{#crossLink \"LoadItem/callback:property\"}}{{/crossLink}}\n\t * as part of the {{#crossLink \"LoadItem\"}}{{/crossLink}}. Note that the {{#crossLink \"JSONLoader\"}}{{/crossLink}}\n\t * and {{#crossLink \"JSONPLoader\"}}{{/crossLink}} are higher priority loaders, so SpriteSheets <strong>must</strong>\n\t * set the {{#crossLink \"LoadItem\"}}{{/crossLink}} {{#crossLink \"LoadItem/type:property\"}}{{/crossLink}} property\n\t * to {{#crossLink \"AbstractLoader/SPRITESHEET:property\"}}{{/crossLink}}.\n\t * @class SpriteSheetLoader\n\t * @param {LoadItem|Object} loadItem\n\t * @extends AbstractLoader\n\t * @constructor\n\t */\n\tfunction SpriteSheetLoader(loadItem) {\n\t\tthis.AbstractLoader_constructor(loadItem, null, createjs.AbstractLoader.SPRITESHEET);\n\n\t\t// protected properties\n\t\t/**\n\t\t * An internal queue which loads the SpriteSheet's images.\n\t\t * @method _manifestQueue\n\t\t * @type {LoadQueue}\n\t\t * @private\n\t\t */\n\t\tthis._manifestQueue = null;\n\t}\n\n\tvar p = createjs.extend(SpriteSheetLoader, createjs.AbstractLoader);\n\tvar s = SpriteSheetLoader;\n\n\t// static properties\n\t/**\n\t * The amount of progress that the manifest itself takes up.\n\t * @property SPRITESHEET_PROGRESS\n\t * @type {number}\n\t * @default 0.25 (25%)\n\t * @private\n\t * @static\n\t */\n\ts.SPRITESHEET_PROGRESS = 0.25;\n\n\t// static methods\n\t/**\n\t * Determines if the loader can load a specific item. This loader can only load items that are of type\n\t * {{#crossLink \"AbstractLoader/SPRITESHEET:property\"}}{{/crossLink}}\n\t * @method canLoadItem\n\t * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n\t * @returns {Boolean} Whether the loader can load the item.\n\t * @static\n\t */\n\ts.canLoadItem = function (item) {\n\t\treturn item.type == createjs.AbstractLoader.SPRITESHEET;\n\t};\n\n\t// public methods\n\tp.destroy = function() {\n\t\tthis.AbstractLoader_destroy;\n\t\tthis._manifestQueue.close();\n\t};\n\n\t// protected methods\n\tp._createRequest = function() {\n\t\tvar callback = this._item.callback;\n\t\tif (callback != null && callback instanceof Function) {\n\t\t\tthis._request = new createjs.JSONPLoader(this._item);\n\t\t} else {\n\t\t\tthis._request = new createjs.JSONLoader(this._item);\n\t\t}\n\t};\n\n\tp.handleEvent = function (event) {\n\t\tswitch (event.type) {\n\t\t\tcase \"complete\":\n\t\t\t\tthis._rawResult = event.target.getResult(true);\n\t\t\t\tthis._result = event.target.getResult();\n\t\t\t\tthis._sendProgress(s.SPRITESHEET_PROGRESS);\n\t\t\t\tthis._loadManifest(this._result);\n\t\t\t\treturn;\n\t\t\tcase \"progress\":\n\t\t\t\tevent.loaded *= s.SPRITESHEET_PROGRESS;\n\t\t\t\tthis.progress = event.loaded / event.total;\n\t\t\t\tif (isNaN(this.progress) || this.progress == Infinity) { this.progress = 0; }\n\t\t\t\tthis._sendProgress(event);\n\t\t\t\treturn;\n\t\t}\n\t\tthis.AbstractLoader_handleEvent(event);\n\t};\n\n\t/**\n\t * Create and load the images once the SpriteSheet JSON has been loaded.\n\t * @method _loadManifest\n\t * @param {Object} json\n\t * @private\n\t */\n\tp._loadManifest = function (json) {\n\t\tif (json && json.images) {\n\t\t\tvar queue = this._manifestQueue = new createjs.LoadQueue();\n\t\t\tqueue.on(\"complete\", this._handleManifestComplete, this, true);\n\t\t\tqueue.on(\"fileload\", this._handleManifestFileLoad, this);\n\t\t\tqueue.on(\"progress\", this._handleManifestProgress, this);\n\t\t\tqueue.on(\"error\", this._handleManifestError, this, true);\n\t\t\tqueue.loadManifest(json.images);\n\t\t}\n\t};\n\n\t/**\n\t * An item from the {{#crossLink \"_manifestQueue:property\"}}{{/crossLink}} has completed.\n\t * @method _handleManifestFileLoad\n\t * @param {Event} event\n\t * @private\n\t */\n\tp._handleManifestFileLoad = function (event) {\n\t\tvar image = event.result;\n\t\tif (image != null) {\n\t\t\tvar images = this.getResult().images;\n\t\t\tvar pos = images.indexOf(event.item.src);\n\t\t\timages[pos] = image;\n\t\t}\n\t};\n\n\t/**\n\t * The images have completed loading. This triggers the {{#crossLink \"AbstractLoader/complete:event\"}}{{/crossLink}}\n\t * {{#crossLink \"Event\"}}{{/crossLink}} from the SpriteSheetLoader.\n\t * @method _handleManifestComplete\n\t * @param {Event} event\n\t * @private\n\t */\n\tp._handleManifestComplete = function (event) {\n\t\tthis._result = new createjs.SpriteSheet(this._result);\n\t\tthis._loadedItems = this._manifestQueue.getItems(true);\n\t\tthis._sendComplete();\n\t};\n\n\t/**\n\t * The images {{#crossLink \"LoadQueue\"}}{{/crossLink}} has reported progress.\n\t * @method _handleManifestProgress\n\t * @param {ProgressEvent} event\n\t * @private\n\t */\n\tp._handleManifestProgress = function (event) {\n\t\tthis.progress = event.progress * (1 - s.SPRITESHEET_PROGRESS) + s.SPRITESHEET_PROGRESS;\n\t\tthis._sendProgress(this.progress);\n\t};\n\n\t/**\n\t * An image has reported an error.\n\t * @method _handleManifestError\n\t * @param {ErrorEvent} event\n\t * @private\n\t */\n\tp._handleManifestError = function (event) {\n\t\tvar newEvent = new createjs.Event(\"fileerror\");\n\t\tnewEvent.item = event.data;\n\t\tthis.dispatchEvent(newEvent);\n\t};\n\n\tcreatejs.SpriteSheetLoader = createjs.promote(SpriteSheetLoader, \"AbstractLoader\");\n\n}());\n\n//##############################################################################\n// SVGLoader.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * A loader for SVG files.\n\t * @class SVGLoader\n\t * @param {LoadItem|Object} loadItem\n\t * @param {Boolean} preferXHR\n\t * @extends AbstractLoader\n\t * @constructor\n\t */\n\tfunction SVGLoader(loadItem, preferXHR) {\n\t\tthis.AbstractLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.SVG);\n\n\t\t// public properties\n\t\tthis.resultFormatter = this._formatResult;\n\n\t\t// protected properties\n\t\tthis._tagSrcAttribute = \"data\";\n\n\t\tif (preferXHR) {\n\t\t\tthis.setTag(document.createElement(\"svg\"));\n\t\t} else {\n\t\t\tthis.setTag(document.createElement(\"object\"));\n\t\t\tthis.getTag().type = \"image/svg+xml\";\n\t\t}\n\t};\n\n\tvar p = createjs.extend(SVGLoader, createjs.AbstractLoader);\n\tvar s = SVGLoader;\n\n\t// static methods\n\t/**\n\t * Determines if the loader can load a specific item. This loader can only load items that are of type\n\t * {{#crossLink \"AbstractLoader/SVG:property\"}}{{/crossLink}}\n\t * @method canLoadItem\n\t * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n\t * @returns {Boolean} Whether the loader can load the item.\n\t * @static\n\t */\n\ts.canLoadItem = function (item) {\n\t\treturn item.type == createjs.AbstractLoader.SVG;\n\t};\n\n\t// protected methods\n\t/**\n\t * The result formatter for SVG files.\n\t * @method _formatResult\n\t * @param {AbstractLoader} loader\n\t * @returns {Object}\n\t * @private\n\t */\n\tp._formatResult = function (loader) {\n\t\t// mime should be image/svg+xml, but Opera requires text/xml\n\t\tvar xml = createjs.DataUtils.parseXML(loader.getResult(true), \"text/xml\");\n\t\tvar tag = loader.getTag();\n\n\t\tif (!this._preferXHR && document.body.contains(tag)) {\n\t\t\tdocument.body.removeChild(tag);\n\t\t}\n\n\t\tif (xml.documentElement != null) {\n\t\t\ttag.appendChild(xml.documentElement);\n\t\t\ttag.style.visibility = \"visible\";\n\t\t\treturn tag;\n\t\t} else { // For browsers that don't support SVG, just give them the XML. (IE 9-8)\n\t\t\treturn xml;\n\t\t}\n\t};\n\n\tcreatejs.SVGLoader = createjs.promote(SVGLoader, \"AbstractLoader\");\n\n}());\n\n//##############################################################################\n// XMLLoader.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function () {\n\t\"use strict\";\n\n\t// constructor\n\t/**\n\t * A loader for CSS files.\n\t * @class XMLLoader\n\t * @param {LoadItem|Object} loadItem\n\t * @extends AbstractLoader\n\t * @constructor\n\t */\n\tfunction XMLLoader(loadItem) {\n\t\tthis.AbstractLoader_constructor(loadItem, true, createjs.AbstractLoader.XML);\n\n\t\t// public properties\n\t\tthis.resultFormatter = this._formatResult;\n\t};\n\n\tvar p = createjs.extend(XMLLoader, createjs.AbstractLoader);\n\tvar s = XMLLoader;\n\n\t// static methods\n\t/**\n\t * Determines if the loader can load a specific item. This loader can only load items that are of type\n\t * {{#crossLink \"AbstractLoader/XML:property\"}}{{/crossLink}}.\n\t * @method canLoadItem\n\t * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.\n\t * @returns {Boolean} Whether the loader can load the item.\n\t * @static\n\t */\n\ts.canLoadItem = function (item) {\n\t\treturn item.type == createjs.AbstractLoader.XML;\n\t};\n\n\t// protected methods\n\t/**\n\t * The result formatter for XML files.\n\t * @method _formatResult\n\t * @param {AbstractLoader} loader\n\t * @returns {XMLDocument}\n\t * @private\n\t */\n\tp._formatResult = function (loader) {\n\t\treturn createjs.DataUtils.parseXML(loader.getResult(true), \"text/xml\");\n\t};\n\n\tcreatejs.XMLLoader = createjs.promote(XMLLoader, \"AbstractLoader\");\n\n}());\n/*!\n* TweenJS\n* Visit http://createjs.com/ for documentation, updates and examples.\n*\n* Copyright (c) 2010 gskinner.com, inc.\n*\n* Permission is hereby granted, free of charge, to any person\n* obtaining a copy of this software and associated documentation\n* files (the \"Software\"), to deal in the Software without\n* restriction, including without limitation the rights to use,\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the\n* Software is furnished to do so, subject to the following\n* conditions:\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n* OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\n//##############################################################################\n// extend.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n/**\n * @class Utility Methods\n */\n\n/**\n * Sets up the prototype chain and constructor property for a new class.\n *\n * This should be called right after creating the class constructor.\n *\n * \tfunction MySubClass() {}\n * \tcreatejs.extend(MySubClass, MySuperClass);\n * \tClassB.prototype.doSomething = function() { }\n *\n * \tvar foo = new MySubClass();\n * \tconsole.log(foo instanceof MySuperClass); // true\n * \tconsole.log(foo.prototype.constructor === MySubClass); // true\n *\n * @method extend\n * @param {Function} subclass The subclass.\n * @param {Function} superclass The superclass to extend.\n * @return {Function} Returns the subclass's new prototype.\n */\ncreatejs.extend = function(subclass, superclass) {\n\t\"use strict\";\n\n\tfunction o() { this.constructor = subclass; }\n\to.prototype = superclass.prototype;\n\treturn (subclass.prototype = new o());\n};\n\n//##############################################################################\n// promote.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n/**\n * @class Utility Methods\n */\n\n/**\n * Promotes any methods on the super class that were overridden, by creating an alias in the format `prefix_methodName`.\n * It is recommended to use the super class's name as the prefix.\n * An alias to the super class's constructor is always added in the format `prefix_constructor`.\n * This allows the subclass to call super class methods without using `function.call`, providing better performance.\n *\n * For example, if `MySubClass` extends `MySuperClass`, and both define a `draw` method, then calling `promote(MySubClass, \"MySuperClass\")`\n * would add a `MySuperClass_constructor` method to MySubClass and promote the `draw` method on `MySuperClass` to the\n * prototype of `MySubClass` as `MySuperClass_draw`.\n *\n * This should be called after the class's prototype is fully defined.\n *\n * \tfunction ClassA(name) {\n * \t\tthis.name = name;\n * \t}\n * \tClassA.prototype.greet = function() {\n * \t\treturn \"Hello \"+this.name;\n * \t}\n *\n * \tfunction ClassB(name, punctuation) {\n * \t\tthis.ClassA_constructor(name);\n * \t\tthis.punctuation = punctuation;\n * \t}\n * \tcreatejs.extend(ClassB, ClassA);\n * \tClassB.prototype.greet = function() {\n * \t\treturn this.ClassA_greet()+this.punctuation;\n * \t}\n * \tcreatejs.promote(ClassB, \"ClassA\");\n *\n * \tvar foo = new ClassB(\"World\", \"!?!\");\n * \tconsole.log(foo.greet()); // Hello World!?!\n *\n * @method promote\n * @param {Function} subclass The class to promote super class methods on.\n * @param {String} prefix The prefix to add to the promoted method names. Usually the name of the superclass.\n * @return {Function} Returns the subclass.\n */\ncreatejs.promote = function(subclass, prefix) {\n\t\"use strict\";\n\n\tvar subP = subclass.prototype, supP = (Object.getPrototypeOf&&Object.getPrototypeOf(subP))||subP.__proto__;\n\tif (supP) {\n\t\tsubP[(prefix+=\"_\") + \"constructor\"] = supP.constructor; // constructor is not always innumerable\n\t\tfor (var n in supP) {\n\t\t\tif (subP.hasOwnProperty(n) && (typeof supP[n] == \"function\")) { subP[prefix + n] = supP[n]; }\n\t\t}\n\t}\n\treturn subclass;\n};\n\n//##############################################################################\n// Event.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n// constructor:\n\t/**\n\t * Contains properties and methods shared by all events for use with\n\t * {{#crossLink \"EventDispatcher\"}}{{/crossLink}}.\n\t * \n\t * Note that Event objects are often reused, so you should never\n\t * rely on an event object's state outside of the call stack it was received in.\n\t * @class Event\n\t * @param {String} type The event type.\n\t * @param {Boolean} bubbles Indicates whether the event will bubble through the display list.\n\t * @param {Boolean} cancelable Indicates whether the default behaviour of this event can be cancelled.\n\t * @constructor\n\t **/\n\tfunction Event(type, bubbles, cancelable) {\n\t\t\n\t\n\t// public properties:\n\t\t/**\n\t\t * The type of event.\n\t\t * @property type\n\t\t * @type String\n\t\t **/\n\t\tthis.type = type;\n\t\n\t\t/**\n\t\t * The object that generated an event.\n\t\t * @property target\n\t\t * @type Object\n\t\t * @default null\n\t\t * @readonly\n\t\t*/\n\t\tthis.target = null;\n\t\n\t\t/**\n\t\t * The current target that a bubbling event is being dispatched from. For non-bubbling events, this will\n\t\t * always be the same as target. For example, if childObj.parent = parentObj, and a bubbling event\n\t\t * is generated from childObj, then a listener on parentObj would receive the event with\n\t\t * target=childObj (the original target) and currentTarget=parentObj (where the listener was added).\n\t\t * @property currentTarget\n\t\t * @type Object\n\t\t * @default null\n\t\t * @readonly\n\t\t*/\n\t\tthis.currentTarget = null;\n\t\n\t\t/**\n\t\t * For bubbling events, this indicates the current event phase:<OL>\n\t\t * \t<LI> capture phase: starting from the top parent to the target</LI>\n\t\t * \t<LI> at target phase: currently being dispatched from the target</LI>\n\t\t * \t<LI> bubbling phase: from the target to the top parent</LI>\n\t\t * </OL>\n\t\t * @property eventPhase\n\t\t * @type Number\n\t\t * @default 0\n\t\t * @readonly\n\t\t*/\n\t\tthis.eventPhase = 0;\n\t\n\t\t/**\n\t\t * Indicates whether the event will bubble through the display list.\n\t\t * @property bubbles\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.bubbles = !!bubbles;\n\t\n\t\t/**\n\t\t * Indicates whether the default behaviour of this event can be cancelled via\n\t\t * {{#crossLink \"Event/preventDefault\"}}{{/crossLink}}. This is set via the Event constructor.\n\t\t * @property cancelable\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.cancelable = !!cancelable;\n\t\n\t\t/**\n\t\t * The epoch time at which this event was created.\n\t\t * @property timeStamp\n\t\t * @type Number\n\t\t * @default 0\n\t\t * @readonly\n\t\t*/\n\t\tthis.timeStamp = (new Date()).getTime();\n\t\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/preventDefault\"}}{{/crossLink}} has been called\n\t\t * on this event.\n\t\t * @property defaultPrevented\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.defaultPrevented = false;\n\t\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/stopPropagation\"}}{{/crossLink}} or\n\t\t * {{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called on this event.\n\t\t * @property propagationStopped\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.propagationStopped = false;\n\t\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called\n\t\t * on this event.\n\t\t * @property immediatePropagationStopped\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.immediatePropagationStopped = false;\n\t\t\n\t\t/**\n\t\t * Indicates if {{#crossLink \"Event/remove\"}}{{/crossLink}} has been called on this event.\n\t\t * @property removed\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @readonly\n\t\t*/\n\t\tthis.removed = false;\n\t}\n\tvar p = Event.prototype;\n\n\t/**\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\n\t * for details.\n\t *\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\n\t *\n\t * @method initialize\n\t * @protected\n\t * @deprecated\n\t */\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\n\t\n\n// public methods:\n\t/**\n\t * Sets {{#crossLink \"Event/defaultPrevented\"}}{{/crossLink}} to true.\n\t * Mirrors the DOM event standard.\n\t * @method preventDefault\n\t **/\n\tp.preventDefault = function() {\n\t\tthis.defaultPrevented = this.cancelable&&true;\n\t};\n\n\t/**\n\t * Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} to true.\n\t * Mirrors the DOM event standard.\n\t * @method stopPropagation\n\t **/\n\tp.stopPropagation = function() {\n\t\tthis.propagationStopped = true;\n\t};\n\n\t/**\n\t * Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} and\n\t * {{#crossLink \"Event/immediatePropagationStopped\"}}{{/crossLink}} to true.\n\t * Mirrors the DOM event standard.\n\t * @method stopImmediatePropagation\n\t **/\n\tp.stopImmediatePropagation = function() {\n\t\tthis.immediatePropagationStopped = this.propagationStopped = true;\n\t};\n\t\n\t/**\n\t * Causes the active listener to be removed via removeEventListener();\n\t * \n\t * \t\tmyBtn.addEventListener(\"click\", function(evt) {\n\t * \t\t\t// do stuff...\n\t * \t\t\tevt.remove(); // removes this listener.\n\t * \t\t});\n\t * \n\t * @method remove\n\t **/\n\tp.remove = function() {\n\t\tthis.removed = true;\n\t};\n\t\n\t/**\n\t * Returns a clone of the Event instance.\n\t * @method clone\n\t * @return {Event} a clone of the Event instance.\n\t **/\n\tp.clone = function() {\n\t\treturn new Event(this.type, this.bubbles, this.cancelable);\n\t};\n\t\n\t/**\n\t * Provides a chainable shortcut method for setting a number of properties on the instance.\n\t *\n\t * @method set\n\t * @param {Object} props A generic object containing properties to copy to the instance.\n\t * @return {Event} Returns the instance the method is called on (useful for chaining calls.)\n\t * @chainable\n\t*/\n\tp.set = function(props) {\n\t\tfor (var n in props) { this[n] = props[n]; }\n\t\treturn this;\n\t};\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t **/\n\tp.toString = function() {\n\t\treturn \"[Event (type=\"+this.type+\")]\";\n\t};\n\n\tcreatejs.Event = Event;\n}());\n\n//##############################################################################\n// EventDispatcher.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\r\n\r\n(function() {\r\n\t\"use strict\";\r\n\r\n\r\n// constructor:\r\n\t/**\r\n\t * EventDispatcher provides methods for managing queues of event listeners and dispatching events.\r\n\t *\r\n\t * You can either extend EventDispatcher or mix its methods into an existing prototype or instance by using the\r\n\t * EventDispatcher {{#crossLink \"EventDispatcher/initialize\"}}{{/crossLink}} method.\r\n\t * \r\n\t * Together with the CreateJS Event class, EventDispatcher provides an extended event model that is based on the\r\n\t * DOM Level 2 event model, including addEventListener, removeEventListener, and dispatchEvent. It supports\r\n\t * bubbling / capture, preventDefault, stopPropagation, stopImmediatePropagation, and handleEvent.\r\n\t * \r\n\t * EventDispatcher also exposes a {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}} method, which makes it easier\r\n\t * to create scoped listeners, listeners that only run once, and listeners with associated arbitrary data. The \r\n\t * {{#crossLink \"EventDispatcher/off\"}}{{/crossLink}} method is merely an alias to\r\n\t * {{#crossLink \"EventDispatcher/removeEventListener\"}}{{/crossLink}}.\r\n\t * \r\n\t * Another addition to the DOM Level 2 model is the {{#crossLink \"EventDispatcher/removeAllEventListeners\"}}{{/crossLink}}\r\n\t * method, which can be used to listeners for all events, or listeners for a specific event. The Event object also \r\n\t * includes a {{#crossLink \"Event/remove\"}}{{/crossLink}} method which removes the active listener.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t * Add EventDispatcher capabilities to the \"MyClass\" class.\r\n\t *\r\n\t *      EventDispatcher.initialize(MyClass.prototype);\r\n\t *\r\n\t * Add an event (see {{#crossLink \"EventDispatcher/addEventListener\"}}{{/crossLink}}).\r\n\t *\r\n\t *      instance.addEventListener(\"eventName\", handlerMethod);\r\n\t *      function handlerMethod(event) {\r\n\t *          console.log(event.target + \" Was Clicked\");\r\n\t *      }\r\n\t *\r\n\t * <b>Maintaining proper scope</b><br />\r\n\t * Scope (ie. \"this\") can be be a challenge with events. Using the {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}}\r\n\t * method to subscribe to events simplifies this.\r\n\t *\r\n\t *      instance.addEventListener(\"click\", function(event) {\r\n\t *          console.log(instance == this); // false, scope is ambiguous.\r\n\t *      });\r\n\t *      \r\n\t *      instance.on(\"click\", function(event) {\r\n\t *          console.log(instance == this); // true, \"on\" uses dispatcher scope by default.\r\n\t *      });\r\n\t * \r\n\t * If you want to use addEventListener instead, you may want to use function.bind() or a similar proxy to manage scope.\r\n\t *      \r\n\t *\r\n\t * @class EventDispatcher\r\n\t * @constructor\r\n\t **/\r\n\tfunction EventDispatcher() {\r\n\t\r\n\t\r\n\t// private properties:\r\n\t\t/**\r\n\t\t * @protected\r\n\t\t * @property _listeners\r\n\t\t * @type Object\r\n\t\t **/\r\n\t\tthis._listeners = null;\r\n\t\t\r\n\t\t/**\r\n\t\t * @protected\r\n\t\t * @property _captureListeners\r\n\t\t * @type Object\r\n\t\t **/\r\n\t\tthis._captureListeners = null;\r\n\t}\r\n\tvar p = EventDispatcher.prototype;\r\n\r\n\t/**\r\n\t * <strong>REMOVED</strong>. Removed in favor of using `MySuperClass_constructor`.\r\n\t * See {{#crossLink \"Utility Methods/extend\"}}{{/crossLink}} and {{#crossLink \"Utility Methods/promote\"}}{{/crossLink}}\r\n\t * for details.\r\n\t *\r\n\t * There is an inheritance tutorial distributed with EaselJS in /tutorials/Inheritance.\r\n\t *\r\n\t * @method initialize\r\n\t * @protected\r\n\t * @deprecated\r\n\t */\r\n\t// p.initialize = function() {}; // searchable for devs wondering where it is.\r\n\r\n\r\n// static public methods:\r\n\t/**\r\n\t * Static initializer to mix EventDispatcher methods into a target object or prototype.\r\n\t * \r\n\t * \t\tEventDispatcher.initialize(MyClass.prototype); // add to the prototype of the class\r\n\t * \t\tEventDispatcher.initialize(myObject); // add to a specific instance\r\n\t * \r\n\t * @method initialize\r\n\t * @static\r\n\t * @param {Object} target The target object to inject EventDispatcher methods into. This can be an instance or a\r\n\t * prototype.\r\n\t **/\r\n\tEventDispatcher.initialize = function(target) {\r\n\t\ttarget.addEventListener = p.addEventListener;\r\n\t\ttarget.on = p.on;\r\n\t\ttarget.removeEventListener = target.off =  p.removeEventListener;\r\n\t\ttarget.removeAllEventListeners = p.removeAllEventListeners;\r\n\t\ttarget.hasEventListener = p.hasEventListener;\r\n\t\ttarget.dispatchEvent = p.dispatchEvent;\r\n\t\ttarget._dispatchEvent = p._dispatchEvent;\r\n\t\ttarget.willTrigger = p.willTrigger;\r\n\t};\r\n\t\r\n\r\n// public methods:\r\n\t/**\r\n\t * Adds the specified event listener. Note that adding multiple listeners to the same function will result in\r\n\t * multiple callbacks getting fired.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      displayObject.addEventListener(\"click\", handleClick);\r\n\t *      function handleClick(event) {\r\n\t *         // Click happened.\r\n\t *      }\r\n\t *\r\n\t * @method addEventListener\r\n\t * @param {String} type The string type of the event.\r\n\t * @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when\r\n\t * the event is dispatched.\r\n\t * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\r\n\t * @return {Function | Object} Returns the listener for chaining or assignment.\r\n\t **/\r\n\tp.addEventListener = function(type, listener, useCapture) {\r\n\t\tvar listeners;\r\n\t\tif (useCapture) {\r\n\t\t\tlisteners = this._captureListeners = this._captureListeners||{};\r\n\t\t} else {\r\n\t\t\tlisteners = this._listeners = this._listeners||{};\r\n\t\t}\r\n\t\tvar arr = listeners[type];\r\n\t\tif (arr) { this.removeEventListener(type, listener, useCapture); }\r\n\t\tarr = listeners[type]; // remove may have deleted the array\r\n\t\tif (!arr) { listeners[type] = [listener];  }\r\n\t\telse { arr.push(listener); }\r\n\t\treturn listener;\r\n\t};\r\n\t\r\n\t/**\r\n\t * A shortcut method for using addEventListener that makes it easier to specify an execution scope, have a listener\r\n\t * only run once, associate arbitrary data with the listener, and remove the listener.\r\n\t * \r\n\t * This method works by creating an anonymous wrapper function and subscribing it with addEventListener.\r\n\t * The created anonymous function is returned for use with .removeEventListener (or .off).\r\n\t * \r\n\t * <h4>Example</h4>\r\n\t * \r\n\t * \t\tvar listener = myBtn.on(\"click\", handleClick, null, false, {count:3});\r\n\t * \t\tfunction handleClick(evt, data) {\r\n\t * \t\t\tdata.count -= 1;\r\n\t * \t\t\tconsole.log(this == myBtn); // true - scope defaults to the dispatcher\r\n\t * \t\t\tif (data.count == 0) {\r\n\t * \t\t\t\talert(\"clicked 3 times!\");\r\n\t * \t\t\t\tmyBtn.off(\"click\", listener);\r\n\t * \t\t\t\t// alternately: evt.remove();\r\n\t * \t\t\t}\r\n\t * \t\t}\r\n\t * \r\n\t * @method on\r\n\t * @param {String} type The string type of the event.\r\n\t * @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when\r\n\t * the event is dispatched.\r\n\t * @param {Object} [scope] The scope to execute the listener in. Defaults to the dispatcher/currentTarget for function listeners, and to the listener itself for object listeners (ie. using handleEvent).\r\n\t * @param {Boolean} [once=false] If true, the listener will remove itself after the first time it is triggered.\r\n\t * @param {*} [data] Arbitrary data that will be included as the second parameter when the listener is called.\r\n\t * @param {Boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\r\n\t * @return {Function} Returns the anonymous function that was created and assigned as the listener. This is needed to remove the listener later using .removeEventListener.\r\n\t **/\r\n\tp.on = function(type, listener, scope, once, data, useCapture) {\r\n\t\tif (listener.handleEvent) {\r\n\t\t\tscope = scope||listener;\r\n\t\t\tlistener = listener.handleEvent;\r\n\t\t}\r\n\t\tscope = scope||this;\r\n\t\treturn this.addEventListener(type, function(evt) {\r\n\t\t\t\tlistener.call(scope, evt, data);\r\n\t\t\t\tonce&&evt.remove();\r\n\t\t\t}, useCapture);\r\n\t};\r\n\r\n\t/**\r\n\t * Removes the specified event listener.\r\n\t *\r\n\t * <b>Important Note:</b> that you must pass the exact function reference used when the event was added. If a proxy\r\n\t * function, or function closure is used as the callback, the proxy/closure reference must be used - a new proxy or\r\n\t * closure will not work.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      displayObject.removeEventListener(\"click\", handleClick);\r\n\t *\r\n\t * @method removeEventListener\r\n\t * @param {String} type The string type of the event.\r\n\t * @param {Function | Object} listener The listener function or object.\r\n\t * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\r\n\t **/\r\n\tp.removeEventListener = function(type, listener, useCapture) {\r\n\t\tvar listeners = useCapture ? this._captureListeners : this._listeners;\r\n\t\tif (!listeners) { return; }\r\n\t\tvar arr = listeners[type];\r\n\t\tif (!arr) { return; }\r\n\t\tfor (var i=0,l=arr.length; i<l; i++) {\r\n\t\t\tif (arr[i] == listener) {\r\n\t\t\t\tif (l==1) { delete(listeners[type]); } // allows for faster checks.\r\n\t\t\t\telse { arr.splice(i,1); }\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\t/**\r\n\t * A shortcut to the removeEventListener method, with the same parameters and return value. This is a companion to the\r\n\t * .on method.\r\n\t *\r\n\t * @method off\r\n\t * @param {String} type The string type of the event.\r\n\t * @param {Function | Object} listener The listener function or object.\r\n\t * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.\r\n\t **/\r\n\tp.off = p.removeEventListener;\r\n\r\n\t/**\r\n\t * Removes all listeners for the specified type, or all listeners of all types.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      // Remove all listeners\r\n\t *      displayObject.removeAllEventListeners();\r\n\t *\r\n\t *      // Remove all click listeners\r\n\t *      displayObject.removeAllEventListeners(\"click\");\r\n\t *\r\n\t * @method removeAllEventListeners\r\n\t * @param {String} [type] The string type of the event. If omitted, all listeners for all types will be removed.\r\n\t **/\r\n\tp.removeAllEventListeners = function(type) {\r\n\t\tif (!type) { this._listeners = this._captureListeners = null; }\r\n\t\telse {\r\n\t\t\tif (this._listeners) { delete(this._listeners[type]); }\r\n\t\t\tif (this._captureListeners) { delete(this._captureListeners[type]); }\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Dispatches the specified event to all listeners.\r\n\t *\r\n\t * <h4>Example</h4>\r\n\t *\r\n\t *      // Use a string event\r\n\t *      this.dispatchEvent(\"complete\");\r\n\t *\r\n\t *      // Use an Event instance\r\n\t *      var event = new createjs.Event(\"progress\");\r\n\t *      this.dispatchEvent(event);\r\n\t *\r\n\t * @method dispatchEvent\r\n\t * @param {Object | String | Event} eventObj An object with a \"type\" property, or a string type.\r\n\t * While a generic object will work, it is recommended to use a CreateJS Event instance. If a string is used,\r\n\t * dispatchEvent will construct an Event instance with the specified type.\r\n\t * @return {Boolean} Returns the value of eventObj.defaultPrevented.\r\n\t **/\r\n\tp.dispatchEvent = function(eventObj) {\r\n\t\tif (typeof eventObj == \"string\") {\r\n\t\t\t// won't bubble, so skip everything if there's no listeners:\r\n\t\t\tvar listeners = this._listeners;\r\n\t\t\tif (!listeners || !listeners[eventObj]) { return false; }\r\n\t\t\teventObj = new createjs.Event(eventObj);\r\n\t\t} else if (eventObj.target && eventObj.clone) {\r\n\t\t\t// redispatching an active event object, so clone it:\r\n\t\t\teventObj = eventObj.clone();\r\n\t\t}\r\n\t\ttry { eventObj.target = this; } catch (e) {} // try/catch allows redispatching of native events\r\n\r\n\t\tif (!eventObj.bubbles || !this.parent) {\r\n\t\t\tthis._dispatchEvent(eventObj, 2);\r\n\t\t} else {\r\n\t\t\tvar top=this, list=[top];\r\n\t\t\twhile (top.parent) { list.push(top = top.parent); }\r\n\t\t\tvar i, l=list.length;\r\n\r\n\t\t\t// capture & atTarget\r\n\t\t\tfor (i=l-1; i>=0 && !eventObj.propagationStopped; i--) {\r\n\t\t\t\tlist[i]._dispatchEvent(eventObj, 1+(i==0));\r\n\t\t\t}\r\n\t\t\t// bubbling\r\n\t\t\tfor (i=1; i<l && !eventObj.propagationStopped; i++) {\r\n\t\t\t\tlist[i]._dispatchEvent(eventObj, 3);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn eventObj.defaultPrevented;\r\n\t};\r\n\r\n\t/**\r\n\t * Indicates whether there is at least one listener for the specified event type.\r\n\t * @method hasEventListener\r\n\t * @param {String} type The string type of the event.\r\n\t * @return {Boolean} Returns true if there is at least one listener for the specified event.\r\n\t **/\r\n\tp.hasEventListener = function(type) {\r\n\t\tvar listeners = this._listeners, captureListeners = this._captureListeners;\r\n\t\treturn !!((listeners && listeners[type]) || (captureListeners && captureListeners[type]));\r\n\t};\r\n\t\r\n\t/**\r\n\t * Indicates whether there is at least one listener for the specified event type on this object or any of its\r\n\t * ancestors (parent, parent's parent, etc). A return value of true indicates that if a bubbling event of the\r\n\t * specified type is dispatched from this object, it will trigger at least one listener.\r\n\t * \r\n\t * This is similar to {{#crossLink \"EventDispatcher/hasEventListener\"}}{{/crossLink}}, but it searches the entire\r\n\t * event flow for a listener, not just this object.\r\n\t * @method willTrigger\r\n\t * @param {String} type The string type of the event.\r\n\t * @return {Boolean} Returns `true` if there is at least one listener for the specified event.\r\n\t **/\r\n\tp.willTrigger = function(type) {\r\n\t\tvar o = this;\r\n\t\twhile (o) {\r\n\t\t\tif (o.hasEventListener(type)) { return true; }\r\n\t\t\to = o.parent;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @method toString\r\n\t * @return {String} a string representation of the instance.\r\n\t **/\r\n\tp.toString = function() {\r\n\t\treturn \"[EventDispatcher]\";\r\n\t};\r\n\r\n\r\n// private methods:\r\n\t/**\r\n\t * @method _dispatchEvent\r\n\t * @param {Object | String | Event} eventObj\r\n\t * @param {Object} eventPhase\r\n\t * @protected\r\n\t **/\r\n\tp._dispatchEvent = function(eventObj, eventPhase) {\r\n\t\tvar l, listeners = (eventPhase==1) ? this._captureListeners : this._listeners;\r\n\t\tif (eventObj && listeners) {\r\n\t\t\tvar arr = listeners[eventObj.type];\r\n\t\t\tif (!arr||!(l=arr.length)) { return; }\r\n\t\t\ttry { eventObj.currentTarget = this; } catch (e) {}\r\n\t\t\ttry { eventObj.eventPhase = eventPhase; } catch (e) {}\r\n\t\t\teventObj.removed = false;\r\n\t\t\t\r\n\t\t\tarr = arr.slice(); // to avoid issues with items being removed or added during the dispatch\r\n\t\t\tfor (var i=0; i<l && !eventObj.immediatePropagationStopped; i++) {\r\n\t\t\t\tvar o = arr[i];\r\n\t\t\t\tif (o.handleEvent) { o.handleEvent(eventObj); }\r\n\t\t\t\telse { o(eventObj); }\r\n\t\t\t\tif (eventObj.removed) {\r\n\t\t\t\t\tthis.off(eventObj.type, o, eventPhase==1);\r\n\t\t\t\t\teventObj.removed = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\r\n\tcreatejs.EventDispatcher = EventDispatcher;\r\n}());\n\n//##############################################################################\n// Ticker.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor:\n\t/**\n\t * The Ticker provides a centralized tick or heartbeat broadcast at a set interval. Listeners can subscribe to the tick\n\t * event to be notified when a set time interval has elapsed.\n\t *\n\t * Note that the interval that the tick event is called is a target interval, and may be broadcast at a slower interval\n\t * when under high CPU load. The Ticker class uses a static interface (ex. `Ticker.framerate = 30;`) and\n\t * can not be instantiated.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n\t *      function handleTick(event) {\n\t *          // Actions carried out each tick (aka frame)\n\t *          if (!event.paused) {\n\t *              // Actions carried out when the Ticker is not paused.\n\t *          }\n\t *      }\n\t *\n\t * @class Ticker\n\t * @uses EventDispatcher\n\t * @static\n\t **/\n\tfunction Ticker() {\n\t\tthrow \"Ticker cannot be instantiated.\";\n\t}\n\n\n// constants:\n\t/**\n\t * In this mode, Ticker uses the requestAnimationFrame API, but attempts to synch the ticks to target framerate. It\n\t * uses a simple heuristic that compares the time of the RAF return to the target time for the current frame and\n\t * dispatches the tick when the time is within a certain threshold.\n\t *\n\t * This mode has a higher variance for time between frames than {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}},\n\t * but does not require that content be time based as with {{#crossLink \"Ticker/RAF:property\"}}{{/crossLink}} while\n\t * gaining the benefits of that API (screen synch, background throttling).\n\t *\n\t * Variance is usually lowest for framerates that are a divisor of the RAF frequency. This is usually 60, so\n\t * framerates of 10, 12, 15, 20, and 30 work well.\n\t *\n\t * Falls back to {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}} if the requestAnimationFrame API is not\n\t * supported.\n\t * @property RAF_SYNCHED\n\t * @static\n\t * @type {String}\n\t * @default \"synched\"\n\t * @readonly\n\t **/\n\tTicker.RAF_SYNCHED = \"synched\";\n\n\t/**\n\t * In this mode, Ticker passes through the requestAnimationFrame heartbeat, ignoring the target framerate completely.\n\t * Because requestAnimationFrame frequency is not deterministic, any content using this mode should be time based.\n\t * You can leverage {{#crossLink \"Ticker/getTime\"}}{{/crossLink}} and the {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}}\n\t * event object's \"delta\" properties to make this easier.\n\t *\n\t * Falls back on {{#crossLink \"Ticker/TIMEOUT:property\"}}{{/crossLink}} if the requestAnimationFrame API is not\n\t * supported.\n\t * @property RAF\n\t * @static\n\t * @type {String}\n\t * @default \"raf\"\n\t * @readonly\n\t **/\n\tTicker.RAF = \"raf\";\n\n\t/**\n\t * In this mode, Ticker uses the setTimeout API. This provides predictable, adaptive frame timing, but does not\n\t * provide the benefits of requestAnimationFrame (screen synch, background throttling).\n\t * @property TIMEOUT\n\t * @static\n\t * @type {String}\n\t * @default \"timeout\"\n\t * @readonly\n\t **/\n\tTicker.TIMEOUT = \"timeout\";\n\n\n// static events:\n\t/**\n\t * Dispatched each tick. The event will be dispatched to each listener even when the Ticker has been paused using\n\t * {{#crossLink \"Ticker/setPaused\"}}{{/crossLink}}.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n\t *      function handleTick(event) {\n\t *          console.log(\"Paused:\", event.paused, event.delta);\n\t *      }\n\t *\n\t * @event tick\n\t * @param {Object} target The object that dispatched the event.\n\t * @param {String} type The event type.\n\t * @param {Boolean} paused Indicates whether the ticker is currently paused.\n\t * @param {Number} delta The time elapsed in ms since the last tick.\n\t * @param {Number} time The total time in ms since Ticker was initialized.\n\t * @param {Number} runTime The total time in ms that Ticker was not paused since it was initialized. For example,\n\t * \tyou could determine the amount of time that the Ticker has been paused since initialization with `time-runTime`.\n\t * @since 0.6.0\n\t */\n\n\n// public static properties:\n\t/**\n\t * Deprecated in favour of {{#crossLink \"Ticker/timingMode\"}}{{/crossLink}}, and will be removed in a future version. If true, timingMode will\n\t * use {{#crossLink \"Ticker/RAF_SYNCHED\"}}{{/crossLink}} by default.\n\t * @deprecated Deprecated in favour of {{#crossLink \"Ticker/timingMode\"}}{{/crossLink}}.\n\t * @property useRAF\n\t * @static\n\t * @type {Boolean}\n\t * @default false\n\t **/\n\tTicker.useRAF = false;\n\n\t/**\n\t * Specifies the timing api (setTimeout or requestAnimationFrame) and mode to use. See\n\t * {{#crossLink \"Ticker/TIMEOUT\"}}{{/crossLink}}, {{#crossLink \"Ticker/RAF\"}}{{/crossLink}}, and\n\t * {{#crossLink \"Ticker/RAF_SYNCHED\"}}{{/crossLink}} for mode details.\n\t * @property timingMode\n\t * @static\n\t * @type {String}\n\t * @default Ticker.TIMEOUT\n\t **/\n\tTicker.timingMode = null;\n\n\t/**\n\t * Specifies a maximum value for the delta property in the tick event object. This is useful when building time\n\t * based animations and systems to prevent issues caused by large time gaps caused by background tabs, system sleep,\n\t * alert dialogs, or other blocking routines. Double the expected frame duration is often an effective value\n\t * (ex. maxDelta=50 when running at 40fps).\n\t * \n\t * This does not impact any other values (ex. time, runTime, etc), so you may experience issues if you enable maxDelta\n\t * when using both delta and other values.\n\t * \n\t * If 0, there is no maximum.\n\t * @property maxDelta\n\t * @static\n\t * @type {number}\n\t * @default 0\n\t */\n\tTicker.maxDelta = 0;\n\t\n\t/**\n\t * When the ticker is paused, all listeners will still receive a tick event, but the <code>paused</code> property\n\t * of the event will be `true`. Also, while paused the `runTime` will not increase. See {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}},\n\t * {{#crossLink \"Ticker/getTime\"}}{{/crossLink}}, and {{#crossLink \"Ticker/getEventTime\"}}{{/crossLink}} for more\n\t * info.\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      createjs.Ticker.addEventListener(\"tick\", handleTick);\n\t *      createjs.Ticker.paused = true;\n\t *      function handleTick(event) {\n\t *          console.log(event.paused,\n\t *          \tcreatejs.Ticker.getTime(false),\n\t *          \tcreatejs.Ticker.getTime(true));\n\t *      }\n\t *\n\t * @property paused\n\t * @static\n\t * @type {Boolean}\n\t * @default false\n\t **/\n\tTicker.paused = false;\n\n\n// mix-ins:\n\t// EventDispatcher methods:\n\tTicker.removeEventListener = null;\n\tTicker.removeAllEventListeners = null;\n\tTicker.dispatchEvent = null;\n\tTicker.hasEventListener = null;\n\tTicker._listeners = null;\n\tcreatejs.EventDispatcher.initialize(Ticker); // inject EventDispatcher methods.\n\tTicker._addEventListener = Ticker.addEventListener;\n\tTicker.addEventListener = function() {\n\t\t!Ticker._inited&&Ticker.init();\n\t\treturn Ticker._addEventListener.apply(Ticker, arguments);\n\t};\n\n\n// private static properties:\n\t/**\n\t * @property _inited\n\t * @static\n\t * @type {Boolean}\n\t * @protected\n\t **/\n\tTicker._inited = false;\n\n\t/**\n\t * @property _startTime\n\t * @static\n\t * @type {Number}\n\t * @protected\n\t **/\n\tTicker._startTime = 0;\n\n\t/**\n\t * @property _pausedTime\n\t * @static\n\t * @type {Number}\n\t * @protected\n\t **/\n\tTicker._pausedTime=0;\n\n\t/**\n\t * The number of ticks that have passed\n\t * @property _ticks\n\t * @static\n\t * @type {Number}\n\t * @protected\n\t **/\n\tTicker._ticks = 0;\n\n\t/**\n\t * The number of ticks that have passed while Ticker has been paused\n\t * @property _pausedTicks\n\t * @static\n\t * @type {Number}\n\t * @protected\n\t **/\n\tTicker._pausedTicks = 0;\n\n\t/**\n\t * @property _interval\n\t * @static\n\t * @type {Number}\n\t * @protected\n\t **/\n\tTicker._interval = 50;\n\n\t/**\n\t * @property _lastTime\n\t * @static\n\t * @type {Number}\n\t * @protected\n\t **/\n\tTicker._lastTime = 0;\n\n\t/**\n\t * @property _times\n\t * @static\n\t * @type {Array}\n\t * @protected\n\t **/\n\tTicker._times = null;\n\n\t/**\n\t * @property _tickTimes\n\t * @static\n\t * @type {Array}\n\t * @protected\n\t **/\n\tTicker._tickTimes = null;\n\n\t/**\n\t * Stores the timeout or requestAnimationFrame id.\n\t * @property _timerId\n\t * @static\n\t * @type {Number}\n\t * @protected\n\t **/\n\tTicker._timerId = null;\n\t\n\t/**\n\t * True if currently using requestAnimationFrame, false if using setTimeout. This may be different than timingMode\n\t * if that property changed and a tick hasn't fired.\n\t * @property _raf\n\t * @static\n\t * @type {Boolean}\n\t * @protected\n\t **/\n\tTicker._raf = true;\n\t\n\n// static getter / setters:\n\t/**\n\t * Use the {{#crossLink \"Ticker/interval:property\"}}{{/crossLink}} property instead.\n\t * @method setInterval\n\t * @static\n\t * @param {Number} interval\n\t * @deprecated\n\t **/\n\tTicker.setInterval = function(interval) {\n\t\tTicker._interval = interval;\n\t\tif (!Ticker._inited) { return; }\n\t\tTicker._setupTick();\n\t};\n\n\t/**\n\t * Use the {{#crossLink \"Ticker/framerate:property\"}}{{/crossLink}} property instead.\n\t * @method getInterval\n\t * @static\n\t * @return {Number}\n\t * @deprecated\n\t **/\n\tTicker.getInterval = function() {\n\t\treturn Ticker._interval;\n\t};\n\n\t/**\n\t * Use the {{#crossLink \"Ticker/framerate:property\"}}{{/crossLink}} property instead.\n\t * @method setFPS\n\t * @static\n\t * @param {Number} value\n\t * @deprecated\n\t **/\n\tTicker.setFPS = function(value) {\n\t\tTicker.setInterval(1000/value);\n\t};\n\n\t/**\n\t * Use the {{#crossLink \"Ticker/interval:property\"}}{{/crossLink}} property instead.\n\t * @method getFPS\n\t * @static\n\t * @return {Number}\n\t * @deprecated\n\t **/\n\tTicker.getFPS = function() {\n\t\treturn 1000/Ticker._interval;\n\t};\n\n\t/**\n\t * Indicates the target time (in milliseconds) between ticks. Default is 50 (20 FPS).\n\t * Note that actual time between ticks may be more than specified depending on CPU load.\n\t * This property is ignored if the ticker is using the `RAF` timing mode.\n\t * @property interval\n\t * @static\n\t * @type {Number}\n\t **/\n\t \n\t/**\n\t * Indicates the target frame rate in frames per second (FPS). Effectively just a shortcut to `interval`, where\n\t * `framerate == 1000/interval`.\n\t * @property framerate\n\t * @static\n\t * @type {Number}\n\t **/\n\ttry {\n\t\tObject.defineProperties(Ticker, {\n\t\t\tinterval: { get: Ticker.getInterval, set: Ticker.setInterval },\n\t\t\tframerate: { get: Ticker.getFPS, set: Ticker.setFPS }\n\t\t});\n\t} catch (e) { console.log(e); }\n\n\n// public static methods:\n\t/**\n\t * Starts the tick. This is called automatically when the first listener is added.\n\t * @method init\n\t * @static\n\t **/\n\tTicker.init = function() {\n\t\tif (Ticker._inited) { return; }\n\t\tTicker._inited = true;\n\t\tTicker._times = [];\n\t\tTicker._tickTimes = [];\n\t\tTicker._startTime = Ticker._getTime();\n\t\tTicker._times.push(Ticker._lastTime = 0);\n\t\tTicker.interval = Ticker._interval;\n\t};\n\t\n\t/**\n\t * Stops the Ticker and removes all listeners. Use init() to restart the Ticker.\n\t * @method reset\n\t * @static\n\t **/\n\tTicker.reset = function() {\n\t\tif (Ticker._raf) {\n\t\t\tvar f = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame;\n\t\t\tf&&f(Ticker._timerId);\n\t\t} else {\n\t\t\tclearTimeout(Ticker._timerId);\n\t\t}\n\t\tTicker.removeAllEventListeners(\"tick\");\n\t\tTicker._timerId = Ticker._times = Ticker._tickTimes = null;\n\t\tTicker._startTime = Ticker._lastTime = Ticker._ticks = 0;\n\t\tTicker._inited = false;\n\t};\n\n\t/**\n\t * Returns the average time spent within a tick. This can vary significantly from the value provided by getMeasuredFPS\n\t * because it only measures the time spent within the tick execution stack. \n\t * \n\t * Example 1: With a target FPS of 20, getMeasuredFPS() returns 20fps, which indicates an average of 50ms between \n\t * the end of one tick and the end of the next. However, getMeasuredTickTime() returns 15ms. This indicates that \n\t * there may be up to 35ms of \"idle\" time between the end of one tick and the start of the next.\n\t *\n\t * Example 2: With a target FPS of 30, getFPS() returns 10fps, which indicates an average of 100ms between the end of\n\t * one tick and the end of the next. However, getMeasuredTickTime() returns 20ms. This would indicate that something\n\t * other than the tick is using ~80ms (another script, DOM rendering, etc).\n\t * @method getMeasuredTickTime\n\t * @static\n\t * @param {Number} [ticks] The number of previous ticks over which to measure the average time spent in a tick.\n\t * Defaults to the number of ticks per second. To get only the last tick's time, pass in 1.\n\t * @return {Number} The average time spent in a tick in milliseconds.\n\t **/\n\tTicker.getMeasuredTickTime = function(ticks) {\n\t\tvar ttl=0, times=Ticker._tickTimes;\n\t\tif (!times || times.length < 1) { return -1; }\n\n\t\t// by default, calculate average for the past ~1 second:\n\t\tticks = Math.min(times.length, ticks||(Ticker.getFPS()|0));\n\t\tfor (var i=0; i<ticks; i++) { ttl += times[i]; }\n\t\treturn ttl/ticks;\n\t};\n\n\t/**\n\t * Returns the actual frames / ticks per second.\n\t * @method getMeasuredFPS\n\t * @static\n\t * @param {Number} [ticks] The number of previous ticks over which to measure the actual frames / ticks per second.\n\t * Defaults to the number of ticks per second.\n\t * @return {Number} The actual frames / ticks per second. Depending on performance, this may differ\n\t * from the target frames per second.\n\t **/\n\tTicker.getMeasuredFPS = function(ticks) {\n\t\tvar times = Ticker._times;\n\t\tif (!times || times.length < 2) { return -1; }\n\n\t\t// by default, calculate fps for the past ~1 second:\n\t\tticks = Math.min(times.length-1, ticks||(Ticker.getFPS()|0));\n\t\treturn 1000/((times[0]-times[ticks])/ticks);\n\t};\n\n\t/**\n\t * Use the {{#crossLink \"Ticker/paused:property\"}}{{/crossLink}} property instead.\n\t * @method setPaused\n\t * @static\n\t * @param {Boolean} value\n\t * @deprecated\n\t **/\n\tTicker.setPaused = function(value) {\n\t\t// TODO: deprecated.\n\t\tTicker.paused = value;\n\t};\n\n\t/**\n\t * Use the {{#crossLink \"Ticker/paused:property\"}}{{/crossLink}} property instead.\n\t * @method getPaused\n\t * @static\n\t * @return {Boolean}\n\t * @deprecated\n\t **/\n\tTicker.getPaused = function() {\n\t\t// TODO: deprecated.\n\t\treturn Ticker.paused;\n\t};\n\n\t/**\n\t * Returns the number of milliseconds that have elapsed since Ticker was initialized via {{#crossLink \"Ticker/init\"}}.\n\t * Returns -1 if Ticker has not been initialized. For example, you could use\n\t * this in a time synchronized animation to determine the exact amount of time that has elapsed.\n\t * @method getTime\n\t * @static\n\t * @param {Boolean} [runTime=false] If true only time elapsed while Ticker was not paused will be returned.\n\t * If false, the value returned will be total time elapsed since the first tick event listener was added.\n\t * @return {Number} Number of milliseconds that have elapsed since Ticker was initialized or -1.\n\t **/\n\tTicker.getTime = function(runTime) {\n\t\treturn Ticker._startTime ? Ticker._getTime() - (runTime ? Ticker._pausedTime : 0) : -1;\n\t};\n\n\t/**\n\t * Similar to getTime(), but returns the time on the most recent tick event object.\n\t * @method getEventTime\n\t * @static\n\t * @param runTime {Boolean} [runTime=false] If true, the runTime property will be returned instead of time.\n\t * @returns {number} The time or runTime property from the most recent tick event or -1.\n\t */\n\tTicker.getEventTime = function(runTime) {\n\t\treturn Ticker._startTime ? (Ticker._lastTime || Ticker._startTime) - (runTime ? Ticker._pausedTime : 0) : -1;\n\t};\n\t\n\t/**\n\t * Returns the number of ticks that have been broadcast by Ticker.\n\t * @method getTicks\n\t * @static\n\t * @param {Boolean} pauseable Indicates whether to include ticks that would have been broadcast\n\t * while Ticker was paused. If true only tick events broadcast while Ticker is not paused will be returned.\n\t * If false, tick events that would have been broadcast while Ticker was paused will be included in the return\n\t * value. The default value is false.\n\t * @return {Number} of ticks that have been broadcast.\n\t **/\n\tTicker.getTicks = function(pauseable) {\n\t\treturn  Ticker._ticks - (pauseable ? Ticker._pausedTicks : 0);\n\t};\n\n\n// private static methods:\n\t/**\n\t * @method _handleSynch\n\t * @static\n\t * @protected\n\t **/\n\tTicker._handleSynch = function() {\n\t\tTicker._timerId = null;\n\t\tTicker._setupTick();\n\n\t\t// run if enough time has elapsed, with a little bit of flexibility to be early:\n\t\tif (Ticker._getTime() - Ticker._lastTime >= (Ticker._interval-1)*0.97) {\n\t\t\tTicker._tick();\n\t\t}\n\t};\n\n\t/**\n\t * @method _handleRAF\n\t * @static\n\t * @protected\n\t **/\n\tTicker._handleRAF = function() {\n\t\tTicker._timerId = null;\n\t\tTicker._setupTick();\n\t\tTicker._tick();\n\t};\n\n\t/**\n\t * @method _handleTimeout\n\t * @static\n\t * @protected\n\t **/\n\tTicker._handleTimeout = function() {\n\t\tTicker._timerId = null;\n\t\tTicker._setupTick();\n\t\tTicker._tick();\n\t};\n\n\t/**\n\t * @method _setupTick\n\t * @static\n\t * @protected\n\t **/\n\tTicker._setupTick = function() {\n\t\tif (Ticker._timerId != null) { return; } // avoid duplicates\n\n\t\tvar mode = Ticker.timingMode||(Ticker.useRAF&&Ticker.RAF_SYNCHED);\n\t\tif (mode == Ticker.RAF_SYNCHED || mode == Ticker.RAF) {\n\t\t\tvar f = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;\n\t\t\tif (f) {\n\t\t\t\tTicker._timerId = f(mode == Ticker.RAF ? Ticker._handleRAF : Ticker._handleSynch);\n\t\t\t\tTicker._raf = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tTicker._raf = false;\n\t\tTicker._timerId = setTimeout(Ticker._handleTimeout, Ticker._interval);\n\t};\n\n\t/**\n\t * @method _tick\n\t * @static\n\t * @protected\n\t **/\n\tTicker._tick = function() {\n\t\tvar paused = Ticker.paused;\n\t\tvar time = Ticker._getTime();\n\t\tvar elapsedTime = time-Ticker._lastTime;\n\t\tTicker._lastTime = time;\n\t\tTicker._ticks++;\n\t\t\n\t\tif (paused) {\n\t\t\tTicker._pausedTicks++;\n\t\t\tTicker._pausedTime += elapsedTime;\n\t\t}\n\t\t\n\t\tif (Ticker.hasEventListener(\"tick\")) {\n\t\t\tvar event = new createjs.Event(\"tick\");\n\t\t\tvar maxDelta = Ticker.maxDelta;\n\t\t\tevent.delta = (maxDelta && elapsedTime > maxDelta) ? maxDelta : elapsedTime;\n\t\t\tevent.paused = paused;\n\t\t\tevent.time = time;\n\t\t\tevent.runTime = time-Ticker._pausedTime;\n\t\t\tTicker.dispatchEvent(event);\n\t\t}\n\t\t\n\t\tTicker._tickTimes.unshift(Ticker._getTime()-time);\n\t\twhile (Ticker._tickTimes.length > 100) { Ticker._tickTimes.pop(); }\n\n\t\tTicker._times.unshift(time);\n\t\twhile (Ticker._times.length > 100) { Ticker._times.pop(); }\n\t};\n\n\t/**\n\t * @method _getTime\n\t * @static\n\t * @protected\n\t **/\n\tvar now = window.performance && (performance.now || performance.mozNow || performance.msNow || performance.oNow || performance.webkitNow);\n\tTicker._getTime = function() {\n\t\treturn ((now&&now.call(performance))||(new Date().getTime())) - Ticker._startTime;\n\t};\n\n\n\tcreatejs.Ticker = Ticker;\n}());\n\n//##############################################################################\n// Tween.js\n//##############################################################################\n\n// TODO: possibly add a END actionsMode (only runs actions that == position)?\n// TODO: evaluate a way to decouple paused from tick registration.\n\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\n// constructor\n\t/**\n\t * A Tween instance tweens properties for a single target. Instance methods can be chained for easy construction and sequencing:\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      target.alpha = 1;\n\t *\t    createjs.Tween.get(target)\n\t *\t         .wait(500)\n\t *\t         .to({alpha:0, visible:false}, 1000)\n\t *\t         .call(handleComplete);\n\t *\t    function handleComplete() {\n\t *\t    \t//Tween complete\n\t *\t    }\n\t *\n\t * Multiple tweens can point to the same instance, however if they affect the same properties there could be unexpected\n\t * behaviour. To stop all tweens on an object, use {{#crossLink \"Tween/removeTweens\"}}{{/crossLink}} or pass `override:true`\n\t * in the props argument.\n\t *\n\t *      createjs.Tween.get(target, {override:true}).to({x:100});\n\t *\n\t * Subscribe to the {{#crossLink \"Tween/change:event\"}}{{/crossLink}} event to get notified when a property of the\n\t * target is changed.\n\t *\n\t *      createjs.Tween.get(target, {override:true}).to({x:100}).addEventListener(\"change\", handleChange);\n\t *      function handleChange(event) {\n\t *          // The tween changed.\n\t *      }\n\t *\n\t * See the Tween {{#crossLink \"Tween/get\"}}{{/crossLink}} method for additional param documentation.\n\t * @class Tween\n\t * @param {Object} target The target object that will have its properties tweened.\n\t * @param {Object} [props] The configuration properties to apply to this tween instance (ex. `{loop:true, paused:true}`.\n\t * All properties default to false. Supported props are:<UL>\n\t *    <LI> loop: sets the loop property on this tween.</LI>\n\t *    <LI> useTicks: uses ticks for all durations instead of milliseconds.</LI>\n\t *    <LI> ignoreGlobalPause: sets the {{#crossLink \"Tween/ignoreGlobalPause:property\"}}{{/crossLink}} property on this tween.</LI>\n\t *    <LI> override: if true, `Tween.removeTweens(target)` will be called to remove any other tweens with the same target.\n\t *    <LI> paused: indicates whether to start the tween paused.</LI>\n\t *    <LI> position: indicates the initial position for this tween.</LI>\n\t *    <LI> onChange: specifies a listener for the \"change\" event.</LI>\n\t * </UL>\n\t * @param {Object} [pluginData] An object containing data for use by installed plugins. See individual\n\t * plugins' documentation for details.\n\t * @extends EventDispatcher\n\t * @constructor\n\t */\n\tfunction Tween(target, props, pluginData) {\n\n\t// public properties:\n\t\t/**\n\t\t * Causes this tween to continue playing when a global pause is active. For example, if TweenJS is using {{#crossLink \"Ticker\"}}{{/crossLink}},\n\t\t * then setting this to true (the default) will cause this tween to be paused when <code>Ticker.setPaused(true)</code>\n\t\t * is called. See the Tween {{#crossLink \"Tween/tick\"}}{{/crossLink}} method for more info. Can be set via the props\n\t\t * parameter.\n\t\t * @property ignoreGlobalPause\n\t\t * @type Boolean\n\t\t * @default false\n\t\t */\n\t\tthis.ignoreGlobalPause = false;\n\t\n\t\t/**\n\t\t * If true, the tween will loop when it reaches the end. Can be set via the props param.\n\t\t * @property loop\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t */\n\t\tthis.loop = false;\n\t\n\t\t/**\n\t\t * Specifies the total duration of this tween in milliseconds (or ticks if useTicks is true).\n\t\t * This value is automatically updated as you modify the tween. Changing it directly could result in unexpected\n\t\t * behaviour.\n\t\t * @property duration\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t * @readonly\n\t\t */\n\t\tthis.duration = 0;\n\t\n\t\t/**\n\t\t * Allows you to specify data that will be used by installed plugins. Each plugin uses this differently, but in general\n\t\t * you specify data by setting it to a property of pluginData with the same name as the plugin class.\n\t\t * @example\n\t\t *\tmyTween.pluginData.PluginClassName = data;\n\t\t * <br/>\n\t\t * Also, most plugins support a property to enable or disable them. This is typically the plugin class name followed by \"_enabled\".<br/>\n\t\t * @example\n\t\t *\tmyTween.pluginData.PluginClassName_enabled = false;<br/>\n\t\t * <br/>\n\t\t * Some plugins also store instance data in this object, usually in a property named _PluginClassName.\n\t\t * See the documentation for individual plugins for more details.\n\t\t * @property pluginData\n\t\t * @type {Object}\n\t\t */\n\t\tthis.pluginData = pluginData || {};\n\t\n\t\t/**\n\t\t * The target of this tween. This is the object on which the tweened properties will be changed. Changing\n\t\t * this property after the tween is created will not have any effect.\n\t\t * @property target\n\t\t * @type {Object}\n\t\t * @readonly\n\t\t */\n\t\tthis.target = target;\n\t\n\t\t/**\n\t\t * The current normalized position of the tween. This will always be a value between 0 and duration.\n\t\t * Changing this property directly will have no effect.\n\t\t * @property position\n\t\t * @type {Object}\n\t\t * @readonly\n\t\t */\n\t\tthis.position = null;\n\t\n\t\t/**\n\t\t * Indicates the tween's current position is within a passive wait.\n\t\t * @property passive\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t * @readonly\n\t\t **/\n\t\tthis.passive = false;\n\t\n\t// private properties:\t\n\t\t/**\n\t\t * @property _paused\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis._paused = false;\n\t\n\t\t/**\n\t\t * @property _curQueueProps\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis._curQueueProps = {};\n\t\n\t\t/**\n\t\t * @property _initQueueProps\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis._initQueueProps = {};\n\t\n\t\t/**\n\t\t * @property _steps\n\t\t * @type {Array}\n\t\t * @protected\n\t\t */\n\t\tthis._steps = [];\n\t\n\t\t/**\n\t\t * @property _actions\n\t\t * @type {Array}\n\t\t * @protected\n\t\t */\n\t\tthis._actions = [];\n\t\n\t\t/**\n\t\t * Raw position.\n\t\t * @property _prevPosition\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t * @protected\n\t\t */\n\t\tthis._prevPosition = 0;\n\t\n\t\t/**\n\t\t * The position within the current step.\n\t\t * @property _stepPosition\n\t\t * @type {Number}\n\t\t * @default 0\n\t\t * @protected\n\t\t */\n\t\tthis._stepPosition = 0; // this is needed by MovieClip.\n\t\n\t\t/**\n\t\t * Normalized position.\n\t\t * @property _prevPos\n\t\t * @type {Number}\n\t\t * @default -1\n\t\t * @protected\n\t\t */\n\t\tthis._prevPos = -1;\n\t\n\t\t/**\n\t\t * @property _target\n\t\t * @type {Object}\n\t\t * @protected\n\t\t */\n\t\tthis._target = target;\n\t\n\t\t/**\n\t\t * @property _useTicks\n\t\t * @type {Boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis._useTicks = false;\n\t\n\t\t/**\n\t\t * @property _inited\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis._inited = false;\n\t\t\n\t\t/**\n\t\t * Indicates whether the tween is currently registered with Tween.\n\t\t * @property _registered\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis._registered = false;\n\n\n\t\tif (props) {\n\t\t\tthis._useTicks = props.useTicks;\n\t\t\tthis.ignoreGlobalPause = props.ignoreGlobalPause;\n\t\t\tthis.loop = props.loop;\n\t\t\tprops.onChange && this.addEventListener(\"change\", props.onChange);\n\t\t\tif (props.override) { Tween.removeTweens(target); }\n\t\t}\n\t\tif (props&&props.paused) { this._paused=true; }\n\t\telse { createjs.Tween._register(this,true); }\n\t\tif (props&&props.position!=null) { this.setPosition(props.position, Tween.NONE); }\n\n\t};\n\n\tvar p = createjs.extend(Tween, createjs.EventDispatcher);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\t\n\n// static properties\n\t/**\n\t * Constant defining the none actionsMode for use with setPosition.\n\t * @property NONE\n\t * @type Number\n\t * @default 0\n\t * @static\n\t */\n\tTween.NONE = 0;\n\n\t/**\n\t * Constant defining the loop actionsMode for use with setPosition.\n\t * @property LOOP\n\t * @type Number\n\t * @default 1\n\t * @static\n\t */\n\tTween.LOOP = 1;\n\n\t/**\n\t * Constant defining the reverse actionsMode for use with setPosition.\n\t * @property REVERSE\n\t * @type Number\n\t * @default 2\n\t * @static\n\t */\n\tTween.REVERSE = 2;\n\n\t/**\n\t * Constant returned by plugins to tell the tween not to use default assignment.\n\t * @property IGNORE\n\t * @type Object\n\t * @static\n\t */\n\tTween.IGNORE = {};\n\n\t/**\n\t * @property _listeners\n\t * @type Array[Tween]\n\t * @static\n\t * @protected\n\t */\n\tTween._tweens = [];\n\n\t/**\n\t * @property _plugins\n\t * @type Object\n\t * @static\n\t * @protected\n\t */\n\tTween._plugins = {};\n\n\n// static methods\t\n\t/**\n\t * Returns a new tween instance. This is functionally identical to using \"new Tween(...)\", but looks cleaner\n\t * with the chained syntax of TweenJS.\n\t * <h4>Example</h4>\n\t *\n\t *\t\tvar tween = createjs.Tween.get(target);\n\t *\n\t * @method get\n\t * @param {Object} target The target object that will have its properties tweened.\n\t * @param {Object} [props] The configuration properties to apply to this tween instance (ex. `{loop:true, paused:true}`).\n\t * All properties default to `false`. Supported props are:\n\t * <UL>\n\t *    <LI> loop: sets the loop property on this tween.</LI>\n\t *    <LI> useTicks: uses ticks for all durations instead of milliseconds.</LI>\n\t *    <LI> ignoreGlobalPause: sets the {{#crossLink \"Tween/ignoreGlobalPause:property\"}}{{/crossLink}} property on\n\t *    this tween.</LI>\n\t *    <LI> override: if true, `createjs.Tween.removeTweens(target)` will be called to remove any other tweens with\n\t *    the same target.\n\t *    <LI> paused: indicates whether to start the tween paused.</LI>\n\t *    <LI> position: indicates the initial position for this tween.</LI>\n\t *    <LI> onChange: specifies a listener for the {{#crossLink \"Tween/change:event\"}}{{/crossLink}} event.</LI>\n\t * </UL>\n\t * @param {Object} [pluginData] An object containing data for use by installed plugins. See individual plugins'\n\t * documentation for details.\n\t * @param {Boolean} [override=false] If true, any previous tweens on the same target will be removed. This is the\n\t * same as calling `Tween.removeTweens(target)`.\n\t * @return {Tween} A reference to the created tween. Additional chained tweens, method calls, or callbacks can be\n\t * applied to the returned tween instance.\n\t * @static\n\t */\n\tTween.get = function(target, props, pluginData, override) {\n\t\tif (override) { Tween.removeTweens(target); }\n\t\treturn new Tween(target, props, pluginData);\n\t};\n\n\t/**\n\t * Advances all tweens. This typically uses the {{#crossLink \"Ticker\"}}{{/crossLink}} class, but you can call it\n\t * manually if you prefer to use your own \"heartbeat\" implementation.\n\t * @method tick\n\t * @param {Number} delta The change in time in milliseconds since the last tick. Required unless all tweens have\n\t * `useTicks` set to true.\n\t * @param {Boolean} paused Indicates whether a global pause is in effect. Tweens with {{#crossLink \"Tween/ignoreGlobalPause:property\"}}{{/crossLink}}\n\t * will ignore this, but all others will pause if this is `true`.\n\t * @static\n\t */\n\tTween.tick = function(delta, paused) {\n\t\tvar tweens = Tween._tweens.slice(); // to avoid race conditions.\n\t\tfor (var i=tweens.length-1; i>=0; i--) {\n\t\t\tvar tween = tweens[i];\n\t\t\tif ((paused && !tween.ignoreGlobalPause) || tween._paused) { continue; }\n\t\t\ttween.tick(tween._useTicks?1:delta);\n\t\t}\n\t};\n\n\t/**\n\t * Handle events that result from Tween being used as an event handler. This is included to allow Tween to handle\n\t * {{#crossLink \"Ticker/tick:event\"}}{{/crossLink}} events from the createjs {{#crossLink \"Ticker\"}}{{/crossLink}}.\n\t * No other events are handled in Tween.\n\t * @method handleEvent\n\t * @param {Object} event An event object passed in by the {{#crossLink \"EventDispatcher\"}}{{/crossLink}}. Will\n\t * usually be of type \"tick\".\n\t * @private\n\t * @static\n\t * @since 0.4.2\n\t */\n\tTween.handleEvent = function(event) {\n\t\tif (event.type == \"tick\") {\n\t\t\tthis.tick(event.delta, event.paused);\n\t\t}\n\t};\n\n\t/**\n\t * Removes all existing tweens for a target. This is called automatically by new tweens if the `override`\n\t * property is `true`.\n\t * @method removeTweens\n\t * @param {Object} target The target object to remove existing tweens from.\n\t * @static\n\t */\n\tTween.removeTweens = function(target) {\n\t\tif (!target.tweenjs_count) { return; }\n\t\tvar tweens = Tween._tweens;\n\t\tfor (var i=tweens.length-1; i>=0; i--) {\n\t\t\tvar tween = tweens[i];\n\t\t\tif (tween._target == target) {\n\t\t\t\ttween._paused = true;\n\t\t\t\ttweens.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\ttarget.tweenjs_count = 0;\n\t};\n\n\t/**\n\t * Stop and remove all existing tweens.\n\t * @method removeAllTweens\n\t * @static\n\t * @since 0.4.1\n\t */\n\tTween.removeAllTweens = function() {\n\t\tvar tweens = Tween._tweens;\n\t\tfor (var i= 0, l=tweens.length; i<l; i++) {\n\t\t\tvar tween = tweens[i];\n\t\t\ttween._paused = true;\n\t\t\ttween.target&&(tween.target.tweenjs_count = 0);\n\t\t}\n\t\ttweens.length = 0;\n\t};\n\n\t/**\n\t * Indicates whether there are any active tweens (and how many) on the target object (if specified) or in general.\n\t * @method hasActiveTweens\n\t * @param {Object} [target] The target to check for active tweens. If not specified, the return value will indicate\n\t * if there are any active tweens on any target.\n\t * @return {Boolean} If there are active tweens.\n\t * @static\n\t */\n\tTween.hasActiveTweens = function(target) {\n\t\tif (target) { return target.tweenjs_count != null && !!target.tweenjs_count; }\n\t\treturn Tween._tweens && !!Tween._tweens.length;\n\t};\n\n\t/**\n\t * Installs a plugin, which can modify how certain properties are handled when tweened. See the {{#crossLink \"CSSPlugin\"}}{{/crossLink}}\n\t * for an example of how to write TweenJS plugins.\n\t * @method installPlugin\n\t * @static\n\t * @param {Object} plugin The plugin class to install\n\t * @param {Array} properties An array of properties that the plugin will handle.\n\t */\n\tTween.installPlugin = function(plugin, properties) {\n\t\tvar priority = plugin.priority;\n\t\tif (priority == null) { plugin.priority = priority = 0; }\n\t\tfor (var i=0,l=properties.length,p=Tween._plugins;i<l;i++) {\n\t\t\tvar n = properties[i];\n\t\t\tif (!p[n]) { p[n] = [plugin]; }\n\t\t\telse {\n\t\t\t\tvar arr = p[n];\n\t\t\t\tfor (var j=0,jl=arr.length;j<jl;j++) {\n\t\t\t\t\tif (priority < arr[j].priority) { break; }\n\t\t\t\t}\n\t\t\t\tp[n].splice(j,0,plugin);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Registers or unregisters a tween with the ticking system.\n\t * @method _register\n\t * @param {Tween} tween The tween instance to register or unregister.\n\t * @param {Boolean} value If `true`, the tween is registered. If `false` the tween is unregistered.\n\t * @static\n\t * @protected\n\t */\n\tTween._register = function(tween, value) {\n\t\tvar target = tween._target;\n\t\tvar tweens = Tween._tweens;\n\t\tif (value && !tween._registered) {\n\t\t\t// TODO: this approach might fail if a dev is using sealed objects in ES5\n\t\t\tif (target) { target.tweenjs_count = target.tweenjs_count ? target.tweenjs_count+1 : 1; }\n\t\t\ttweens.push(tween);\n\t\t\tif (!Tween._inited && createjs.Ticker) { createjs.Ticker.addEventListener(\"tick\", Tween); Tween._inited = true; }\n\t\t} else if (!value && tween._registered) {\n\t\t\tif (target) { target.tweenjs_count--; }\n\t\t\tvar i = tweens.length;\n\t\t\twhile (i--) {\n\t\t\t\tif (tweens[i] == tween) {\n\t\t\t\t\ttweens.splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ttween._registered = value;\n\t};\n\n\n// events:\n\t/**\n\t * Called whenever the tween's position changes.\n\t * @event change\n\t * @since 0.4.0\n\t **/\n\t\n\n// public methods:\n\t/**\n\t * Queues a wait (essentially an empty tween).\n\t * <h4>Example</h4>\n\t *\n\t *\t\t//This tween will wait 1s before alpha is faded to 0.\n\t *\t\tcreatejs.Tween.get(target).wait(1000).to({alpha:0}, 1000);\n\t *\n\t * @method wait\n\t * @param {Number} duration The duration of the wait in milliseconds (or in ticks if `useTicks` is true).\n\t * @param {Boolean} [passive] Tween properties will not be updated during a passive wait. This\n\t * is mostly useful for use with {{#crossLink \"Timeline\"}}{{/crossLink}} instances that contain multiple tweens\n\t * affecting the same target at different times.\n\t * @return {Tween} This tween instance (for chaining calls).\n\t **/\n\tp.wait = function(duration, passive) {\n\t\tif (duration == null || duration <= 0) { return this; }\n\t\tvar o = this._cloneProps(this._curQueueProps);\n\t\treturn this._addStep({d:duration, p0:o, e:this._linearEase, p1:o, v:passive});\n\t};\n\n\t/**\n\t * Queues a tween from the current values to the target properties. Set duration to 0 to jump to these value.\n\t * Numeric properties will be tweened from their current value in the tween to the target value. Non-numeric\n\t * properties will be set at the end of the specified duration.\n\t * <h4>Example</h4>\n\t *\n\t *\t\tcreatejs.Tween.get(target).to({alpha:0}, 1000);\n\t *\n\t * @method to\n\t * @param {Object} props An object specifying property target values for this tween (Ex. `{x:300}` would tween the x\n\t * property of the target to 300).\n\t * @param {Number} [duration=0] The duration of the wait in milliseconds (or in ticks if `useTicks` is true).\n\t * @param {Function} [ease=\"linear\"] The easing function to use for this tween. See the {{#crossLink \"Ease\"}}{{/crossLink}}\n\t * class for a list of built-in ease functions.\n\t * @return {Tween} This tween instance (for chaining calls).\n\t */\n\tp.to = function(props, duration, ease) {\n\t\tif (isNaN(duration) || duration < 0) { duration = 0; }\n\t\treturn this._addStep({d:duration||0, p0:this._cloneProps(this._curQueueProps), e:ease, p1:this._cloneProps(this._appendQueueProps(props))});\n\t};\n\n\t/**\n\t * Queues an action to call the specified function.\n\t * <h4>Example</h4>\n\t *\n\t *   \t//would call myFunction() after 1 second.\n\t *   \tmyTween.wait(1000).call(myFunction);\n\t *\n\t * @method call\n\t * @param {Function} callback The function to call.\n\t * @param {Array} [params]. The parameters to call the function with. If this is omitted, then the function\n\t *      will be called with a single param pointing to this tween.\n\t * @param {Object} [scope]. The scope to call the function in. If omitted, it will be called in the target's\n\t *      scope.\n\t * @return {Tween} This tween instance (for chaining calls).\n\t */\n\tp.call = function(callback, params, scope) {\n\t\treturn this._addAction({f:callback, p:params ? params : [this], o:scope ? scope : this._target});\n\t};\n\n\t// TODO: add clarification between this and a 0 duration .to:\n\t/**\n\t * Queues an action to set the specified props on the specified target. If target is null, it will use this tween's\n\t * target.\n\t * <h4>Example</h4>\n\t *\n\t *\t\tmyTween.wait(1000).set({visible:false},foo);\n\t *\n\t * @method set\n\t * @param {Object} props The properties to set (ex. `{visible:false}`).\n\t * @param {Object} [target] The target to set the properties on. If omitted, they will be set on the tween's target.\n\t * @return {Tween} This tween instance (for chaining calls).\n\t */\n\tp.set = function(props, target) {\n\t\treturn this._addAction({f:this._set, o:this, p:[props, target ? target : this._target]});\n\t};\n\n\t/**\n\t * Queues an action to play (unpause) the specified tween. This enables you to sequence multiple tweens.\n\t * <h4>Example</h4>\n\t *\n\t *\t\tmyTween.to({x:100},500).play(otherTween);\n\t *\n\t * @method play\n\t * @param {Tween} tween The tween to play.\n\t * @return {Tween} This tween instance (for chaining calls).\n\t */\n\tp.play = function(tween) {\n\t\tif (!tween) { tween = this; }\n\t\treturn this.call(tween.setPaused, [false], tween);\n\t};\n\n\t/**\n\t * Queues an action to pause the specified tween.\n\t * @method pause\n\t * @param {Tween} tween The tween to pause. If null, it pauses this tween.\n\t * @return {Tween} This tween instance (for chaining calls)\n\t */\n\tp.pause = function(tween) {\n\t\tif (!tween) { tween = this; }\n\t\treturn this.call(tween.setPaused, [true], tween);\n\t};\n\n\t/**\n\t * Advances the tween to a specified position.\n\t * @method setPosition\n\t * @param {Number} value The position to seek to in milliseconds (or ticks if useTicks is true).\n\t * @param {Number} [actionsMode=1] Specifies how actions are handled (ie. call, set, play, pause):\n\t * <ul>\n\t *      <li>{{#crossLink \"Tween/NONE:property\"}}{{/crossLink}} (0) - run no actions.</li>\n\t *      <li>{{#crossLink \"Tween/LOOP:property\"}}{{/crossLink}} (1) - if new position is less than old, then run all\n\t *      actions between old and duration, then all actions between 0 and new.</li>\n\t *      <li>{{#crossLink \"Tween/REVERSE:property\"}}{{/crossLink}} (2) - if new position is less than old, run all\n\t *      actions between them in reverse.</li>\n\t * </ul>\n\t * @return {Boolean} Returns `true` if the tween is complete (ie. the full tween has run & {{#crossLink \"Tween/loop:property\"}}{{/crossLink}}\n\t * is `false`).\n\t */\n\tp.setPosition = function(value, actionsMode) {\n\t\tif (value < 0) { value = 0; }\n\t\tif (actionsMode == null) { actionsMode = 1; }\n\n\t\t// normalize position:\n\t\tvar t = value;\n\t\tvar end = false;\n\t\tif (t >= this.duration) {\n\t\t\tif (this.loop) { t = t%this.duration; }\n\t\t\telse {\n\t\t\t\tt = this.duration;\n\t\t\t\tend = true;\n\t\t\t}\n\t\t}\n\t\tif (t == this._prevPos) { return end; }\n\n\n\t\tvar prevPos = this._prevPos;\n\t\tthis.position = this._prevPos = t; // set this in advance in case an action modifies position.\n\t\tthis._prevPosition = value;\n\n\t\t// handle tweens:\n\t\tif (this._target) {\n\t\t\tif (end) {\n\t\t\t\t// addresses problems with an ending zero length step.\n\t\t\t\tthis._updateTargetProps(null,1);\n\t\t\t} else if (this._steps.length > 0) {\n\t\t\t\t// find our new tween index:\n\t\t\t\tfor (var i=0, l=this._steps.length; i<l; i++) {\n\t\t\t\t\tif (this._steps[i].t > t) { break; }\n\t\t\t\t}\n\t\t\t\tvar step = this._steps[i-1];\n\t\t\t\tthis._updateTargetProps(step,(this._stepPosition = t-step.t)/step.d);\n\t\t\t}\n\t\t}\n\n\t\t// run actions:\n\t\tif (actionsMode != 0 && this._actions.length > 0) {\n\t\t\tif (this._useTicks) {\n\t\t\t\t// only run the actions we landed on.\n\t\t\t\tthis._runActions(t,t);\n\t\t\t} else if (actionsMode == 1 && t<prevPos) {\n\t\t\t\tif (prevPos != this.duration) { this._runActions(prevPos, this.duration); }\n\t\t\t\tthis._runActions(0, t, true);\n\t\t\t} else {\n\t\t\t\tthis._runActions(prevPos, t);\n\t\t\t}\n\t\t}\n\n\t\tif (end) { this.setPaused(true); }\n\n        this.dispatchEvent(\"change\");\n\t\treturn end;\n\t};\n\n\t/**\n\t * Advances this tween by the specified amount of time in milliseconds (or ticks if`useTicks` is `true`).\n\t * This is normally called automatically by the Tween engine (via {{#crossLink \"Tween/tick\"}}{{/crossLink}}), but is\n\t * exposed for advanced uses.\n\t * @method tick\n\t * @param {Number} delta The time to advance in milliseconds (or ticks if `useTicks` is `true`).\n\t */\n\tp.tick = function(delta) {\n\t\tif (this._paused) { return; }\n\t\tthis.setPosition(this._prevPosition+delta);\n\t};\n\n\t/**\n\t * Pauses or plays this tween.\n\t * @method setPaused\n\t * @param {Boolean} [value=true] Indicates whether the tween should be paused (`true`) or played (`false`).\n\t * @return {Tween} This tween instance (for chaining calls)\n\t */\n\tp.setPaused = function(value) {\n\t\tif (this._paused === !!value) { return this; }\n\t\tthis._paused = !!value;\n\t\tTween._register(this, !value);\n\t\treturn this;\n\t};\n\n\t// tiny api (primarily for tool output):\n\tp.w = p.wait;\n\tp.t = p.to;\n\tp.c = p.call;\n\tp.s = p.set;\n\n\t/**\n\t * Returns a string representation of this object.\n\t * @method toString\n\t * @return {String} a string representation of the instance.\n\t */\n\tp.toString = function() {\n\t\treturn \"[Tween]\";\n\t};\n\n\t/**\n\t * @method clone\n\t * @protected\n\t */\n\tp.clone = function() {\n\t\tthrow(\"Tween can not be cloned.\")\n\t};\n\n// private methods:\n\t/**\n\t * @method _updateTargetProps\n\t * @param {Object} step\n\t * @param {Number} ratio\n\t * @protected\n\t */\n\tp._updateTargetProps = function(step, ratio) {\n\t\tvar p0,p1,v,v0,v1,arr;\n\t\tif (!step && ratio == 1) {\n\t\t\t// GDS: when does this run? Just at the very end? Shouldn't.\n\t\t\tthis.passive = false;\n\t\t\tp0 = p1 = this._curQueueProps;\n\t\t} else {\n\t\t\tthis.passive = !!step.v;\n\t\t\tif (this.passive) { return; } // don't update props.\n\t\t\t// apply ease to ratio.\n\t\t\tif (step.e) { ratio = step.e(ratio,0,1,1); }\n\t\t\tp0 = step.p0;\n\t\t\tp1 = step.p1;\n\t\t}\n\n\t\tfor (var n in this._initQueueProps) {\n\t\t\tif ((v0 = p0[n]) == null) { p0[n] = v0 = this._initQueueProps[n]; }\n\t\t\tif ((v1 = p1[n]) == null) { p1[n] = v1 = v0; }\n\t\t\tif (v0 == v1 || ratio == 0 || ratio == 1 || (typeof(v0) != \"number\")) {\n\t\t\t\t// no interpolation - either at start, end, values don't change, or the value is non-numeric.\n\t\t\t\tv = ratio == 1 ? v1 : v0;\n\t\t\t} else {\n\t\t\t\tv = v0+(v1-v0)*ratio;\n\t\t\t}\n\n\t\t\tvar ignore = false;\n\t\t\tif (arr = Tween._plugins[n]) {\n\t\t\t\tfor (var i=0,l=arr.length;i<l;i++) {\n\t\t\t\t\tvar v2 = arr[i].tween(this, n, v, p0, p1, ratio, !!step&&p0==p1, !step);\n\t\t\t\t\tif (v2 == Tween.IGNORE) { ignore = true; }\n\t\t\t\t\telse { v = v2; }\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!ignore) { this._target[n] = v; }\n\t\t}\n\n\t};\n\n\t/**\n\t * @method _runActions\n\t * @param {Number} startPos\n\t * @param {Number} endPos\n\t * @param {Boolean} includeStart\n\t * @protected\n\t */\n\tp._runActions = function(startPos, endPos, includeStart) {\n\t\tvar sPos = startPos;\n\t\tvar ePos = endPos;\n\t\tvar i = -1;\n\t\tvar j = this._actions.length;\n\t\tvar k = 1;\n\t\tif (startPos > endPos) {\n\t\t\t// running backwards, flip everything:\n\t\t\tsPos = endPos;\n\t\t\tePos = startPos;\n\t\t\ti = j;\n\t\t\tj = k = -1;\n\t\t}\n\t\twhile ((i+=k) != j) {\n\t\t\tvar action = this._actions[i];\n\t\t\tvar pos = action.t;\n\t\t\tif (pos == ePos || (pos > sPos && pos < ePos) || (includeStart && pos == startPos) ) {\n\t\t\t\taction.f.apply(action.o, action.p);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * @method _appendQueueProps\n\t * @param {Object} o\n\t * @protected\n\t */\n\tp._appendQueueProps = function(o) {\n\t\tvar arr,oldValue,i, l, injectProps;\n\t\tfor (var n in o) {\n\t\t\tif (this._initQueueProps[n] === undefined) {\n\t\t\t\toldValue = this._target[n];\n\n\t\t\t\t// init plugins:\n\t\t\t\tif (arr = Tween._plugins[n]) {\n\t\t\t\t\tfor (i=0,l=arr.length;i<l;i++) {\n\t\t\t\t\t\toldValue = arr[i].init(this, n, oldValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._initQueueProps[n] = this._curQueueProps[n] = (oldValue===undefined) ? null : oldValue;\n\t\t\t} else {\n\t\t\t\toldValue = this._curQueueProps[n];\n\t\t\t}\n\t\t}\n\n\t\tfor (var n in o) {\n\t\t\toldValue = this._curQueueProps[n];\n\t\t\tif (arr = Tween._plugins[n]) {\n\t\t\t\tinjectProps = injectProps||{};\n\t\t\t\tfor (i=0, l=arr.length;i<l;i++) {\n\t\t\t\t\t// TODO: remove the check for .step in the next version. It's here for backwards compatibility.\n\t\t\t\t\tif (arr[i].step) { arr[i].step(this, n, oldValue, o[n], injectProps); }\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._curQueueProps[n] = o[n];\n\t\t}\n\t\tif (injectProps) { this._appendQueueProps(injectProps); }\n\t\treturn this._curQueueProps;\n\t};\n\n\t/**\n\t * @method _cloneProps\n\t * @param {Object} props\n\t * @protected\n\t */\n\tp._cloneProps = function(props) {\n\t\tvar o = {};\n\t\tfor (var n in props) {\n\t\t\to[n] = props[n];\n\t\t}\n\t\treturn o;\n\t};\n\n\t/**\n\t * @method _addStep\n\t * @param {Object} o\n\t * @protected\n\t */\n\tp._addStep = function(o) {\n\t\tif (o.d > 0) {\n\t\t\tthis._steps.push(o);\n\t\t\to.t = this.duration;\n\t\t\tthis.duration += o.d;\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * @method _addAction\n\t * @param {Object} o\n\t * @protected\n\t */\n\tp._addAction = function(o) {\n\t\to.t = this.duration;\n\t\tthis._actions.push(o);\n\t\treturn this;\n\t};\n\n\t/**\n\t * @method _set\n\t * @param {Object} props\n\t * @param {Object} o\n\t * @protected\n\t */\n\tp._set = function(props, o) {\n\t\tfor (var n in props) {\n\t\t\to[n] = props[n];\n\t\t}\n\t};\n\n\tcreatejs.Tween = createjs.promote(Tween, \"EventDispatcher\");\n\n}());\n\n//##############################################################################\n// Timeline.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n\n(function() {\n\t\"use strict\";\n\t\n\n// constructor\t\n\t/**\n\t * The Timeline class synchronizes multiple tweens and allows them to be controlled as a group. Please note that if a\n\t * timeline is looping, the tweens on it may appear to loop even if the \"loop\" property of the tween is false.\n\t * @class Timeline\n\t * @param {Array} tweens An array of Tweens to add to this timeline. See {{#crossLink \"Timeline/addTween\"}}{{/crossLink}}\n\t * for more info.\n\t * @param {Object} labels An object defining labels for using {{#crossLink \"Timeline/gotoAndPlay\"}}{{/crossLink}}/{{#crossLink \"Timeline/gotoAndStop\"}}{{/crossLink}}.\n\t * See {{#crossLink \"Timeline/setLabels\"}}{{/crossLink}}\n\t * for details.\n\t * @param {Object} props The configuration properties to apply to this tween instance (ex. `{loop:true}`). All properties\n\t * default to false. Supported props are:<UL>\n\t *    <LI> loop: sets the loop property on this tween.</LI>\n\t *    <LI> useTicks: uses ticks for all durations instead of milliseconds.</LI>\n\t *    <LI> ignoreGlobalPause: sets the ignoreGlobalPause property on this tween.</LI>\n\t *    <LI> paused: indicates whether to start the tween paused.</LI>\n\t *    <LI> position: indicates the initial position for this timeline.</LI>\n\t *    <LI> onChange: specifies a listener to add for the {{#crossLink \"Timeline/change:event\"}}{{/crossLink}} event.</LI>\n\t * </UL>\n\t * @extends EventDispatcher\n\t * @constructor\n\t **/\n\tfunction Timeline(tweens, labels, props) {\n\t\tthis.EventDispatcher_constructor();\n\n\t// public properties:\n\t\t/**\n\t\t * Causes this timeline to continue playing when a global pause is active.\n\t\t * @property ignoreGlobalPause\n\t\t * @type Boolean\n\t\t **/\n\t\tthis.ignoreGlobalPause = false;\n\n\t\t/**\n\t\t * The total duration of this timeline in milliseconds (or ticks if `useTicks `is `true`). This value is usually\n\t\t * automatically updated as you modify the timeline. See {{#crossLink \"Timeline/updateDuration\"}}{{/crossLink}}\n\t\t * for more information.\n\t\t * @property duration\n\t\t * @type Number\n\t\t * @default 0\n\t\t * @readonly\n\t\t **/\n\t\tthis.duration = 0;\n\n\t\t/**\n\t\t * If true, the timeline will loop when it reaches the end. Can be set via the props param.\n\t\t * @property loop\n\t\t * @type Boolean\n\t\t **/\n\t\tthis.loop = false;\n\n\t\t/**\n\t\t * The current normalized position of the timeline. This will always be a value between 0 and\n\t\t * {{#crossLink \"Timeline/duration:property\"}}{{/crossLink}}.\n\t\t * Changing this property directly will have no effect.\n\t\t * @property position\n\t\t * @type Object\n\t\t * @readonly\n\t\t **/\n\t\tthis.position = null;\n\n\t\t// private properties:\n\t\t/**\n\t\t * @property _paused\n\t\t * @type Boolean\n\t\t * @protected\n\t\t **/\n\t\tthis._paused = false;\n\n\t\t/**\n\t\t * @property _tweens\n\t\t * @type Array[Tween]\n\t\t * @protected\n\t\t **/\n\t\tthis._tweens = [];\n\n\t\t/**\n\t\t * @property _labels\n\t\t * @type Object\n\t\t * @protected\n\t\t **/\n\t\tthis._labels = null;\n\n\t\t/**\n\t\t * @property _labelList\n\t\t * @type Array[Object]\n\t\t * @protected\n\t\t **/\n\t\tthis._labelList = null;\n\n\t\t/**\n\t\t * @property _prevPosition\n\t\t * @type Number\n\t\t * @default 0\n\t\t * @protected\n\t\t **/\n\t\tthis._prevPosition = 0;\n\n\t\t/**\n\t\t * @property _prevPos\n\t\t * @type Number\n\t\t * @default -1\n\t\t * @protected\n\t\t **/\n\t\tthis._prevPos = -1;\n\n\t\t/**\n\t\t * @property _useTicks\n\t\t * @type Boolean\n\t\t * @default false\n\t\t * @protected\n\t\t **/\n\t\tthis._useTicks = false;\n\t\t\n\t\t/**\n\t\t * Indicates whether the timeline is currently registered with Tween.\n\t\t * @property _registered\n\t\t * @type {boolean}\n\t\t * @default false\n\t\t * @protected\n\t\t */\n\t\tthis._registered = false;\n\n\n\t\tif (props) {\n\t\t\tthis._useTicks = props.useTicks;\n\t\t\tthis.loop = props.loop;\n\t\t\tthis.ignoreGlobalPause = props.ignoreGlobalPause;\n\t\t\tprops.onChange&&this.addEventListener(\"change\", props.onChange);\n\t\t}\n\t\tif (tweens) { this.addTween.apply(this, tweens); }\n\t\tthis.setLabels(labels);\n\t\tif (props&&props.paused) { this._paused=true; }\n\t\telse { createjs.Tween._register(this,true); }\n\t\tif (props&&props.position!=null) { this.setPosition(props.position, createjs.Tween.NONE); }\n\t\t\n\t};\n\t\n\tvar p = createjs.extend(Timeline, createjs.EventDispatcher);\n\n\t// TODO: deprecated\n\t// p.initialize = function() {}; // searchable for devs wondering where it is. REMOVED. See docs for details.\n\n\t\n// events:\n\t/**\n\t * Called whenever the timeline's position changes.\n\t * @event change\n\t * @since 0.5.0\n\t **/\n\n\n// public methods:\n\t/**\n\t * Adds one or more tweens (or timelines) to this timeline. The tweens will be paused (to remove them from the\n\t * normal ticking system) and managed by this timeline. Adding a tween to multiple timelines will result in\n\t * unexpected behaviour.\n\t * @method addTween\n\t * @param {Tween} ...tween The tween(s) to add. Accepts multiple arguments.\n\t * @return {Tween} The first tween that was passed in.\n\t **/\n\tp.addTween = function(tween) {\n\t\tvar l = arguments.length;\n\t\tif (l > 1) {\n\t\t\tfor (var i=0; i<l; i++) { this.addTween(arguments[i]); }\n\t\t\treturn arguments[0];\n\t\t} else if (l == 0) { return null; }\n\t\tthis.removeTween(tween);\n\t\tthis._tweens.push(tween);\n\t\ttween.setPaused(true);\n\t\ttween._paused = false;\n\t\ttween._useTicks = this._useTicks;\n\t\tif (tween.duration > this.duration) { this.duration = tween.duration; }\n\t\tif (this._prevPos >= 0) { tween.setPosition(this._prevPos, createjs.Tween.NONE); }\n\t\treturn tween;\n\t};\n\n\t/**\n\t * Removes one or more tweens from this timeline.\n\t * @method removeTween\n\t * @param {Tween} ...tween The tween(s) to remove. Accepts multiple arguments.\n\t * @return Boolean Returns `true` if all of the tweens were successfully removed.\n\t **/\n\tp.removeTween = function(tween) {\n\t\tvar l = arguments.length;\n\t\tif (l > 1) {\n\t\t\tvar good = true;\n\t\t\tfor (var i=0; i<l; i++) { good = good && this.removeTween(arguments[i]); }\n\t\t\treturn good;\n\t\t} else if (l == 0) { return false; }\n\n\t\tvar tweens = this._tweens;\n\t\tvar i = tweens.length;\n\t\twhile (i--) {\n\t\t\tif (tweens[i] == tween) {\n\t\t\t\ttweens.splice(i, 1);\n\t\t\t\tif (tween.duration >= this.duration) { this.updateDuration(); }\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\n\t/**\n\t * Adds a label that can be used with {{#crossLink \"Timeline/gotoAndPlay\"}}{{/crossLink}}/{{#crossLink \"Timeline/gotoAndStop\"}}{{/crossLink}}.\n\t * @method addLabel\n\t * @param {String} label The label name.\n\t * @param {Number} position The position this label represents.\n\t **/\n\tp.addLabel = function(label, position) {\n\t\tthis._labels[label] = position;\n\t\tvar list = this._labelList;\n\t\tif (list) {\n\t\t\tfor (var i= 0,l=list.length; i<l; i++) { if (position < list[i].position) { break; } }\n\t\t\tlist.splice(i, 0, {label:label, position:position});\n\t\t}\n\t};\n\n\t/**\n\t * Defines labels for use with gotoAndPlay/Stop. Overwrites any previously set labels.\n\t * @method setLabels\n\t * @param {Object} o An object defining labels for using {{#crossLink \"Timeline/gotoAndPlay\"}}{{/crossLink}}/{{#crossLink \"Timeline/gotoAndStop\"}}{{/crossLink}}\n\t * in the form `{labelName:time}` where time is in milliseconds (or ticks if `useTicks` is `true`).\n\t **/\n\tp.setLabels = function(o) {\n\t\tthis._labels = o ?  o : {};\n\t};\n\n\t/**\n\t * Returns a sorted list of the labels defined on this timeline.\n\t * @method getLabels\n\t * @return {Array[Object]} A sorted array of objects with label and position properties.\n\t **/\n\tp.getLabels = function() {\n\t\tvar list = this._labelList;\n\t\tif (!list) {\n\t\t\tlist = this._labelList = [];\n\t\t\tvar labels = this._labels;\n\t\t\tfor (var n in labels) {\n\t\t\t\tlist.push({label:n, position:labels[n]});\n\t\t\t}\n\t\t\tlist.sort(function (a,b) { return a.position- b.position; });\n\t\t}\n\t\treturn list;\n\t};\n\n\t/**\n\t * Returns the name of the label on or immediately before the current position. For example, given a timeline with\n\t * two labels, \"first\" on frame index 4, and \"second\" on frame 8, getCurrentLabel would return:\n\t * <UL>\n\t * \t\t<LI>null if the current position is 2.</LI>\n\t * \t\t<LI>\"first\" if the current position is 4.</LI>\n\t * \t\t<LI>\"first\" if the current position is 7.</LI>\n\t * \t\t<LI>\"second\" if the current position is 15.</LI>\n\t * </UL>\n\t * @method getCurrentLabel\n\t * @return {String} The name of the current label or null if there is no label\n\t **/\n\tp.getCurrentLabel = function() {\n\t\tvar labels = this.getLabels();\n\t\tvar pos = this.position;\n\t\tvar l = labels.length;\n\t\tif (l) {\n\t\t\tfor (var i = 0; i<l; i++) { if (pos < labels[i].position) { break; } }\n\t\t\treturn (i==0) ? null : labels[i-1].label;\n\t\t}\n\t\treturn null;\n\t};\n\n\t/**\n\t * Unpauses this timeline and jumps to the specified position or label.\n\t * @method gotoAndPlay\n\t * @param {String|Number} positionOrLabel The position in milliseconds (or ticks if `useTicks` is `true`)\n\t * or label to jump to.\n\t **/\n\tp.gotoAndPlay = function(positionOrLabel) {\n\t\tthis.setPaused(false);\n\t\tthis._goto(positionOrLabel);\n\t};\n\n\t/**\n\t * Pauses this timeline and jumps to the specified position or label.\n\t * @method gotoAndStop\n\t * @param {String|Number} positionOrLabel The position in milliseconds (or ticks if `useTicks` is `true`) or label\n\t * to jump to.\n\t **/\n\tp.gotoAndStop = function(positionOrLabel) {\n\t\tthis.setPaused(true);\n\t\tthis._goto(positionOrLabel);\n\t};\n\n\t/**\n\t * Advances the timeline to the specified position.\n\t * @method setPosition\n\t * @param {Number} value The position to seek to in milliseconds (or ticks if `useTicks` is `true`).\n\t * @param {Number} [actionsMode] parameter specifying how actions are handled. See the Tween {{#crossLink \"Tween/setPosition\"}}{{/crossLink}}\n\t * method for more details.\n\t * @return {Boolean} Returns `true` if the timeline is complete (ie. the full timeline has run & {{#crossLink \"Timeline/loop:property\"}}{{/crossLink}}\n\t * is `false`).\n\t **/\n\tp.setPosition = function(value, actionsMode) {\n\t\tvar t = this._calcPosition(value);\n\t\tvar end = !this.loop && value >= this.duration;\n\t\tif (t == this._prevPos) { return end; }\n\t\tthis._prevPosition = value;\n\t\tthis.position = this._prevPos = t; // in case an action changes the current frame.\n\t\tfor (var i=0, l=this._tweens.length; i<l; i++) {\n\t\t\tthis._tweens[i].setPosition(t, actionsMode);\n\t\t\tif (t != this._prevPos) { return false; } // an action changed this timeline's position.\n\t\t}\n\t\tif (end) { this.setPaused(true); }\n\t\tthis.dispatchEvent(\"change\");\n\t\treturn end;\n\t};\n\n\t/**\n\t * Pauses or plays this timeline.\n\t * @method setPaused\n\t * @param {Boolean} value Indicates whether the tween should be paused (`true`) or played (`false`).\n\t **/\n\tp.setPaused = function(value) {\n\t\tthis._paused = !!value; \n\t\tcreatejs.Tween._register(this, !value);\n\t};\n\n\t/**\n\t * Recalculates the duration of the timeline. The duration is automatically updated when tweens are added or removed,\n\t * but this method is useful if you modify a tween after it was added to the timeline.\n\t * @method updateDuration\n\t **/\n\tp.updateDuration = function() {\n\t\tthis.duration = 0;\n\t\tfor (var i=0,l=this._tweens.length; i<l; i++) {\n\t\t\tvar tween = this._tweens[i];\n\t\t\tif (tween.duration > this.duration) { this.duration = tween.duration; }\n\t\t}\n\t};\n\n\t/**\n\t * Advances this timeline by the specified amount of time in milliseconds (or ticks if `useTicks` is `true`).\n\t * This is normally called automatically by the Tween engine (via the {{#crossLink \"Tween/tick:event\"}}{{/crossLink}}\n\t * event), but is exposed for advanced uses.\n\t * @method tick\n\t * @param {Number} delta The time to advance in milliseconds (or ticks if useTicks is true).\n\t **/\n\tp.tick = function(delta) {\n\t\tthis.setPosition(this._prevPosition+delta);\n\t};\n\n\t/**\n\t * If a numeric position is passed, it is returned unchanged. If a string is passed, the position of the\n\t * corresponding frame label will be returned, or `null` if a matching label is not defined.\n\t * @method resolve\n\t * @param {String|Number} positionOrLabel A numeric position value or label string.\n\t **/\n\tp.resolve = function(positionOrLabel) {\n\t\tvar pos = Number(positionOrLabel);\n\t\tif (isNaN(pos)) { pos = this._labels[positionOrLabel]; }\n\t\treturn pos;\n\t};\n\n\t/**\n\t* Returns a string representation of this object.\n\t* @method toString\n\t* @return {String} a string representation of the instance.\n\t**/\n\tp.toString = function() {\n\t\treturn \"[Timeline]\";\n\t};\n\n\t/**\n\t * @method clone\n\t * @protected\n\t **/\n\tp.clone = function() {\n\t\tthrow(\"Timeline can not be cloned.\")\n\t};\n\n// private methods:\n\t/**\n\t * @method _goto\n\t * @param {String | Number} positionOrLabel\n\t * @protected\n\t **/\n\tp._goto = function(positionOrLabel) {\n\t\tvar pos = this.resolve(positionOrLabel);\n\t\tif (pos != null) { this.setPosition(pos); }\n\t};\n\t\n\t/**\n\t * @method _calcPosition\n\t * @param {Number} value\n\t * @return {Number}\n\t * @protected\n\t **/\n\tp._calcPosition = function(value) {\n\t\tif (value < 0) { return 0; }\n\t\tif (value < this.duration) { return value; }\n\t\treturn this.loop ? value%this.duration : this.duration;\n\t};\n\n\tcreatejs.Timeline = createjs.promote(Timeline, \"EventDispatcher\");\n\n}());\n\n//##############################################################################\n// Ease.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\t/**\n\t * The Ease class provides a collection of easing functions for use with TweenJS. It does not use the standard 4 param\n\t * easing signature. Instead it uses a single param which indicates the current linear ratio (0 to 1) of the tween.\n\t *\n\t * Most methods on Ease can be passed directly as easing functions:\n\t *\n\t *      Tween.get(target).to({x:100}, 500, Ease.linear);\n\t *\n\t * However, methods beginning with \"get\" will return an easing function based on parameter values:\n\t *\n\t *      Tween.get(target).to({y:200}, 500, Ease.getPowIn(2.2));\n\t *\n\t * Please see the <a href=\"http://www.createjs.com/Demos/TweenJS/Tween_SparkTable\">spark table demo</a> for an\n\t * overview of the different ease types on <a href=\"http://tweenjs.com\">TweenJS.com</a>.\n\t *\n\t * <em>Equations derived from work by Robert Penner.</em>\n\t * @class Ease\n\t * @static\n\t **/\n\tfunction Ease() {\n\t\tthrow \"Ease cannot be instantiated.\";\n\t}\n\n\n// static methods and properties\n\t/**\n\t * @method linear\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.linear = function(t) { return t; };\n\n\t/**\n\t * Identical to linear.\n\t * @method none\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.none = Ease.linear;\n\n\t/**\n\t * Mimics the simple -100 to 100 easing in Flash Pro.\n\t * @method get\n\t * @param {Number} amount A value from -1 (ease in) to 1 (ease out) indicating the strength and direction of the ease.\n\t * @static\n\t * @return {Function}\n\t **/\n\tEase.get = function(amount) {\n\t\tif (amount < -1) { amount = -1; }\n\t\tif (amount > 1) { amount = 1; }\n\t\treturn function(t) {\n\t\t\tif (amount==0) { return t; }\n\t\t\tif (amount<0) { return t*(t*-amount+1+amount); }\n\t\t\treturn t*((2-t)*amount+(1-amount));\n\t\t};\n\t};\n\n\t/**\n\t * Configurable exponential ease.\n\t * @method getPowIn\n\t * @param {Number} pow The exponent to use (ex. 3 would return a cubic ease).\n\t * @static\n\t * @return {Function}\n\t **/\n\tEase.getPowIn = function(pow) {\n\t\treturn function(t) {\n\t\t\treturn Math.pow(t,pow);\n\t\t};\n\t};\n\n\t/**\n\t * Configurable exponential ease.\n\t * @method getPowOut\n\t * @param {Number} pow The exponent to use (ex. 3 would return a cubic ease).\n\t * @static\n\t * @return {Function}\n\t **/\n\tEase.getPowOut = function(pow) {\n\t\treturn function(t) {\n\t\t\treturn 1-Math.pow(1-t,pow);\n\t\t};\n\t};\n\n\t/**\n\t * Configurable exponential ease.\n\t * @method getPowInOut\n\t * @param {Number} pow The exponent to use (ex. 3 would return a cubic ease).\n\t * @static\n\t * @return {Function}\n\t **/\n\tEase.getPowInOut = function(pow) {\n\t\treturn function(t) {\n\t\t\tif ((t*=2)<1) return 0.5*Math.pow(t,pow);\n\t\t\treturn 1-0.5*Math.abs(Math.pow(2-t,pow));\n\t\t};\n\t};\n\n\t/**\n\t * @method quadIn\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.quadIn = Ease.getPowIn(2);\n\t/**\n\t * @method quadOut\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.quadOut = Ease.getPowOut(2);\n\t/**\n\t * @method quadInOut\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.quadInOut = Ease.getPowInOut(2);\n\n\t/**\n\t * @method cubicIn\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.cubicIn = Ease.getPowIn(3);\n\t/**\n\t * @method cubicOut\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.cubicOut = Ease.getPowOut(3);\n\t/**\n\t * @method cubicInOut\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.cubicInOut = Ease.getPowInOut(3);\n\n\t/**\n\t * @method quartIn\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.quartIn = Ease.getPowIn(4);\n\t/**\n\t * @method quartOut\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.quartOut = Ease.getPowOut(4);\n\t/**\n\t * @method quartInOut\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.quartInOut = Ease.getPowInOut(4);\n\n\t/**\n\t * @method quintIn\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.quintIn = Ease.getPowIn(5);\n\t/**\n\t * @method quintOut\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.quintOut = Ease.getPowOut(5);\n\t/**\n\t * @method quintInOut\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.quintInOut = Ease.getPowInOut(5);\n\n\t/**\n\t * @method sineIn\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.sineIn = function(t) {\n\t\treturn 1-Math.cos(t*Math.PI/2);\n\t};\n\n\t/**\n\t * @method sineOut\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.sineOut = function(t) {\n\t\treturn Math.sin(t*Math.PI/2);\n\t};\n\n\t/**\n\t * @method sineInOut\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.sineInOut = function(t) {\n\t\treturn -0.5*(Math.cos(Math.PI*t) - 1);\n\t};\n\n\t/**\n\t * Configurable \"back in\" ease.\n\t * @method getBackIn\n\t * @param {Number} amount The strength of the ease.\n\t * @static\n\t * @return {Function}\n\t **/\n\tEase.getBackIn = function(amount) {\n\t\treturn function(t) {\n\t\t\treturn t*t*((amount+1)*t-amount);\n\t\t};\n\t};\n\t/**\n\t * @method backIn\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.backIn = Ease.getBackIn(1.7);\n\n\t/**\n\t * Configurable \"back out\" ease.\n\t * @method getBackOut\n\t * @param {Number} amount The strength of the ease.\n\t * @static\n\t * @return {Function}\n\t **/\n\tEase.getBackOut = function(amount) {\n\t\treturn function(t) {\n\t\t\treturn (--t*t*((amount+1)*t + amount) + 1);\n\t\t};\n\t};\n\t/**\n\t * @method backOut\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.backOut = Ease.getBackOut(1.7);\n\n\t/**\n\t * Configurable \"back in out\" ease.\n\t * @method getBackInOut\n\t * @param {Number} amount The strength of the ease.\n\t * @static\n\t * @return {Function}\n\t **/\n\tEase.getBackInOut = function(amount) {\n\t\tamount*=1.525;\n\t\treturn function(t) {\n\t\t\tif ((t*=2)<1) return 0.5*(t*t*((amount+1)*t-amount));\n\t\t\treturn 0.5*((t-=2)*t*((amount+1)*t+amount)+2);\n\t\t};\n\t};\n\t/**\n\t * @method backInOut\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.backInOut = Ease.getBackInOut(1.7);\n\n\t/**\n\t * @method circIn\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.circIn = function(t) {\n\t\treturn -(Math.sqrt(1-t*t)- 1);\n\t};\n\n\t/**\n\t * @method circOut\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.circOut = function(t) {\n\t\treturn Math.sqrt(1-(--t)*t);\n\t};\n\n\t/**\n\t * @method circInOut\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.circInOut = function(t) {\n\t\tif ((t*=2) < 1) return -0.5*(Math.sqrt(1-t*t)-1);\n\t\treturn 0.5*(Math.sqrt(1-(t-=2)*t)+1);\n\t};\n\n\t/**\n\t * @method bounceIn\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.bounceIn = function(t) {\n\t\treturn 1-Ease.bounceOut(1-t);\n\t};\n\n\t/**\n\t * @method bounceOut\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.bounceOut = function(t) {\n\t\tif (t < 1/2.75) {\n\t\t\treturn (7.5625*t*t);\n\t\t} else if (t < 2/2.75) {\n\t\t\treturn (7.5625*(t-=1.5/2.75)*t+0.75);\n\t\t} else if (t < 2.5/2.75) {\n\t\t\treturn (7.5625*(t-=2.25/2.75)*t+0.9375);\n\t\t} else {\n\t\t\treturn (7.5625*(t-=2.625/2.75)*t +0.984375);\n\t\t}\n\t};\n\n\t/**\n\t * @method bounceInOut\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.bounceInOut = function(t) {\n\t\tif (t<0.5) return Ease.bounceIn (t*2) * .5;\n\t\treturn Ease.bounceOut(t*2-1)*0.5+0.5;\n\t};\n\n\t/**\n\t * Configurable elastic ease.\n\t * @method getElasticIn\n\t * @param {Number} amplitude\n\t * @param {Number} period\n\t * @static\n\t * @return {Function}\n\t **/\n\tEase.getElasticIn = function(amplitude,period) {\n\t\tvar pi2 = Math.PI*2;\n\t\treturn function(t) {\n\t\t\tif (t==0 || t==1) return t;\n\t\t\tvar s = period/pi2*Math.asin(1/amplitude);\n\t\t\treturn -(amplitude*Math.pow(2,10*(t-=1))*Math.sin((t-s)*pi2/period));\n\t\t};\n\t};\n\t/**\n\t * @method elasticIn\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.elasticIn = Ease.getElasticIn(1,0.3);\n\n\t/**\n\t * Configurable elastic ease.\n\t * @method getElasticOut\n\t * @param {Number} amplitude\n\t * @param {Number} period\n\t * @static\n\t * @return {Function}\n\t **/\n\tEase.getElasticOut = function(amplitude,period) {\n\t\tvar pi2 = Math.PI*2;\n\t\treturn function(t) {\n\t\t\tif (t==0 || t==1) return t;\n\t\t\tvar s = period/pi2 * Math.asin(1/amplitude);\n\t\t\treturn (amplitude*Math.pow(2,-10*t)*Math.sin((t-s)*pi2/period )+1);\n\t\t};\n\t};\n\t/**\n\t * @method elasticOut\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.elasticOut = Ease.getElasticOut(1,0.3);\n\n\t/**\n\t * Configurable elastic ease.\n\t * @method getElasticInOut\n\t * @param {Number} amplitude\n\t * @param {Number} period\n\t * @static\n\t * @return {Function}\n\t **/\n\tEase.getElasticInOut = function(amplitude,period) {\n\t\tvar pi2 = Math.PI*2;\n\t\treturn function(t) {\n\t\t\tvar s = period/pi2 * Math.asin(1/amplitude);\n\t\t\tif ((t*=2)<1) return -0.5*(amplitude*Math.pow(2,10*(t-=1))*Math.sin( (t-s)*pi2/period ));\n\t\t\treturn amplitude*Math.pow(2,-10*(t-=1))*Math.sin((t-s)*pi2/period)*0.5+1;\n\t\t};\n\t};\n\t/**\n\t * @method elasticInOut\n\t * @param {Number} t\n\t * @static\n\t * @return {Number}\n\t **/\n\tEase.elasticInOut = Ease.getElasticInOut(1,0.3*1.5);\n\n\tcreatejs.Ease = Ease;\n\n}());\n\n//##############################################################################\n// MotionGuidePlugin.js\n//##############################################################################\n\nthis.createjs = this.createjs||{};\n\n(function() {\n\t\"use strict\";\n\n\t/**\n\t * A TweenJS plugin for working with motion guides.\n\t *\n\t * To use, install the plugin after TweenJS has loaded. Next tween the 'guide' property with an object as detailed below.\n\t *\n\t *       createjs.MotionGuidePlugin.install();\n\t *\n\t * <h4>Example</h4>\n\t *\n\t *      // Using a Motion Guide\n\t *\t    createjs.Tween.get(target).to({guide:{ path:[0,0, 0,200,200,200, 200,0,0,0] }},7000);\n\t *\t    // Visualizing the line\n\t *\t    graphics.moveTo(0,0).curveTo(0,200,200,200).curveTo(200,0,0,0);\n\t *\n\t * Each path needs pre-computation to ensure there's fast performance. Because of the pre-computation there's no\n\t * built in support for path changes mid tween. These are the Guide Object's properties:<UL>\n\t *      <LI> path: Required, Array : The x/y points used to draw the path with a moveTo and 1 to n curveTo calls.</LI>\n\t *      <LI> start: Optional, 0-1 : Initial position, default 0 except for when continuing along the same path.</LI>\n\t *      <LI> end: Optional, 0-1 : Final position, default 1 if not specified.</LI>\n\t *      <LI> orient: Optional, string : \"fixed\"/\"auto\"/\"cw\"/\"ccw\"<UL>\n\t *\t\t\t\t<LI>\"fixed\" forces the object to face down the path all movement (relative to start rotation),</LI>\n\t *      \t\t<LI>\"auto\" rotates the object along the path relative to the line.</LI>\n\t *      \t\t<LI>\"cw\"/\"ccw\" force clockwise or counter clockwise rotations including flash like behaviour</LI>\n\t * \t\t</UL></LI>\n\t * </UL>\n\t * Guide objects should not be shared between tweens even if all properties are identical, the library stores\n\t * information on these objects in the background and sharing them can cause unexpected behaviour. Values\n\t * outside 0-1 range of tweens will be a \"best guess\" from the appropriate part of the defined curve.\n\t *\n\t * @class MotionGuidePlugin\n\t * @constructor\n\t **/\n\tfunction MotionGuidePlugin() {\n\t\tthrow(\"MotionGuidePlugin cannot be instantiated.\")\n\t};\n\n\n// static properties:\n\t/**\n\t * @property priority\n\t * @protected\n\t * @static\n\t **/\n\tMotionGuidePlugin.priority = 0; // high priority, should run sooner\n\n\t/**\n\t * @property temporary variable storage\n\t * @private\n\t * @static\n\t */\n\tMotionGuidePlugin._rotOffS;\n\t/**\n\t * @property temporary variable storage\n\t * @private\n\t * @static\n\t */\n\tMotionGuidePlugin._rotOffE;\n\t/**\n\t * @property temporary variable storage\n\t * @private\n\t * @static\n\t */\n\tMotionGuidePlugin._rotNormS;\n\t/**\n\t * @property temporary variable storage\n\t * @private\n\t * @static\n\t */\n\tMotionGuidePlugin._rotNormE;\n\n\n// static methods\n\t/**\n\t * Installs this plugin for use with TweenJS. Call this once after TweenJS is loaded to enable this plugin.\n\t * @method install\n\t * @static\n\t **/\n\tMotionGuidePlugin.install = function() {\n\t\tcreatejs.Tween.installPlugin(MotionGuidePlugin, [\"guide\", \"x\", \"y\", \"rotation\"]);\n\t\treturn createjs.Tween.IGNORE;\n\t};\n\n\t/**\n\t * @method init\n\t * @protected\n\t * @static\n\t **/\n\tMotionGuidePlugin.init = function(tween, prop, value) {\n\t\tvar target = tween.target;\n\t\tif(!target.hasOwnProperty(\"x\")){ target.x = 0; }\n\t\tif(!target.hasOwnProperty(\"y\")){ target.y = 0; }\n\t\tif(!target.hasOwnProperty(\"rotation\")){ target.rotation = 0; }\n\n\t\tif(prop==\"rotation\"){ tween.__needsRot = true; }\n\t\treturn prop==\"guide\"?null:value;\n\t};\n\n\t/**\n\t * @method step\n\t * @protected\n\t * @static\n\t **/\n\tMotionGuidePlugin.step = function(tween, prop, startValue, endValue, injectProps) {\n\t\t// other props\n\t\tif(prop == \"rotation\"){\n\t\t\ttween.__rotGlobalS = startValue;\n\t\t\ttween.__rotGlobalE = endValue;\n\t\t\tMotionGuidePlugin.testRotData(tween, injectProps);\n\t\t}\n\t\tif(prop != \"guide\"){ return endValue; }\n\n\t\t// guide only information - Start -\n\t\tvar temp, data = endValue;\n\t\tif(!data.hasOwnProperty(\"path\")){ data.path = []; }\n\t\tvar path = data.path;\n\t\tif(!data.hasOwnProperty(\"end\")){ data.end = 1; }\n\t\tif(!data.hasOwnProperty(\"start\")){\n\t\t\tdata.start = (startValue&&startValue.hasOwnProperty(\"end\")&&startValue.path===path)?startValue.end:0;\n\t\t}\n\n\t\t// Figure out subline information\n\t\tif(data.hasOwnProperty(\"_segments\") && data._length){ return endValue; }\n\t\tvar l = path.length;\n\t\tvar accuracy = 10;\t\t// Adjust to improve line following precision but sacrifice performance (# of seg)\n\t\tif(l >= 6 && (l-2) % 4 == 0){\t// Enough points && contains correct number per entry ignoring start\n\t\t\tdata._segments = [];\n\t\t\tdata._length = 0;\n\t\t\tfor(var i=2; i<l; i+=4){\n\t\t\t\tvar sx = path[i-2], sy = path[i-1];\n\t\t\t\tvar cx = path[i+0], cy = path[i+1];\n\t\t\t\tvar ex = path[i+2], ey = path[i+3];\n\t\t\t\tvar oldX = sx, oldY = sy;\n\t\t\t\tvar tempX, tempY, total = 0;\n\t\t\t\tvar sublines = [];\n\t\t\t\tfor(var j=1; j<=accuracy; j++){\n\t\t\t\t\tvar t = j/accuracy;\n\t\t\t\t\tvar inv = 1 - t;\n\t\t\t\t\ttempX = inv*inv * sx + 2 * inv * t * cx + t*t * ex;\n\t\t\t\t\ttempY = inv*inv * sy + 2 * inv * t * cy + t*t * ey;\n\t\t\t\t\ttotal += sublines[sublines.push(Math.sqrt((temp=tempX-oldX)*temp + (temp=tempY-oldY)*temp))-1];\n\t\t\t\t\toldX = tempX;\n\t\t\t\t\toldY = tempY;\n\t\t\t\t}\n\t\t\t\tdata._segments.push(total);\n\t\t\t\tdata._segments.push(sublines);\n\t\t\t\tdata._length += total;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow(\"invalid 'path' data, please see documentation for valid paths\");\n\t\t}\n\n\t\t// Setup x/y tweens\n\t\ttemp = data.orient;\n\t\tdata.orient = true;\n\t\tvar o = {};\n\t\tMotionGuidePlugin.calc(data, data.start, o);\n\t\ttween.__rotPathS = Number(o.rotation.toFixed(5));\n\t\tMotionGuidePlugin.calc(data, data.end, o);\n\t\ttween.__rotPathE = Number(o.rotation.toFixed(5));\n\t\tdata.orient = false;\t//here and now we don't know if we need to\n\t\tMotionGuidePlugin.calc(data, data.end, injectProps);\n\t\tdata.orient = temp;\n\n\t\t// Setup rotation properties\n\t\tif(!data.orient){ return endValue; }\n\t\ttween.__guideData = data;\n\t\tMotionGuidePlugin.testRotData(tween, injectProps);\n\t\treturn endValue;\n\t};\n\n\t/**\n\t * @method testRotData\n\t * @protected\n\t * @static\n\t **/\n\tMotionGuidePlugin.testRotData = function(tween, injectProps){\n\n\t\t// no rotation informat? if we need it come back, if we don't use 0 & ensure we have guide data\n\t\tif(tween.__rotGlobalS === undefined || tween.__rotGlobalE === undefined){\n\t\t\tif(tween.__needsRot){ return; }\n\t\t\tif(tween._curQueueProps.rotation !== undefined){\n\t\t\t\ttween.__rotGlobalS = tween.__rotGlobalE = tween._curQueueProps.rotation;\n\t\t\t} else {\n\t\t\t\ttween.__rotGlobalS = tween.__rotGlobalE = injectProps.rotation = tween.target.rotation || 0;\n\t\t\t}\n\t\t}\n\t\tif(tween.__guideData === undefined){ return; }\n\n\t\t// Process rotation properties\n\t\tvar data = tween.__guideData;\n\t\tvar rotGlobalD = tween.__rotGlobalE - tween.__rotGlobalS;\n\t\tvar rotPathD = tween.__rotPathE - tween.__rotPathS;\n\t\tvar rot = rotGlobalD - rotPathD;\n\n\t\tif(data.orient == \"auto\"){\n\t\t\tif(rot > 180){\t\t\trot -= 360; }\n\t\t\telse if(rot < -180){\trot += 360; }\n\n\t\t} else if(data.orient == \"cw\"){\n\t\t\twhile(rot < 0){ rot += 360; }\n\t\t\tif(rot == 0 && rotGlobalD > 0 && rotGlobalD != 180){ rot += 360; }\n\n\t\t} else if(data.orient == \"ccw\"){\n\t\t\trot = rotGlobalD - ((rotPathD > 180)?(360-rotPathD):(rotPathD));\t// sign flipping on path\n\t\t\twhile(rot > 0){ rot -= 360; }\n\t\t\tif(rot == 0 && rotGlobalD < 0 && rotGlobalD != -180){ rot -= 360; }\n\t\t}\n\n\t\tdata.rotDelta = rot;\n\t\tdata.rotOffS = tween.__rotGlobalS - tween.__rotPathS;\n\n\t\t// reset\n\t\ttween.__rotGlobalS = tween.__rotGlobalE = tween.__guideData = tween.__needsRot = undefined;\n\t};\n\n\t/**\n\t * @method tween\n\t * @protected\n\t * @static\n\t **/\n\tMotionGuidePlugin.tween = function(tween, prop, value, startValues, endValues, ratio, wait, end) {\n\t\tvar data = endValues.guide;\n\t\tif(data == undefined || data === startValues.guide){ return value; }\n\t\tif(data.lastRatio != ratio){\n\t\t\t// first time through so calculate what I need to\n\t\t\tvar t = ((data.end-data.start)*(wait?data.end:ratio)+data.start);\n\t\t\tMotionGuidePlugin.calc(data, t, tween.target);\n\t\t\tswitch(data.orient){\n\t\t\t\tcase \"cw\":\t\t// mix in the original rotation\n\t\t\t\tcase \"ccw\":\n\t\t\t\tcase \"auto\": tween.target.rotation += data.rotOffS + data.rotDelta*ratio; break;\n\t\t\t\tcase \"fixed\":\t// follow fixed behaviour to solve potential issues\n\t\t\t\tdefault: tween.target.rotation += data.rotOffS; break;\n\t\t\t}\n\t\t\tdata.lastRatio = ratio;\n\t\t}\n\t\tif(prop == \"rotation\" && ((!data.orient) || data.orient == \"false\")){ return value; }\n\t\treturn tween.target[prop];\n\t};\n\n\t/**\n\t * Determine the appropriate x/y/rotation information about a path for a given ratio along the path.\n\t * Assumes a path object with all optional parameters specified.\n\t * @param data Data object you would pass to the \"guide:\" property in a Tween\n\t * @param ratio 0-1 Distance along path, values outside 0-1 are \"best guess\"\n\t * @param target Object to copy the results onto, will use a new object if not supplied.\n\t * @return {Object} The target object or a new object w/ the tweened properties\n\t * @static\n\t */\n\tMotionGuidePlugin.calc = function(data, ratio, target) {\n\t\tif(data._segments == undefined){ MotionGuidePlugin.validate(data); }\n\t\tif(target == undefined){ target = {x:0, y:0, rotation:0}; }\n\t\tvar seg = data._segments;\n\t\tvar path = data.path;\n\n\t\t// find segment\n\t\tvar pos = data._length * ratio;\n\t\tvar cap = seg.length - 2;\n\t\tvar n = 0;\n\t\twhile(pos > seg[n] && n < cap){\n\t\t\tpos -= seg[n];\n\t\t\tn+=2;\n\t\t}\n\n\t\t// find subline\n\t\tvar sublines = seg[n+1];\n\t\tvar i = 0;\n\t\tcap = sublines.length-1;\n\t\twhile(pos > sublines[i] && i < cap){\n\t\t\tpos -= sublines[i];\n\t\t\ti++;\n\t\t}\n\t\tvar t = (i/++cap)+(pos/(cap*sublines[i]));\n\n\t\t// find x/y\n\t\tn = (n*2)+2;\n\t\tvar inv = 1 - t;\n\t\ttarget.x = inv*inv * path[n-2] + 2 * inv * t * path[n+0] + t*t * path[n+2];\n\t\ttarget.y = inv*inv * path[n-1] + 2 * inv * t * path[n+1] + t*t * path[n+3];\n\n\t\t// orientation\n\t\tif(data.orient){\n\t\t\ttarget.rotation = 57.2957795 * Math.atan2(\n\t\t\t\t(path[n+1]-path[n-1])*inv + (path[n+3]-path[n+1])*t,\n\t\t\t\t(path[n+0]-path[n-2])*inv + (path[n+2]-path[n+0])*t);\n\t\t}\n\n\t\treturn target;\n\t};\n\n\tcreatejs.MotionGuidePlugin = MotionGuidePlugin;\n\n}());\n\n//##############################################################################\n// version.js\n//##############################################################################\n\nthis.createjs = this.createjs || {};\n\n(function() {\n\t\"use strict\";\n\n\t/**\n\t * Static class holding library specific information such as the version and buildDate of\n\t * the library.\n\t * @class TweenJS\n\t **/\n\tvar s = createjs.TweenJS = createjs.TweenJS || {};\n\n\t/**\n\t * The version string for this release.\n\t * @property version\n\t * @type String\n\t * @static\n\t **/\n\ts.version = /*=version*/\"0.6.1\"; // injected by build process\n\n\t/**\n\t * The build date for this release in UTC format.\n\t * @property buildDate\n\t * @type String\n\t * @static\n\t **/\n\ts.buildDate = /*=date*/\"Thu, 21 May 2015 16:17:37 GMT\"; // injected by build process\n\n})();\nif(typeof module !== \"undefined\" && typeof module.exports !== \"undefined\") module.exports = this.createjs;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)(module), __webpack_require__(5)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/createjs-collection/createjs.js\n// module id = 1\n// module chunks = 0\n\n//# sourceURL=webpack:///./~/createjs-collection/createjs.js?");

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index_js__ = __webpack_require__(0);\nvar zon = true;\n\nconsole.log(__WEBPACK_IMPORTED_MODULE_0__index_js__[\"a\" /* default */]);\nwindow.createjs = __WEBPACK_IMPORTED_MODULE_0__index_js__[\"a\" /* default */].createjs;\nwindow.zim = __WEBPACK_IMPORTED_MODULE_0__index_js__[\"a\" /* default */].zim;\n// SCALING OPTIONS\n// scaling can have values as follows with full being the default\n// \"fit\"\t\tsets canvas and stage to dimensions and scales to fit inside window size\n// \"outside\"\tsets canvas and stage to dimensions and scales to fit outside window size\n// \"full\"\t\tsets stage to window size with no scaling\n// \"tagID\"\t\tadd canvas to HTML tag of ID - set to dimensions if provided - no scaling\n\nvar scaling = \"fit\"; // fit scales to fit the browser window while keeping the aspect ratio\nvar width = 1024; // can go higher...\nvar height = 768;\nvar color = \"#acd241\";\nvar frame = new zim.Frame(scaling, width, height, color); // see docs for more options and info\nframe.on(\"ready\", function() {\n\tzog(\"ready from ZIM Frame\");\n\n\tvar stage = frame.stage;\n\tvar stageW = frame.width;\n\tvar stageH = frame.height;\n\n\t// put your code here (you can delete this code)\n\n\tvar button = new zim.Button(140, 60, \"ZIM\");\n\tbutton.center(stage); // this adds to stage as well otherwise stage.addChild(button);\n\tbutton.on(\"click\", function() { // on() is like addEventListener()\n\t\tzgo(\"http://zimjs.com/code/frame.html\"); // or relative URL, target is available too\n\t});\n\n\tstage.update(); // update the stage to see any changes\n\n}); // end of ready\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./test/app.js\n// module id = 2\n// module chunks = 0\n\n//# sourceURL=webpack:///./test/app.js?");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

eval("// ZIM js Interactive Media framework http://zimjs.com by Dan Zen http://danzen.com (c) 2017\n// Also see http://zimjs.com/code/distill to minify only the functions in your app\n// free to use - donations welcome of course! http://zimjs.com/donate\n\n\n////////////////  ZIM WRAP  //////////////\n\n// Zim Wrap creates global wrapper functions for less typing\n\n// set var zon=true before calling zim scripts to show script comments\nif (typeof zon === \"undefined\") zon = false; // comments from zim scripts\n\n/*--\nzog(item1, item2, etc.)         ~ log\n\nzog\nglobal function\n\nDESCRIPTION\nShort version of console.log()\nto log the item(s) to the console.\nUse F12 to open your Browser console.\n\nEXAMPLE\nzog(\"hello\", circle.x); // logs these values to the console\nEND EXAMPLE\n\nPARAMETERS\nitem1, item2 (optional), etc. - items (expressions) to log to the console\n\nRETURNS items it is logging separated by a space if more than one\n--*///+0\n// reported a bug in Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1280818\n// that after FF 46 binding the console did not show file and line number\n// this is fixed in FF 50\nvar zog = console.log.bind(console);\n//-0\n\n/*--\nzid(string)                     ~ id\n\nzid\nglobal function\n\nDESCRIPTION\nShort version of document.getElementById(string)\nto access an HTML tag by its id.\n\nEXAMPLE\nzid(\"logo\").addEventListener(\"click\", function(){});\nEND EXAMPLE\n\nPARAMETERS\nstring - the id of the tag you are wanting to access\n\nRETURNS HTML tag with id of string or null if not found\n--*///+1\nfunction zid(s) {\n\tz_d(\"1\");\n\treturn document.getElementById(s);\n} //-1\n\n/*--\nzss(string)                     ~ css\n\nzss\nglobal function\n\nDESCRIPTION\nShort version of document.getElementById(string).style\nto access the style property of an HTML tag by the tag id.\n\nEXAMPLE\nzss(\"logo\").margin = \"10px\";\nEND EXAMPLE\n\nPARAMETERS\nstring - the id of the tag whose style you are wanting to access\n\nRETURNS style property of HTML tag with id of string or undefined if not found\n--*///+2\nfunction zss(s) {\n\tz_d(\"2\");\n\tif (document.getElementById(s)) {return document.getElementById(s).style;}\n\telse if (zon) zog(\"zim wrap - zss(): id not found\");\n} //-2\n\n/*--\nzgo(url, target, modal)         ~ go\n\nzgo\nglobal function\n\nDESCRIPTION\nShort version of either window.location.href or window.open\nto open a link in the same window or a specified window.\n\nEXAMPLE\nzid(\"logo\").addEventListener(\"click\", function(){zgo(\"http://zimjs.com\");});\n\n// with a ZIM object:\nvar button = new zim.Button();\nbutton.center(stage);\nbutton.on(\"click\", function() {zgo(\"http://zimjs.com\");});\nEND EXAMPLE\n\nPARAMETERS\nurl - the link to use (Absolute, Relative or Virtual)\ntarget - (default null) the string name of a window (tab) _blank for new window each time\nmodal - (default false) set to true to force user to close window\n\nRETURNS null if opening in same window or reference to the window otherwise\n--*///+3\nfunction zgo(u,t,w,h,f,m) {\n\tz_d(\"3\");\n\tif ((zot(t) && t != \"\") || t == \"_self\") {\n\t\twindow.location.href = u;\n\t} else {\n\t\tvar added = \"\";\n\t\tif (w) added += \"width=\" + w + \",\";\n\t\tif (h) added += \"height=\" + h + \",\";\n\t\tif (f) added += \"fullscreen=yes,\";\n\t\tif (m) added += \"modal=yes,alwaysRaised=yes\";\n\t\treturn window.open(u,t,added);\n\t}\n} //-3\n\n/*--\nzum(string)                     ~ num\n\nzum\nglobal function\n\nDESCRIPTION\nTakes the units off a string number.\nConverts \"10px\" string from styles to number 10, for instance.\nIf there is no value then this will return 0.\n\nEXAMPLE\n// in HTML\n<div id=\"logo\" style=\"position:relative; left:10px\">LOGO</div>\n\n// in JavaScript\nvar left = zum(zss(\"logo\").left); // converts 10px to the Number 10\nleft += 20; // adds 20 to 10\nzss(\"logo\").left = left + \"px\"; // assigns 30px to left style\nEND EXAMPLE\n\nPARAMETERS\nstring - the string representation of a number eg. \"10px\"\n\nRETURNS a Number\n--*///+4\nfunction zum(s) {\n\tz_d(\"4\");\n\tif (zot(s)) return;\n\treturn Number(String(s).replace(/[^\\d\\.\\-]/g, ''));\n} //-4\n\n/*--\nzot(value)                      ~ not\n\nzot\nglobal function\n\nDESCRIPTION\nTest to see if value has no value (value must exist as var or parameter)\nor if value has been set to null.\nGood for setting function defaults.\nReally just asking if the value == null.\nOften we forget exactly how to do this - it is tricky:\nvalue === null, value == undefined, value == 0, !value DO NOT WORK.\n\nEXAMPLE\nif (zot(width)) width = 100;\n// equivalent to\nif (width == null) width = 100;\nEND EXAMPLE\n\nPARAMETERS\nvalue - a variable or parameter you want to see if there is no value assigned\n\nRETURNS Boolean true if value does not exist\n--*///+4.5\nfunction zot(v) {\n\treturn v==null; // both null and undefined match but not false or 0\n}//-4.5\n\n/*--\nzop(e)                          ~ stop\n\nzop\nglobal function\n\nDESCRIPTION\nStop event propagation to subsequently added existing listeners.\nMust pass it e || window.event from your event function.\nNOTE: this is not canceling the default action -\nto cancel default action use e.preventDefault();\n\nEXAMPLE\nzid(\"button\").addEventListener(\"click\", function(e) {\n\t// do something\n\tzop(e||window.event);\n});\nEND EXAMPLE\n\nPARAMETERS\ne - the event object from your event function\n \tcollect the event object as e and then pass in e || window.event\n\nRETURNS null\n--*///+5\nfunction zop(e) {\n\tz_d(\"5\");\n\tif (zot(e)) return;\n\tif (e.stopImmediatePropagation) e.stopImmediatePropagation();\n\tif (window.event) window.event.cancelBubble=true;\n} //-5\n\n/*--\nzil()                           ~ still\n\nzil\nglobal function\n\nDESCRIPTION\nStop keys from moving content - arrows, spacebar, pgup, pgdown, home, end.\nStop scroll wheel from moving content - scrolling the canvas for instance.\nZIM Frame does this in the full, fit and outside scale modes.\nIf not using Frame, then you can do this once at the start of your code.\nReturns an array of references to three listeners: [keydown, mousewheel and DOMMouseScroll].\nUse these to removeEventListeners.\nThe arrows, etc, still work but just not their default window behaviour.\n\nEXAMPLE\n// at the top of your code\nvar listenersArray = zil();\n// key and mousewheel arrows, spacebar, etc.\n// will have their default actions stopped until you remove the listeners:\n// window.removeEventListener(\"keydown\", listenersArray[0]); // etc.\nEND EXAMPLE\n\nRETURNS an Array\n--*///+6\nfunction zil() {\n\tz_d(\"6\");\n\tvar a = function(e) {if (!e) e = event; if (e.keyCode && (e.keyCode >= 32 && e.keyCode <= 40)) e.preventDefault();}\n\tvar b = function(e) {if (!e) e = event; e.preventDefault();}\n\tvar c = b;\n\twindow.addEventListener(\"keydown\", a);\n\twindow.addEventListener(\"mousewheel\", b);\n\twindow.addEventListener(\"DOMMouseScroll\", c);\n\treturn [a, b, c];\n} //-6\n\n/*--\nzet(selector)                   ~ set\n\nzet\nglobal function\n\nDESCRIPTION\nUses document.querySelectorAll() to get a list of tags.\nReturns a ZIM Zet object which can be used to add events or styles to the set.\n\nEXAMPLE\nzet(\".class\").on(\"click\", function(){}); // would add function event to all tags with the class\nzet(\"p\").css(\"color\", \"goldenrod\"); // would make the text of all paragraphs goldenrod\nzet(\"#test\").css({color:\"red\", \"backgound-color\":\"blue\", paddingLeft:\"20px\"});\n\n// set a custom open property on all section bars to false\nzet(\"section .bar\").prop(\"open\", false);\n// set the custom open property on all section bars to true and set the innerHTML to CLOSE\nzet(\"section .bar\").prop({open: true, innerHTML: \"CLOSE\"});\nEND EXAMPLE\n\nPARAMETERS\nselector -  a CSS query selector such as a class, id, tag, or multiple selectors separated by commands\n\tcan also be complex selectors suchs as \".class img\"\n\nMETHODS (on the returned Zet object)\nzet(selector).on(type, function) - a shortcut for addEventListener() and will be added to all tags matching the selector\nzet(selector).off(type, function) - a shortcut for removeEventListener() and will be remove from all tags matching the selector\nzet(selector).css(property, value) - gets and sets styles\n\t- gets the first programmatic property if a single string property is passed\n\t- sets the property to the value on each of the Zet's tags from the selector passed to zet()\n\t- if an object of properties and values is passed as the single parameter then sets all these properties\n\t- NOTE: style names do not need quotes unless the dash is used - so camelCase does not require quotes\n\t- NOTE: remember that commas are used for objects - not the semi-colon as in CSS\nzet(selector).prop(property, value) - gets or sets a property on a set of tags\n\t- if an object of properties and values is provided as a single parameter, then sets all these on the set\n\t- else if no value is set then returns an array of the set tags values for the property\n\t- else if value is a single value then sets the property of the tags in the set to the value\n\nPROPERTIES  (on the returned Zet object)\ntags - an HTML tag list\n\nRETURNS Zet object with on(), off(), css() methods and tags property (HTML tag list)\n--*///+6.1\nfunction zet(selector) {\n\tz_d(\"6.1\");\n\tfunction Zet() {\n\t\tvar that = this;\n\t\tthis.on = function(type, call) {\n\t\t\tif (zot(selector) || zot(type) || zot(call)) return;\n\t\t\tvar tags = that.tags;\n\t\t\tfor (var i=0; i<tags.length; i++) {\n\t\t\t\ttags[i].addEventListener(type, call);\n\t\t\t}\n\t\t}\n\t\tthis.off = function(type, call) {\n\t\t\tif (zot(selector) || zot(type) || zot(call)) return;\n\t\t\tvar tags = that.tags;\n\t\t\tfor (var i=0; i<tags.length; i++) {\n\t\t\t\ttags[i].removeEventListener(type, call);\n\t\t\t}\n\t\t}\n\t\tObject.defineProperty(that, 'tags', {\n\t\t\tget: function() {\n\t\t\t\tif (zot(selector)) return [];\n\t\t\t\tif (typeof selector == 'string' || selector instanceof String) {\n\t\t\t\t\treturn document.querySelectorAll(selector);\n\t\t\t\t} else { // selector is already an object - assume a tag\n\t\t\t\t\tif (typeof (selector).innerHTML == \"string\") return [selector];\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t},\n\t\t\tset: function(t) {\n\t\t\t}\n\t\t});\n\t\tthis.css = function(property, value) {\n\t\t\t// if property is object then assign all props in object\n\t\t\tvar tags = that.tags;\n\t\t\tfor (var i=0; i<tags.length; i++) {\n\t\t\t\tif (arguments.length == 1 && arguments[0].constructor === {}.constructor) {\n\t\t\t\t\tfor (var p in property) {\n\t\t\t\t\t\ttags[i].style[p] = property[p];\n\t\t\t\t\t}\n\t\t\t\t} else if (arguments.length == 1) {\n\t\t\t\t\treturn that.tags[0].style[property];\n\t\t\t\t} else {\n\t\t\t    \ttags[i].style[property] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.prop = function(property, value) {\n\t\t\tif (zot(property)) return;\n\t\t\tvar tags = that.tags;\n\t\t\tvar a = [];\n\t\t\tfor (var i=0; i<tags.length; i++) {\n\t\t\t\tif (zot(value)) {\n\t\t\t\t\tif (property.constructor === {}.constructor) {\n\t\t\t\t\t\tfor (var p in property) {\n\t\t\t\t\t\t\ttags[i][p] = property[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ta.push(tags[i][property]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t    \ttags[i][property] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (zot(value)) return a;\n\t\t}\n\t}\n\treturn new Zet();\n} //-6.1\n\n/*--\nzob(func, args, sig, scope)     ~ object\n\nzob\nglobal function\n\nDESCRIPTION\nA system to build functions or classes that allow traditional parameters\nor a configuration object passed in as a single parameter.\nThe configuration object has property names that match the function arguments.\n\nTo use zob on your own functions, pass in a function and the function's arguments\nand insert zob into first line of your function as shown below.\nReplace yourFunction with a reference to your function but keep arguments as is.\n\nEXAMPLE\nfunction test(a,b,c){\n\tvar duo; if (duo = zob(yourFunction, arguments)) return duo;\n};\ntest(1,null,3); // traditional parameters in order\ntest({a:1,c:3}); // configuration object with zob\nEND EXAMPLE\n\nNOTE: if you are minifying the file then you need to do an extra step\nadd a string version of the signature of your function above the duo call\nthen pass the signature in as a parameter to zob()\n\nEXAMPLE\nvar sig = \"a,b,c\";\nvar duo; if (duo = zob(yourFunction, arguments, sig)) return duo;\nEND EXAMPLE\n\nNOTE: if you are running the function as a constructor with the new keyword\nthen you need to pass in this (keyword) as the last parameter (sig can be null)\nthis allows zob() to test to see if we need to rerun the function as a constructor\n\nEXAMPLE\nvar duo; if (duo = zob(yourFunction, arguments, sig, this)) return duo;\nEND EXAMPLE\n\nmany of the ZIM functions and classes use this \"DUO\" technique\nthe documentation for parameters will tell you if they support DUO\nworks also with JS6 default parameter values\n\nPARAMETERS\nfunc - reference to the function you want to use params or a config object with\nargs - reference to the arguments property of the function (literally, use \"arguments\" with no quotes)\nsig - (default null) a string listing of the parameters just how they are in the () not including the ()\n\trequired if you are minifying the file as minifying changes the signature\nscope - (default null) reference to this (litterally, use \"this\" without the quotes)\n\trequired if the function is being run with the new keyword\n\nRETURNS um... a Boolean\n--*///+7\nfunction isDUO(a) {return a.length == 1 && a[0].constructor === {}.constructor;}\nfunction zob(func, args, sig, scope) {\n\tif (isDUO(args)) {\n\t\tz_d(\"7\");\n\t\tvar zp = args[0];\n\t\tvar za = (zot(sig))?func.toString().split(/\\n/,1)[0].match(/\\((.*)\\)/)[1].replace(/\\s+/g,\"\").split(\",\"):sig.replace(/\\s+/g,\"\").split(\",\");\n\t\tvar zv = []; var zi; var zt;\n\t\tfor (zi=0; zi<za.length; zi++) {zt=za[zi].split(\"=\")[0]; za[zi]=zt; zv.push(zp[zt]);}\n\t\tfor (zi in zp) {if (za.indexOf(zi)<0) {if (zon) zog(func,\"bad argument \"+zi);}};\n\t\tvar zr; if (zr=(func.prototype.isPrototypeOf(scope))?new (func.bind.apply(func,[null].concat(zv)))():func.apply(null,zv)) {return zr;} else {return true;}\n\t}\n}//-7\n\n/*--\nzik(Array|function|object)      ~ pick\n\nzik\nglobal function\n\nDESCRIPTION\nReceives what is called a ZIM VEE value which is a way of providing options.\nzik() will then randomly pick from the options and return a value.\nThe ZIM VEE value can be the following:\n1. an Array of values to pick from - eg. [\"red\", \"green\", \"blue\"]\n2. a Function that returns a value - eg. function(){return Date.now();}\n3. a ZIM RAND object literal - eg. {min:10, max:20, integer:true, negative:true} max is required\n4. any combination of the above - eg. [\"red\", function(){x>100?[\"green\", \"blue\"]:\"yellow\"}] zik is recursive\n5. a single value such as a Number, String, zim.Rectangle(), etc. this just passes through unchanged\nNOTE: zik() cannot be used when an Array, Function, or Object with a max property are required as a final value\nNOTE: the ZIM RAND object gets passed to zim.rand() directly so read about params there - integer defaults to false for zik()\n\nThink of zik() as a random option filter for a parameter that can be passed and then picked later with zik()\nThis is different than executing right away although you can use zik() directly for that\nUsed by zim.interval, zim.move, zim.animate and zim.Emitter\nzik() is recursive so it will zik() the answer from an Array or Function\n\nEXAMPLE\nvar loopCount = [1,2,3];\nloopCount = zik(loopCount); // loopCount is 1, 2, or 3\n// if just simple like this, could use loopCount = zim.shuffle(loopCount)[0];\n// but then would have to check first if loopCount is an array rather than single value\n\nvar rotation = {min:10, max:20, integer:false, negative:true};\n// an example of a RAND object - this will give values between -20 and -10 or 10 and 20\n// rotation now holds an object as to how to pick its value\n// this can be passed into a zim.Emitter() for instance\n// which will make multiple copies and rotate them based on zik()\n// or this can be passed into an animation object\n// and then into zim.Emitter() for the animate parameter\n\nvar emitter = new zim.Emitter({\n\tobj:new zim.Rectangle(),\n\trandom:[rotation:rotation] // the emitter will use zik() to pick a rotation each particle\n});\n\nfunction age() {\n\t// assuming user.age is some input value that exists\n\tif (user.age >= 18) return [\"a\", \"b\", [\"c\",\"d\"]];\n\telse return [\"e\", \"f\"];\n}\n// below will be a, b, c or d if user is 18+ with a and b having more of a chance\n// or e or f if not over 18\nvar show = zik(age);\nEND EXAMPLE\n\nPARAMETERS\nvalue - an Array to randomly pick from or a Function yielding a return value\n \tor an Object literal to pick a random number as follows:\n\t{min:0, max:20, integer:false, negative:false} - this RAND object is passes through to zim.rand()\n\tSee zim.rand() for defaults and parameter descriptions\n\tNOTE: one change in defaults: the RAND object integer parameter defaults to false where zim.rand() defaults to true\n\nRETURNS a random element from the Array or a Function result if a function is passed in\nor a Number from Object instructions or the value that was given\nand the value from an Array or Function is passed through zik() again, etc. until a single value is returned\n--*///+7.5\nfunction zik(v) {\n\tz_d(\"7.5\");\n\tif (zot(v)) return;\n\tif ((v.constructor === {}.constructor) || Array.isArray(v) || typeof v == \"function\") {\n\t\tif (Array.isArray(v)) {\n\t\t\tvar val = v[Math.floor(Math.random()*(v.length))];\n\t\t\treturn zik(val); // recursive\n\t\t} else if (v.constructor === {}.constructor) {\n\t\t\tif (zot(v.max)) return v;\n\t\t\tif (zot(v.integer)) v.integer = false;\n\t\t\tvar val = zim.rand(v.min, v.max, v.integer, v.negative);\n\t\t\treturn val;\n\t\t} else if (typeof v == \"function\") {\n\t\t\treturn zik((v)()); // recursive\n\t\t}\n\t}\n\treturn v;\n}//-7.5\n\n// the above functions are global for quick usage\n// start the zim module pattern - from here on, everything is stored on the zim namespace\n\nvar zim = function(zim) {\n\n\n////////////////  ZIM CODE  //////////////\n\n// Zim Code adds some general code functionality along with Browser and DOM code\n// some of these are common Web solutions over the years (sorry for lack of credit)\n\n/*--\nzim.shuffle = function(array)\n\nshuffle\nzim function\n\nDESCRIPTION\nRandomly shuffles elements of an array.\nActually changes the original array (and also returns it).\n\nEXAMPLE\nvar array = [\"happy\", \"sad\", \"spooked\"];\nvar randomFromArray = zim.shuffle(array)[0];\n// this will be randomized each time it is run\nEND EXAMPLE\n\nEXAMPLE\nvar array = zim.shuffle([\"happy\", \"sad\", \"spooked\"]);\nfor (var i=0; i<array.length) zog(array[i]);\n// this will get random and unique elements of the array\nEND EXAMPLE\n\nPARAMETERS\narray - the Array to shuffle\n\nRETURNS the modified Array\n--*///+8\n\tzim.shuffle = function(array) {\n\t\tz_d(\"8\");\n\t\tif (zot(array)) return;\n\t\tvar i = array.length, j, temp;\n\t\tif (i == 0) return array;\n\t\twhile(--i) {\n\t\t\tj = Math.floor(Math.random()*(i+1));\n\t\t\ttemp=array[i];\n\t\t\tarray[i]=array[j];\n\t\t\tarray[j]=temp;\n\t\t}\n\t\treturn array;\n\t}//-8\n\n/*--\nzim.rand = function(a, b, integer, negative)\n\nrand\nzim function\n\nDESCRIPTION\nReturns a random integer between and including a and b if integer is true.\nReturns a random number (with decimals) including a and up to b but not b if integer is false.\nb is optional and if left out will default to 0 (includes 0).\ninteger is a boolean and defaults to true.\nIf a and b are 0 then just returns Math.random().\n\nEXAMPLE\nvar speed = zim.rand(10,20); // 10, 11, 12... 18, 19 or 20\n\nvar colors = [\"blue\", \"yellow\", \"green\"];\nvar color = colors[zim.rand(colors.length-1)]; // note the length-1\n\n// the equivalent of:\nvar color = colors[Math.floor(Math.random()*colors.length)];\n\n// OR a technique I often use without using zim.rand():\n// but zim.rand() is probably better\nvar color = zim.shuffle(colors)[0];\n\n// here we get a speed that is either from 5 to 10 or -5 to -10\nvar speed = zim.rand(5,10,null,true);\nEND EXAMPLE\n\nPARAMETERS\na - the first Number for the range\n\tif a and b are not provided, zim.rand() acts like Math.random()\n\tif parameter b is not provided, rand will use range 0 to and including a\nb - (default 0) second Number for the range\n\tit does not matter if a>b or a<b\ninteger - (default true) set to false to include decimals in results\n\tif false, range will include decimals up to but not including the highest number\n\tif a or b have decimals this is set to false\nnegative - (default false) includes the negative range as well as the positive\n\nRETURNS a Number\n--*///+9\n\tzim.rand = function(a, b, integer, negative) {\n\t\tz_d(\"9\");\n\t\tif (zot(a) && zot(b)) return Math.random();\n\t\tif (zot(a) || isNaN(a)) a = 0;\n\t\tif (zot(b) || isNaN(b)) b = 0;\n\t\tif (a%1!=0 || b%1!=0) integer = false;\n\t\tif (zot(integer)) integer = true;\n\t\tif (negative) if (Math.random()>.5) {a*=-1; b*=-1;};\n\t\tif (integer) if (a>b) {a++;} else if (b>a) {b++;}\n\t\tvar r;\n\t\tif (a == 0 && b == 0) {\n\t\t\treturn 0;\n\t\t} else if (b == 0) {\n\t\t\tr = Math.random()*a;\n\t\t} else {\n\t\t\tr = Math.min(a,b) + Math.random()*(Math.max(a,b)-Math.min(a,b));\n\t\t}\n\t\tif (integer) {\n\t\t\treturn Math.floor(r);\n\t\t} else {\n\t\t\treturn r;\n\t\t}\n\t}//-9\n\n/*--\nzim.loop = function(obj, call, reverse, step, start, end)\n\nloop\nzim function\n\nDESCRIPTION\n1. If you pass in a Number for obj then loop() does function call that many times\nand passes function call the currentIndex, totalLoops, startIndex, endIndex, obj.\nBy default, the index starts at 0 and counts up to one less than the number.\nSo this is like: for (var i=0; i<obj; i++) {}\n\n2. If you pass in an Array then loop() loops through the array\nand passes the function call the element in the array, currentIndex, totalLoops, startIndex, endIndex and the array.\nSo this is like: for (var i=0; i<obj; i++) {element = array[i]}\n\n3. If you pass in an Object literal then loop() loops through the object\nand passes the function call the property name, value, currentIndex, totalLoops, startIndex, endIndex, obj\nSo this is like: for (var i in obj) {property = i; value = obj[i];}\n\nNOTE: If you pass in true for reverse, the loop is run backwards counting to 0 (by default)\nNOTE: use return to act like a continue in a loop and go to the next loop\nNOTE: return a value to return out of the loop completely like a break (and return a result if desired)\n\n\nEXAMPLE\nvar container = new zim.Container();\nzim.loop(1000, function(i) { // gets passed an index i, totalLoops 1000, startIndex 0, endIndex 999, obj 1000\n\t// make 1000 rectangles\n\tcontainer.addChild(new zim.Rectangle());\n});\nstage.addChild(container);\n\n// to continue or break from loop have the function return the string \"continue\" or \"break\"\nzim.loop(10, function(i) {\n\tif (i%2==0) return; // skip even\n\tif (i>6) return \"break\"; // quit loop when > 6\n\tzog(i);\n});\n\nvar colors = [frame.green, frame.yellow, frame.pink];\nzim.loop(colors, function(color, index, start, end, array) { // do not have to collect all these\n\tzog(color); // each color\n});\n\nvar person = {name:\"Dan Zen\", occupation:\"Inventor\", location:\"Dundas\"}\nvar result = zim.loop(person, function(prop, val, index, total, start, end, object) { // do not have to collect all these\n\tzog(prop, val); // each key value pair\n\tif (val == \"criminal\") return \"criminal\"; // this would return out of the loop to the containing function\n});\nif (result == \"criminal\") alert(\"oh no!\");\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nobj - a Number of times to loop or an Array or Object to loop through\ncall - the function to call\n\tthe function will receive (as its final parameters) the index, total, start, end, obj\n\t\twhere the index is the current index, total is how many times the loop will run\n\t\tstart is the start index, end is the end index and obj is the object passed to the loop\n\tthe starting parameters vary depending on the type of obj:\n\tif the obj is a number then the first parameter is the index (no extra starting parameters given)\n\tif the obj is an array then the first parameter is the element at the current index\n\tif the obj is an object literal then the first and second parameters are the property name and property value at the current index\nreverse - (default false) set to true to run the loop backwards to 0\nstep - (default 1) each step will increase by this amount (positive whole number - use reverse to go backwards)\nstart - (default 0 or length-1 for reverse) index to start\nend - (default length-1 or 0 for reverse) index to end\n\nRETURNS any value returned from the loop - or undefined if no value is returned from a loop\n--*///+9.5\n\tzim.loop = function(obj, call, reverse, step, start, end) {\n\n\t\tvar sig = \"obj, call, reverse, step, start, end\";\n\t\tvar duo; if (duo = zob(zim.loop, arguments, sig)) return duo;\n\t\tz_d(\"9.5\");\n\t\tif (zot(obj) || zot(call)) return undefined;\n\t\tif (zot(reverse)) reverse = false;\n\t\tif (zot(step) || step <= 0) step = 1;\n\n\t\tvar type = typeof obj==\"number\"?\"number\":(obj.constructor === Array?\"array\":(obj.constructor === {}.constructor?\"object\":\"invalid\"));\n\n\t\tif (type == \"invalid\") {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (type == \"number\" || type == \"array\") {\n\t\t\tvar length = type==\"number\"?obj:obj.length;\n\t\t\tvar total = getTotal(length-1);\n\t\t\tif (total == 0) return;\n\t\t\tif (reverse) {\n\t\t\t\tfor(var i=start; i>=end; i-=step) {\n\t\t\t\t\tif (type==\"number\") {\n\t\t\t\t\t\tvar r = call(i, total, start, end, obj);\n\t\t\t\t\t} else { // array\n\t\t\t\t\t\tvar r = call(obj[i], i, total, start, end, obj);\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof r != 'undefined') return r;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor(var i=start; i<=end; i+=step) {\n\t\t\t\t\tif (type==\"number\") {\n\t\t\t\t\t\tvar r = call(i, total, start, end, obj);\n\t\t\t\t\t} else { // array\n\t\t\t\t\t\tvar r = call(obj[i], i, total, start, end, obj);\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof r != 'undefined') return r;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (type == \"object\") {\n\t\t\tvar length = 0;\n\t\t\tvar props = [];\n\t\t\tfor (var i in obj) {\n\t\t\t\tlength++;\n\t\t\t\tprops.push(i);\n\t\t\t}\n\t\t\tvar total = getTotal(length-1);\n\t\t\tif (total == 0) return;\n\t\t\tif (reverse) {\n\t\t\t\tfor(var i=start; i>=end; i-=step) {\n\t\t\t\t\tvar r = call(props[i], obj[props[i]], i, total, start, end, obj);\n\t\t\t\t\tif (typeof r != 'undefined') return r;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor(var i=start; i<=end; i+=step) {\n\t\t\t\t\tvar r = call(props[i], obj[props[i]], i, total, start, end, obj);\n\t\t\t\t\tif (typeof r != 'undefined') return r;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfunction getTotal(max) {\n\t\t\tif (zot(start)) start = reverse?max:0;\n\t\t\tif (zot(end)) end = reverse?0:max;\n\t\t\tif ((reverse && end > start) || (!reverse && start > end)) return 0;\n\t\t\tif ((start < 0 && end) <0 || (start > max && end > max)) return 0;\n\t\t\tstart = Math.max(0, Math.min(start, max));\n\t\t\tend = Math.max(0, Math.min(end, max));\n\t\t\treturn Math.floor((reverse?(start-end):(end-start)) / step) + 1;\n\t\t}\n\t}//-9.5\n\n/*--\nzim.timeout = function(time, call)\n\ntimeout\nzim function\n\nDESCRIPTION\nCalls a function after the time delay - like window.setTimeout()\nUses window.requestAnimationFrame() that tends to rest when the window is not showing\n\nNOTE: setTimeout has the time parameter last, zim.timeout has it first\nso that it is consistent with zim.loop() and the CreateJS on() method\n\nNOTE: to clear a zim.timeout you use returnID.clear() - different than window.clearTimeout(returnID)\n\nEXAMPLE\nzim.timeout(1000, function(){\n\tcircle.x += 100;\n\tstage.upate();\n});\n// moves the circle 100 pixels after one second\n\n// GAME to press button within one second:\nvar timeout = zim.timeout(1000, function() {\n\tzog(\"you lose!\");\n\tbutton.enabled = false;\n});\nvar button = new zim.Button().center(stage);\nbutton.on(\"click\", function() {\n\tzog(\"you win!\");\n\ttimeout.clear();\n});\nEND EXAMPLE\n\nPARAMETERS\ntime - |ZIM VEE| milliseconds to wait until function is called\n\tor pass in a ZIM VEE value and zik() will pick a time\n\tZIM VEE value is an Array of choices or a Function or an Object literal with min, max, integer properties (RAND object)\ncall - function to call when the time passes - will receive the id object as a single parameter\n\nRETURNS a ZIM timeoutObject to pause and clear the timeout with the following methods and properties:\n\nMETHODS - of ZIM timeoutObject\npause(state) - (default true) will pause the timeout - set to false to unpause the timeout\nclear() - will clear the timeout\n\nPROPERTIES - of ZIM timeoutObject\ntime - the time in milliseconds that has lapsed\npaused - the paused state of the timeout\n--*///+9.7\n\tzim.timeout = function(time, call) {\n\n\t\tz_d(\"9.7\");\n\t\tif (zot(call)) return;\n\t\tif (typeof call != 'function') return;\n\t\tif (zot(time)) time = 1000;\n\t\ttime = zik(time);\n\t\tvar obj = {startTime:Date.now(), time:0, paused:false};\n\t\tvar lastTime = obj.startTime;\n\t\tfunction next() {\n\t\t\tvar now = Date.now()\n\t\t\tobj.time += now - lastTime;\n\t\t\tlastTime = now;\n\t\t\tif (obj.time >= time) {\n\t\t\t\t(call)(obj);\n\t\t\t\tobj.clear();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tobj.rid = requestAnimationFrame(next);\n\t\t}\n\t\tnext();\n\n\t\tobj.pause = function(state) {\n\t\t\tif (zot(state)) state = true;\n\t\t\tif (state) { // pausing\n\t\t\t\tcancelAnimationFrame(obj.rid);\n\t\t\t} else { // unpausing\n\t\t\t\tlastTime = Date.now();\n\t\t\t\tnext();\n\t\t\t}\n\t\t\tobj.paused = state;\n\t\t}\n\n\t\tobj.clear = function() {\n\t\t\tif (obj) cancelAnimationFrame(obj.rid);\n\t\t\tfor (var i in obj) {\n\t\t\t\tdelete obj[i];\n\t\t\t}\n\t\t\tobj.pause = function() {};\n\t\t\tobj.clear = function() {};\n\t\t}\n\n\t\treturn obj;\n\t}//-9.7\n\n/*--\nzim.interval = function(time, call, total, immediate)\n\ninterval\nzim function\n\nDESCRIPTION\nCalls a function after each time delay - like window.setInterval().\nCan pass in an Array of two times to set random time delays each interval.\nCan pass in how many times you want to run the function and whether it runs right away.\nUses window.requestAnimationFrame() that tends to rest when the window is not showing.\n\nNOTE: setInterval has the time parameter last, zim.interval has it first\nso that it is consistent with zim.loop() and the CreateJS on() method\n\nNOTE: to clear a zim.interval you use intervalObj.clear() - different than window.clearInterval(returnID)\n\nEXAMPLE\nzim.interval(1000, function(){\n\tcircle.x += 100;\n\tstage.upate();\n});\n// every second the circle will move 100 pixels\n// if you want smooth movement, use:\n\nzim.Ticker.add(function() {\n\tcircle.x += 100; // no need for stage.update()\n});\n\nzim.interval(1000, function(obj) {\n\tzog(\"counting \" + obj.count); // starts counting at 1\n\tif (obj.count == 10) obj.clear(); // will now log 1 to 10\n});\nOR better:\nzim.interval(1000, function(obj) {\n\tzog(\"counting \" + obj.count); // starts counting at 1\n}, 10); // now will log 1 - 10 with total parameter set to 10\n\nIMMEDIATE:\nzim.interval(1000, function(obj) {\n\tzog(\"counting \" + obj.count); // starts counting at 0\n}, 10, true); // now will log 0 - 9 with immediate parameter set to true\n\nEXTERNAL control:\nvar interval = zim.interval(1000, function() {\n\tzog(\"counting \" + interval.count); // starts counting at 1\n});\nvar button = new zim.Button({label:\"STOP\", toggle:\"START\"}).center(stage);\nbutton.on(\"click\", function(){interval.pause(button.toggled);});\n\nRANDOM intervals with zik()\nzim.interval({min:200, max:800}, dropBombs); // bombs will fall at different rates between 200ms and 800ms\nzim.interval([1000, 2000], dropBombs); // bombs will fall at either 1000 or 2000 ms\nvar count = 1;\nfunction increase() {return ++count*1000}\nzim.interval(increase, dropBombs); // bombs will fall at 1000, then again after 2000 more ms and 3000 ms more after that, etc.\nEND EXAMPLE\n\nPARAMETERS\ntime - |ZIM VEE| (default 1000) milliseconds for the interval (delay until the function runs - again and again)\n\tor pass in a ZIM VEE value and zik() will pick a time\n\tZIM VEE value is an Array of choices or a Function or an Object literal with min, max, integer properties (RAND object)\ncall - function to call when the interval passes\n\tWill be passed a ZIM intervalObject as a single parameter\n\tThis is the same as the return object from zim.animate()\n\tSee the Returns section below for methods and properties of the intervalObject\ntotal - (default null - infinite) the number of times the function is called\n\tnote: the count property counts intervals but the total property is based on function calls.\n\tThe total will be equal to the end count with the immediate parameter set to false (default)\n\tbut the total will be one less than the count if the immediate parameter is true (like an Array index and length)\nimmediate - (default false) set to true to call the function right away (and then still call every interval)\n\tThis will not increase the count in the intervalObject because count counts intervals not function calls\n\tUse the provided parameter of the call function to access the intervalObject inside the call function\n\nRETURNS a ZIM intervalObject to pause and clear the interval with the following methods and properties:\n\nMETHODS - of ZIM intervalObject\npause(state, immediate) - (default true) will pause the interval - set to false to unpause the interval\n\timmediate will make the interval function run right away when unpausing (no effect when pausing)\nclear() - will clear the interval\n\nPROPERTIES - of ZIM intervalObject\ntime - |ZIM VEE| the time for the interval (see time parameter)\ncount - the number of times the interval has run (if immediate is true, the first count is 0)\npaused - the paused state of the interval\npauseTimeLeft - if paused, how much time is left once unpaused\n--*///+9.8\n\tzim.interval = function(time, call, total, immediate) {\n\t\tz_d(\"9.8\");\n\t\tif (zot(call)) return;\n\t\tif (typeof call != 'function') return;\n\t\tif (zot(time)) time = 1000;\n\t\tif (zot(immediate)) immediate = false;\n\t\tif (!zot(total) && (isNaN(total) || total<=0)) return;\n\t\tvar obj = {count:0, paused:false, time:time};\n\n\t\tfunction interval() {\n\t\t\tobj.startTime = Date.now();\n\t\t\tobj.interval = zik(obj.time);\n\t\t\tobj.id = setTimeout(function() {\n\t\t\t\tif (obj.paused) return;\n\t\t\t\tobj.rid = requestAnimationFrame(interval);\n\t\t\t\tobj.count++;\n\t\t\t\t(call)(obj);\n\t\t\t\tcheckTotal();\n\t\t\t}, obj.interval);\n\t\t}\n\t\tinterval();\n\t\tif (immediate) {\n\t\t\tsetTimeout(function() {\n\t\t\t\t(call)(obj);\n\t\t\t\tcheckTotal();\n\t\t\t}, 10);\n\t\t}\n\t\tfunction checkTotal() {\n\t\t\tif (zot(total)) return;\n\t\t\tif (obj.count >= (immediate?total-1:total)) obj.clear();\n\t\t}\n\t\tvar pausedTimeout;\n\t\tobj.pause = function(state, immediate) {\n\t\t\tif (zot(state)) state = true;\n\t\t\tif (state) { // pausing\n\t\t\t\tclearTimeout(pausedTimeout);\n\t\t\t\tclearTimeout(obj.id);\n\t\t\t\tcancelAnimationFrame(obj.rid);\n\t\t\t\tobj.pauseTimeLeft = obj.interval - (Date.now()-obj.startTime);\n\t\t\t} else { // unpausing\n\t\t\t\t\tpausedTimeout = setTimeout(function() {\n\t\t\t\t\t\tobj.count++;\n\t\t\t\t\t\t(call)(obj);\n\t\t\t\t\t\tinterval();\n\t\t\t\t\t\tcheckTotal();\n\t\t\t\t\t}, immediate?0:obj.pauseTimeLeft);\n\t\t\t\tobj.pauseTimeLeft = null;\n\t\t\t}\n\t\t\tobj.paused = state;\n\t\t}\n\t\tobj.clear = function() {\n\t\t\tclearTimeout(pausedTimeout);\n\t\t\tcancelAnimationFrame(obj.rid);\n\t\t\tclearTimeout(obj.id);\n\t\t\tvar count = obj.count;\n\t\t\tfor (var i in obj) {\n\t\t\t\tdelete obj[i];\n\t\t\t}\n\t\t\tobj.count = count;\n\t\t\tobj.pause = function() {};\n\t\t\tobj.clear = function() {};\n\t\t}\n\t\treturn obj;\n\t}//-9.8\n\n/*--\nzim.copy = function(obj)\n\ncopy\nzim function\n\nDESCRIPTION\nCopies arrays and basic objects:\nmodified http://stackoverflow.com/users/35881/a-levy\nIf you have var obj = {prop:\"val\"};\nand then try and copy obj to obj2 like so: obj2 = obj;\nthen obj2 and obj refer to the same object.\nThis means that after obj.prop = \"new\"; both obj.prop and obj2.prop would be \"new\".\nzim.copy(obj) returns a new object so both will work independently\nand after obj.prop = \"new\"; obj2.prop would still be \"val\".\n\nEXAMPLE\nvar obj = {hair:blue, cars:[\"audi\", \"honda\"]};\nvar cop = zim.copy(obj);\ncop.hair = \"green\";\nzog(obj.hair, obj.cop); // blue, green\nobj.cars.push(\"vw\");\nzog(obj.cars.length, cop.cars.length); // 3, 2\n\n// copy with clone for cloneable objects\n// without the second parameter as true these obj[0] and obj2[0] would be the same\n// and when we do the second addTo it would just move the circle to the second position\nvar obj = [\n\tnew zim.Circle(20,frame.green),\n\tnew zim.Rectangle(30,30,frame.green),\n\tnew zim.Triangle(40,40,40,frame.green)\n];\nvar obj2 = zim.copy(obj, true); // copy and clone\nobj[0].addTo(stage).pos(100, 200);\nobj2[0].addTo(stage).pos(300, 400);\nEND EXAMPLE\n\nPARAMETERS\nobj - the object to copy\nclone - (default false) set to true to clone any cloneable object while copying\n\nRETURNS a new Object\n--*///+10\n\tzim.copy = function(obj, clone) {\n\t\tz_d(\"10\");\n\t\tif (zot(clone)) clone = false;\n\t\tif (obj==null || !(obj instanceof Array || obj.constructor == {}.constructor)) return clone?(obj.clone?obj.clone():obj):obj;\n\t\tif (obj instanceof Array) {\n\t\t\tvar array = [];\n\t\t\tfor (var i=0; i<obj.length; i++) {\n\t\t\t\tarray[i] = zim.copy(obj[i], clone);\n\t\t\t}\n\t\t\treturn array;\n\t\t}\n\t\tif (obj.constructor == {}.constructor) {\n\t\t\tvar copy = {};\n\t\t\tfor (var attr in obj) {\n\t\t\t\tvar answer = zim.copy(obj[attr], clone);\n\t\t\t\tif (obj.hasOwnProperty(attr)) copy[attr] = answer;\n\t\t\t}\n\t\t\treturn copy;\n\t\t}\n\t}//-10\n\n/*--\nzim.arraysEqual = function(a, b, strict)\n\narraysEqual\nzim function\n\nDESCRIPTION\nFinds out if arrays are same (including nested arrays).\nWorks for arrays with strings and numbers (not necessarily other objects).\n(Slightly modified Evan Steinkerchnerv & Tomas Zato)\n\nEXAMPLE\nvar one = [1,2,\"wow\",[3,4]];\nvar two = [1,2,\"wow\",[3,4]];\nzog(zim.arraysEqual(one, two)); // true\none[3][1] = 5;\nzog(zim.arraysEqual(one, two)); // false\nEND EXAMPLE\n\nPARAMETERS\na, b - the arrays to check to see if they are equal\nstrict - (default true) set to false so order in arrays does not matter\n\nRETURNS a Boolean\n--*///+11\n\tzim.arraysEqual = function(a, b, strict) {\n\t\tz_d(\"11\");\n\t\tif (zot(a) || zot(b)) return false;\n\t\tif (zot(strict)) strict = true; // must be the same order\n\t\tif (a.length != b.length) return false;\n\n\t\tfor (var i = 0; i < a.length; i++) {\n\t\t\tif (a[i] instanceof Array && b[i] instanceof Array) {\n\t\t\t\tif (!zim.arraysEqual(a[i], b[i], strict))\treturn false;\n\t\t\t}\n\t\t\telse if (strict && a[i] != b[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (!strict) {\n\t\t\t\treturn zim.arraysEqual(a.sort(), b.sort(), true);\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}//-11\n\n/*--\nzim.isEmpty = function(obj)\n\nisEmpty\nzim function\n\nDESCRIPTION\nreturns whether an object literal is empty\n\nEXAMPLE\nvar o = {};\nzog( zim.isEmpty(o) ); // true\no.test = 9;\nzog( zim.isEmpty(o) ); // false\nEND EXAMPLE\n\nPARAMETERS\nobj - the object literal to test\n\nRETURNS a Boolean\n--*///+11.5\n\tzim.isEmpty = function(obj) {\n\t\tz_d(\"11.5\");\n\t\tif (zot(obj)) return;\n\t\tvar count = 0;\n\t\tfor (var o in obj) {\n\t\t\tcount++; break;\n\t\t}\n\t\treturn (count == 0);\n\t}//-11.5\n\n/*--\nzim.merge = function(objects)\n\nmerge\nzim function\n\nDESCRIPTION\nMerges any number of objects {} you pass in as parameters.\nOverwrites properties if they have the same name.\nReturns a merged object with original objects kept intact.\n\nEXAMPLE\nvar one = {food:\"chocolate\"};\nvar two = {drink:\"milk\"};\nvar tri = zim.merge(one, two);\nzog(tri.food, tri.drink); // chocolate, milk\nEND EXAMPLE\n\nPARAMETERS\nobjects - a list of objects (any number) to merge together\n\nRETURNS a new Object\n--*///+12\n\tzim.merge = function() {\n\t\tz_d(\"12\");\n\t\tvar obj = {}; var i; var j;\n\t\tfor (i=0; i<arguments.length; i++) {\n\t\t\tfor (j in arguments[i]) {\n\t\t\t\tif (arguments[i].hasOwnProperty(j)) {\n\t\t\t\t\tobj[j] = arguments[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn obj;\n\t}//-12\n\n/*--\nzim.decimals = function(num, places, addZeros)\n\ndecimals\nzim function\n\nDESCRIPTION\nRounds number to the number of decimal places specified by places.\nNegative number places round to tens, hundreds, etc.\nIf addZeros is true it fills up ends with zeros - if the places\nis negative with addZeros then it fills up the start with zeros\nand does not round to tens, hundreds, etc.  just adds zeros to start\n\nEXAMPLE\nvar score = 1.234;\nscore = zim.decimals(score);\nzog(score); // 1.2\nzog(zim.decimals(1.8345, 2)); // 1.83\nzog(zim.decimals(123,-1)); // 120\nzog(zim.decimals(2.3,2,true)); // 2.30\nzog(zim.decimals(3,-2,true)); // 03\nzog(zim.decimals(11,-2,true)); // 11\nzog(zim.decimals(11,-3,true)); // 011\nEND EXAMPLE\n\nPARAMETERS\nnum - the Number to operate on\nplaces - (default 1) how many decimals to include (negative for left of decimal place)\naddZeros - (default false) set to true to add zeros to number of decimal places (and return String)\n\twill not round if places is negative but rather add zeros to front\n\nRETURNS a rounded Number or a String if addZeros is true\n--*///+13\n\tzim.zut = function(e) {\n\t\tif (zot(e) || typeof e == \"object\") return true;\n\t}\n\tzim.decimals = function(num, places, addZeros, evt) {\n\t\tz_d(\"13\");\n\t\tif (zot(num) || num==0) return 0;\n\t\tif (zot(places)) places = 1;\n\t\tif (zot(addZeros)) addZeros = false;\n\t\tif (addZeros && places < 0) {\n\t\t\tvar place = String(num).indexOf(\".\");\n\t\t\tvar length = String(num).length;\n\t\t\tvar left = (place < 0) ? length : place;\n\t\t\tfor (var i=0; i<-places-left; i++) {num = \"0\" + num;}\n\t\t\treturn num;\n\t\t}\n\t\tvar answer = Math.round(num*Math.pow(10, places))/Math.pow(10, places);\n\t\tif (addZeros && places > 0 && answer != 0) {\n\t\t\tvar place = String(answer).indexOf(\".\");\n\t\t\tvar length = String(answer).length;\n\t\t\tif (place < 0) {place = length++; answer+=\".\";}\n\t\t\tfor (var i=0; i<places-(length-place-1); i++) {answer += \"0\";}\n\t\t}\n\t\treturn zim.zut(evt) ? answer : null;\n\t}//-13\n\n/*--\nzim.sign = function(num)\n\nsign\nzim function\n\nDESCRIPTION\nreturns -1, 0 or 1 depending on whether the number is less than, equal to or greater than 0\n\nEXAMPLE\nvar speed = 20;\nzog(zim.sign(speed)); // 1\n\nvar speed = 0;\nzog(zim.sign(speed)); // 0\n\nvar speed = -20;\nzog(zim.sSign(speed)); // -1\nEND EXAMPLE\n\nPARAMETERS\nnum - the Number to operate on\n\nRETURNS -1, 0 or 1\n--*///+13.1\n\tzim.sign = function(num) {\n\t\tz_d(\"13.1\");\n\t\treturn num?num<0?-1:1:0;\n\t}//-13.1\n\n\n/*--\nzim.constrain = function(num, min, max, negative)\n\nconstrain\nzim function\n\nDESCRIPTION\nreturns a number constrained to min and max\n\nEXAMPLE\nvar cirle.x = zim.constrain(circle.radius, stageW-circle.radius);\n// circle.x will not be smaller than the radius or bigger than stageW-radius\n\nvar speed = zim.constrain(minSpeed, maxSpeed, true);\n// will confine the speed between minSpeed and maxSpeed if speed is positive\n// and confine the speed between -maxSpeed and -minSpeed if the speed is negative\nEND EXAMPLE\n\nPARAMETERS\nnum - the number to be constrained\nmin - (default 0) the minimum value of the return number\nmax - (default Number.MAX_VALUE) the maximum value of the return number\nnegative - (default false) allow the negative range of min and max when num is negative\n\nRETURNS num if between min and max otherwise returns min if less or max if greater (inclusive)\nRETURNS num between -max and -min if num is negative and negative parameter is set to true\n--*///+13.2\n\tzim.constrain = function(num, min, max, negative) {\n\t\tz_d(\"13.2\");\n\t\tif (zot(num)) return;\n\t\tif (zot(min)) min = 0;\n\t\tif (zot(max)) max = Number.MAX_VALUE;\n\t\tif (max < min) {max2 = min; max = min; min = max2;} // ES6 Fix to come\n\t\tif (zot(negative)) negative = false;\n\t\tif (negative && num < 0) {\n\t\t\treturn Math.max(-max, Math.min(num, -min));\n\t\t} else {\n\t\t\treturn Math.max(min, Math.min(num, max));\n\t\t}\n\t}//-13.2\n\n/*--\nzim.dist = function(x1, y1, x2, y2)\n\ndist\nzim function\n\nDESCRIPTION\nCalculates the distance between two points.\n\nEXAMPLE\nvar distance = zim.dist(stageW/2, stageH/2, stage.mouseX, stage.mouseY);\n// distance of mouse from center of stage\nEND EXAMPLE\n\nPARAMETERS\nx1, y1 - first point x and y\nx2, y2 - (default 0, 0) second point x and y\n\nRETURNS a positive Number that is the distance (could be on an angle)\n--*///+13.3\n\tzim.dist = function(x1, y1, x2, y2) {\n\t\tz_d(\"13.3\");\n\t\tif (zot(x1) || zot(y1)) return;\n\t\tif (zot(x2)) x2 = 0;\n\t\tif (zot(y2)) y2 = 0;\n\t\treturn Math.sqrt((Math.pow(x2-x1, 2) + Math.pow(y2-y1, 2)));\n\t}//-13.3\n\n/*--\nzim.angle = function(x1, y1, x2, y2)\n\nangle\nzim function\n\nDESCRIPTION\nCalculates the angle between two points relative to the positive x axis\n\nEXAMPLE\nvar angle = zim.angle(stageW/2, stageH/2, stageW/2+100, stageH/2+100); // 45\n// angle from center of stage to 100, 100 to the right and down from the center of the stage\n\nvar angle2 = zim.angle(stageW/2, stageH/2, stageW/2-100, stageH/2+100); // 135\n\nvar angle3 = zim.angle(stageW/2, stageH/2, stageW/2+100, stageH/2-100); // 315\nEND EXAMPLE\n\nPARAMETERS\nx1, y1 - first point x and y\n\tunless no second point in which case x1, y1 will be second point and first point will be 0, 0\nx2, y2 - second point x and y\n\nRETURNS a positive Number that is the angle between first and second point relative to positive x axis\n--*///+13.4\n\tzim.angle = function(x1, y1, x2, y2) {\n\t\tz_d(\"13.4\");\n\t\tif (zot(x1) || zot(y1)) return;\n\t\tif (zot(x2)) {x2 = x1; x1 = 0};\n\t\tif (zot(y2)) {y2 = y1; y1 = 0};\n\t\treturn (Math.atan2(y2-y1, x2-x1)*180/Math.PI+360)%360;\n\t}//-13.4\n\n/*--\nzim.makeID = function(length, type, letterCase)\n\nmakeID\nzim function\n\nDESCRIPTION\nmakes a random letter, number or mixed id of specified length\n\nEXAMPLE\nvar id1 = zim.makeID(); // five random letters and numbers (starts with letter)\nvar id2 = zim.makeID(null, \"string\"); // five random uppercase letters\nvar id3 = zim.makeID(10, \"number\"); // ten random numbers\nvar id4 = zim.makeID(5, [\"Z\", \"I\", \"M\", 1, 2, 3, 4, 5, \"-\"]); // random five characters from array (possibly repeating)\nEND EXAMPLE\n\nPARAMETERS\nlength - (default 5) the length of the id\ntype - (default \"mixed\") set to \"letters\" or \"numbers\" as well\n\tnote: no O, 0, 1, I or L due to identification problems\n\tpass in an array of characters to make an id from only those characters\nletterCase - (default uppercase) - set to \"lowercase\" or \"mixed\" as well\n\nRETURNS a String id (even if type is number)\n--*///+13.5\n\tzim.makeID = function(type, length, letterCase) {\n\t\tz_d(\"13.5\");\n\t\tif (zot(type)) type = \"mixed\";\n\t\tif (zot(length)) length = 5;\n\t\tif (zot(letterCase)) letterCase = \"uppercase\";\n\t\tvar choices;\n\t\tvar nums = [2,3,4,5,6,7,8,9];\n\t\tvar lets = \"abcdefghjkmnpqrstuvwxyz\".split(\"\");\n\t\tif (type.constructor === Array) {\n\t\t\tchoices = type;\n\t\t} else if (type == \"numbers\") {\n\t\t\tchoices = nums;\n\t\t} else if (type == \"letters\") {\n\t\t\tchoices = lets;\n\t\t} else {\n\t\t\tchoices = nums.concat(lets);\n\t\t}\n\t\tvar id = \"\";\n\t\tvar c; // character - note, char is a reserved word for compressor!\n\t\tvar rand;\n\t\tfor (var i=0; i<length; i++) {\n\t\t\tc = choices[Math.floor(Math.random()*length)];\n\t\t\trand = Math.random();\n\t\t\tif (letterCase == \"uppercase\" || (letterCase == \"mixed\" && rand > .5)) {\n\t\t\t\tif (c.toUpperCase) c = c.toUpperCase();\n\t\t\t} else {\n\t\t\t\tif (c.toLowerCase) c = c.toLowerCase();\n\t\t\t}\n\t\t\tid += String(c);\n\t\t}\n\t\treturn id;\n\t}//-13.5\n\n/*--\nzim.Damp = function(startValue, damp)\n\nDamp\nzim class\n\nDESCRIPTION\nDamping emulates things slowing down due to friction.\nThe movement heads towards the right value and looks organic.\nThis is similar if not the same as easing out when tweening.\nCreate your Damp object outside an interval or Ticker\nthen inside an interval or ticker call the convert method.\n\nEXAMPLE\nvar d = new zim.Damp(parameters);\nsetInterval(function() {\n\tdampedValue = d.convert(desiredValue);\n}, 100);\nEND EXAMPLE\n\nyou would then apply that desired value to a property such as x or y or scale\nif you want to do both x and y then you need two Damp objects\nand two convert calls (you can do both in one interval or ticker)\n\nEXAMPLE\nvar circle = new zim.Circle();\ncircle.center(stage);\nvar dampX = new zim.Damp(circle.x);\nvar dampY = new zim.Damp(circle.y);\n// start moving once mouse enters stage\n// this event will only run once (the last parameter is true)\nstage.on(\"stagemousemove\", start, null, true);\nfunction start() {\n\tzim.Ticker.add(function() {\n\t\tcircle.x = dampX.convert(stage.mouseX);\n\t\tcircle.y = dampY.convert(stage.mouseY);\n\t}, stage);\n}\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nstartValue - (default 0) start object at this value and then start damping\ndamp - (default .1) the damp value with 1 being no damping and 0 being no movement\n\nMETHODS\nconvert() - converts a value into a damped value\nimmediate() - immediately goes to value and returns the Damp object\n\nPROPERTIES\ndamp - can dynamically change the damping (usually just pass it in as a parameter to start)\nlastValue - setting this would go immediately to this value (would not normally use)\n--*///+14\n\tzim.Damp = function(startValue, damp) {\n\t\tz_d(\"14\");\n\t\tvar sig = \"startValue, damp\";\n\t\tvar duo; if (duo = zob(zim.Damp, arguments, sig, this)) return duo;\n\t\tthis.lastValue = (zot(startValue)) ? 0 : startValue;\n\t\tthis.damp = (zot(damp)) ? .1 : damp;\n\t}\n\tzim.Damp.prototype.convert = function(desiredValue) {\n\t\treturn this.lastValue = this.lastValue + (desiredValue - this.lastValue) * this.damp;\n\t}\n\tzim.Damp.prototype.immediate = function(desiredValue) {\n\t\tthis.lastValue = desiredValue;\n\t\treturn this;\n\t}//-14\n\n/*--\nzim.Proportion = function(baseMin, baseMax, targetMin, targetMax, factor, targetRound)\n\nProportion\nzim class\n\nDESCRIPTION\nProportion converts an input value to an output value on a different scale.\n(sometimes called a map() function)\nFor instance, like a slider controlling the scale of an object or sound volume.\nMake a Proportion object and then in an interval, ticker or event,\nconvert the base value to the target value using the convert method.\n\nEXAMPLE\nframe.loadAssets(\"mySound.mp3\");\nframe.on(\"complete\", function() {\n\tvar sound = frame.asset(\"mySound.mp3\").play();\n\tvar p = new zim.Proportion(0, 10, 0, 1);\n\tvar dial = new zim.Dial(); // default range of 0 to 10\n\tdial.currentValue = 10;\n\tdial.on(\"change\", function(){\n\t\tsound.volume = p.convert(dial.currentValue);\n\t}); // end of dial change\n}); // end sound loaded\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nbaseMin - min for the input scale (say x value)\nbaseMax - max for the input scale (say x value)\ntargetMin - (default 0) min for the output scale (say volume)\ntargetMax - (default 1) max for the output scale (say volume)\nfactor (default 1) is going the same direction and -1 is going in opposite direction\ntargetRound (default false) set to true to round the converted number\n\nMETHODS\nconvert(input) - will return the output property (for instance, a volume)\n\nNOTE: the object always starts by assuming baseMin as baseValue\njust call the convert method right away if you want it to start at a different baseValue\nfor instance, if your slider went from 100 to 500 and you want to start at half way\nmake the object and call p.convert(300); on the next line\n--*///+15\n\tzim.Proportion = function(baseMin, baseMax, targetMin, targetMax, factor, targetRound) {\n\n\t\tvar sig = \"baseMin, baseMax, targetMin, targetMax, factor, targetRound\";\n\t\tvar duo; if (duo = zob(zim.Proportion, arguments, sig, this)) return duo;\n\t\tz_d(\"15\");\n\t\t// factor - set to 1 for increasing and -1 for decreasing\n\t\t// round - true to round results to whole number\n\t\tif (zot(targetMin)) targetMin = 0;\n\t\tif (zot(targetMax)) targetMax = 1;\n\t\tif (zot(factor)) factor = 1;\n\t\tif (zot(targetRound)) targetRound = false;\n\n\t\t// proportion\n\t\tvar baseAmount;\n\t\tvar proportion;\n\t\tvar targetAmount;\n\n\t\tbaseAmount = baseMin; // just start at the min otherwise call immediate(baseValue);\n\n\t\tthis.convert = function(baseAmount) {\n\t\t\tif (isNaN(baseAmount)) {return;}\n\t\t\tbaseAmount = Math.max(baseAmount, baseMin);\n\t\t\tbaseAmount = Math.min(baseAmount, baseMax);\n\t\t\tproportion = (baseAmount - baseMin) / (baseMax - baseMin);\n\t\t\tif (factor > 0) {\n\t\t\t\ttargetAmount = targetMin + (targetMax-targetMin) * proportion;\n\t\t\t} else {\n\t\t\t\ttargetAmount = targetMax - (targetMax-targetMin) * proportion;\n\t\t\t}\n\t\t\tif (targetRound) {targetAmount = Math.round(targetAmount);}\n\t\t\treturn targetAmount;\n\t\t}\n\t}//-15\n\n/*--\nzim.ProportionDamp = function(baseMin, baseMax, targetMin, targetMax, damp, factor, targetRound)\n\nProportionDamp\nzim class\n\nDESCRIPTION\nProportionDamp converts an input value to an output value on a different scale with damping.\nWorks like Proportion Class but with a damping parameter.\nDamping needs constant calculating so do not put in mousemove event.\nThe below example scales the circle based on the mouse height.\n\nEXAMPLE\nvar circle = new zim.Circle(50, \"red\");\ncircle.center(stage); // center method added in ZIM 4TH\nvar pd = new zim.ProportionDamp(0, stageH, 0, 5, .2);\nzim.Ticker.add(function() {\n\tcircle.scale(pd.convert(stage.mouseH)); // scale method added in ZIM 4TH\n}, stage);\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nbaseMin - min for the input scale (say x value)\nbaseMax - max for the input scale (say x value)\ntargetMin - (default 0) min for the output scale (say volume)\ntargetMax - (default 1) max for the output scale (say volume)\ndamp - (default .1) the damp value with 1 being no damping and 0 being no movement\nfactor (default 1) is going the same direction and -1 is going in opposite direction\ntargetRound (default false) set to true to round the converted number\n\nMETHODS\nconvert(input) - converts a base value to a target value\nimmediate(input) - immediately sets the target value (no damping) and returns the ProportionDamp object\ndispose() - clears interval\n\nPROPERTIES\ndamp - can adjust this dynamically (usually just pass it in as a parameter to start)\n\nNOTE: the object always starts by assuming baseMin as baseValue\nif you want to start or go to an immediate value without easing then\ncall the pd.immediate(baseValue) method with your desired baseValue (not targetValue)\n--*///+16\n\tzim.ProportionDamp = function(baseMin, baseMax, targetMin, targetMax, damp, factor, targetRound) {\n\n\t\tvar sig = \"baseMin, baseMax, targetMin, targetMax, damp, factor, targetRound\";\n\t\tvar duo; if (duo = zob(zim.ProportionDamp, arguments, sig, this)) return duo;\n\t\tz_d(\"16\");\n\t\t// damp - can be changed via damp get/set method property\n\t\t// factor - set to 1 for increasing and -1 for decreasing\n\t\t// round - true to round results to whole number\n\t\t// zot() is found in danzen.js (the z version of not)\n\t\tif (zot(targetMin)) targetMin = 0;\n\t\tif (zot(targetMax)) targetMax = 1;\n\t\tif (zot(damp)) damp = .1;\n\t\tif (zot(factor)) factor = 1;\n\t\tif (zot(targetRound)) targetRound = false;\n\n\t\tthis.damp = damp; // want to expose as a property we can change\n\t\tvar that = this;\n\n\t\t// proportion\n\t\tvar baseAmount;\n\t\tvar proportion;\n\t\tvar targetDifference;\n\t\tvar targetAmount;\n\n\t\t// damping\n\t\tvar differenceAmount;\n\t\tvar desiredAmount=0;\n\t\tvar lastAmount = 0;\n\n\t\tbaseAmount = baseMin; // just start at the min otherwise call immediate(baseValue);\n\t\tlastAmount = targetMin;\n\n\t\tvar interval = setInterval(calculate, 20);\n\n\t\tfunction calculate() {\n\t\t\tif (isNaN(baseAmount)) {return;}\n\n\t\t\tbaseAmount = Math.max(baseAmount, baseMin);\n\t\t\tbaseAmount = Math.min(baseAmount, baseMax);\n\n\t\t\tproportion = (baseAmount - baseMin) / (baseMax - baseMin);\n\t\t\ttargetDifference = targetMax - targetMin;\n\n\t\t\tif (factor > 0) {\n\t\t\t\ttargetAmount = targetMin + targetDifference * proportion;\n\t\t\t} else {\n\t\t\t\ttargetAmount = targetMax - targetDifference * proportion;\n\t\t\t}\n\n\t\t\tdesiredAmount = targetAmount;\n\t\t\tdifferenceAmount = desiredAmount - lastAmount;\n\t\t\tlastAmount += differenceAmount*that.damp;\n\t\t}\n\n\t\tthis.immediate = function(n) {\n\t\t\tthat.convert(n);\n\t\t\tcalculate();\n\t\t\tlastAmount = targetAmount;\n\t\t\tif (targetRound) {lastAmount = Math.round(lastAmount);}\n\t\t\treturn that;\n\t\t}\n\n\t\tthis.convert = function(n) {\n\t\t\tbaseAmount = n;\n\t\t\tif (targetRound) {\n\t\t\t\treturn Math.round(lastAmount);\n\t\t\t} else {\n\t\t\t\treturn lastAmount;\n\t\t\t}\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tclearInterval(interval);\n\t\t\treturn true;\n\t\t}\n\t}//-16\n\n\n/*--\nzim.Dictionary = function(unique)\n\nDictionary\nzim class\n\nDESCRIPTION\nAn object that uses objects as keys to give values.\nSimilar to an object literal with properties except the property names are objects instead of strings.\nJavaScript currently does not have a dictionary, but other languages do.\n\nEXAMPLE\nvar o = {test:\"test\"};\nvar f = function(w) {zog(w)};\nvar c = new zim.Circle();\nvar d = new zim.Dictionary();\nd.add(o, 1); d.add(f, 2); d.add(c, f);\nzog(d.at(o)); // 1\nzog(d.at(f)); // 2\nd.at(c)(\"hello\"); // hello\nd.remove(o); // to clear o\nzog(d.length); // 2\nEND EXAMPLE\n\nEXAMPLE\nvar d = new zim.Dictionary();\nd.add(circle, \"one\");\nd.add(circle, \"two\");\nzog(d.at(circle)); // two - just the latest but \"one\" is still there\nfor (var i=0; i<d.length; i++) {\n\tif (d.objects[i] == circle) zog(d.values[i]); // one then two\n}\n// note, loop backwards to clear values at a key\nEND EXAMPLE\n\nEXAMPLE\n// with unique property add(key, val) removes the last val at that key\nvar d = new zim.Dictionary(true);\nd.add(circle, \"one\");\nd.add(circle, \"two\");\nzog(d.at(circle)); // two - and now only two is there\nfor (var i=0; i<d.length; i++) {\n\tif (d.objects[i] == circle) zog(d.values[i]); // two\n}\n// note, now d.remove(key) removes that unique entry for the key\nEND EXAMPLE\n\nPARAMETERS\nunique (default false) - set to true to only accept a single entry (the last added) for a key\n\nMETHODS\nadd(object, value) - adds a value that can be retrieved by an object reference\n\tif unique is false, this will not overwrite previous entries at the object key\n\tif unique is true, this will overwrite previous entries at the object key\n\tvalue is optional and will default to true\nat(object) - retrieves the last value stored at the object (or returns null if not there)\nremove(object) - removes the last value at the object from the Dictionary\ndispose() - deletes Dictionary object\n\nPROPERTIES\nlength - the number of items in the Dictionary\nunique - whether the dictionary will overwrite values (going from false to true will not delete previous values)\nobjects - array of keys\nvalues - array of values synched to keys\n--*///+17\n\tzim.Dictionary = function(unique) {\n\t\tz_d(\"17\");\n\t\tthis.length = 0;\n\t\tthis.unique = unique;\n\t\tvar objects = this.objects = []; // store objects and values in synched arrays\n\t\tvar values = this.values = [];\n\n\t\tthis.add = function(o,v) {\n\t\t\tif (zot(o)) return;\n\t\t\tif (zot(v)) v = true;\n\t\t\tif (this.unique) this.remove(o);\n\t\t\tobjects.push(o);\n\t\t\tvalues.push(v);\n\t\t\tthis.length++;\n\t\t}\n\n\t\tthis.at = function(o) {\n\t\t\tif (zot(o)) return;\n\t\t\tvar i = objects.indexOf(o);\n\t\t\tif (i > -1) return values[i];\n\t\t\treturn null;\n\t\t}\n\n\t\tthis.remove = function(o) {\n\t\t\tif (zot(o)) return;\n\t\t\tvar i = objects.indexOf(o);\n\t\t\tif (i > -1) {\n\t\t\t\tobjects.splice(i,1);\n\t\t\t\tvalues.splice(i,1);\n\t\t\t\tthis.length--\n\t\t\t}\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tobjects = null;\n\t\t\tvalues = null;\n\t\t\tthis.length = null;\n\t\t\treturn true;\n\t\t}\n\t}//-17\n\n/*--\nzim.swapProperties = function(property, objA, objB)\n\nswapProperties\nzim function\n\nDESCRIPTION\nPass in a property as a string and two object references\nand this function will swap the property values.\n\nEXAMPLE\n// exchanges the x position of two ZIM circles\nzim.swapProperties(\"x\", circle1, circle2); stage.update();\nEND EXAMPLE\n\nPARAMETERS\nproperty - a String of the property to swap values eg. \"alpha\"\nobjA, objB - the objects on which to swap properties\n\nRETURNS Boolean indicating success\n--*///+17.1\n\tzim.swapProperties = function(property, objA, objB) {\n\t\tz_d(\"17.1\");\n\t\tif (zot(objA) || zot(objB) || zot(objA[property]) || zot(objB[property])) return false;\n\t\tvar temp = objB[property];\n\t\tobjB[property] = objA[property];\n\t\tobjA[property] = temp;\n\t\treturn true;\n\t}//-17.1\n\n\t// DOM CODE\n\n/*--\nzim.swapHTML = function(idA, idB)\n\nswapHTML\nzim function\n\nDESCRIPTION\nPass in two tag ids as strings and this function will swap their innerHTML content.\nThe content (including nested tags) will be swapped.\n\nEXAMPLE\n// exchanges the content of two divs called question and answer\nzim.swapHTML(\"question\",\"answer\");\nEND EXAMPLE\n\nPARAMETERS\nidA, idB - String names of the tag id with which to swap innerHTML values\n\nRETURNS Boolean indicating success\n--*///+17.2\n\tzim.swapHTML = function(idA, idB) {\n\t\tz_d(\"17.2\");\n\t\treturn zim.swapProperties(\"innerHTML\", zid(idA), zid(idB));\n\t}//-17.2\n\n/*--\nzim.scrollX = function(num, time)\n\nscrollX\nzim function\n\nDESCRIPTION\nThis function gets or sets how many pixels from the left the browser window has been scrolled.\nIf num is provided then the function scrolls the window to this x position.\nIf num and time are provided it animates the window to the x position in time milliseconds.\n\nEXAMPLE\n// hide the logo if the page is scrolled left more than 200 pixels\nif (zim.scrollX < -200) zss(\"logo\").display = \"none\";\nEND EXAMPLE\n\nPARAMETERS\nnum - (default null) optional scroll position to go to (probably negative)\ntime - (default 0) time in milliseconds to take to go to the num position\n\nRETURNS a Number\n--*///+18\n\tzim.scrollX = function(num, time) {\n\t\tz_d(\"18\");\n\t\treturn zim.abstractScroll(\"X\", \"Left\", num, time);\n\t}//-18\n\n\n/*--\nzim.scrollY = function(num, time)\n\nscrollY\nzim function\n\nDESCRIPTION\nThis function gets or sets how many pixels from the top the browser window has been scrolled.\nIf num is provided then the function scrolls the window to this y position.\nIf num and time are provided it animates the window to the y position in time milliseconds.\n\nEXAMPLE\n// animate the scroll position down 100 pixels in half a second\nzim.scrollY(zim.scrollY()-100, 500);\nEND EXAMPLE\n\nPARAMETERS\nnum - (default null) optional scroll position to go to (probably negative)\ntime - (default 0) time in milliseconds to take to go to the num position\n\nRETURNS a Number\n--*///+19\n\tzim.scrollY = function(num, time) {\n\t\tz_d(\"19\");\n\t\treturn zim.abstractScroll(\"Y\", \"Top\", num, time);\n\t}//-19\n\n\t//+20\n\tzim.abstractScroll = function(dir, side, num, time) {\n\t\tz_d(\"20\");\n\t\tvar perpend = (dir == \"X\") ? \"Y\" : \"X\"; // perpendicular direction\n\t\tif (zot(num)) {\n\t\t\tvar safari = 0;\n\t\t\tvar browser=navigator.appName;\n\t\t\tvar navindex=navigator.userAgent.indexOf('Safari');\n\t\t\tif (navindex != -1 || browser=='Safari') {\n\t\t\t\tvar safari = 1;\n\t\t\t}\n\t\t\tif (!safari && document.compatMode == 'CSS1Compat') {\n\t\t\t\treturn document.documentElement[\"scroll\"+side];\n\t\t\t} else {\n\t\t\t\treturn document.body[\"scroll\"+side];\n\t\t\t}\n\t\t} else if (zot(time)) {\n\t\t\twindow.scrollTo(zim[\"scroll\"+perpend](), num);\n\t\t} else {\n\t\t\tvar interval = 50;\n\t\t\tif (time < interval) time = interval;\n\t\t\tvar steps = time/interval;\n\t\t\tvar current = zim[\"scroll\"+dir]();\n\t\t\tvar amount = num - current;\n\t\t\tvar diff = amount/steps;\n\t\t\tvar count = 0;\n\t\t\tvar scrollInterval = setInterval(function() {\n\t\t\t\tcount++;\n\t\t\t\tcurrent+=diff;\n\t\t\t\twindow.scrollTo(zim[\"scroll\"+perpend](), current);\n\t\t\t\tif (count >= steps) {\n\t\t\t\t\twindow.scrollTo(zim[\"scroll\"+perpend](), num);\n\t\t\t\t\tclearInterval(scrollInterval);\n\t\t\t\t}\n\t\t\t}, interval);\n\t\t}\n\t\treturn num;\n\t}//-20\n\n/*--\nzim.windowWidth = function()\n\nwindowWidth\nzim function\n\nDESCRIPTION\nReturns the width of a window.\n(window.clientWidth or window.innerWidth)\n\nEXAMPLE\nif (zim.windowWidth() < 500) zss(\"related\").display = \"none\";\nEND EXAMPLE\n\nRETURNS a Number\n--*///+21\n\tzim.windowWidth = function() {\n\t\tz_d(\"21\");\n\t\treturn isNaN(window.innerWidth) ? window.clientWidth : window.innerWidth;\n\t}//-21\n\n/*--\nzim.windowHeight = function()\n\nwindowHeight\nzim function\n\nDESCRIPTION\nReturns the height of a window.\n(window.clientHeight or window.innerHeight)\n\nEXAMPLE\nif (zim.windowHeight() > 1000) zgo(\"big.html\");\nEND EXAMPLE\n\nRETURNS a Number\n--*///+22\n\tzim.windowHeight = function() {\n\t\tz_d(\"22\");\n\t\treturn isNaN(window.innerHeight) ? window.clientHeight : window.innerHeight;\n\t}//-22\n\n/*--\nzim.urlEncode = function(string)\n\nurlEncode\nzim function\n\nDESCRIPTION\nMatches PHP urlencode and urldecode functions\nfor passing data on end of URL.\nNOTE: only encode values of key=value pairs (not keys and not both keys and values)\nNOTE: JSON automatically encodes and decodes\n\nEXAMPLE\nvar motto = \"good = life & life = now\";\nzgo(\"submit.php?motto=\"+zim.urlEncode(motto));\nEND EXAMPLE\n\nPARAMETERS\nstring - a value to URL encode (space to plus, etc.)\n\nRETURNS a String\n--*///+23\n\tzim.urlEncode = function(s) {\n\t\tz_d(\"23\");\n\t\tvar s = (s + '').toString();\n\t\treturn encodeURIComponent(s).replace(/!/g, '%21').replace(/'/g, '%27').replace(/\\(/g, '%28').\n\t\treplace(/\\)/g, '%29').replace(/\\*/g, '%2A').replace(/%20/g, '+');\n\t}//-23\n\n/*--\nzim.urlDecode = function(string)\n\nurlDecode\nzim function\n\nDESCRIPTION\nMatches PHP urlencode and urldecode functions\nfor receiving raw data from a source that URLencodes.\nNOTE: JSON automatically encodes and decodes\n\nEXAMPLE\nvar pairs = command.split(\"&\");\nvar motto = zim.urlDecode(pairs[0].split(\"=\")[1]);\nEND EXAMPLE\n\nPARAMETERS\nstring - a URLencoded String to decode\n\nRETURNS a String\n--*///+24\n\tzim.urlDecode = function(s) {\n\t\tz_d(\"24\");\n\t\t return decodeURIComponent((s + '').replace(/\\+/g, '%20'));\n\t}//-24\n\n/*--\nzim.setCookie = function(name, value, days)\n\nsetCookie\nzim function\n\nDESCRIPTION\nSets an HTML cookie to remember some user data your site has set over time.\nIf no days, it will be a session cookie (while browser is open).\n\nEXAMPLE\nvar visits = zim.getCookie(\"visits\");\nif (zot(visits)) visits = 0;\nzim.setCookie(\"visits\", ++visits);\nEND EXAMPLE\n\nPARAMETERS\nname - a String name for your cookie\nvalue - a String value that you want to store\ndays - (default 0) for how many days do you want to store the cookie\n\nALSO: see zim.getCookie and zim.deleteCookie\n\nRETURNS a Boolean indicating success\n--*///+25\n\tzim.setCookie = function(name, value, days) {\n\t\tz_d(\"25\");\n\t\tif (zot(name) || zot(value)) return;\n\t\tif (days) {\n\t\t\tvar date = new Date();\n\t\t\tdate.setTime(date.getTime()+(days*24*60*60*1000));\n\t\t\tvar expires = \"; expires=\"+date.toGMTString();\n\t\t} else {\n\t\t\tvar expires = \"\";\n\t\t}\n\t\tdocument.cookie = name+\"=\"+escape(value)+expires+\"; path=/\";\n\t\treturn true;\n\t}//-25\n\n/*--\nzim.getCookie = function(name)\n\ngetCookie\nzim function\n\nDESCRIPTION\nGets an HTML cookie that you have previously set.\n\nEXAMPLE\nvar visits = zim.getCookie(\"visits\");\nif (zot(visits)) visits = 0;\nzim.setCookie(\"visits\", ++visits);\nEND EXAMPLE\n\nPARAMETERS\nname - the String name of your stored cookie\n\nALSO: see zim.setCookie and zim.deleteCookie\n\nRETURNS a String or undefined if not found\n--*///+26\n\tzim.getCookie = function(name) {\n\t\tz_d(\"26\");\n\t\tvar outer = document.cookie.split(/;\\s*/);\n\t\tvar cookies = new Array();\n\t\tvar inner;\n\t\tfor (i=0; i<outer.length; i++) {\n\t\t\tinner = outer[i].split(\"=\");\n\t\t\tcookies[inner[0]] = inner[1];\n\t\t}\n\t\tif (typeof cookies[name] == 'undefined') return undefined;\n\t\treturn unescape(cookies[name]);\n\t}//-26\n\n/*--\nzim.deleteCookie = function(name)\n\ndeleteCookie\nzim function\n\nDESCRIPTION\nDeletes an HTML cookie.\n\nEXAMPLE\nzim.deleteCookie(\"visits\"); // clears the cookie\nEND EXAMPLE\n\nPARAMETERS\nname - the String name of your stored cookie to delete\n\nALSO: see zim.setCookie and zim.getCookie\n\nRETURNS a Boolean indicating success\n--*///+27\n\tzim.deleteCookie = function(name) {\n\t\tz_d(\"27\");\n\t\tif (zot(zim.getCookie(name))) return false;\n\t\tzim.setCookie(name,\"\",-1);\n\t\treturn true;\n\t}//-27\n\n/*--\nzim.convertColor = function(color, hexToWord)\n\nconvertColor\nzim function\n\nDESCRIPTION\nConverts HTML String colors to hex numbers or hex numbers to HTML String colors (if it matches) else black\n\nEXAMPLE\nvar color = zim.convertColor(\"red\"); // color is \"#ff0000\"\nvar color = zim.convertColor(\"#ff0000\", true); // color is \"red\"\nvar color = zim.convertColor(\"f00\", true); // color is \"red\" - note missing # okay and can use three digits\nEND EXAMPLE\n\nPARAMETERS\ncolor - (default black) the HTML string or hex color (case insensitive) (does not work with \"rgba()\")\nhexToWord - (default false) set to true to convert a hex value to the HMTL string\n\nRETURNS a String with the converted color or black or #000000 if a match is not found\n--*///+27.5\n\tzim.convertColor = function(color, hexToWord) {\n\t\tif (zot(hexToWord)) hexToWord = false;\n\t\tif (hexToWord) {\n\t\t\tcolor = color.replace(\"#\",\"\");\n\t\t\tif (color.length == 3) {\n\t\t\t\tcolor = color.charAt(0)+color.charAt(0)+color.charAt(1)+color.charAt(1)+color.charAt(2)+color.charAt(2);\n\t\t\t}\n\t\t} else {\n\t\t\tif (color.charAt(0)==\"#\") return color; // already hex\n\t\t}\n\t\tvar colors = ['black','aliceblue','antiquewhite','aqua','aquamarine','azure','beige','bisque','blanchedalmond','blue','blueviolet','brown','burlywood','cadetblue','chartreuse','chocolate','coral','cornflowerblue','cornsilk','crimson','cyan','darkblue','darkcyan','darkgoldenrod','darkgray','darkgrey','darkgreen','darkkhaki','darkmagenta','darkolivegreen','darkorange','darkorchid','darkred','darksalmon','darkseagreen','darkslateblue','darkslategray','darkslategrey','darkturquoise','darkviolet','deeppink','deepskyblue','dimgray','dimgrey','dodgerblue','firebrick','floralwhite','forestgreen','fuchsia','gainsboro','ghostwhite','gold','goldenrod','gray','grey','green','greenyellow','honeydew','hotpink','indianred','indigo','ivory','khaki','lavender','lavenderblush','lawngreen','lemonchiffon','lightblue','lightcoral','lightcyan','lightgoldenrodyellow','lightgray','lightgrey','lightgreen','lightpink','lightsalmon','lightseagreen','lightskyblue','lightslategray','lightslategrey','lightsteelblue','lightyellow','lime','limegreen','linen','magenta','maroon','mediumaquamarine','mediumblue','mediumorchid','mediumpurple','mediumseagreen','mediumslateblue','mediumspringgreen','mediumturquoise','mediumvioletred','midnightblue','mintcream','mistyrose','moccasin','navajowhite','navy','oldlace','olive','olivedrab','orange','orangered','orchid','palegoldenrod','palegreen','paleturquoise','palevioletred','papayawhip','peachpuff','peru','pink','plum','powderblue','purple','rebeccapurple','red','rosybrown','royalblue','saddlebrown','salmon','sandybrown','seagreen','seashell','sienna','silver','skyblue','slateblue','slategray','slategrey','snow','springgreen','steelblue','tan','teal','thistle','tomato','turquoise','violet','wheat','white','whitesmoke','yellow','yellowgreen'];\n\t\tvar hex = ['000000','f0f8ff','faebd7','00ffff','7fffd4','f0ffff','f5f5dc','ffe4c4','ffebcd','0000ff','8a2be2','a52a2a','deb887','5f9ea0','7fff00','d2691e','ff7f50','6495ed','fff8dc','dc143c','00ffff','00008b','008b8b','b8860b','a9a9a9','a9a9a9','006400','bdb76b','8b008b','556b2f','ff8c00','9932cc','8b0000','e9967a','8fbc8f','483d8b','2f4f4f','2f4f4f','00ced1','9400d3','ff1493','00bfff','696969','696969','1e90ff','b22222','fffaf0','228b22','ff00ff','dcdcdc','f8f8ff','ffd700','daa520','808080','808080','008000','adff2f','f0fff0','ff69b4','cd5c5c','4b0082','fffff0','f0e68c','e6e6fa','fff0f5','7cfc00','fffacd','add8e6','f08080','e0ffff','fafad2','d3d3d3','d3d3d3','90ee90','ffb6c1','ffa07a','20b2aa','87cefa','778899','778899','b0c4de','ffffe0','00ff00','32cd32','faf0e6','ff00ff','800000','66cdaa','0000cd','ba55d3','9370db','3cb371','7b68ee','00fa9a','48d1cc','c71585','191970','f5fffa','ffe4e1','ffe4b5','ffdead','000080','fdf5e6','808000','6b8e23','ffa500','ff4500','da70d6','eee8aa','98fb98','afeeee','db7093','ffefd5','ffdab9','cd853f','ffc0cb','dda0dd','b0e0e6','800080','663399','ff0000','bc8f8f','4169e1','8b4513','fa8072','f4a460','2e8b57','fff5ee','a0522d','c0c0c0','87ceeb','6a5acd','708090','708090','fffafa','00ff7f','4682b4','d2b48c','008080','d8bfd8','ff6347','40e0d0','ee82ee','f5deb3','ffffff','f5f5f5','ffff00','9acd32'];\n\t\tif (hexToWord) {\n\t\t\treturn colors[hex.indexOf(color.toLowerCase())!=-1?hex.indexOf(color):0];\n\t\t} else {\n\t\t\treturn \"#\"+hex[colors.indexOf(color.toLowerCase())!=-1?colors.indexOf(color):0];\n\t\t}\n\t}//-27.5\n\n/*--\nzim.mobile = function(orientation)\n\nmobile\nzim function\n\nDESCRIPTION\nDetects if app is on a mobile device - if so, returns the mobile device type:\nandroid, ios, blackberry, windows, other (all which evaluate to true) else returns false.\norientation defaults to true and if there is window.orientation then it assumes mobile\nBUT this may return true for some desktop and laptop touch screens\nso you can turn the orientation check off by setting orientation to false.\nIf orientation is set to false the check may miss non-mainstream devices\nThe check looks at the navigator.userAgent for the following regular expression:\n/ip(hone|od|ad)|android|blackberry|nokia|opera mini|mobile|phone|nexus|webos/i\nMicrosoft mobile gets detected by nokia, mobile or phone.\n\nEXAMPLE\nif (zim.mobile()) {\n\tvar pane = new zim.Pane(stage, 300, 200, \"Desktop Only\");\n\tpane.show();\n}\nEND EXAMPLE\n\nPARAMETERS\norientation - (default true) uses window.orientation property to determine mobile\n\tthis may call certain touch screens mobile\n\tbut setting to false uses a test on mobile names which could be incomplete\n\nRETURNS a String or false\n--*///+28\n\tzim.mobile = function(orientation) {\n\t\tz_d(\"28\");\n\t\tif (zot(orientation)) orientation = true;\n\t\tif (/ip(hone|od|ad)/i.test(navigator.userAgent)) return \"ios\";\n\t\tif (/android|nexus/i.test(navigator.userAgent)) return \"android\";\n\t\tif (/blackberry/i.test(navigator.userAgent)) return \"blackberry\";\n\t\tif (/nokia|phone|mobile/i.test(navigator.userAgent)) return \"windows\";\n\t\tif (/opera mini|webos/i.test(navigator.userAgent)) return \"other\";\n\t\tif (orientation && window.orientation !== undefined) return true;\n\t\treturn false;\n\t}//-28\n\n/*--\nzim.async = function(url, callback)\n\nasync\nzim function\n\nDESCRIPTION\nA way to send data back and forth to a server script without reloading the HTML page.\n(like AJAX but without the bother)\nUses a dynamic script call with an optional callback (cross domain calls are okay)\nalso known as JSON-P pattern but JSON is unnecessary - note, no JSON in the examples below.\nPass a url to the server script (ie. php or node page)\nand an optional callback function that you define in your code (cannot be an anonymous function).\nzim.async will automatically add a random number to the end of your script call to defeat cache.\n\nEXAMPLE\n// existing service:\n// assuming that we have a callback function called test as shown below\nzim.async(\"http://ip-api.com/json?callback=zim.async.test\",test);\nfunction test(data) {zog(data.country);}\n// note that the callback we pass the service is zim.async.test not just test\n// this allows zim to handle scope issues and garbage collect the dynamic script when done\n// if the service passes JSON you may need to JSON.decode() the data being returned\n// this service passes an object literal not JSON despite its file name\nEND EXAMPLE\n\nEXAMPLE\n// CLIENT - your own server script:\n// assuming we have a callback function called myFunction as shown below\nzim.async(\"http://yourserver.com/script.php?id=72&name=dan\", myFunction);\nfunction myFunction(data){zog(data);}\n\n// SERVER - your script must output the following format as a string:\n// \"zim.async.myFunction(somedata)\"\n// in the php file we would use:\necho \"zim.async.myFunction('success')\";\n// to return an object literal with nodejs express for example, you would use:\nres.send('zim.async.myFunction({list:[1,2,3], name:\"whatever\"})');\n// the data parameter in the myFunction function defined earlier would be an object literal\n// we could then do zog(data.list[0]) to log the value 1, etc.\nEND EXAMPLE\n\nPARAMETERS\nurl - url to the server script (ie. php or node page)\ncallback - (default null) callback function that you define in your code (cannot be an anonymous function)\n\ncalling the return function on zim.async does two things:\n1. it handles scope issues so we can find your callback function\n2. it handles garbage collection to remove the dynamic script tag that was used\nif you do not specify a callback function then just send \"\" back from your server script\nNOTE: we have experienced duplicate script calls if nothing is sent back\n\nRETURNS undefined\n--*///+29\n\tzim.async = function (url, callback) {\n\t\tz_d(\"29\");\n\t\tif (zot(url)) return;\n\t\tvar tag = document.createElement(\"script\");\n\t\tif (callback) {\n\t\t\tvar n = callback.toString().split(/\\n/,1)[0].match(/^function\\s?([^\\s(]*)/)[1];\n\t\t\t// create callback bridge on async function object\n\t\t\tzim.async[n] = function() { // closure to access tag on callback bridge\n\t\t\t\tvar t = tag;\n\t\t\t\treturn function(d){\n\t\t\t\t\t// remove the script tag and do the callback\n\t\t\t\t\tif (t) t.parentNode.removeChild(t); t = null;\n\t\t\t\t\tcallback(d);\n\t\t\t\t}\n\t\t\t}();\n\t\t} else {\n\t\t\tif (zim.async.z_s && zim.async.z_s.parentNode) zim.async.z_s.parentNode.removeChild(zim.async.z_s); // keep overwriting same script tag if no callback\n\t\t\tzim.async.z_s = tag;\n\t\t}\n\t\tif (!url.match(/\\?/)) url += \"?\";\n\t\ttag.setAttribute(\"src\", url + \"&r=\"+Math.random());\n\t\tdocument.getElementsByTagName(\"head\")[0].appendChild(tag);\n\t}//-29\n\nif (typeof(createjs) == \"undefined\") {if (zon) {zog(\"ZIM >= 4.3.0 requires createjs namespace to be loaded (import createjs before zim)\");} return zim;}\n\n////////////////  ZIM CREATE  //////////////\n\n// Zim Create adds functionality to CreateJS for multies (Interactive Features)\n// functions in this module require createjs namespace to exist and in particular easel.js and tween.js\n// available at http://createjs.com\n\n/*--\nzim.ANIMATE\n\nANIMATE\nzim constant\n\nDESCRIPTION\nSet to false to stop zim.move() and zim.animate() calls from working.\nHandy for testing your app so you do not have to wait for animations every time!\nTo animate things in you can place everything in their final positions\nand then set the \"from\" parameter to true to animate from starting positions\nlike x or y offstage, scale or alpha of 0, etc.\nThen to avoid waiting for animations to complete, you can just set zim.ANIMATE = false\nand all your objects will be in their final locations and you don't wait for animations\nWhen you are ready to run your animations for a final version, etc. just delete the line\nor set zim.ANIMATE to true.\n\nEXAMPLE\nzim.ANIMATE = false;\n// without the line above, the circles will animate in\n// we would have to wait for them everytime we load the app\n// sometimes animations are even longer and this can waste development time\n// when we add the line above, the circles are on stage right away\n// this is easier and safer than commenting out all your animations\n\nvar circle1 = new zim.Circle(200, frame.green);\ncircle1.center(stage);\ncircle1.x -= 110;\ncircle1.animate({obj:{alpha:0, scale:0}, time:700, from:true});\n\nvar circle2 = new zim.Circle(200, frame.pink);\ncircle2.center(stage);\ncircle2.x += 110;\ncircle2.animate({obj:{alpha:0, scale:0}, time:700, wait:700, from:true});\nEND EXAMPLE\n--*///+29.5\nzim.ANIMATE = true;\n//-29.5\n\n/*--\nzim.Ticker = {}\n\nTicker\nzim static class\n\nDESCRIPTION\nA static class to let ZIM use one animation function with a requestAnimationFrame\nIf a function has been added to the Ticker queue then it will run in the order added\nalong with a single stage update after all functions in queue have run.\nThere are settings that can adjust when the Ticker updates so see Usage notes below.\n\nEXAMPLE\nvar circle = new zim.Circle(50, \"red\");\ncircle.center(stage);\nzim.Ticker.add(function(){\n\tcircle.x++;\n}, stage); // stage is optional - will be the first stage made if left out\n\n// to be able to remove the function:\nzim.Ticker.add(tryMe, stage);\nfunction tryMe() {circle.x++;}\nzim.Ticker.remove(tryMe);\n\n// OR with function literal, use the return value\nvar tickerFunction = zim.Ticker.add(function(){circle.x++;}, stage);\nzim.Ticker.remove(tickerFunction);\n\n// Check to see if a function is in the Ticker for that stage:\nzog(zim.Ticker.has(stage, tickerFunction)); // false at the moment until added again\nEND EXAMPLE\n\nUSAGE\nif zim.OPTIMIZE is true then the Ticker will not update the stage (it will still run functions)\nhowever, OPTIMIZE can be overridden as follows (or with the always() method):\n\nMETHODS (static)\n** As of ZIM 5.1.0, stage is optional and will default to the stage of first Frame object made\nzim.Ticker.always(stage) - overrides zim.OPTIMIZE and always runs an update for the stage even with no function in queue\nzim.Ticker.alwaysOff(stage) - stops an always Ticker for a stage\nzim.Ticker.add(function, stage) - adds the function to the Ticker queue for a given stage and returns the function that was added\nzim.Ticker.remove(function) - removes the function from the Ticker queue\nzim.Ticker.removeAll([stage]) - removes all functions from the Ticker queue (optionally per stage)\nzim.Ticker.has(stage, function) - returns a Boolean true if function is currently added to the Ticker for the stage - or false if not currently added\nzim.Ticker.setFPS(30, 60) - (mobile, pc) default is set at natural requestAnimationFrame speed - this seems to be the smoothest\nzim.Ticker.setTimingMode(mode) - (default \"raf\") RAF uses RequestAnimationFrame without framerate synching - gets screen synch (smooth) and background throttling\n\tset to \"synched\" for framerate synching - but will add some variance between updates\n\tset to \"timeout\" for setTimeout synching to framerate - no screen synch or background throttling (if RAF is not supported falls back to this mode)\n\tsee CreateJS docs: http://www.createjs.com/docs/tweenjs/classes/Ticker.html\nzim.Ticker.dispose([stage]) - removes all functions from the queue removes and removes the list (optionally per stage)\n\nPROPERTIES (static)\nzim.Ticker.update = true - overrides zim.OPTIMIZE and forces an update if a function is in the queue\nzim.Ticker.update = false - forces no update regardless of zim.OPTIMIZE\nzim.Ticker.update = null (default) - only updates if there is a function in queue and zim.OPTIMIZE is false\nzim.Ticker.list - a ZIM Dictionary holding arrays with the functions in the Ticker queue for each stage\nzim.Ticker.list.objects - the array of stages in the Ticker\nzim.Ticker.list.values - the array holding an array of functions for each stage in the Ticker\nzim.Ticker.framerate - read only - use setFPS() to set\n\nthe Ticker is used internally by zim functions like move(), animate(), drag(), Scroller(), Parallax()\nyou are welcome to add functions - make sure to pass the stage in as a second parameter to the add() method\n\nUSAGE\n1. if you have your own ticker going, just set zim.OPTIMIZE = true and don't worry about a thing\n2. if you do not have your own ticker going but still want OPTIMIZE true to avoid components updating automatically,\nthen set zim.OPTIMIZE = true and set zim.Ticker.update = true\nthis will run a single update only when needed in zim Ticker for any zim functions\n3. if you want a ticker with a single update going all the time (with OPTIMIZE true or false) then\nrun zim.Ticker.always(stage);\n4. if for some reason (can't think of any) you want no ticker updates for zim but want component updates\nthen set zim.OPTIMIZE = false and then set zim.Ticker.update = false\n--*///+30\n\tzim.Ticker = {\n\t\tstages:null,\n\t\tmyUpdate: null,\n\t\talwaysList:new zim.Dictionary(),\n\t\tlist:new zim.Dictionary(),\n\t\tsetFPS: function(m, d) {\n\t\t\tif (zot(m) && zot(d)) {\n\t\t\t\tm = 30; d = 60;\n\t\t\t} else if (zot(m)) {\n\t\t\t\tm = 30;\n\t\t\t} else if (zot(d)) {\n\t\t\t\td = m;\n\t\t\t}\n\t\t\tzim.Ticker.framerate = createjs.Ticker.framerate = (zim.mobile()) ? m : d;\n\t\t},\n\t\tsetTimingMode: function(mode) {\n\t\t\tcreatejs.Ticker.timingMode = createjs.Ticker.RAF;\n\t\t\tif (mode == \"synched\") createjs.Ticker.timingMode = createjs.Ticker.RAF_SYNCHED;\n\t\t\tif (mode == \"timeout\") createjs.Ticker.timingMode = createjs.Ticker.TIMEOUT;\n\t\t},\n\t\tadd: function(f, s) {\n\t\t\tz_d(\"30\");\n\t\t\tvar t = zim.Ticker;\n\t\t\tif (!t.framerate) t.setFPS();\n\t\t\tif (zot(s) || !s.update) s = zimDefaultFrame.stage;\n\t\t\tif (zot(f) || typeof f !== 'function') {zog(\"zim.Ticker.add() - only add functions\"); return;}\n\t\t\tif (!t.ticker) t.ticker = createjs.Ticker.on(\"tick\", t.call);\n\t\t\tif (t.list.at(s)) {t.list.at(s).push(f);} else {t.list.add(s, [f]);}\n\t\t\treturn f;\n\t\t},\n\t\tcall: function(currentTime) {\n\t\t\tvar t = zim.Ticker;\n\t\t\tvar s, functions;\n\t\t\tfor (var i=0; i<t.list.length; i++) {\n\t\t\t\ts = t.list.objects[i]; // stage\n\t\t\t\tfunctions = t.list.values[i]; // list of functions for the stage\n\t\t\t\tfor (var j=0; j<functions.length; j++) {\n\t\t\t\t\tfunctions[j]();\n\t\t\t\t}\n\t\t\t\tif (t.alwaysList.at(s)) {\n\t\t\t\t\ts.update();\n\t\t\t\t} else if (functions.length > 0) {\n\t\t\t\t\tif (zot(t.update) && !zim.OPTIMIZE) {\n\t\t\t\t\t\ts.update();\n\t\t\t\t\t} else if (t.update) {\n\t\t\t\t\t\ts.update();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// may have no functions to run but always is turned on\n\t\t\tfor (i=0; i<t.alwaysList.length; i++) {\n\t\t\t\ts = t.alwaysList.objects[i]; // stage\n\t\t\t\tif (t.list[s] == null) \ts.update(); // if functions then update is already handled\n\t\t\t}\n\t\t},\n\t\talways: function(s) {\n\t\t\tz_d(\"30\");\n\t\t\tvar t = zim.Ticker;\n\t\t\tif (!t.framerate) t.setFPS();\n\t\t\tif (zot(s) || !s.update) s = zimDefaultFrame.stage;\n\t\t\tt.alwaysList.add(s, true);\n\t\t\tif (!t.ticker) t.ticker = createjs.Ticker.on(\"tick\", t.call);\n\t\t},\n\t\talwaysOff: function(s) {\n\t\t\tvar t = zim.Ticker;\n\t\t\tif (zot(s) || !s.update) s = zimDefaultFrame.stage;\n\t\t\tt.alwaysList.remove(s);\n\t\t},\n\t\tremove: function(f) {\n\t\t\tvar t = zim.Ticker;\n\t\t\tif (zot(f) || typeof f !== 'function') {zog(\"zim.Ticker - only remove functions\"); return;}\n\t\t\tvar count = 0;\n\t\t\tvar s;\n\t\t\tfor (var i=0; i<t.list.length; i++) {\n\t\t\t\ts = t.list.objects[i]; // stage\n\t\t\t\tvar index = t.list.values[i].indexOf(f);\n\t\t\t\tif (index > -1) {\n\t\t\t\t\tt.list.values[i].splice(index,1);\n\t\t\t\t}\n\t\t\t\tcount+=t.list.values[i].length;\n\t\t\t}\n\t\t\tif (t.alwaysList.length > 0) return;\n\t\t\tif (count == 0) {createjs.Ticker.off(\"tick\", t.ticker); t.ticker = null;}\n\t\t},\n\t\tremoveAll: function(s) {\n\t\t\tvar t = zim.Ticker;\n\t\t\tvar count = 0;\n\t\t\tvar st;\n\t\t\tfor (var i=0; i<t.list.length; i++) {\n\t\t\t\tst = t.list.objects[i]; // stage\n\t\t\t\tif (zot(s) || s === st) {\n\t\t\t\t\tt.list.values[i] = [];\n\t\t\t\t}\n\t\t\t\tcount+=t.list.values[i].length;\n\t\t\t}\n\t\t\tif (t.alwaysList.length > 0) return;\n\t\t\tif (count == 0) {createjs.Ticker.off(\"tick\", t.ticker); t.ticker = null;}\n\t\t},\n\t\thas: function(s,f) {\n\t\t\treturn zim.Ticker.list && zim.Ticker.list.at(s) && zim.Ticker.list.at(s).indexOf(f) >= 0;\n\t\t},\n\t\tdispose: function(s) {\n\t\t\tvar t = zim.Ticker;\n\t\t\tvar count = 0;\n\t\t\tvar st;\n\t\t\tfor (var i=t.list.length-1; i>=0; i--) { // countdown when removing\n\t\t\t\tst = t.list.objects[i]; // stage\n\t\t\t\tif (zot(s) || s === st) {\n\t\t\t\t\tt.list.remove(s);\n\t\t\t\t\tt.alwaysList.remove(s);\n\t\t\t\t} else {\n\t\t\t\t\tcount+=t.list.values[i].length;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (t.alwaysList.length > 0) return;\n\t\t\tif (count == 0) {createjs.Ticker.off(\"tick\", t.ticker); t.ticker = null;}\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tObject.defineProperty(zim.Ticker, 'update', {\n\t\tget: function() {\n\t\t\treturn zim.Ticker.myUpdate;\n\t\t},\n\t\tset: function(value) {\n\t\t\tvar t =  zim.Ticker;\n\t\t\tif (typeof value != \"boolean\") value = null;\n\t\t\tt.myUpdate = value;\n\t\t\tif (t.myUpdate === false) {\n\t\t\t\t cancelAnimationFrame(t.ticker);\n\t\t\t\t // note, this overrides always()\n\t\t\t\t // but running always() will override update = false\n\t\t\t\t t.alwaysList = new zim.Dictionary();\n\t\t\t}\n\t\t}\n\t});//-30\n\n\n/*--\nzim.drag = function(obj, rect, overCursor, dragCursor, currentTarget, swipe, localBounds, onTop, surround, slide, slideDamp, slideSnap, reg, removeTweens, startBounds)\n\ndrag\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nAdds drag and drop to an object with a variety of options.\nHandles scaled, rotated nested objects.\n\nEXAMPLE\nvar radius = 50;\nvar circle = new zim.Circle(radius, \"red\");\ncircle.center(stage);\ncircle.drag();\n\n// OR with chaining\nvar circle = new zim.Circle(radius, \"red\").center(stage).drag();\n\n// OR with ZIM DUO\ncircle.drag({slide:true});\n\n// OR with pre ZIM 4TH methods\nzim.center(circle, stage);\nzim.drag(circle);\n\n// OR with ZIM DUO\nzim.drag({obj:circle, slide:true});\n\n// BOUNDS\n// circle has its registration point in the middle\n// keep registration point within rectangle starting at x=100, y=100\n// and drag within a width of 500 and height of 400\n// var dragBounds = new createjs.Rectangle(100,100,500,400);\n// or keep circle on the stage with the following\nvar dragBounds = new createjs.Rectangle(radius,radius,stageW-radius,stageH-radius);\ncircle.drag(dragBounds); // drag within stage\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nobj - the object to drag\nrect - (default null) a createjs.Rectangle object for the bounds of dragging\n\tif surround is true then it will make sure the obj surrounds the rect rather than stays within it\n\tthis rectangle is relative to the stage (global)\n\tif a rectangle relative to the object's parent is desired then set the localBounds parameter to true\noverCursor, dragCursor - (default \"pointer\") the CSS cursor properties as strings\ncurrentTarget - (default false) allowing you to drag things within a container\n\teg. drag(container); will drag any object within a container\n\tsetting currentTarget to true will then drag the whole container\nswipe - (default false) which prevents a swipe from triggering when dragging\nlocalBounds - (default false) which means the rect is global - set to true for a rect in the object parent frame\nonTop - (default true) brings the dragged object to the top of the container\nsurround - (default false) is for dragging a big object that always surrounds the rect\nslide - (default false) will let you throw the object and dispatch a slidestop event when done\nslideDamp - (default .3) is the damping setting for the slide (1 is no damping and .1 will slide more, etc.)\nslideSnap - (default true) lets the object go outside and snap back to bounds - also \"vertical\", \"horizontal\", and false\nreg - (default false) when set to true will snap the registration of the object to the mouse position\nremoveTweens - (default true) will automatically remove tweens from dragged object unless set to false\nstartBounds - (default true) set to false to ignore bound rect before dragging (sometimes handy when putting drag on container)\n\nnote: will not update stage if zim.OPTIMIZE is set to true\nunless zim.Ticker.update is set to true or you run zim.Ticker.always(stage) see zim.Ticker\n\nRETURNS obj for chaining\n--*///+31\n\tzim.drag = function(obj, rect, overCursor, dragCursor, currentTarget, swipe, localBounds, onTop, surround, slide, slideDamp, slideSnap, reg, removeTweens, startBounds) {\n\n\t\tvar sig = \"obj, rect, overCursor, dragCursor, currentTarget, swipe, localBounds, onTop, surround, slide, slideDamp, slideSnap, reg, removeTweens, startBounds\";\n\t\tvar duo; if (duo = zob(zim.drag, arguments, sig)) return duo;\n\t\tz_d(\"31\");\n\t\tif (zot(obj) || !obj.on) return;\n\t\tobj.cursor = (zot(overCursor)) ? \"pointer\" : overCursor;\n\t\tif (zot(currentTarget)) currentTarget = false;\n\t\tif (zot(swipe)) swipe = false;\n\t\tif (zot(localBounds)) localBounds = false;\n\t\tif (zot(onTop)) onTop = true;\n\t\tif (zot(surround)) surround = false;\n\t\tif (zot(slide)) slide = false;\n\t\tif (zot(slideDamp)) slideDamp = .3;\n\t\tif (zot(slideSnap)) slideSnap = true;\n\t\tvar snapOptions = [\"horizontal\", \"vertical\", \"auto\"];\n\t\tif (slideSnap !== true && snapOptions.indexOf(slideSnap) < 0) slideSnap = false;\n\t\tif (zot(reg)) reg = false;\n\t\tif (zot(removeTweens)) removeTweens = true;\n\t\tif (zot(startBounds)) startBounds = true;\n\n\t\tzim.setSwipe(obj, swipe);\n\t\tobj.zimDragRect = rect;\n\t\tobj.zimLocalBounds = localBounds;\n\t\tvar downCheck = false;\n\n\t\tvar diffX; var diffY; var point; var r;\tvar rLocal;\n\t\tobj.zimAdded = obj.on(\"added\", initializeObject, null, true); // if not added to display list\n\t\tobj.zimRemoved = obj.on(\"removed\", unInitializeObject, null, true);\n\t\tif (obj.parent) initializeObject();\n\n\t\tfunction initializeObject() {\n\t\t\t// check position right away if there is a bounding box\n\t\t\t// there is no mousedown so set the diffX and diffY to 0\n\t\t\tdiffX = 0; diffY = 0;\n\t\t\t// positionObject() is used as well in the dragmove function\n\t\t\t// where it expects a global x and y\n\t\t\t// so convert obj.x and obj.y positions inside its parent to global:\n\t\t\tif (obj.zimDragRect) {\n\t\t\t\tif (localBounds) {\n\t\t\t\t\tr = zim.boundsToGlobal(obj.parent, obj.zimDragRect);\n\t\t\t\t\tif (surround) rLocal = obj.zimDragRect;\n\t\t\t\t} else {\n\t\t\t\t\tr = obj.zimDragRect;\n\t\t\t\t\tif (surround) rLocal = zim.boundsToGlobal(obj.parent, obj.zimDragRect, true); // flips to global to local\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (r && startBounds) {\n\t\t\t\tpoint = obj.parent.localToGlobal(obj.x, obj.y);\n\t\t\t\tpositionObject(obj, point.x, point.y);\n\t\t\t}\n\t\t\tif (slide) {\n\t\t\t\tobj.zimDragMoving = true;\n\t\t\t\tsetUpSlide();\n\t\t\t}\n\t\t}\n\n\t\tfunction unInitializeObject() {\n\t\t\tif (obj.zimDragTicker) zim.Ticker.remove(obj.zimDragTicker);\n\t\t}\n\n\t\t// set up damping for slide and variables used to predict future locations\n\t\tif (slide) {\n\t\t\tvar dampX = new zim.Damp(obj.x, slideDamp);\n\t\t\tvar dampY = new zim.Damp(obj.y, slideDamp);\n\t\t\tvar back = 3; // how many ticks ago to estimate trajectory\n\t\t\tvar lastCount = 0;\n\t\t\tvar backX = [];\n\t\t\tvar backY = [];\n\t\t\tvar upX = obj.x; // mouse up translated to local\n\t\t\tvar upY = obj.y;\n\t\t\tvar objUpX = obj.x; // drag object x when mouse up\n\t\t\tvar objUpY = obj.y;\n\t\t\tvar lastBackX = obj.x; // used to calculate trajectory\n\t\t\tvar lastBackY = obj.y;\n\t\t\tvar lastX = -10000; // used to see if sliding object is still moving\n\t\t\tvar lastY = -10000;\n\t\t}\n\n\t\tvar dragObject;\n\n\t\tobj.zimDown = obj.on(\"mousedown\", function(e) {\n\t\t\t// e.stageX and e.stageY are global\n\t\t\t// e.target.x and e.target.y are relative to e.target's parent\n\t\t\t// bring stageX and stageY into the parent's frame of reference\n\t\t\t// could use e.localX and e.localY but might be dragging container or contents\n\t\t\tdragObject = (currentTarget)?e.currentTarget:e.target;\n\t\t\tif (obj.zimDragRect && !dragObject.getBounds()) {zog(\"zim.drag() - drag object needs bounds set\"); return;}\n\t\t\tdownCheck = true;\n\t\t\tobj.getStage().mouseMoveOutside = true;\n\n\t\t\t// add a function to the Ticker queue (remove it if there first)\n\t\t\tif (!slide) { // slide has a persistent Ticker function\n\t\t\t\tif (obj.zimDragTicker) zim.Ticker.remove(obj.zimDragTicker);\n\t\t\t\tobj.zimDragTicker = zim.Ticker.add(function(){}, obj.getStage());\n\t\t\t}\n\n\t\t\tif (removeTweens) createjs.Tween.removeTweens(dragObject);\n\t\t\tif (onTop) dragObject.parent.setChildIndex(dragObject,dragObject.parent.numChildren-1);\n\t\t\tvar point = dragObject.parent.globalToLocal(e.stageX, e.stageY);\n\t\t\tif (reg) {\n\t\t\t\tdragObject.x = point.x;\n\t\t\t\tdragObject.y = point.y;\n\t\t\t}\n\t\t\tdiffX = point.x - dragObject.x;\n\t\t\tdiffY = point.y - dragObject.y;\n\n\t\t\tif (obj.zimDragRect) {\n\t\t\t\tif (localBounds) {\n\t\t\t\t\tr = zim.boundsToGlobal(dragObject.parent, obj.zimDragRect);\n\t\t\t\t\tif (surround) rLocal = obj.zimDragRect;\n\t\t\t\t} else {\n\t\t\t\t\tr = obj.zimDragRect;\n\t\t\t\t\tif (surround) rLocal = zim.boundsToGlobal(dragObject.parent, obj.zimDragRect, true); // true flips to global to local\n\t\t\t\t}\n\t\t\t}\n\t\t\t// just a quick way to set a default cursor or use the cursor sent in\n\t\t\tobj.cursor = (zot(dragCursor))?\"pointer\":dragCursor;\n\n\t\t\t// extra slide settings to project where the object will slide to\n\t\t\tif (slide) {\n\t\t\t\tlastCount = 0;\n\t\t\t\tbackX = [point.x];\n\t\t\t\tbackY = [point.y];\n\t\t\t\tlastX = -10000; // reset\n\t\t\t\tlastY = -10000;\n\t\t\t\tobj.zimDragMoving = true;\n\t\t\t}\n\n\t\t}, true);\n\n\t\tobj.zimMove = obj.on(\"pressmove\", function(e) {\n\t\t\tif (!downCheck) return;\n\t\t\tpositionObject(dragObject, e.stageX, e.stageY);\n\t\t}, true);\n\n\t\tfunction positionObject(o, x, y) {\n\n\t\t\tif (zot(o)) o = (dragObject) ? dragObject : obj; // so zim.dragRect can use this\n\n\t\t\t// x and y are the desired global positions for the object o\n\t\t\t// checkBounds returns the same values if there are no bounds\n\t\t\t// and returns values inside the bounds if there are bounds set\n\t\t\t// or returns a position so that object o surrounds the bounds if surround is true\n\t\t\t// firstly, convert the global x and y to a point relative to the object's parent\n\t\t\tif (!o.parent) return;\n\t\t\tif (!o.getStage()) return;\n\n\t\t\tif (zot(x) || zot(y)) {\n\t\t\t\t// so zim.dragRect can use this to position on rect change\n\t\t\t\t// it may be we are resizing before we even drag at all\n\t\t\t\t// so we need to establish variables that would have been made on drag events\n\t\t\t\tvar p = o.parent.localToGlobal(o.x, o.y);\n\t\t\t\tdiffX = diffY = 0;\n\t\t\t\tif (obj.zimDragRect) {\n\t\t\t\t\tif (localBounds) {\n\t\t\t\t\t\tr = zim.boundsToGlobal(o.parent, obj.zimDragRect);\n\t\t\t\t\t\tif (surround) rLocal = o.zimDragRect;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr = obj.zimDragRect;\n\t\t\t\t\t\tif (surround) rLocal = zim.boundsToGlobal(o.parent, obj.zimDragRect, true); // flips to global to local\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tx = p.x;\n\t\t\t\ty = p.y;\n\t\t\t\tif (slide) {\n\t\t\t\t\tobjUpX = o.x;\n\t\t\t\t\tobjUpY = o.y;\n\t\t\t\t\tdragObject = o;\n\t\t\t\t\tdampX.immediate(objUpX);\n\t\t\t\t\tdampY.immediate(objUpY);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar point = o.parent.globalToLocal(x, y);\n\t\t\tvar checkedPoint;\n\t\t\tif (slide && slideSnap) {\n\t\t\t\tif (slideSnap == \"vertical\") {\n\t\t\t\t\tcheckedPoint = checkBounds(o,point.x-diffX, point.y-diffY);\n\t\t\t\t\to.x = checkedPoint.x;\n\t\t\t\t\to.y = point.y-diffY;\n\t\t\t\t} else if (slideSnap == \"horizontal\") {\n\t\t\t\t\tcheckedPoint = checkBounds(o,point.x-diffX, point.y-diffY);\n\t\t\t\t\to.x = point.x-diffX;\n\t\t\t\t\to.y = checkedPoint.y;\n\t\t\t\t} else {\n\t\t\t\t\to.x = point.x-diffX;\n\t\t\t\t\to.y = point.y-diffY;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcheckedPoint = checkBounds(o,point.x-diffX, point.y-diffY);\n\t\t\t\t// now set the object's x and y to the resulting checked local point\n\t\t\t\to.x = checkedPoint.x;\n\t\t\t\to.y = checkedPoint.y;\n\t\t\t}\n\n\t\t\t// mask graphics needs to have same position as object\n\t\t\t// yet the mask is inside the object (but alpha = 0)\n\t\t\tif (o.zimMask) {\n\t\t\t\to.zimMask.x = o.x;\n\t\t\t\to.zimMask.y = o.y;\n\t\t\t}\n\t\t}\n\t\tobj.zimPosition = positionObject;\n\n\t\tobj.zimUp = obj.on(\"pressup\", function(e) {\n\t\t\tif (!downCheck) return;\n\t\t\tobj.cursor = (zot(overCursor))?\"pointer\":overCursor;\n\t\t\tif (slide) {\n\t\t\t\tvar point = dragObject.parent.globalToLocal(e.stageX, e.stageY);\n\t\t\t\tdownCheck = false;\n\t\t\t\tupX = point.x;\n\t\t\t\tupY = point.y;\n\t\t\t\tobjUpX = dragObject.x;\n\t\t\t\tobjUpY = dragObject.y;\n\t\t\t\tdampX.immediate(dragObject.x);\n\t\t\t\tdampY.immediate(dragObject.y);\n\t\t\t} else {\n\t\t\t\tif (obj.zimDragTicker) zim.Ticker.remove(obj.zimDragTicker);\n\t\t\t}\n\t\t}, true);\n\n\t\t// the bounds check for registration inside the bounds\n\t\t// or if surround is set for the whole object staying outside the bounds\n\t\tfunction checkBounds(o, x, y) {\n\t\t\tif (r) {\n\t\t\t\tif (surround) {\n\t\t\t\t\tvar w = o.getBounds().width;\n\t\t\t\t\tvar h = o.getBounds().height;\n\t\t\t\t\tvar bx = o.getBounds().x;\n\t\t\t\t\tvar by = o.getBounds().y;\n\t\t\t\t\tif (w < rLocal.width) {\n\t\t\t\t\t\t// put half way between\n\t\t\t\t\t\tx = rLocal.x + (rLocal.width - w) / 2 + (o.regX-bx);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (x - (o.regX-bx) > rLocal.x) {\n\t\t\t\t\t\t\tx = rLocal.x + (o.regX-bx);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (x - (o.regX-bx) + w < rLocal.x + rLocal.width) {\n\t\t\t\t\t\t\tx = rLocal.x + rLocal.width + (o.regX-bx) - w;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (o.height < rLocal.height) {\n\t\t\t\t\t\t// put half way between\n\t\t\t\t\t\ty = rLocal.y + (rLocal.height - h) / 2 + (o.regY-by);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (y - (o.regY-by) > rLocal.y) {\n\t\t\t\t\t\t\ty = rLocal.y + (o.regY-by);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (y - (o.regY-by) + h < rLocal.y + rLocal.height) {\n\t\t\t\t\t\t\ty = rLocal.y + rLocal.height + (o.regY-by) - h;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// convert the desired drag position to a global point\n\t\t\t\t\t// note that we want the position of the object in its parent\n\t\t\t\t\t// so we use the parent as the local frame\n\t\t\t\t\tvar point = o.parent.localToGlobal(x,y);\n\t\t\t\t\t// r is the bounds rectangle on the global stage\n\t\t\t\t\t// r is set during mousedown to allow for global scaling when in localBounds mode\n\t\t\t\t\t// if you scale in localBounds==false mode, you will need to reset bounds with dragRect()\n\t\t\t\t\tx = Math.max(r.x, Math.min(r.x+r.width, point.x));\n\t\t\t\t\ty = Math.max(r.y, Math.min(r.y+r.height, point.y));\n\t\t\t\t\t// now that the point has been checked on the global scale\n\t\t\t\t\t// convert the point back to the obj parent frame of reference\n\t\t\t\t\tpoint = o.parent.globalToLocal(x, y);\n\t\t\t\t\tx = point.x;\n\t\t\t\t\ty = point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {x:x,y:y}\n\t\t}\n\n\t\t// we store where the object was a few ticks ago and project it forward\n\t\t// then damp until it stops - although the ticker keeps running and updating\n\t\t// if it snaps then the object is allowed to go past the bounds and damp back\n\t\t// if it is not snapping then the object stops at the bounds when it is slid\n\t\tfunction setUpSlide() {\n\t\t\tvar stage = obj.getStage();\n\t\t\tobj.zimDragTicker = function() {\n\t\t\t\tif (!dragObject) dragObject = obj; // could be risky if intending to drag children\n\t\t\t\tif (downCheck) {\n\t\t\t\t\tvar point = dragObject.parent.globalToLocal(stage.mouseX, stage.mouseY);\n\t\t\t\t\tlastCount++;\n\t\t\t\t\tbackX.push(point.x);\n\t\t\t\t\tbackY.push(point.y);\n\t\t\t\t\tif (lastCount >= back) {\n\t\t\t\t\t\tlastBackX = backX.shift();\n\t\t\t\t\t\tlastBackY = backY.shift();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlastBackX = backX[0];\n\t\t\t\t\t\tlastBackY = backY[0];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!obj.zimDragMoving) return;\n\t\t\t\t\tvar desiredX = objUpX + upX-lastBackX;\n\t\t\t\t\tvar desiredY = objUpY + upY-lastBackY;\n\t\t\t\t\tif (r) {\n\t\t\t\t\t\tvar checkedPoint = checkBounds(dragObject, desiredX, desiredY);\n\t\t\t\t\t\tdesiredX = checkedPoint.x;\n\t\t\t\t\t\tdesiredY = checkedPoint.y;\n\t\t\t\t\t}\n\t\t\t\t\tif (!slideSnap) {\n\t\t\t\t\t\tvar checkedPoint = checkBounds(dragObject, dampX.convert(desiredX), dampY.convert(desiredY));\n\t\t\t\t\t\tdragObject.x = checkedPoint.x;\n\t\t\t\t\t\tdragObject.y = checkedPoint.y;\n\t\t\t\t\t\ttestMove(dragObject,dragObject.x,dragObject.y,dragObject.x,dragObject.y);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdragObject.x = dampX.convert(desiredX);\n\t\t\t\t\t\tdragObject.y = dampY.convert(desiredY);\n\t\t\t\t\t\ttestMove(dragObject,dragObject.x,dragObject.y,desiredX,desiredY);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction testMove(o,x,y,desiredX,desiredY) {\n\t\t\t\tif (Math.abs(o.x-lastX) < .1 && Math.abs(o.y-lastY) < .1) {\n\t\t\t\t\tobj.zimDragMoving = false;\n\t\t\t\t\to.x = desiredX; // snap to final resting place\n\t\t\t\t\to.y = desiredY;\n\t\t\t\t\to.dispatchEvent(\"slidestop\");\n\t\t\t\t} else {\n\t\t\t\t\tlastX = x;\n\t\t\t\t\tlastY = y;\n\t\t\t\t}\n\t\t\t}\n\t\t\tzim.Ticker.add(obj.zimDragTicker, stage);\n\t\t}\n\t\treturn obj;\n\t}//-31\n\n/*--\nzim.noDrag = function(obj)\n\nnoDrag\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nRemoves drag function from an object.\nThis is not a stopDrag function (as in the drop of a drag and drop).\nDropping happens automatically with the drag() function.\nThe noDrag function turns off the drag function so it is no longer draggable.\n\nEXAMPLE\ncircle.noDrag();\n\n// OR with pre ZIM 4TH function\nzim.noDrag(circle);\nEND EXAMPLE\n\nPARAMETERS\nobj - the object to make not draggable\n\nRETURNS obj for chaining\n--*///+32\n\tzim.noDrag = function(obj) {\n\t\tz_d(\"32\");\n\t\tif (zot(obj) || !obj.on) return;\n\t\tobj.cursor = \"default\";\n\t\tzim.setSwipe(obj, true);\n\t\tobj.off(\"added\", obj.zimAdded);\n\t\tobj.off(\"removed\", obj.zimRemoved);\n\t\tobj.off(\"mousedown\", obj.zimDown);\n\t\tobj.off(\"pressmove\", obj.zimMove);\n\t\tobj.off(\"pressup\", obj.zimUp);\n\t\tif (zim.Ticker && obj.zimDragSlide) zim.Ticker.remove(obj.zimDragSlide);\n\t\tobj.zimDragMoving=obj.zimAdded=obj.zimRemoved=obj.zimDown=obj.zimMove=obj.zimUp=obj.zimDragRect=obj.zimDragSlide=null;\n\t\treturn obj;\n\t}//-32\n\n/*--\nzim.dragRect = function(obj, rect)\n\ndragRect\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nDynamically changes or adds a bounds rectangle to the object being dragged with zim.drag().\n\nEXAMPLE\nvar dragBounds = new createjs.Rectangle(100,100,500,400);\ncircle.dragRect(dragBounds);\n\nOR pre ZIM 4TH\nzim.dragRect(circle, dragBounds);\nEND EXAMPLE\n\nPARAMETERS\nobj - an object that currently has its zim.drag() set\nrect - is a createjs.Rectangle for the bounds - the local / global does not change from the original drag\n\nRETURNS obj for chaining\n--*///+33\n\tzim.dragRect = function(obj, rect) {\n\t\tz_d(\"33\");\n\t\tif (zot(obj) || !obj.on) return;\n\t\tif (zot(rect)) return;\n\t\tobj.zimDragRect = rect;\n\t\tobj.zimDragMoving = true;\n\t\tif (obj.zimPosition) obj.zimPosition();\n\t\treturn obj;\n\t}//-33\n\n/*--\nzim.setSwipe = function(obj, swipe)\n\nsetSwipe\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nSets whether we want to swipe an object or not using ZIM Swipe.\nRecursively sets children to same setting.\n\nEXAMPLE\nzim.swipe(circle, false);\n\nOR with pre ZIM 4TH function\ncircle.swipe(false);\nEND EXAMPLE\n\nPARAMETERS\nobj - a display object\nswipe - (default true) set to false to not swipe object\n\nRETURNS obj for chaining\n--*///+34\n\tzim.setSwipe = function(obj, swipe) {\n\t\tz_d(\"34\");\n\t\tif (zot(obj) || !obj.on) return;\n\t\tobj.zimNoSwipe = (swipe) ? null : true;\n\t\tif (obj instanceof createjs.Container) dig(obj);\n\t\tfunction dig(container) {\n\t\t\tvar num = container.getNumChildren();\n\t\t\tvar temp;\n\t\t\tfor (var i=0; i<num; i++) {\n\t\t\t\ttemp = container.getChildAt(i);\n\t\t\t\ttemp.zimNoSwipe = obj.zimNoSwipe;\n\t\t\t\tif (temp instanceof createjs.Container) {\n\t\t\t\t\tdig(temp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn obj;\n\t}//-34\n\n/*--\nzim.hitTestPoint = function(obj, x, y)\n\nhitTestPoint\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nSee if shape of obj is hitting the global point x and y on the stage.\n\nEXAMPLE\nvar circle = new zim.Circle();\nstage.addChild(circle);\ncircle.drag();\ncircle.on(\"pressmove\", function() {\n\tif (circle.hitTestPoint(stageW/2, stageH/2)) {\n\t\tif (circle.alpha == 1) {\n\t\t\tcircle.alpha = .5;\n\t\t\tstage.update();\n\t\t}\n\t} else {\n\t\tif (circle.alpha == .5) {\n\t\t\tcircle.alpha = 1;\n\t\t\tstage.update();\n\t\t}\n\t}\n});\n\nOR with pre ZIM 4TH functions\nzim.drag(circle); // etc.\nif (zim.hitTestPoint(circle, stageW/2, stageH/2)) {} // etc.\nEND EXAMPLE\n\nPARAMETERS\nobj - the obj whose shape we are testing\nx and y - the point we are testing to see if it hits the shape\n\nRETURNS a Boolean true if hitting, false if not\n--*///+35\n\tzim.hitTestPoint = function(obj, x, y) {\n\t\tz_d(\"35\");\n\t\tif (!obj.stage) return false;\n\t\tif (zot(obj) || !obj.globalToLocal) return;\n\t\tvar point = obj.globalToLocal(x,y);\n\t\tvar bounds = obj.getBounds();\n\t\tif (bounds) { // faster to check if point is in bounds first\n\t\t\tif (point.x > bounds.x + bounds.width || point.x < bounds.x) return;\n\t\t\tif (point.y > bounds.y + bounds.height || point.y < bounds.y) return;\n\t\t}\n\t\treturn obj.hitTest(point.x, point.y);\n\t}//-35\n\n/*--\nzim.hitTestReg = function(a, b)\n\nhitTestReg\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nSee if shape (a) is hitting the registration point of object (b).\n\nEXAMPLE\nvar circle = new zim.Circle(50, \"red\");\ncircle.center(stage);\ncircle.drag();\nvar rect = new zim.Rectangle(100, 100, \"blue\");\nstage.addChild(rect);\ncircle.on(\"pressmove\", function() {\n\tif (circle.hitTestReg(rect)) {\n\t\tstage.removeChild(rect);\n\t\tstage.update();\n\t}\n})\n\nOR with pre ZIM 4TH function\nzim.center(circle, stage);\nzim.drag(circle); etc.\nif (zim.hitTestReg(circle, rect)) {} // etc.\nEND EXAMPLE\n\nPARAMETERS\na - the object whose shape we are testing\nb - the object whose registration point we are checking against\n\nRETURNS a Boolean true if hitting, false if not\n--*///+36\n\tzim.hitTestReg = function(a, b) {\n\t\tz_d(\"36\");\n\t\tif (!a.stage || !b.stage) return false;\n\t\tif (zot(a) || zot(b) || !a.localToLocal || !b.localToLocal) return;\n\t\tvar point = b.localToLocal(b.regX,b.regY,a);\n\t\tvar bounds = a.getBounds();\n\t\tif (bounds) { // faster to check if point is in bounds first\n\t\t\tif (point.x > bounds.x + bounds.width || point.x < bounds.x) return;\n\t\t\tif (point.y > bounds.y + bounds.height || point.y < bounds.y) return;\n\t\t}\n\t\treturn a.hitTest(point.x, point.y);\n\t}//-36\n\n/*--\nzim.hitTestRect = function(a, b, num)\n\nhitTestRect\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nSee if a shape (a) is hitting points on a rectangle.\nThe rectangle is based on the position, registration and bounds of object (b).\nnum is how many points on the edge of the rectangle we test - default is 0.\nThe four corners are always tested as well as the very middle of the rectangle.\n\nEXAMPLE\nvar circle = new zim.Circle(50, \"red\");\ncircle.center(stage);\ncircle.drag();\nvar rect = new zim.Rectangle(100, 100, \"blue\");\nstage.addChild(rect);\ncircle.on(\"pressmove\", function() {\n\tif (circle.hitTestRect(rect)) {\n\t\tstage.removeChild(rect);\n\t\tstage.update();\n\t}\n});\n\nOR with pre ZIM 4TH function\nzim.center(circle, stage);\nzim.drag(circle); etc.\nif (zim.hitTestRect(circle, rect)) {} // etc.\nEND EXAMPLE\n\nPARAMETERS\na - the object whose shape we are testing\nb - the object whose bounding rectangle we are checking against\nnum - (default 0) the number of points along each edge to checking\n\t1 would put a point at the middle of each edge\n\t2 would put two points at 1/3 and 2/3 along the edge, etc.\n\tthere are always points at the corners\n\tand one point in the middle of the rectangle\n\nRETURNS a Boolean true if hitting, false if not\n--*///+37\n\tzim.hitTestRect = function(a, b, num) {\n\t\tz_d(\"37\");\n\t\tif (!a.stage || !b.stage) return false;\n\t\tif (zot(a) || zot(b) || !a.hitTest || !b.getBounds) return;\n\t\tif (zot(num)) num = 0;\n\t\tvar bounds = b.getBounds();\n\t\tif (!bounds) {\n\t\t\tzog(\"zim create - hitTestRect():\\n please setBounds() on param b object\");\n\t\t\treturn;\n\t\t}\n\t\tvar bounds2 = a.getBounds();\n\t\tif (bounds2 && !zim.hitTestBounds(a,b)) return; // bounds not hitting\n\n\t\tvar centerX = bounds.x+bounds.width/2;\n\t\tvar centerY = bounds.y+bounds.height/2;\n\t\tvar point = b.localToLocal(centerX, centerY, a);\n\t\tif (a.hitTest(point.x, point.y)) return true; // check hit on center of Rectangle\n\n\t\tvar shiftX, shiftY, point;\n\n\t\t//num = 0;  1/1\n\t\t//num = 1;  1/2  2/2\n\t\t//num = 2;  1/3  2/3  3/3\n\t\t//num = 3;  1/4  2/4  3/4  4/4\n\n\t\tfor (var i=0; i<=num; i++) {\n\t\t\tshiftX = bounds.width  * (i+1)/(num+1);\n\t\t\tshiftY = bounds.height * (i+1)/(num+1);\n\t\t\tpoint = b.localToLocal(bounds.x+shiftX, bounds.y, a);\n\t\t\tif (a.hitTest(point.x, point.y)) return true;\n\t\t\tpoint = b.localToLocal(bounds.x+bounds.width, bounds.y+shiftY, a);\n\t\t\tif (a.hitTest(point.x, point.y)) return true;\n\t\t\tpoint = b.localToLocal(bounds.x+bounds.width-shiftX, bounds.y+bounds.height, a);\n\t\t\tif (a.hitTest(point.x, point.y)) return true;\n\t\t\tpoint = b.localToLocal(bounds.x, bounds.y+bounds.height-shiftY, a);\n\t\t\tif (a.hitTest(point.x, point.y)) return true;\n\t\t}\n\t}//-37\n\n/*--\nzim.hitTestCircle = function(a, b, num)\n\nhitTestCircle\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nSee if a shape (a) is hitting points on a circle.\nThe circle is based on the position, registration and bounds of object (b).\nnum is how many points around the circle we test - default is 8\nAlso checks center of circle hitting.\n\nEXAMPLE\nvar circle = new zim.Circle(50, \"red\");\ncircle.center(stage);\ncircle.drag();\nvar triangle = new zim.Triangle(100, 100, 100, \"blue\");\nstage.addChild(triangle);\ncircle.on(\"pressmove\", function() {\n\tif (triangle.hitTestCircle(circle)) {\n\t\tstage.removeChild(triangle);\n\t\tstage.update();\n\t}\n});\n\nOR with pre ZIM 4TH function\nzim.center(circle, stage);\nzim.drag(circle); etc.\nif (zim.hitTestCircle(triangle, circle)) {} // etc.\nEND EXAMPLE\n\nPARAMETERS\na - the object whose shape we are testing\nb - the object whose circle based on the bounding rect we are using\nnum - (default 8) the number of points evenly distributed around the circle\n\tand one point in the middle of the circle\n\nRETURNS a Boolean true if hitting, false if not\n--*///+38\n\tzim.hitTestCircle = function(a, b, num) {\n\t\tz_d(\"38\");\n\t\tif (!a.stage || !b.stage) return false;\n\t\tif (zot(a) || zot(b) || !a.hitTest || !b.getBounds) return;\n\t\tif (zot(num)) num = 8;\n\t\tvar bounds = b.getBounds();\n\t\tif (!bounds) {\n\t\t\tzog(\"zim create - hitTestCircle():\\n please setBounds() on param b object\");\n\t\t\treturn;\n\t\t}\n\t\tvar bounds2 = a.getBounds();\n\t\tif (bounds2 && !zim.hitTestBounds(a,b)) return; // bounds not hitting\n\n\t\tvar centerX = bounds.x+bounds.width/2;\n\t\tvar centerY = bounds.y+bounds.height/2;\n\t\tvar point = b.localToLocal(centerX, centerY, a);\n\t\tif (a.hitTest(point.x, point.y)) return true; // check hit on center of circle\n\t\tvar radius = (bounds.width+bounds.height)/2/2; // average diameter / 2\n\t\tvar angle, pointX, pointY;\n\t\tfor (var i=0; i<num; i++) {\n\t\t\tangle = i/num * 2*Math.PI; // radians\n\t\t\tpointX = centerX + (radius * Math.cos(angle));\n\t\t\tpointY = centerY + (radius * Math.sin(angle));\n\t\t\tpoint = b.localToLocal(pointX, pointY, a);\n\t\t\tif (a.hitTest(point.x, point.y)) return true;\n\t\t}\n\n\t}//-38\n\n/*--\nzim.hitTestBounds = function(a, b, boundsShape)\n\nhitTestBounds\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nSee if a.getBounds() is hitting b.getBounds().\nPass in a boundsShape shape if you want a demonstration of where the bounds are.\n\nEXAMPLE\nvar circle = new zim.Circle(50, \"red\");\ncircle.center(stage);\ncircle.drag();\nvar rect = new zim.Rectangle(100, 100, \"blue\");\nstage.addChild(rect);\ncircle.on(\"pressmove\", function() {\n\tif (circle.hitTestBounds(rect)) {\n\t\tstage.removeChild(rect);\n\t\tstage.update();\n\t}\n});\n\nOR with pre ZIM 4TH function\nzim.center(circle, stage);\nzim.drag(circle); etc.\nif (zim.hitTestBounds(circle, rect)) {} // etc.\nEND EXAMPLE\n\nPARAMETERS\na - an object whose rectanglular bounds we are testing\nb - another object whose rectanglular bounds we are testing\nboundsShape - (default null) an empty zim.Shape or createjs.Shape\n\tyou would need to add the boundsShape to the stage\n\nRETURNS a Boolean true if hitting, false if not\n--*///+39\n\tzim.hitTestBounds = function(a, b, boundsShape) {\n\t\tz_d(\"39\");\n\t\tif (!a.stage || !b.stage) return false;\n\t\tif (zot(a) || zot(b) || !a.getBounds || !b.getBounds) return;\n\t\tvar boundsCheck = false;\n\t\tif (boundsShape && boundsShape.graphics) boundsCheck=true;\n\n\t\tvar aB = a.getBounds();\n\t\tvar bB = b.getBounds();\n\t\tif (!aB || !bB) {\n\t\t\tzog(\"zim create - hitTestBounds():\\n please setBounds() on both objects\");\n\t\t\treturn;\n\t\t}\n\n\t\tvar adjustedA = zim.boundsToGlobal(a);\n\t\tvar adjustedB = zim.boundsToGlobal(b);\n\n\t\tif (boundsCheck) {\n\t\t\tvar g = boundsShape.graphics;\n\t\t\tg.c();\n\t\t\tg.ss(1).s(\"blue\");\n\t\t\tg.r(adjustedA.x, adjustedA.y, adjustedA.width, adjustedA.height);\n\t\t\tg.s(\"green\");\n\t\t\tg.r(adjustedB.x, adjustedB.y, adjustedB.width, adjustedB.height);\n\t\t\tboundsShape.getStage().update();\n\t\t}\n\n\t\treturn rectIntersect(adjustedA, adjustedB);\n\n\t\tfunction rectIntersect(a, b) { // test two rectangles hitting\n\t\t\tif (a.x >= b.x + b.width || a.x + a.width <= b.x ||\n\t\t\t\ta.y >= b.y + b.height || a.y + a.height <= b.y ) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}//-39\n\n/*--\nzim.boundsToGlobal = function(obj, rect, flip)\n\nboundsToGlobal\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nReturns a createjs Rectangle of the bounds of object projected onto the stage.\nHandles scaling and rotation.\nIf a createjs rectangle is passed in then it converts this rectangle\nfrom within the frame of the obj to a global rectangle.\nIf flip (default false) is set to true it goes from global to local rect.\nUsed by drag() and hitTestBounds() above - probably you will not use this directly.\n\nEXAMPLE\nzog(circle.boundsToGlobal().x); // global x of circle\n\nOR with pre ZIM 4TH function\nzog(zim.boundsToGlobal(circle).width); // global width of circle)\nEND EXAMPLE\n\nPARAMETERS\nobj - an object for which you would like global bounds projected\nrect - a rect inside an object which you would like mapped to global\nflip - (default false) make a global rect ported to local values\n\nRETURNS a Boolean true if hitting, false if not\n--*///+40\n\tzim.boundsToGlobal = function(obj, rect, flip) {\n\t\tz_d(\"40\");\n\t\tif (zot(obj) || !obj.getBounds) return;\n\t\tif (zot(flip)) flip = false;\n\t\tvar oB = obj.getBounds();\n\t\tif (!oB && zot(rect)) {\n\t\t\tzog(\"zim create - boundsToGlobal():\\n please setBounds() on object (or a rectangle)\");\n\t\t\treturn;\n\t\t}\n\t\tif (rect) oB = rect;\n\n\t\tif (flip) {\n\t\t\tvar pTL = obj.globalToLocal(oB.x, oB.y);\n\t\t\tvar pTR = obj.globalToLocal(oB.x+oB.width, oB.y);\n\t\t\tvar pBR = obj.globalToLocal(oB.x+oB.width, oB.y+oB.height);\n\t\t\tvar pBL = obj.globalToLocal(oB.x, oB.y+oB.height);\n\t\t} else {\n\t\t\tvar pTL = obj.localToGlobal(oB.x, oB.y);\n\t\t\tvar pTR = obj.localToGlobal(oB.x+oB.width, oB.y);\n\t\t\tvar pBR = obj.localToGlobal(oB.x+oB.width, oB.y+oB.height);\n\t\t\tvar pBL = obj.localToGlobal(oB.x, oB.y+oB.height);\n\t\t}\n\n\t\t// handle rotation\n\t\tvar newTLX = Math.min(pTL.x,pTR.x,pBR.x,pBL.x);\n\t\tvar newTLY = Math.min(pTL.y,pTR.y,pBR.y,pBL.y);\n\t\tvar newBRX = Math.max(pTL.x,pTR.x,pBR.x,pBL.x);\n\t\tvar newBRY = Math.max(pTL.y,pTR.y,pBR.y,pBL.y);\n\n\t\treturn new createjs.Rectangle(\n\t\t\tnewTLX,\n\t\t\tnewTLY,\n\t\t\tnewBRX-newTLX,\n\t\t\tnewBRY-newTLY\n\t\t);\n\t}//-40\n\n/*--\nzim.hitTestGrid = function(obj, width, height, cols, rows, x, y, offsetX, offsetY, spacingX, spacingY, local, type)\n\nhitTestGrid\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nConverts an x and y point to an index in a grid.\nIf you have a grid of rectangles, for instance, use this to find out which rectangle is beneath the cursor.\nThis technique will work faster than any of the other hit tests.\n\nEXAMPLE\nzim.Ticker.add(function() {\n\tvar index = stage.hitTestGrid(200, 200, 10, 10, stage.mouseX, stage.mouseY);\n\tif (index) zog(index);\n});\nOR with pre ZIM 4TH function\nvar index = zim.hitTestGrid(stage, 200, 200, 10, 10, stage.mouseX, stage.mouseY);\nEND EXAMPLE\noffsetX, offsetY, spacingX, spacingY, local, type\n\nPARAMETERS\nobj - the object that contains the grid\nwidth and height - the overall dimensions\ncols and rows - how many of each (note it is cols and then rows)\nx and y - where you are in the grid (eg. stage.mouseX and stage.mouseY)\noffsetX and offsetY - (default 0) the distances the grid starts from the origin of the obj\nspacingX and spacingY - (default 0) spacing between grid cells (null will be returned if x and y within spacing)\n\tspacing is only between the cells and is to be included in the width and height (but not outside the grid)\nlocal - (default false) set to true to convert x and y to local values\ntype - (default index) which means the hitTestGrid returns the index of the cell beneath the x and y point\n\tstarting with 0 at top left corner and counting columns along the row and then to the next row, etc.\n\tset type to \"col\" to return the column and \"row\" to return the row\n\tset to \"array\" to return all three in an Array [index, col, row]\n\nRETURNS an index Number (or undefined) | col | row | an Array of [index, col, row]\n--*///+41\n\tzim.hitTestGrid = function(obj, width, height, cols, rows, x, y, offsetX, offsetY, spacingX, spacingY, local, type) {\n\t\tz_d(\"41\");\n\t\tif (!obj.stage) return false;\n\t\tif (!zot(obj) && !local) {\n\t\t\tvar point = obj.globalToLocal(x,y);\n\t\t\tx=point.x; y=point.y;\n\t\t}\n\t\tif (zot(offsetX)) offsetX = 0;\n\t\tif (zot(offsetY)) offsetY = 0;\n\t\tif (zot(spacingX)) spacingX = 0;\n\t\tif (zot(spacingY)) spacingY = 0;\n\n\t\t// assume spacing is to the right and bottom of a cell\n\t\t// turning this into an object would avoid the size calculations\n\t\t// but hopefully it will not be noticed - and then hitTests are all functions\n\t\tvar sizeX = width / cols;\n\t\tvar sizeY = height / rows;\n\n\t\t// calculate col and row\n\t\tvar col = Math.min(cols-1,Math.max(0,Math.floor((x-offsetX)/sizeX)));\n\t\tvar row = Math.min(rows-1,Math.max(0,Math.floor((y-offsetY)/sizeY)));\n\n\t\t// check if within cell\n\t\tif ((x-offsetX)>sizeX*(col+1)-spacingX || (x-offsetX)<sizeX*(col)) return;\n\t\tif ((y-offsetY)>sizeY*(row+1)-spacingY || (y-offsetY)<sizeY*(row)) return;\n\n\t\tvar index = row*cols + col;\n\t\tif (zot(type) || type==\"index\") return index\n\t\tif (type == \"col\") return col;\n\t\tif (type == \"row\") return row;\n\t\tif (type == \"array\") return [index, col, row];\n\t}//-41\n\n/*--\nzim.move = function(target, x, y, time, ease, call, params, wait, waitedCall, waitedParams, loop, loopCount, loopWait, loopCall, loopParams, loopWaitCall, loopWaitParams, rewind, rewindWait, rewindCall, rewindParams, rewindWaitCall, rewindWaitParams, sequence, sequenceCall, sequenceParams, sequenceReverse, ticker, props, protect, override, from, set, id)\n\nmove\nzim function - and Display object method under ZIM 4TH\nwraps createjs.Tween\n\nDESCRIPTION\nMoves a target object to position x, y in time milliseconds.\nYou can set various types of easing like bounce, elastic, back, linear, sine, etc.\nHandles callbacks, delays, loops, rewinds, sequences of move animations.\nAlso see the more general zim.animate()\n(which this function calls after consolidating x an y into an object).\n\nNOTE: to temporarily prevent animations from starting set zim.ANIMATE to false\nNOTE: see zim.pauseZimAnimate(state, ids) and zim.stopZimAnimate(ids) for controlling tweens when running\n\nEXAMPLE\nvar circle = new zim.Circle(50, \"red\");\ncircle.center(stage);\ncircle.move(100, 100, 700, \"backOut\");\n\n// see zim.animate for more complex examples\n\nOR with pre ZIM 4TH function\nzim.center(circle, stage);\nzim.move(circle, 100, 100, 700, \"backOut\");\n// see ZIM Bits for more move examples\nEND EXAMPLE\n\nPARAMETERS - supports DUO - parameters or single object with properties below\n** some parameters below support ZIM VEE values that use zik() to pick a random option\nThe ZIM VEE value can be the following:\n1. an Array of values to pick from - eg. [\"red\", \"green\", \"blue\"]\n2. a Function that returns a value - eg. function(){return Date.now();}\n3. a ZIM RAND object literal - eg. {min:10, max:20, integer:true, negative:true} max is required\n4. any combination of the above - eg. [\"red\", function(){x>100?[\"green\", \"blue\"]:\"yellow\"}] zik is recursive\n5. a single value such as a Number, String, zim.Rectangle(), etc. this just passes through unchanged\n\ntarget - |ZIM VEE| the target object to tween\nx and y - |ZIM VEE| the absolute positions to tween to\n\tRELATIVE VALUES: you can pass in relative values by putting the numbers as strings\n\tx:\"100\" will animate the object 100 pixels to the right of the current x position\n\tx:100 will animate the oject to an x position of 100\ntime - |ZIM VEE| the time for the tween in milliseconds 1000 ms = 1 second\nease - |ZIM VEE| (default \"quadInOut\") see CreateJS easing (\"bounceOut\", \"elasticIn\", \"backInOut\", \"linearInOut\", etc)\ncall - (default null) the function to call when the animation is done\nparams - (default target) a single parameter for the call function (eg. use object literal or array)\nwait - |ZIM VEE| (default 0) milliseconds to wait before doing animation\nloop - (default false) set to true to loop animation\nloopCount - |ZIM VEE| (default 0) if loop is true how many times it will loop (0 is forever)\nloopWait - |ZIM VEE| (default 0) milliseconds to wait before looping (post animation wait)\nloopCall - (default null) calls function after loop and loopWait (not including last loop)\nloopParams - (default target) parameters to send loopCall function\nloopWaitCall - (default null) calls function after at the start of loopWait\nloopWaitParams - (default target) parameters to send loopWaitCall function\nrewind - |ZIM VEE| (default false) set to true to rewind (reverse) animation (doubles animation time)\nrewindWait - |ZIM VEE| (default 0) milliseconds to wait in the middle of the rewind\nrewindCall - (default null) calls function at middle of rewind after rewindWait\nrewindParams - (default target) parameters to send rewindCall function\nrewindWaitCall (default null) calls function at middle of rewind before rewindWait\nrewindWaitParams - (default target) parameters to send rewindCall function\nsequence - (default 0) the delay time in milliseconds to run on children of a container or an array of target animations\n\tfor example, target = container or target = [a,b,c] and sequence = 1000\n\twould run the animation on the first child and then 1 second later, run the animation on the second child, etc.\n\tor in the case of the array, on element a and then 1 second later, element b, etc.\n\tIf the loop prop is true then sequenceCall below would activate for each loop\n\tFor an array, you must use the zim function with a target parameter - otherwise you can use the ZIM 4TH method\nsequenceCall - (default null) the function that will be called when the sequence ends\nsequenceParams - (default null) a parameter sent to the sequenceCall function\nsequenceReverse - |ZIM VEE| (default false) set to true to sequence through container or array backwards\nprops - (default {override: true}) legacy - allows you to pass in TweenJS props\nprotect - (default false) protects animation from being interrupted before finishing\n \tunless manually interrupted with stopZimMove()\n\tprotect is always true (regardless of parameter setting) if loop or rewind parameters are set\noverride - (default true) subesequent tweens of any type on object cancel all earlier tweens on object\n\tset to false to allow multiple tweens of same object\nfrom - |ZIM VEE| (default false) set to true to animate from obj properties to the current properties set on target\nset - |ZIM VEE| (default null) an object of properties to set on the target to start (but after the wait time)\nid - (default randomly created) set to String for id to pause or stop Tween\n\nNOTE: earlier versions of ZIM used props for loop and rewind - now these are direct parameters\nNOTE: call is now triggered once after all loops and rewinds are done\n\nRETURNS the target for chaining\n--*///+44\n\tzim.move = function(target, x, y, time, ease, call, params, wait, waitedCall, waitedParams, loop, loopCount, loopWait, loopCall, loopParams, loopWaitCall, loopWaitParams, rewind, rewindWait, rewindCall, rewindParams, rewindWaitCall, rewindWaitParams, sequence, sequenceCall, sequenceParams, sequenceReverse, ticker, props, protect, override, from, set, id) {\n\t\tvar sig = \"target, x, y, time, ease, call, params, wait, waitedCall, waitedParams, loop, loopCount, loopWait, loopCall, loopParams, loopWaitCall, loopWaitParams, rewind, rewindWait, rewindCall, rewindParams, rewindWaitCall, rewindWaitParams, sequence, sequenceCall, sequenceParams, sequenceReverse, ticker, props, protect, override, from, set, id\";\n\t\tvar duo; if (duo = zob(zim.move, arguments, sig)) return duo;\n\t\tz_d(\"44\");\n\t\tif (zot(x) && zot(y)) return;\n\t\tvar obj = {x:zik(x), y:zik(y)};\n\t\tif (zot(x)) {obj = {y:zik(y)};} else if (zot(y)) {obj = {x:zik(x)};}\n\t\treturn zim.animate(target, obj, time, ease, call, params, wait, waitedCall, waitedParams, loop, loopCount, loopWait, loopCall, loopParams, loopWaitCall, loopWaitParams, rewind, rewindWait, rewindCall, rewindParams, rewindWaitCall, rewindWaitParams, sequence, sequenceCall, sequenceParams, sequenceReverse, ticker, props, null, protect, override, from, set, id);\n\t}//-44\n\n/*--\nzim.animate = function(target, obj, time, ease, call, params, wait, waitedCall, waitedParams, loop, loopCount, loopWait, loopCall, loopParams, loopWaitCall, loopWaitParams, rewind, rewindWait, rewindCall, rewindParams, rewindWaitCall, rewindWaitParams, sequence, sequenceCall, sequenceParams, sequenceReverse, ticker, props, css, protect, override, from, set, id)\n\nanimate\nzim function - and Display object method under ZIM 4TH\nwraps createjs.Tween\n\nDESCRIPTION\nAnimate object obj properties in time milliseconds.\nYou can set various types of easing like bounce, elastic, back, linear, sine, etc.\nHandles callbacks, delays, loops, rewinds, series and sequences of animations.\nAlso see the more specific zim.move() to animate position x, y\nalthough you can animate x an y just fine with zim.animate.\n\nNOTE: to temporarily prevent animations from starting set zim.ANIMATE to false\nNOTE: see zim.pauseZimAnimate(state, ids) and zim.stopZimAnimate(ids) for controlling tweens when running\n\nEXAMPLE\nvar circle = new zim.Circle(50, \"red\");\ncircle.center(stage);\ncircle.alpha = 0;\ncircle.scale(0);\ncircle.animate({alpha:1, scale:1}, 700, null, done);\nfunction done(target) {\n\t// target is circle if params is not set\n\ttarget.drag();\n}\n\n// or with ZIM DUO and from parameter:\nvar circle = new zim.Circle(50, \"red\");\ncircle.center(stage);\ncircle.animate({obj:{alpha:0, scale:0}, time:700, from:true});\n\n// note: there was no need to set alpha and scale to 0 before the animation\n// because from will animate from property values in obj {alpha:0, scale:0}\n// to the present set values - which are 1 and 1 for the default scale and alpha.\n// This allows you to place everything how you want it to end up\n// and then easily animate to this state.\n// An extra advantage of this is that you can use the zim.ANIMATE constant to skip animations while building\n// See the http://zimjs.com/code/ornamate.html example\n\n// RELATIVE animation\n// rotate the rectangle 360 degrees from its current rotation\nrectangle.animate({rotation:\"360\"}, 1000);\n\n// pulse circle\nvar circle = new zim.Circle(50, \"red\");\ncircle.center(stage);\n// pulse circle from scale 0 - 1 every second (use ZIM DUO)\ncircle.animate({obj:{scale:0}, time:500, loop:true, rewind:true, from:true});\n// see ZIM Bits for more move examples\n\nOR with pre ZIM 4TH function and without from\nvar circle = new zim.Circle(50, \"red\");\nzim.center(circle, stage);\ncircle.alpha = 0;\nzim.scale(circle, 0);\nzim.animate(circle, {alpha:1, scale:1}, 700, null, done);\nfunction done(target) {\n\t// target is circle if params is not set\n\tzim.drag(target);\n}\nEND EXAMPLE\n\nEXAMPLE\n// using ZIM VEE value:\n// this will animate the alpha to between .5 and 1 in either 1000ms or 2000ms\ncircle.animate({alpha:{min:.5, max:1}}, [1000, 2000]);\nEND EXAMPLE\n\nEXAMPLE\n// Series example animating a circle in square formation\n// Also showing that the series can include multiple targets\n// Click on the stage to pause or unpause the animation\n\nvar rect = new zim.Rectangle({color:frame.pink})\n\t.centerReg(stage)\n\t.scale(0); // hiding it to start\n\nvar circle = new zim.Circle({color:frame.purple}) // chaining the rest\n\t.addTo(stage)\n\t.pos(400,300)\n\t.animate({ // circle will be the default object for the inner animations\n\t\tobj:[\n\t\t\t// an array of animate configuration objects\n\t\t\t{obj:{x:600, y:300, scale:2}},\n\t\t\t{obj:{x:600, y:500, scale:1}, call:function(){zog(\"part way\");}},\n\t\t\t{obj:{x:400, y:500}, time:500, ease:\"quadInOut\"},\n\t\t\t{target:rect, obj:{scale:3}, time:1000, rewind:true, ease:\"quadInOut\"},\n\t\t\t{obj:{x:400, y:300}}\n\t\t],\n\t\ttime:1000, // will be the default time for the inner animations\n\t\tease:\"backOut\", // will be the default ease for the inner animations\n\t\tid:\"square\", // will override any id set in the inner animations\n\t\tloop:true,\n\t\tloopCount:3,\n\t\t// note - no rewind or from parameters\n\t\tcall:function(){zog(\"done\");}\n\t});\n\n\tvar paused = false;\n\tstage.on(\"stagemousedown\", function() {\n\t\t\tpaused = !paused;\n\t\t\tzim.pauseZimAnimate(paused, \"square\");\n\t});\nEND EXAMPLE\n\nEXAMPLE\n// sequence example to pulse two circles\nvar circle1 = new zim.Circle(50, \"red\");\nvar circle2 = new zim.Circle(50, \"blue\");\nzim.center(circle1, stage);\nzim.center(circle2, stage);\ncircle2.x += 70;\nzim.animate({\n\ttarget:[circle1, circle2],\n\tobj:{scale:1},\n\ttime:500,\n\tloop:true,\n\trewind:true,\n\tfrom:true,\n\tsequence:500\n});\nEND EXAMPLE\n\nPARAMETERS - supports DUO - parameters or single object with properties below\n** some parameters below support ZIM VEE values that use zik() to pick a random option\nThe ZIM VEE value can be the following:\n1. an Array of values to pick from - eg. [\"red\", \"green\", \"blue\"]\n2. a Function that returns a value - eg. function(){return Date.now();}\n3. a ZIM RAND object literal - eg. {min:10, max:20, integer:true, negative:true} max is required\n4. any combination of the above - eg. [\"red\", function(){x>100?[\"green\", \"blue\"]:\"yellow\"}] zik is recursive\n5. a single value such as a Number, String, zim.Rectangle(), etc. this just passes through unchanged\n\ntarget - |ZIM VEE| the target object to tween\nobj - the object literal holding properties and values to animate (includes a scale - convenience property for scaleX and scaleY)\n\t|ZIM VEE| - each obj property value optionally accepts a ZIM VEE value for zik() to pick randomly from (except calls and params)\n\tRELATIVE VALUES: you can pass in relative values by putting the numbers as strings\n\t\trotation:\"360\" will animate the rotation of the object 360 degrees from its current rotation\n\t\twhereas rotation:360 will animate the rotation of the object to 360 degrees\n\tANIMATION SERIES: if you pass in an array for the obj value, then this will run an animation series\n\t\tThe array must hold animate configuration objects:\n\t\t[{obj:{scale:2}, time:1000, rewind:true}, {target:different, obj:{x:100}}, etc.]\n\t\tIf you run animate as a method on an object then this is the default object for the series\n\t\tbut you can specify a target to override the default\n\t\tThe default time and tween are as provided in the main parameters\n\t\tbut you can specify these to override the default\n\t\tThe id of the main parameters is used for the whole series and cannot be overridden\n\t\tThe override parameter is set to false and cannot be overridden\n\t\tAll other main parameters are available except rewind, sequence and from\n\t\t(rewind and from are available on the inner tweens - for sequence: the initial animation is considered)\n\t\tYou currently cannot nest animimation series\n\t\tNote: if any of the series has a loop and loops forever (a loopCount of 0 or no loopCount)\n\t\tthen this will be the last of the series to run\ntime - |ZIM VEE| the time for the tween in milliseconds 1000 ms = 1 second\nease - |ZIM VEE| (default \"quadInOut\") see CreateJS easing (\"bounceOut\", \"elasticIn\", \"backInOut\", \"linearInOut\", etc)\ncall - (default null) the function to call when the animation is done\nparams - (default target) a single parameter for the call function (eg. use object literal or array)\nwait - |ZIM VEE| (default 0) milliseconds to wait before doing animation\nwaitedCall - (default null) calls function after wait is done if there is a wait\nwaitedParams - (default target) parameters to send waitedCall function\nloop - (default false) set to true to loop animation\nloopCount - |ZIM VEE| (default 0) if loop is true how many times it will loop (0 is forever)\nloopWait - |ZIM VEE| (default 0) milliseconds to wait before looping\nloopCall - (default null) calls function after loop and loopWait (not including last loop)\nloopParams - (default target) parameters to send loopCall function\nloopWaitCall - (default null) calls function after at the start of loopWait\nloopWaitParams - (default target) parameters to send loopWaitCall function\nrewind - |ZIM VEE| (default false) set to true to rewind (reverse) animation (doubles animation time)\nrewindWait - |ZIM VEE| (default 0) milliseconds to wait in the middle of the rewind\nrewindCall - (default null) calls function at middle of rewind after rewindWait\nrewindParams - (default target) parameters to send rewindCall function\nrewindWaitCall - (default null) calls function at middle of rewind before rewindWait\nrewindWaitParams - (default target) parameters to send rewindCall function\nsequence - (default 0) the delay time in milliseconds to run on children of a container or an array of target animations\n\tfor example, target = container or target = [a,b,c] and sequence = 1000\n\twould run the animation on the first child and then 1 second later, run the animation on the second child, etc.\n\tor in the case of the array, on element a and then 1 second later, element b, etc.\n\tIf the loop prop is true then sequenceCall below would activate for each loop\n\tFor an array, you must use the zim function with a target parameter - otherwise you can use the ZIM 4TH method\nsequenceCall - (default null) the function that will be called when the sequence ends\nsequenceParams - (default null) a parameter sent to the sequenceCall function\nsequenceReverse - |ZIM VEE| (default false) set to true to sequence through container or array backwards\nticker - (default true) set to false to not use an automatic zim.Ticker function\nprops - (default {override: true}) legacy - allows you to pass in TweenJS props\ncss - (default false) set to true to animate CSS properties in HTML\n \trequires CreateJS CSSPlugin - ZIM has a copy here:\n\t<script src=\"https://d309knd7es5f10.cloudfront.net/CSSPlugin.js\"></script>\n\t<script>\n\t\t// in your code at top after loading createjs\n\t\tcreatejs.CSSPlugin.install(createjs.Tween);\n\t\t// the property must be set before you can animate\n\t\tzss(\"tagID\").opacity = 1; // set this even if it is default\n\t\tzim.animate(zid(\"tagID\"), {opacity:0}, 2000); // etc.\n\t</script>\nprotect - (default false) protects animation from being interrupted before finishing\n \tunless manually interrupted with stopZimAnimate()\n\tprotect is always true (regardless of parameter setting) if loop or rewind parameters are set\noverride - (default true) subesequent tweens of any type on object cancel all earlier tweens on object\n\tset to false to allow multiple tweens of same object\nfrom - |ZIM VEE| (default false) set to true to animate from obj properties to the current properties set on target\nset - |ZIM VEE| (default null) an object of properties to set on the target to start (but after the wait time)\nid - (default null) set to String to use with zimPauseTween(state, id) and zimStopTween(id)\n\nNOTE: earlier versions of ZIM used props for loop and rewind - now these are direct parameters\nNOTE: call is now triggered once after all loops and rewinds are done\n\nRETURNS the target for chaining (or null if no target is provided and run on zim with series)\n--*///+45\n\tzim.animate = function(target, obj, time, ease, call, params, wait, waitedCall, waitedParams, loop, loopCount, loopWait, loopCall, loopParams, loopWaitCall, loopWaitParams, rewind, rewindWait, rewindCall, rewindParams, rewindWaitCall, rewindWaitParams, sequence, sequenceCall, sequenceParams, sequenceReverse, ticker, props, css, protect, override, from, set, id) {\n\t\tvar sig = \"target, obj, time, ease, call, params, wait, waitedCall, waitedParams, loop, loopCount, loopWait, loopCall, loopParams, loopWaitCall, loopWaitParams, rewind, rewindWait, rewindCall, rewindParams, rewindWaitCall, rewindWaitParams, sequence, sequenceCall, sequenceParams, sequenceReverse, ticker, props, css, protect, override, from, set, id\";\n\t\tvar duo; if (duo = zob(zim.animate, arguments, sig)) return duo;\n\t\tz_d(\"45\");\n\n\t\tif (zim.ANIMATE == false) return;\n\n\t\t// zik supports passing array of options or an object with min, max, integer, negative properties and zik will pick or calculate a random value\n\t\ttarget = zik(target); time = zik(time); ease = zik(ease); wait = zik(wait); loopCount = zik(loopCount); loopWait = zik(loopWait); rewind = zik(rewind); rewindWait = zik(rewindWait); sequenceReverse = zik(sequenceReverse); from = zik(from); set = zik(set);\n\n\t\t// PROPS\n\t\t// convert loop and rewind properties into the legacy props object\n\t\tvar newProps = {override: true};\n\t\tif (!zot(loop)) newProps.loop = loop;\n\t\tif (!zot(loopCount)) newProps.count = loopCount; // note prop is count\n\t\tif (!zot(loopWait)) newProps.loopWait = loopWait;\n\t\tif (!zot(loopCall)) newProps.loopCall = loopCall;\n\t\tif (!zot(loopWaitParams)) newProps.loopWaitParams = loopWaitParams;\n\t\tif (!zot(loopWaitCall)) newProps.loopWaitCall = loopWaitCall;\n\t\tif (!zot(loopParams)) newProps.loopParams = loopParams;\n\t\tif (!zot(rewind)) newProps.rewind = rewind;\n\t\tif (!zot(rewindWait)) newProps.rewindWait = rewindWait;\n\t\tif (!zot(rewindCall)) newProps.rewindCall = rewindCall;\n\t\tif (!zot(rewindParams)) newProps.rewindParams = rewindParams;\n\t\tif (!zot(rewindWaitCall)) newProps.rewindWaitCall = rewindWaitCall;\n\t\tif (!zot(rewindWaitParams)) newProps.rewindWaitParams = rewindWaitParams;\n\t\tif (!zot(props)) newProps = zim.merge(newProps, props); // props to overwrite\n\t\tprops = newProps;\n\n\t\t// SEQUENCE HANDLING\n\t\t// handle multiple targets first if there is an array\n\t\t// this just recalls the animate function for each element delayed by the sequence parameter\n\t\tif (zot(sequence)) sequence = 0;\n\t\tif (sequence > 0 && target.addChild) { // container with sequence so convert target to array\n\t\t\tvar newTarget = [];\n\t\t\tfor (var i=0; i<target.numChildren; i++) {\n\t\t\t\tnewTarget.push(target.getChildAt(i));\n\t\t\t}\n\t\t\ttarget = newTarget;\n\t\t}\n\t\tif (target instanceof Array) {\n\t\t\tif (sequenceReverse) target.reverse();\n\t\t\tvar currentTarget = 0;\n\t\t\tfor (var i=0; i<target.length; i++) {\n\t\t\t\t-function () { // closure to store num (i) for timeout\n\t\t\t\t\tvar num = i;\n\t\t\t\t\tif (from) {\n\t\t\t\t\t\tvar val;\n\t\t\t\t\t\ttarget[i].zimObj = {};\n\t\t\t\t\t\tfor (var prop in obj) {\n\t\t\t\t\t\t\tval = obj[prop];\n\t\t\t\t\t\t\ttarget[i].zimObj[prop] = target[i][prop];\n\t\t\t\t\t\t\ttarget[i][prop] = val;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttarget[i].zimObj = obj;\n\t\t\t\t\t}\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tvar t =\ttarget[currentTarget];\n\t\t\t\t\t\tcurrentTarget++;\n\t\t\t\t\t\tzim.animate(t, t.zimObj, time, ease, call, params, wait, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, ticker, zim.copy(props), css, protect, override, null, set, id); // do not send from!\n\t\t\t\t\t\tif (num == target.length-1 && sequenceCall) {\n\t\t\t\t\t\t\t// calculate tween time\n\t\t\t\t\t\t\tvar duration = ((time)?time:1000); // + ((wait)?wait:0); // wait only happens at start - no longer each time\n\t\t\t\t\t\t\tif (props && props.rewind) {\n\t\t\t\t\t\t\t\tduration += ((time)?time:1000) + ((props.rewindWait)?props.rewindWait:0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (props && props.loop && props.loopWait) {\n\t\t\t\t\t\t\t\tduration += props.loopWait;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\t\t\tsequenceCall(sequenceParams);\n\t\t\t\t\t\t\t}, duration);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, sequence*i);\n\t\t\t\t}();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// DEFAULTS\n\t\tvar t = time;\n\t\tif (zot(t)) t = 1000;\n\t\tif (zot(ease)) ease = \"quadInOut\";\n\t\tif (zot(wait)) wait = 0;\n\t\tif (zot(props)) props = {override: true};\n\t\tif (zot(params)) params = target;\n\t\tif (zot(ticker)) ticker = true;\n\t\tif (zot(css)) css = false;\n\t\tif (zot(protect)) protect = false;\n\t\tif (zot(from)) from = false;\n\t\tif (zot(set)) set = {};\n\t\tif (set.scale) {set.scaleX = set.scaleY = set.scale; delete set.scale}\n\t\tif (!zot(override)) props.override = override;\n\t\tvar tween;\n\t\tvar idSet;\n\t\tvar providedID;\n\n\t\t// ANIMATION SERIES HANDLING\n\t\t// if an array is passed in to animate() as the obj\n\t\t// then animate treats this as an animation series\n\t\t// [{target:circle, obj:{alpha:0}, time:1000}, {target:rect, obj:{alpha:0}, time:1000},]\n\t\tif (obj instanceof Array) {\n\t\t\tvar starts;\n\t\t\tvar currentCount = 1;\n\t\t\tif (obj.length == 0) return this;\n\n\t\t\tprepareSeries();\n\t\t\tprepareIds();\n\t\t\trunMaster();\n\n\t\t\tfunction runMaster() { // one day might consider reverse...\n\t\t\t\tvar o; // inner obj\n\t\t\t\tvar w = wait; // time for wait before starting animation\n\t\t\t\tvar lastEnd = 0; // time of last label end\n\t\t\t\tvar duration; // time of each label animation not including initial wait\n\t\t\t\tfor (var i=0; i<obj.length; i++) {\n\t\t\t\t\to = obj[i];\n\t\t\t\t\tif (zot(o.target)) continue;\n\t\t\t\t\tif (zot(o.time)) o.time = t;\n\t\t\t\t\tw += (o.wait?o.wait:0);\n\t\t\t\t\tduration = o.time;\n\t\t\t\t\tif (o.rewind) duration = duration * 2 + (o.rewindWait?o.rewindWait:0);\n\t\t\t\t\tif (o.loop) {\n\t\t\t\t\t\t// if loopCount is 0 (forever) then prepare series makes this the last animation\n\t\t\t\t\t\tduration *= o.loopCount;\n\t\t\t\t\t\tduration += (o.loopCount-1) * (o.loopWait?o.loopWait:0);\n\t\t\t\t\t}\n\t\t\t\t\tvar currentObj = {\n\t\t\t\t\t\ttarget:o.target,\n\t\t\t\t\t\tobj:zim.copy(o.obj),\n\t\t\t\t\t\twait:lastEnd+w,\n\t\t\t\t\t\twaitedCall:o.waitedCall,\n\t\t\t\t\t\twaitedParams:o.waitedParams,\n\t\t\t\t\t\ttime:o.time,\n\t\t\t\t\t\tease:o.ease,\n\t\t\t\t\t\tfrom:o.from,\n\t\t\t\t\t\trewind:o.rewind,\n\t\t\t\t\t\tcall:o.call,\n\t\t\t\t\t\tparams:o.params,\n\t\t\t\t\t\tloop:o.loop, loopCount:o.loopCount, loopWait:o.loopWait,\n\t\t\t\t\t\tloopCall:o.loopCall, loopParams:o.loopParams,\n\t\t\t\t\t\tloopWaitCall:o.loopWaitCall, loopWaitParams:o.loopWaitParams,\n\t\t\t\t\t\trewind:o.rewind, rewindWait:o.rewindWait,\n\t\t\t\t\t\trewindCall:o.rewindCall, rewindParams:o.rewindParams,\n\t\t\t\t\t\trewindWaitCall:o.rewindWaitCall, rewindWaitParams:o.rewindWaitParams,\n\t\t\t\t\t\tset:o.set,\n\t\t\t\t\t\toverride:false,\n\t\t\t\t\t\tid:id\n\t\t\t\t\t}\n\t\t\t\t\tif (i == obj.length-1) {\n\t\t\t\t\t\tendSeries(currentObj);\n\t\t\t\t\t}\n\t\t\t\t\tzim.animate(currentObj);\n\t\t\t\t\tlastEnd += w + duration;\n\t\t\t\t\tw = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction endSeries(currentObj) {\n\n\t\t\t\tif (props.loop && (!props.count || currentCount < props.count)) {\n\t\t\t\t\tcurrentObj.call = function() {\n\t\t\t\t\t\tif (props.loopCall && typeof props.loopCall == 'function') {(props.loopCall)(props.loopParams);}\n\t\t\t\t\t\tif (props.loopWait) {\n\t\t\t\t\t\t\ttween = target.zimTweens[id] = target.zimTween = createjs.Tween.get(target, {override:props.override}).wait(props.loopWait).call(goNext);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgoNext();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfunction goNext() {\n\t\t\t\t\t\t\tfor (var k=0; k<starts.objects.length; k++) {\n\t\t\t\t\t\t\t\tif (starts.objects[k].set) starts.objects[k].set(starts.values[k]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (props.loopWaitCall && typeof props.loopWaitCall == 'function') {(props.loopWaitCall)(props.loopWaitParams);}\n\t\t\t\t\t\t\trunMaster();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcurrentObj.call = function() {\n\t\t\t\t\t\tif (call && typeof call == 'function') {(call)(params);}\n\t\t\t\t\t\tendTween(id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcurrentCount++;\n\t\t\t}\n\t\t\tfunction prepareSeries() {\n\t\t\t\tvar froms = new zim.Dictionary();\n\t\t\t\tstarts = new zim.Dictionary();\n\t\t\t\tfor (var i=0; i<obj.length; i++) {\n\t\t\t\t\to = obj[i];\n\t\t\t\t\tif (!target) target = o.target;\n\t\t\t\t\tif (zot(o.target)) o.target = target;\n\t\t\t\t\tif (zot(o.ease)) o.ease = ease;\n\t\t\t\t\tif (zot(o.target)) continue;\n\t\t\t\t\tif (o.loop && (zot(o.loopCount) || o.loopCount <= 0)) {\n\t\t\t\t\t\to.loopCount = 0;\n\t\t\t\t\t\t// this object is looping forever so no point in keeping any next objects\n\t\t\t\t\t\tobj.splice(i+1, obj.length); // obj.length may be too much but it works\n\t\t\t\t\t}\n\t\t\t\t\tif (!zot(o.obj.scale)) {\n\t\t\t\t\t\to.obj.scaleX = o.obj.scaleY = o.obj.scale;\n\t\t\t\t\t\tdelete o.obj.scale;\n\t\t\t\t\t}\n\t\t\t\t\tif (o.from) {\n\t\t\t\t\t\tvar firstFrom = froms.at(o.target);\n\t\t\t\t\t\tif (firstFrom) {\n\t\t\t\t\t\t\tif (o.set) {\n\t\t\t\t\t\t\t\t// all properties from obj go to set\n\t\t\t\t\t\t\t\t// matching firstFrom properties to to obj\n\t\t\t\t\t\t\t\t// matching set properties override firstFrom on obj\n\t\t\t\t\t\t\t\tvar temp = zim.copy(o.obj);\n\t\t\t\t\t\t\t\tvar merged = zim.merge(firstFrom, o.set);\n\t\t\t\t\t\t\t\to.obj = getFroms(o.target, o.obj, merged);\n\t\t\t\t\t\t\t\to.set = zim.merge(o.set, temp);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\to.set = zim.copy(o.obj);\n\t\t\t\t\t\t\t\to.obj = getFroms(o.target, o.obj, firstFrom);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\to.from = false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// any set properties override target properties\n\t\t\t\t\t\t\tfroms.add(o.target, getFroms(o.target, o.obj, o.set));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvar startProps = {};\n\t\t\t\t\tfor (var iii in o.obj) {\n\t\t\t\t\t\tstartProps[iii] = o.set?(o.set[iii]?o.set[iii]:o.target[iii]):o.target[iii];\n\t\t\t\t\t}\n\t\t\t\t\tif (zot(starts.at(o.target))) starts.add(o.target, {});\n\t\t\t\t\tvar newEntry = zim.merge(starts.at(o.target), startProps);\n\t\t\t\t\tstarts.remove(o.target);\n\t\t\t\t\tstarts.add(o.target, newEntry);\n\t\t\t\t}\n\t\t\t\tif (zot(target.zimTweens)) target.zimTweens = {};\n\t\t\t} // end prepareSeries\n\t\t\treturn target;\n\t\t} // end series\n\n\t\t// -----------------------------\n\t\t// NORMALIZED TWEEN COMING THROUGH\n\t\tif (zot(target)) return;\n\t\tif (css) ticker = false;\n\t\tif (zot(target.zimTweens)) target.zimTweens = {};\n\t\tif (ticker && (zot(target.getStage) || zot(target.getStage()))) {if (zon) {zog(\"zim.move(), zim.animate() - please add target to stage before animating\")}; return};\n\t\tif (!zot(obj.scale)) {\n\t\t\tobj.scaleX = obj.scaleY = zik(obj.scale);\n\t\t\tdelete obj.scale;\n\t\t}\n\n\t\t// PROTECT LOOPS AND REWINDS WITH BUSY\n\t\t// if protected or a loop or rewind is currently running for any of these properties\n\t\t// then remove the property from obj as it is currently busy\n\t\tfor(var o in obj) {\n\t\t\tif (!target.zimBusy) break;\n\t\t\tif (target.zimBusy[o]) delete obj[o];\n\t\t}\n\t\tif (zim.isEmpty(obj)) return; // nothing left to animate\n\t\tfunction addZimBusy() {\n\t\t\ttarget.mouseEnabled = false;\n\t\t\tsetTimeout(function() {\n\t\t\t\tif (!target.zimBusy) target.zimBusy = {};\n\t\t\t\tfor(var o in obj) {\n\t\t\t\t\ttarget.zimBusy[o] = true;\n\t\t\t\t}\n\t\t\t\ttarget.mouseEnabled = true;\n\t\t\t}, 70);\n\t\t}\n\t\tif (protect || props.loop || props.rewind) addZimBusy();\n\n\t\t// IDS and IDSETS\n\t\t// this is for ids and idSets on this target\n\t\t// a single tween for an id does not get an idSet\n\t\t// a second tween for the same id gets an idSet\n\t\t// the original id is the id for the idSet\n\t\tprepareIds();\n\t\tfunction prepareIds() {\n\t\t\tif (zot(id)) {\n\t\t\t\tid = zim.makeID(10);\n\t\t\t} else {\n\t\t\t\tid = String(id);\n\t\t\t\tprovidedID = id;\n\t\t\t}\n\t\t\tif (zot(target.zimIdSets)) target.zimIdSets = {};\n\t\t\tif (!zot(target.zimIdSets[id])) { // already an idSet\n\t\t\t\tidSet = id;\n\t\t\t\tid = zim.makeID(10);\n\t\t\t\ttarget.zimIdSets[idSet].push(id);\n\t\t\t} else if (!zot(target.zimTweens[id])) { // not an idSet but already a tween so make an idSet\n\t\t\t\tidSet = id;\n\t\t\t\tid = zim.makeID(10);\n\t\t\t\ttarget.zimIdSets[idSet] = [idSet]; // add original into set\n\t\t\t\ttarget.zimTweens[idSet].zimIdSet = idSet; // reference back to idSet\n\t\t\t\ttarget.zimIdSets[idSet].push(id); // push the second one in\n\t\t\t} // else nothing - id is not currently part of idSet\n\t\t}\n\n\t\t// PREPARE ZIK RANDOM VALUES PASSED IN AS ARRAY OR RAND OBJECT {min, max, integer, negative}\n\t\tfor (var i in obj) obj[i] = zik(obj[i]);\n\t\tfor (i in set) set[i] = zik(set[i]);\n\t\tfor (i in props) {\n\t\t\tif (i==\"waitedCall\" || i==\"waitedParams\" || i==\"loopCall\" || i==\"rewindCall\" || i==\"loopWaitCall\" || i==\"rewindWaitCall\") continue;\n\t\t\tprops[i] = zik(props[i]);\n\t\t}\n\n\t\t// PREPARE RELATIVE VALUES PASSED IN AS STRINGS\n\t\tfor (i in obj) {\n\t\t\tif (typeof obj[i] == \"string\") {\n\t\t\t\tobj[i] = target[i] + Number(obj[i].replace(/\\s/g,\"\"));\n\t\t\t}\n\t\t}\n\t\tfor (i in set) {\n\t\t\tif (typeof set[i] == \"string\") {\n\t\t\t\tset[i] = target[i] + Number(set[i].replace(/\\s/g,\"\"));\n\t\t\t}\n\t\t}\n\n\t\t// PREPARE START VALUES\n\t\tif (from) obj = getFroms(target, obj, set, true);\n\t\tfunction getFroms(target, obj, set, update) {\n\t\t\tvar newObj = {};\n\t\t\tfor (i in obj) {\n\t\t\t\tif (set && !zot(set[i])) {\n\t\t\t\t\tnewObj[i] = set[i];\n\t\t\t\t} else {\n\t\t\t\t\tnewObj[i] = target[i];\n\t\t\t\t}\n\t\t\t\tif (update) target[i] = obj[i];\n\t\t\t}\n\t\t\treturn newObj;\n\t\t}\n\n\n\t\t// LOOP AND REWIND SETUP\n\t\tvar count = 0;\n\t\tif (props.loop) {\n\t\t\tif (!zot(props.count)) {\n\t\t\t\tcount = props.count;\n\t\t\t\tdelete props.count;\n\t\t\t\tvar currentCount = 1;\n\t\t\t}\n\t\t}\n\t\tvar wait3 = 0;\n\t\tif (props.loopWait) {\n\t\t\twait3 = props.loopWait;\n\t\t\tdelete props.loopWait;\n\t\t}\n\t\tvar call3;\n\t\tif (props.loopCall) {\n\t\t\tcall3 = props.loopCall;\n\t\t\tdelete props.loopCall;\n\t\t}\n\t\tvar params3 = target;\n\t\tif (props.loopParams) {\n\t\t\tparams3 = props.loopParams;\n\t\t\tdelete props.loopParams;\n\t\t}\n\t\tfunction doLoopCall() {\n\t\t\tif (call3 && typeof call3 == 'function') {(call3)(params3);}\n\t\t}\n\t\tvar call4;\n\t\tif (props.loopWaitCall) {\n\t\t\tcall4 = props.loopWaitCall;\n\t\t\tdelete props.loopWaitCall;\n\t\t}\n\t\tvar params4 = target;\n\t\tif (props.loopWaitParams) {\n\t\t\tparams4 = props.loopWaitParams;\n\t\t\tdelete props.loopWaitParams;\n\t\t}\n\t\tfunction doLoopWaitCall() {\n\t\t\tif (call4 && typeof call4 == 'function') {(call4)(params4);}\n\t\t}\n\n\t\t// TWEENS FOR REWIND, LOOP and NORMAL\n\t\tif (props.rewind) {\n\t\t\t// flip second ease\n\t\t\tif (ease) {\n\t\t\t\t// backIn backOut backInOut\n\t\t\t\tvar ease2 = ease;\n\t\t\t\tif (ease2.indexOf(\"InOut\") == -1) {\n\t\t\t\t\tif (ease2.indexOf(\"Out\") != -1) {\n\t\t\t\t\t\tease2 = ease2.replace(\"Out\", \"In\");\n\t\t\t\t\t} else if (ease2.indexOf(\"In\") != -1) {\n\t\t\t\t\t\tease2 = ease2.replace(\"In\", \"Out\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar wait2 = 0;\n\t\t\tdelete props.rewind;\n\t\t\tif (props.rewindWait) {\n\t\t\t\twait2 = props.rewindWait;\n\t\t\t\tdelete props.rewindWait; // not a createjs prop so delete\n\t\t\t}\n\n\t\t\tvar call2;\n\t\t\tif (props.rewindCall) {\n\t\t\t\tcall2 = props.rewindCall;\n\t\t\t\tvar params2 = props.rewindParams;\n\t\t\t\tif (zot(params2)) params2 = target;\n\t\t\t\tdelete props.rewindCall;\n\t\t\t\tdelete props.rewindParams;\n\t\t\t}\n\t\t\tfunction doRewindCall() {\n\t\t\t\tif (call2 && typeof call2 == 'function') {(call2)(params2);}\n\t\t\t}\n\t\t\tvar call5;\n\t\t\tif (props.rewindWaitCall) {\n\t\t\t\tcall5 = props.rewindWaitCall;\n\t\t\t\tvar params5 = props.rewindWaitParams;\n\t\t\t\tif (zot(params5)) params5 = target;\n\t\t\t\tdelete props.rewindWaitCall;\n\t\t\t\tdelete props.rewindWaitParams;\n\t\t\t}\n\t\t\tfunction doRewindWaitCall() {\n\t\t\t\tif (call5 && typeof call5 == 'function') {(call5)(params5);}\n\t\t\t}\n\n\t\t\tif (wait > 0) { // do not want wait as part of future loops (use loopWait)\n\t\t\t\ttween = target.zimTweens[id] = target.zimTween = createjs.Tween.get(target, {override:props.override}).wait(wait).call(function(){\n\t\t\t\t\tif (waitedCall && typeof waitedCall == 'function') {(waitedCall)(zot(waitedParams)?target:waitedParams);}\n\t\t\t\t\ttween1();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\ttween1();\n\t\t\t}\n\t\t\tfunction tween1() {\n\t\t\t\tvar obj2 = getStart();\n\t\t\t\tif (target.set && !from) target.set(set);\n\t\t\t\ttween = target.zimTweens[id] =  target.zimTween = createjs.Tween.get(target, props)\n\t\t\t\t\t.to(obj, t, createjs.Ease[ease])\n\t\t\t\t\t.call(doRewindWaitCall)\n\t\t\t\t\t.wait(wait2)\n\t\t\t\t\t.call(doRewindCall)\n\t\t\t\t\t.to(obj2, t, createjs.Ease[ease2])\n\t\t\t\t\t.call(doneAnimating)\n\t\t\t\t\t.wait(wait3)\n\t\t\t\t\t.call(doLoopCall);\n\t\t\t\tsetZimTweenProps();\n\t\t\t}\n\n\t\t} else {\n\t\t\tif (wait > 0) { // do not want wait as part of future loops (use loopWait)\n\t\t\t\ttween = target.zimTweens[id] = target.zimTween = createjs.Tween.get(target, {override:props.override}).wait(wait).call(function(){\n\t\t\t\t\tif (waitedCall && typeof waitedCall == 'function') {(waitedCall)(zot(waitedParams)?target:waitedParams);}\n\t\t\t\t\ttween2();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\ttween2();\n\t\t\t}\n\t\t\tfunction tween2() {\n\t\t\t\tif (target.set && !from) {target.set(set);}\n\t\t\t\ttween = target.zimTweens[id] =  target.zimTween = createjs.Tween.get(target, props)\n\t\t\t\t\t.to(obj, t, createjs.Ease[ease])\n\t\t\t\t\t.call(doneAnimating)\n\t\t\t\t\t.wait(wait3)\n\t\t\t\t\t.call(doLoopCall);\n\t\t\t\tsetZimTweenProps();\n\t\t\t}\n\t\t}\n\n\t\t// SET TICKER\n\t\tvar zimTicker;\n\t\tif (!css && ticker) {\n\t\t\tif (target.zimMask) { // mask graphics needs to have same position, scale, skew, rotation and reg as object\n\t\t\t\tzimTicker = zim.Ticker.add(function(){\n\t\t\t\t\tzim.copyMatrix(target.zimMask, target);\n\t\t\t\t\ttarget.zimMask.regX = target.regX;\n\t\t\t\t\ttarget.zimMask.regY = target.regY;\n\t\t\t\t}, target.getStage());\n\t\t\t} else {\n\t\t\t\tzimTicker = zim.Ticker.add(function(){}, target.getStage());\n\t\t\t}\n\t\t}\n\n\t\t// ANIMATION DONE AND HELPER FUNCTIONS\n\t\tfunction doneAnimating() {\n\t\t\tif (props.loop) {\n\t\t\t\tif (count > 0) {\n\t\t\t\t\tif (currentCount < count) {\n\t\t\t\t\t\tdoLoopWaitCall();\n\t\t\t\t\t\tcurrentCount++;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (rewind) {\n\t\t\t\t\t\t\tif (target.set) target.set(getStart());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (target.set) target.set(obj);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tdoLoopWaitCall();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tendTween(id);\n\t\t\tif (call && typeof call == 'function') {(call)(params);}\n\t\t}\n\t\tfunction getStart() {\n\t\t\t// for rewind, we need to know the start value\n\t\t\t// which could be modified by the set parameter\n\t\t\tvar startObj = {}\n\t\t\tfor (var i in obj) {\n\t\t\t\tif (css) {\n\t\t\t\t\tif (!zot(set[i]) && !from) {\n\t\t\t\t\t\tstartObj[i] = set[i];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstartObj[i] = target.style[i];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!zot(set[i]) && !from) {\n\t\t\t\t\t\tstartObj[i] = set[i];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstartObj[i] = target[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn startObj\n\t\t}\n\t\tfunction removeBusy(obj) {\n\t\t\tif (!target.zimBusy) return;\n\t\t\tfor (var o in obj) {\n\t\t\t\tdelete target.zimBusy[o];\n\t\t\t}\n\t\t\tif (zim.isEmpty(target.zimBusy)) target.zimBusy = null;\n\t\t}\n\n\t\t// PAUSE AND STOP MANAGEMENT\n\t\tvar zimPaused = false;\n\t\tsetZimTweenProps();\n\t\tfunction setZimTweenProps() {\n\t\t\t// used to keep track of tweens for various ids\n\t\t\t// for pauseZimAnimate() and stopZimAnimate() down below\n\t\t\ttween.zimObj = obj;\n\t\t\ttween.zimTicker = zimTicker;\n\t\t\ttween.zimPaused = zimPaused;\n\t\t\tif (idSet) {\n\t\t\t\ttween.zimIdSet = idSet;\n\t\t\t}\n\t\t\tif (providedID) {\n\t\t\t\t// add to zim.idSets for global animation pause and stop by id\n\t\t\t\t// zim.idSets = {id:[target, target], id:[target, target, target]}\n\t\t\t\t// watchout - global idSet works on provided IDS\n\t\t\t\t// local idSets work on multiple ids that are the same\n\t\t\t\t// so an object with one tween under a provided id is not locally an idSet\n\t\t\t\tif (zot(zim.idSets)) zim.idSets = {};\n\t\t\t\tif (zot(zim.idSets[providedID])) {\n\t\t\t\t\tzim.idSets[providedID] = [target];\n\t\t\t\t} else {\n\t\t\t\t\tif (zim.idSets[providedID].indexOf(target) < 0) zim.idSets[providedID].push(target); // ES6 needed\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!zim.animatedObjects) zim.animatedObjects = new zim.Dictionary(true);\n\t\t\tzim.animatedObjects.add(target, true);\n\t\t}\n\t\tfunction endTween(id) {\n\t\t\tif (zot(target.zimTweens) || zot(target.zimTweens[id])) return;\n\t\t\tremoveBusy(target.zimTweens[id].zimObj);\n\t\t\ttarget.zimTweens[id].setPaused(true);\n\t\t\tendTicker(id);\n\t\t\tvar idSet = target.zimTweens[id].zimIdSet;\n\t\t\tif (!zot(idSet) && target.zimIdSets) {\n\t\t\t\tvar sets = target.zimIdSets[idSet];\n\t\t\t\tif (sets) sets.splice(sets.indexOf(id), 1);\n\t\t\t\tif (sets && sets.length == 0) {\n\t\t\t\t\tdelete target.zimIdSets[idSet];\n\t\t\t\t\tif (zim.isEmpty(target.zimIdSets)) delete target.zimIdSets;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdelete target.zimTweens[id];\n\t\t\tif (zim.isEmpty(target.zimTweens)) target.stopZimAnimate();\n\n\t\t\t// handle zim.idSets\n\t\t\t// very tricky - the originating id for an idSet does not get an idSet\n\t\t\t// but rather its id is used by subsequent tweens for the tween.idSets\n\t\t\t// the originating id may create a zim.idSets if it was provided as a parameter\n\t\t\tif ((target.zimTweens && target.zimTweens[id]) ||\n\t\t\t\t(target.zimIdSets && target.zimIdSets[idSet?idSet:id])) {\n\t\t\t\t\t// leave zim.idSets alone\n\t\t\t} else {\n\t\t\t\tif (zim.idSets && zim.idSets[idSet?idSet:id]) {\n\t\t\t\t\tzim.idSets[idSet?idSet:id]\n\t\t\t\t\tvar targetIndex = zim.idSets[idSet?idSet:id].indexOf(target);\n\t\t\t\t\tif (targetIndex >= 0)  zim.idSets[idSet?idSet:id].splice(targetIndex, 1);\n\t\t\t\t\tif (zim.idSets[idSet?idSet:id].length <= 0) {\n\t\t\t\t\t\tdelete zim.idSets[idSet?idSet:id];\n\t\t\t\t\t\tif (zim.isEmpty(zim.idSets)) delete zim.idSets;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfunction endTicker(id) {\n\t\t\t// need a little delay to make sure updates the last animation\n\t\t\t// and to help call function have a stage update\n\t\t\t// store reference to ticker function in a closure\n\t\t\t// as we may delete the zimTweens reference before the 200 ms is up\n\t\t\t-function() {\n\t\t\t\tvar ticker = target.zimTweens[id].zimTicker\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tif (ticker) zim.Ticker.remove(ticker); ticker = null;\n\t\t\t\t},200);\n\t\t\t}();\n\t\t}\n\t\tfunction pauseTicker(id, paused) {\n\t\t\tvar tween = target.zimTweens[id];\n\t\t\ttween.setPaused(paused);\n\t\t\tif (paused == tween.zimPaused) return;\n\t\t\ttween.zimPaused = paused;\n\t\t\tif (paused) {\n\t\t\t\tif (tween.zimTicker) tween.zimAnimateTimeout = setTimeout(function(){zim.Ticker.remove(tween.zimTicker);},200);\n\t\t\t} else {\n\t\t\t\tclearTimeout(tween.zimAnimateTimeout);\n\t\t\t\tif (tween.zimTicker) zim.Ticker.add(tween.zimTicker, target.getStage());\n\t\t\t}\n\t\t}\n\t\tfunction expandIds(ids) {\n\t\t\t// turn any idSets into ids\n\t\t\tvar actualIds = [];\n\t\t\tfor (var i=0; i<ids.length; i++) {\n\t\t\t\tif (target.zimIdSets && !zot(target.zimIdSets[ids[i]])) {\n\t\t\t\t\tactualIds = actualIds.concat(target.zimIdSets[ids[i]]);\n\t\t\t\t} else {\n\t\t\t\t\tactualIds.push(ids[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn actualIds;\n\t\t}\n\n\t\t// METHODS ADDED TO TARGET\n\t\tif (!target.stopZimAnimate || !target.stopZimAnimate.real) { // empty method gets added by default\n\t        target.stopZimAnimate = function(ids, include) {\n\t\t\t\tif (zot(include)) include = true;\n\t\t\t\tif (zot(ids)) {\n\t\t\t\t\tif (!include) return; // would be exclude all ids\n\t\t\t\t\ttarget.zimBusy = null; // clear any busy properties\n\t\t            createjs.Tween.removeTweens(target);\n\t\t\t\t\tfor (var id in target.zimTweens) {endTicker(id);}\n\t\t\t\t\ttarget.zimTweens = null;\n\t\t\t\t\ttarget.zimIdSets = null;\n\t\t\t\t\tif (zim.idSets && zim.idSets[idSet?idSet:id]) {\n\t\t\t\t\t\tdelete zim.idSets[idSet?idSet:id];\n\t\t\t\t\t\tif (zim.isEmpty(zim.idSets)) delete zim.idSets;\n\t\t\t\t\t}\n\t\t\t\t\tzim.animatedObjects.remove(target);\n\t\t\t\t} else {\n\t\t\t\t\tif (!Array.isArray(ids)) ids = [ids];\n\t\t\t\t\t// expand any idSets into ids\n\t\t\t\t\tvar actualIds = expandIds(ids);\n\t\t\t\t\tfor (var id in target.zimTweens) {\n\t\t\t\t\t\tif (include && actualIds.indexOf(id) >= 0) endTween(id);\n\t\t\t\t\t\tif (!include && actualIds.indexOf(id) < 0) endTween(id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn target;\n\t        }\n\t\t\ttarget.stopZimAnimate.real = true; // record this as real method instead of empty method\n\t        target.pauseZimAnimate = function(paused, ids, include) {\n\t            if (zot(paused)) paused = true;\n\t\t\t\tif (zot(include)) include = true;\n\t\t\t\tif (zot(ids) && !include) return; // would be exclude all ids\n\t\t\t\tif (zot(ids)) { // want all ids\n\t\t\t\t\tfor (var id in target.zimTweens) {pauseTicker(id, paused);}\n\t\t\t\t} else {\n\t\t\t\t\tif (!Array.isArray(ids)) ids = [ids];\n\t\t\t\t\t// expand any idSets into ids\n\t\t\t\t\tvar actualIds = expandIds(ids);\n\t\t\t\t\tfor (var id in target.zimTweens) {\n\t\t\t\t\t\tif (include && actualIds.indexOf(id) >= 0) pauseTicker(id, paused);\n\t\t\t\t\t\tif (!include && actualIds.indexOf(id) < 0) pauseTicker(id, paused);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn target;\n\t        }\n\t\t}\n\t\treturn target;\n\t}//-45\n\n/*--\nzim.stopZimAnimate = function(ids)\n\nstopZimAnimate\nzim function - and Display object function\n\nDESCRIPTION\nStops tweens with the passed in id or array of ids.\nIf no id is passed then this will stop all tweens.\nThe id is set as a zim.animate, zim.move, zim.Sprite parameter\nAn animation series will have the same id for all the animations inside.\nSee also zim.pauseZimAnimate\n\nNOTE: calling zim.stopZimAnimate(id) stops tweens with this id on all objects\ncalling object.stopZimAnimate(id) stops tweens with this id on the target object\n\nEXAMPLE\n// We have split the tween in two so we can control them individually\n// Set an id parameter to stop or pause\n// You can control multiple tweens at once by using the same id (the id is for a tween set)\n// Note the override:true parameter\nvar rect = new zim.Rectangle(200, 200, frame.pink)\n\t.centerReg(stage)\n\t.animate({obj:{scale:2}, time:2000, loop:true, rewind:true, id:\"scale\"})\n\t.animate({obj:{rotation:360}, time:4000, loop:true, ease:\"linear\", override:false});\nrect.cursor = \"pointer\";\nrect.on(\"click\", function() {rect.stopZimAnimate()}); // will stop all tweens on rect\n// OR\nrect.on(\"click\", function() {rect.stopZimAnimate(\"scale\");}); // will stop scaling tween\n\nzim.stopZimAnimate(\"scale\") // will stop tweens with the scale id on all objects\n\nzim.stopZimAnimate(); // will stop all animations\nEND EXAMPLE\n\nPARAMETERS\nids - (default null) pass in an id or an array of ids specified in zim.animate, zim.move and zim.Sprite\n\nRETURNS null if run as zim.stopZimAnimate() or the obj if run as obj.stopZimAnimate()\n--*///+45.1\n\tzim.stopZimAnimate = function(ids) {\n\t\tz_d(\"45.1\");\n\t\tif (zot(ids)) {\n\t\t\tif (zim.animatedObjects) {\n\t\t\t\tfor (var i=zim.animatedObjects.length-1; i>=0; i--) {\n\t\t\t\t\tzim.animatedObjects.objects[i].stopZimAnimate();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif (!Array.isArray(ids)) ids = [ids];\n\t\tif (!zim.idSets) return;\n\t\tfor (var j=0; j<ids.length; j++) {\n\t\t\tvar idSet = ids[j];\n\t\t\tif (zim.idSets[idSet]) {\n\t\t\t\tvar idLength = zim.idSets[idSet].length-1;\n\t\t\t\tfor (var i=idLength; i>=0; i--) {\n\t\t\t\t\tzim.idSets[idSet][i].stopZimAnimate(idSet);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}//-45.1\n\n/*--\nzim.pauseZimAnimate = function(state, ids)\n\npauseZimAnimate\nzim function - and Display object function\n\nDESCRIPTION\nPauses or unpauses tweens with the passed in id or array of ids.\nIf no id is passed then this will pause or unpause all tweens.\nThe id is set as a zim.animate, zim.move, zim.Sprite parameter.\nAn animation series will have the same id for all the animations inside.\nSee also zim.stopZimAnimate\n\nNOTE: calling zim.pauseZimAnimate(true, id) pauses tweens with this id on all objects\ncalling object.pauseZimAnimate(true, id) pauses tweens with this id on the target object\n\nEXAMPLE\n// We have split the tween in two so we can control them individually\n// Set an id parameter to stop or pause\n// You can control multiple tweens at once by using the same id (the id is for a tween set)\n// note the override:true parameter\nvar rect = new zim.Rectangle(200, 200, frame.pink)\n\t.centerReg(stage)\n\t.animate({obj:{scale:2}, time:2000, loop:true, rewind:true, id:\"scale\"})\n\t.animate({obj:{rotation:360}, time:4000, loop:true, ease:\"linear\", override:false});\nrect.cursor = \"pointer\";\nrect.on(\"click\", function() {rect.pauseZimAnimate()}); // will pause all tweens on rect\n// OR\nvar paused = false;\nrect.on(\"click\", function() {\n\tpaused = !paused;\n\trect.pauseZimAnimate(paused, \"scale\");\n}); // will toggle the pausing of the scaling tween\n\nzim.pauseZimAnimate(false, \"scale\") // will unpause tweens with the scale id on all objects\n\nzim.pauseZimAnimate(); // will pause all animations\nEND EXAMPLE\n\nPARAMETERS\nstate - (default true) will pause tweens - set to false to unpause tweens\nids - (default null) pass in an id or an array of ids specified in zim.animate, zim.move and zim.Sprite\n\nRETURNS null if run as zim.pauseZimAnimate() or the obj if run as obj.pauseZimAnimate()\n--*///+45.2\n\tzim.pauseZimAnimate = function(state, ids) {\n\t\tz_d(\"45.2\");\n\t\tif (zot(state)) state = true;\n\t\tif (zot(ids)) {\n\t\t\tif (zim.animatedObjects) {\n\t\t\t\tfor (var i=zim.animatedObjects.length-1; i>=0; i--) {\n\t\t\t\t\tzim.animatedObjects.objects[i].pauseZimAnimate(state);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif (!Array.isArray(ids)) ids = [ids];\n\t\tif (!zim.idSets) return;\n\t\tfor (var j=0; j<ids.length; j++) {\n\t\t\tvar idSet = ids[j];\n\t\t\t if (zim.idSets[idSet]) {\n\t\t\t\tfor (var i=zim.idSets[idSet].length-1; i>=0; i--) {\n\t\t\t\t\tzim.idSets[idSet][i].pauseZimAnimate(state, idSet);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}//-45.2\n\n/*--\nzim.wiggle = function(target, property, baseAmount, minAmount, maxAmount, minTime, maxTime, ease, integer, id, type)\n\nwiggle\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nWiggles the property of the target object between a min and max amount to either side of the base amount\nin a time between the min and max time.\nUses zim.animate() so to pause or stop the wiggle use zim.pauseZimAnimate and zim.stopZimAnimate\neither on the object or using an id that you pass in as a parameter\n\nNOTE: calling zim.pauseZimAnimate(true, id) pauses tweens with this id on all objects\ncalling target.pauseZimAnimate(true, id) pauses tweens with this id on the target object\n\nEXAMPLE\nvar ball = new zim.Circle().centerReg(stage);\nball.wiggle(\"x\", ball.x, 10, 30, 300, 1000);\n// wiggles the ball 10-30 pixels to the left and right of center taking 300-1000 ms each time\n\nball.pauseZimAnimate(); // will pause the wiggle\nEND EXAMPLE\n\nPARAMETERS\ntarget - the object to wiggle\nproperty - the property name as a String that will be width-indicatorLength-edgeLeft-edgeRight\nbaseAmount - the center amount for the wiggle - wiggle will go to each side of this center\nminAmount - the min amount to change to a side of center\nmaxAmount - (default minAmount) the max amount to change to a side of center\nminTime - (default 1000 ms) the min time in milliseconds to go from one side to the other\nmaxTime - (default minTime) the max time in milliseconds to go from one side to the other\nease - (default \"quadInOut\") the ease to apply to the animation\ninteger - (default false) tween to an integer value between min and max amounts\nid - (default random id) the id to use for zim.pauseZimAnimate() or zim.stopZimAnimate()\ntype - (default \"both\") set to \"positive\" to wiggle only the positive side of the base or \"negative\" for negative side (or \"both\" for both)\n\nRETURNS target for chaining\n--*///+45.25\n\tzim.wiggle = function(target, property, baseAmount, minAmount, maxAmount, minTime, maxTime, type, ease, integer, id) {\n\t\tvar sig = \"target, property, baseAmount, minAmount, maxAmount, minTime, maxTime, type, ease, integer, id\";\n\t\tvar duo; if (duo = zob(zim.wiggle, arguments, sig)) return duo;\n\t\tz_d(\"45.25\");\n\t\tif (zot(target) || zot(baseAmount) || zot(minAmount)) return target;\n\t\tif (zot(maxAmount)) maxAmount = minAmount;\n\t\tif (zot(minTime)) minTime = 1000;\n\t\tif (zot(maxTime)) maxTime = minTime;\n\t\tif (zot(ease)) ease = \"quadInOut\";\n\t\tif (zot(integer)) integer = false;\n\t\tif (zot(id)) id = zim.makeID();\n\t\tif (zot(type)) type = \"both\";\n\n\t\tvar results = {};\n\t\tvar count = 0;\n\t\tvar lastWiggle;\n\t\tfunction wiggleMe() {\n\t\t\tvar time = zim.rand(minTime, maxTime);\n\t\t\tvar obj = {};\n\t\t\tvar set = {};\n\t\t\tset[property] = baseAmount;\n\t\t\t// to start go from center\n\t\t\tif (type == \"negative\") {\n\t\t\t\tvar wiggle = - zim.rand(minAmount,maxAmount,integer);\n\t\t\t} else if (type == \"positive\") {\n\t\t\t\tvar wiggle = zim.rand(minAmount,maxAmount,integer);\n\t\t\t} else {\n\t\t\t\tif (count == 0) {\n\t\t\t\t\tvar wiggle = zim.rand(minAmount,maxAmount,integer,true); // negative or positive\n\t\t\t\t} else {\n\t\t\t\t\tvar wiggle = zim.rand(minAmount,maxAmount,integer)*zim.sign(lastWiggle)*-1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tobj[property]=baseAmount+wiggle;\n\t\t\tif (count == 0) time = time/2;\n\t\t\tlastWiggle = wiggle;\n\t\t\tcount++;\n\t\t\tif (type == \"negative\" || type == \"positive\") {\n\t\t\t\tzim.animate({target:target, obj:obj, set:set, ease:ease, time:time*2, rewind:true, override:false, call:wiggleMe, id:id, ticker:(target.getStage?true:false)});\n\t\t\t} else {\n\t\t\t\tzim.animate({target:target, obj:obj, ease:ease, time:time, override:false, call:wiggleMe, id:id, ticker:(target.getStage?true:false)});\n\t\t\t}\t\t}\n\t\twiggleMe();\n\t\treturn target;\n\t}//-45.25\n\n/*--\nzim.loop = function(obj, call, reverse, step, start, end)\n\nloop\nzim function - and Display object method under ZIM 4TH\nNOTE: overrides earlier loop function with added container loop\nso that we can use earlier loop function without createjs\n\nDESCRIPTION\n1. If you pass in a Number for obj then loop() does function call that many times\nand passes function call the currentIndex, totalLoops, startIndex, endIndex, obj.\nBy default, the index starts at 0 and counts up to one less than the number.\nSo this is like: for (var i=0; i<obj; i++) {}\n\n2. If you pass in an Array then loop() loops through the array\nand passes the function call the element in the array, currentIndex, totalLoops, startIndex, endIndex, array.\nSo this is like: for (var i=0; i<obj; i++) {element = array[i]}\n\n3. If you pass in an Object literal then loop() loops through the object\nand passes the function call the property name, value, currentIndex, totalLoops, startIndex, endIndex, obj.\nSo this is like: for (var i in obj) {property = i; value = obj[i];}\n\n4. If you pass in a container for obj then loop() loops through all the children of the container\nand does the function for each one passing the child, currentIndex, totalLoops, startIndex, endIndex, obj.\nSo this is like for(i=0; i<obj; i++) {var child = obj.getChildAt(i);} loop\nor for (var i in container.children) {var child = container.children[i];}\n\nNOTE: If you pass in true for reverse, the loop is run backwards counting to 0 (by default)\nNOTE: use return to act like a continue in a loop and go to the next loop\nNOTE: return a value to return out of the loop completely like a break (and return a result if desired)\n\n\nEXAMPLE\nvar container = new zim.Container();\nzim.loop(1000, function(i) { // gets passed an index i, total 1000, start 0, end 999, obj 1000\n\t// make 1000 rectangles\n\tcontainer.addChild(new zim.Rectangle());\n});\nstage.addChild(container);\n\n// to continue or break from loop have the function return the string \"continue\" or \"break\"\nzim.loop(10, function(i) {\n\tif (i%2==0) return; // skip even\n\tif (i>6) return \"break\"; // quit loop when > 6\n\tzog(i);\n});\n\nvar colors = [frame.green, frame.yellow, frame.pink];\nzim.loop(colors, function(color, index, total, start, end, array) { // do not have to collect all these\n\tzog(color); // each color\n});\n\nvar person = {name:\"Dan Zen\", occupation:\"Inventor\", location:\"Dundas\"}\nvar result = zim.loop(person, function(prop, val, index, total, start, end, obj) { // do not have to collect all these\n\tzog(prop, val); // each key value pair\n\tif (val == \"criminal\") return \"criminal\"; // this would return out of the loop to the containing function\n});\nif (result == \"criminal\") alert(\"oh no!\");\n\n// loop through children of the container\ncontainer.loop(function(child, i) { // gets passed the child, index, total, start, end and obj\n\tchild.x += i*2;\n\tchild.y += i*2;\n}, true); // true would reverse - so highest in stack to lowest, with i going from numChildren-1 to 0\n\n// with pre ZIM 4TH function and without reverse\nzim.loop(container, function(child, i) { // gets passed the child, index, total, start, end and obj\n\tchild.x += i*2;\n\tchild.y += i*2;\n});\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nobj - a Number of times to loop or an Array or a Container with children to loop through\ncall - the function to call\n\tthe function will receive (as its final parameters) the index, total, start, end, obj\n\t\twhere the index is the current index, total is how many times the loop will run\n\t\tstart is the start index, end is the end index and obj is the object passed to the loop\n\tthe starting parameters vary depending on the type of obj:\n\tif the obj is a number then the first parameter is the index (no extra starting parameters given)\n\tif the obj is an array then the first parameter is the element at the current index\n\tif the obj is an object literal then the first and second parameters are the property name and property value at the current index\n\tif the obj is a container then the first parameter is the child of the container at the current index\nreverse - (default false) set to true to run the loop backwards to 0\nstep - (default 1) each step will increase by this amount (positive whole number - use reverse to go backwards)\nstart - (default 0 or length-1 for reverse) index to start\nend - (default length-1 or 0 for reverse) index to end\n\nRETURNS any value returned from the loop - or undefined if no value is returned from a loop\n--*///+45.3\n\tzim.loop = function(obj, call, reverse, step, start, end) {\n\n\t\tvar sig = \"obj, call, reverse, step, start, end\";\n\t\tvar duo; if (duo = zob(zim.loop, arguments, sig)) return duo;\n\t\tz_d(\"45.3\");\n\t\tif (zot(obj) || zot(call)) return undefined;\n\t\tif (zot(reverse)) reverse = false;\n\t\tif (zot(step) || step <= 0) step = 1;\n\n\t\tvar type = typeof obj==\"number\"?\"number\":(obj.constructor === Array?\"array\":(obj.constructor === {}.constructor?\"object\":\"container\"));\n\n\t\tif (type == \"container\" && !obj.addChild) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (type == \"number\" || type == \"array\") {\n\t\t\tvar length = type==\"number\"?obj:obj.length;\n\t\t\tvar total = getTotal(length-1);\n\t\t\tif (total == 0) return;\n\t\t\tif (reverse) {\n\t\t\t\tfor(var i=start; i>=end; i-=step) {\n\t\t\t\t\tif (type==\"number\") {\n\t\t\t\t\t\tvar r = call(i, total, start, end, obj);\n\t\t\t\t\t} else { // array\n\t\t\t\t\t\tvar r = call(obj[i], i, total, start, end, obj);\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof r != 'undefined') return r;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor(var i=start; i<=end; i+=step) {\n\t\t\t\t\tif (type==\"number\") {\n\t\t\t\t\t\tvar r = call(i, total, start, end, obj);\n\t\t\t\t\t} else { // array\n\t\t\t\t\t\tvar r = call(obj[i], i, total, start, end, obj);\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof r != 'undefined') return r;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (type == \"object\") {\n\t\t\tvar length = 0;\n\t\t\tvar props = [];\n\t\t\tfor (var i in obj) {\n\t\t\t\tlength++;\n\t\t\t\tprops.push(i);\n\t\t\t}\n\t\t\tvar total = getTotal(length-1);\n\t\t\tif (total == 0) return;\n\t\t\tif (reverse) {\n\t\t\t\tfor(var i=start; i>=end; i-=step) {\n\t\t\t\t\tvar r = call(props[i], obj[props[i]], i, total, start, end, obj);\n\t\t\t\t\tif (typeof r != 'undefined') return r;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor(var i=start; i<=end; i+=step) {\n\t\t\t\t\tvar r = call(props[i], obj[props[i]], i, total, start, end, obj);\n\t\t\t\t\tif (typeof r != 'undefined') return r;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tvar total = getTotal(obj.numChildren-1);\n\t\t\tif (total == 0) return;\n\t\t\tif (reverse) {\n\t\t\t\tfor(var i=start; i>=end; i-=step) {\n\t\t\t\t\tvar r = call(obj.getChildAt(i), i, total, start, end, obj);\n\t\t\t\t\tif (typeof r != 'undefined') return r;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor(var i=start; i<=end; i+=step) {\n\t\t\t\t\tvar r = call(obj.getChildAt(i), i, total, start, end, obj);\n\t\t\t\t\tif (typeof r != 'undefined') return r;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfunction getTotal(max) {\n\t\t\tif (zot(start)) start = reverse?max:0;\n\t\t\tif (zot(end)) end = reverse?0:max;\n\t\t\tif ((reverse && end > start) || (!reverse && start > end)) return 0;\n\t\t\tif ((start < 0 && end) <0 || (start > max && end > max)) return 0;\n\t\t\tstart = Math.max(0, Math.min(start, max));\n\t\t\tend = Math.max(0, Math.min(end, max));\n\t\t\treturn Math.floor((reverse?(start-end):(end-start)) / step) + 1;\n\t\t}\n\t}//-45.3\n\n/*--\nzim.copyMatrix = function(obj, source)\n\ncopyMatrix\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nCopies the transformation properties from the source to the obj\n(x, y, rotation, scale and skew)\nMight need to still copy the regX and regY (not included in copyMatrix)\n\nNOTE: used internally by move(), animate() and setMask() for copying transform of shapes to mask\nalso used in addDisplayMembers for clone() method\n\nEXAMPLE\ncircle.copyMatrix(circle2);\n// circle will now match circle2 in x, y, rotation, scale and skew properties\n\nOR with pre ZIM 4TH function\nzim.copyMatrix(circle, circle2);\nEND EXAMPLE\n\nPARAMETERS\nobj - object to receive the new transform values\nsource - object from which the transform properties are being copied\n\nRETURNS obj for chaining\n--*///+45.5\n\tzim.copyMatrix = function(obj, source) {\n\t\tz_d(\"45.5\");\n\t\tobj.x = source.x;\n\t\tobj.y = source.y;\n\t\tobj.scaleX = source.scaleX;\n\t\tobj.scaleY = source.scaleY;\n\t\tobj.regX = source.regX;\n\t\tobj.regY = source.regY;\n\t\tobj.rotation = source.rotation;\n\t\tobj.skewX = source.skewX;\n\t\tobj.skewY = source.skewY;\n\t\treturn obj;\n\t}//-45.5\n\n/*--\nzim.pos = function(obj, x, y)\n\npos\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nChainable convenience function to position x and y\nSee also the CreateJS set({prop:val, prop2:val}) method;\n\nEXAMPLE\ncircle.pos(100, 100);\n\nOR with pre ZIM 4TH function\nzim.pos(circle, 100, 100);\nEND EXAMPLE\n\nPARAMETERS\nobj - object to position\nx - (default null) the x position\ny - (default null) the y position\n\nRETURNS obj for chaining\n--*///+41.5\n\tzim.pos = function(obj, x, y) {\n\t\tz_d(\"41.5\");\n\t\tif (zot(obj)) return;\n\t\tif (!zot(x)) obj.x = x;\n\t\tif (!zot(y)) obj.y = y;\n\t\treturn obj;\n\t}//-41.5\n\n/*--\nzim.mov = function(obj, x, y)\n\nmov\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nMove the object over in the x and/or y\nEquivilant to obj.x += x and obj.y += y\nPass in 0 for no shift in x if you just want to shift y\nGives chainable relative position\n\nNOTE: might want to pronounce this \"mawv\" to differentiate from ZIM move()\n\nEXAMPLE\nvar circle = new zim.Circle().center(stage).mov(50); // move to right 50\n\nOR with pre ZIM 4TH function\nzim.mov(circle, 50);\nEND EXAMPLE\n\nPARAMETERS\nobj - object to shift\nx - (default 0) the distance in x to move (can be negative)\ny - (default 0) the distance in y to move (can be negative)\n\nRETURNS obj for chaining\n--*///+41.6\n\tzim.mov = function(obj, x, y) {\n\t\tz_d(\"41.6\");\n\t\tif (zot(obj)) return;\n\t\tif (!zot(x)) obj.x += x;\n\t\tif (!zot(y)) obj.y += y;\n\t\treturn obj;\n\t}//-41.6\n\n/*--\nzim.alp = function(obj, alpha)\n\nalp\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nChainable convenience function to set the alpha\nSee also the CreateJS set({prop:val, prop2:val}) method;\n\nEXAMPLE\ncircle.alp(.5);\n\nOR with pre ZIM 4TH function\nzim.alp(circle, .5);\nEND EXAMPLE\n\nPARAMETERS\nobj - object to scale\nalpha - default(null) the alpha between 0 and 1\n\nRETURNS obj for chaining\n--*///+41.7\n\tzim.alp = function(obj, alpha) {\n\t\tz_d(\"41.7\");\n\t\tif (zot(obj)) return;\n\t\tif (!zot(alpha)) obj.alpha = alpha;\n\t\treturn obj;\n\t}//-41.7\n\n/*--\nzim.rot = function(obj, rotation)\n\nrot\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nChainable convenience function to set the rotation\nSee also the CreateJS set({prop:val, prop2:val}) method;\n\nEXAMPLE\nrect.rot(180);\n\nOR with pre ZIM 4TH function\nzim.rot(rect, 180);\nEND EXAMPLE\n\nPARAMETERS\nobj - object to scale\nrotation - (default null) the rotation in degrees\n\nRETURNS obj for chaining\n--*///+41.8\n\tzim.rot = function(obj, rotation) {\n\t\tz_d(\"41.8\");\n\t\tif (zot(obj)) return;\n\t\tif (!zot(rotation)) obj.rotation=rotation;\n\t\treturn obj;\n\t}//-41.8\n\n/*--\nzim.siz = function(obj, width, height, only)\n\nsiz\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nChainable convenience function to set width and height in one call.\nIf you pass in just the width or height parameter, it keeps the aspect ratio.\nIf you want to set only the width or height, then set only to true.\nIf you pass in both the width and height then it sets both.\nNote: that width and height will adjust the scaleX and scaleY of the object.\nAlso see zim.width, zim.height, zim.widthOnly, zim.heightOnly.\n\nEXAMPLE\nvar rect = new zim.Rectangle(100,200,frame.blue).addTo(stage);\nrect.siz(200); // sets width to 200 and height to 400\nrect.siz(200, null, true); // sets width to 200 and leaves height at 200\nrect.siz(200, 100); // sets width to 200 and height to 100\n\nOR with pre ZIM 4TH function\nzim.siz(rect, 200);\n// etc.\nEND EXAMPLE\n\nPARAMETERS\nobj - object to scale\nwidth - (default null) the width of the object\n\tsetting only the width will set the widht and keep the aspect ratio\n\tunless the only parameter is set to true\nheight - (default null) the height of the object\n\tsetting only the width will set the widht and keep the aspect ratio\n\tunless the only parameter is set to true\nonly - (default false) - defaults to keeping aspect ratio when one dimension set\n \tset to true to scale only a single dimension (like widthOnly and heightOnly properties)\n\nRETURNS obj for chaining\n--*///+41.85\n\tzim.siz = function(obj, width, height, only) {\n\t\tz_d(\"41.85\");\n\t\tif (zot(obj)) return;\n\t\tif (zot(only)) only = false;\n\t\tif (!zot(width) && !zot(height)) {\n\t\t\tobj.widthOnly = width; obj.heightOnly = height;\n\t\t} else if (!zot(width)) {\n\t\t\tif (only) {obj.widthOnly = width;} else {obj.width = width;}\n\t\t} else if (!zot(height)) {\n\t\t\tif (only) {obj.heightOnly = height;} else {obj.height = height;}\n\t\t}\n\t\treturn obj;\n\t}//-41.85\n\n/*--\nzim.ske = function(obj, skewX, skewY)\n\nske\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nChainable convenience function to skewX and skewY (slant)\nSee also the CreateJS set({prop:val, prop2:val}) method;\n\nEXAMPLE\ncircle.ske(20);\n\nOR with pre ZIM 4TH function\nzim.ske(circle, 20);\nEND EXAMPLE\n\nPARAMETERS\nobj - object to position\nskewX - (default null) the x skew\nskewY - (default null) the y skew\n\nRETURNS obj for chaining\n--*///+41.9\n\tzim.ske = function(obj, skewX, skewY) {\n\t\tz_d(\"41.9\");\n\t\tif (zot(obj)) return;\n\t\tif (!zot(skewX)) obj.skewX = skewX;\n\t\tif (!zot(skewY)) obj.skewY = skewY;\n\t\treturn obj;\n\t}//-41.9\n\n/*--\nzim.reg = function(obj, regX, regY)\n\nreg\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nChainable convenience function to regX and regY (registration point)\nThe registration point is the point the object is positioned with\nand the object scales and rotates around the registration point\nSee also the CreateJS set({prop:val, prop2:val}) method;\nSee also zim.centerReg()\n\nEXAMPLE\ncircle.reg(200, 200);\n\nOR with pre ZIM 4TH function\nzim.reg(circle, 200, 200);\nEND EXAMPLE\n\nPARAMETERS\nobj - object on which to set registration point\nregX - (default null) the x registration\nregY - (default null) the y registration\n\nRETURNS obj for chaining\n--*///+41.95\n\tzim.reg = function(obj, regX, regY) {\n\t\tz_d(\"41.95\");\n\t\tif (zot(obj)) return;\n\t\tif (!zot(regX)) obj.regX = regX;\n\t\tif (!zot(regY)) obj.regY = regY;\n\t\treturn obj;\n\t}//-41.95\n\n/*--\nzim.sca = function(obj, scale, scaleY)\n\nsca\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nChainable convenience function to do scaleX and scaleY in one call.\nSame as zim.scale() but with consistent three letter shortcut (helps with stacked alignment)\nIf you pass in just the scale parameter, it scales both x and y to this value.\nIf you pass in scale and scaleY then it scales x and y independently.\nAlso see zim.scaleTo(), zim.fit() and zim.Layout().\n\nEXAMPLE\ncircle.sca(.5); // x and y scale to .5\ncircle.sca(.5, 2); // x scale to .5 and y scale to 2\n\nOR with pre ZIM 4TH function\nzim.sca(circle, .5);\nzim.sca(circle, .5, 2);\nEND EXAMPLE\n\nPARAMETERS\nobj - object to scale\nscale - the scale (1 being full scale, 2 being twice as big, etc.)\nscaleY - (default null) pass this in to scale x and y independently\n\nRETURNS obj for chaining\n--*///+41.97\n\tzim.sca = function(obj, scale, scaleY) {\n\t\tz_d(\"41.97\");\n\t\tif (zot(obj) || zot(obj.scaleX)) return;\n\t\tif (zot(scale)) scale = obj.scaleX;\n\t\tif (zot(scaleY)) scaleY = scale;\n\t\tobj.scaleX = scale; obj.scaleY = scaleY;\n\t\treturn obj;\n\t}//-41.97\n\n/*--\nzim.scale = function(obj, scale, scaleY)\n\nscale\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nChainable convenience function to do scaleX and scaleY in one call.\nSame as zim.sca() but came first and full name was not taken.\nIf you pass in just the scale parameter, it scales both x and y to this value.\nIf you pass in scale and scaleY then it scales x and y independently.\nAlso see zim.scaleTo(), zim.fit() and zim.Layout().\n\nEXAMPLE\ncircle.scale(.5); // x and y scale to .5\ncircle.scale(.5, 2); // x scale to .5 and y scale to 2\n\nOR with pre ZIM 4TH function\nzim.scale(circle, .5);\nzim.scale(circle, .5, 2);\nEND EXAMPLE\n\nPARAMETERS\nobj - object to scale\nscale - the scale (1 being full scale, 2 being twice as big, etc.)\nscaleY - (default null) pass this in to scale x and y independently\n\nRETURNS obj for chaining\n--*///+42\n\tzim.scale = function(obj, scale, scaleY) {\n\t\tz_d(\"42\");\n\t\tif (zot(obj) || zot(obj.scaleX)) return;\n\t\tif (zot(scale)) scale = obj.scaleX;\n\t\tif (zot(scaleY)) scaleY = scale;\n\t\tobj.scaleX = scale; obj.scaleY = scaleY;\n\t\treturn obj;\n\t}//-42\n\n/*--\nzim.scaleTo = function(obj, boundObj, percentX, percentY, type, boundsOnly)\n\nscaleTo\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nScales object to a percentage of another object's bounds and scale\nPercentage is from 0 - 100 (not 0-1).\nAlso see zim.scale(), zim.fit() and zim.Layout().\n\nEXAMPLE\ncircle.scaleTo(stage, 50); // scale to half the stageW\ncircle.scaleTo(stage, 10, 20); // fit within these scalings of the stage\n\nOR with pre ZIM 4TH function\nzim.scaleTo(circle, stage, 100, 100, \"both\"); // make an oval touch all stage edges\nEND EXAMPLE\n\nPARAMETERS - supports DUO - parameters or single object with properties below\nobj - object to scale\nboundObj - the object that we are scaling to with percents below\npercentX - (default no scaling) the scale in the x\npercentY - (default no scaling) the scale in the y\n\tif both percentX and percentY are missing then assumes 100, 100 for each\ntype - (default \"smallest\") to fit inside or outside or stretch to bounds\n\tsmallest: uses the smallest scaling keeping proportion (fit)\n\tbiggest: uses the largest scaling keeping proportion (outside)\n\tboth: keeps both x and y scales - may stretch object (stretch)\nboundsOnly - (default false) set to true to scale to the boundObj's bounds only - ignoring current boundObj scale\n\nRETURNS obj for chaining\n--*///+43\n\tzim.scaleTo = function(obj, boundObj, percentX, percentY, type, boundsOnly) {\n\n\t\tvar sig = \"obj, boundObj, percentX, percentY, type, boundsOnly\";\n\t\tvar duo; if (duo = zob(zim.scaleTo, arguments, sig)) return duo;\n\t\tz_d(\"43\");\n\t\tif (zot(obj) || !obj.getBounds || !obj.getBounds()) {zog (\"zim create - scaleTo(): please provide an object (with setBounds) to scale\"); return;}\n\t\tif (zot(boundObj) || !boundObj.getBounds || !boundObj.getBounds()) {zog (\"zim create - scaleTo(): please provide a boundObject (with setBounds) to scale to\"); return;}\n\t\tif (zot(percentX)) percentX = -1;\n\t\tif (zot(percentY)) percentY = -1;\n\t\tif (percentX == -1 && percentY == -1) percentX = percentY = 100;\n\t\tif (zot(type)) type = \"smallest\";\n\t\tif (zot(boundsOnly)) boundsOnly = false;\n\t\tvar w = boundObj.getBounds().width * percentX / 100 * (boundsOnly?1:boundObj.scaleX);\n\t\tvar h = boundObj.getBounds().height * percentY / 100 * (boundsOnly?1:boundObj.scaleY);\n\t\tif ((percentX == -1 || percentY == -1) && type != \"both\" && type != \"stretch\") {\n\t\t\tif (percentX == -1) {\n\t\t\t\tzim.scale(obj, h/obj.getBounds().height);\n\t\t\t} else {\n\t\t\t\tzim.scale(obj, w/obj.getBounds().width);\n\t\t\t}\n\t\t\treturn obj;\n\t\t}\n\t\tif (type == \"both\" || type == \"stretch\") {\n\t\t\tobj.scaleX = (percentX != -1) ? w/obj.getBounds().width : obj.scaleX;\n\t\t\tobj.scaleY = (percentY != -1) ? h/obj.getBounds().height : obj.scaleY;\n\t\t\treturn obj;\n\t\t} else if (type == \"biggest\" || type == \"largest\" || type == \"outside\") {\n\t\t\tvar scale = Math.max(w/obj.getBounds().width, h/obj.getBounds().height);\n\t\t} else { // smallest or fit\n\t\t\tvar scale = Math.min(w/obj.getBounds().width, h/obj.getBounds().height);\n\t\t}\n\t\tzim.scale(obj, scale);\n\t\treturn obj;\n\t}//-43\n\n/*--\nzim.fit = function(obj, left, top, width, height, inside)\n\nfit\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nScale an object to fit inside (or outside) a rectangle and center it.\nActually scales and positions the object.\nObject must have bounds set (setBounds()).\n\nEXAMPLE\ncircle.fit(100, 100, 200, 300); // fits and centers in these dimensions\n\nOR with pre ZIM 4TH function\nzim.fit(circle); // fits circle and centers on stage\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nobj - the object to fit to the rectangle\nleft, top, width, height - (default stage dimensions) the rectangle to fit\ninside - (default true) fits the object inside the rectangle\n\tif inside is false then it fits the object around the bounds\n\tin both cases the object is centered\n\nRETURNS an Object literal with the new and old details (bX is rectangle x, etc.):\n{x:obj.x, y:obj.y, width:newW, height:newH, scale:scale, bX:left, bY:top, bWidth:width, bHeight:height}\n--*///+46\n\tzim.fit = function(obj, left, top, width, height, inside) {\n\n\t\tvar sig = \"obj, left, top, width, height, inside\";\n\t\tvar duo; if (duo = zob(zim.fit, arguments, sig)) return duo;\n\t\tz_d(\"46\");\n\t\tif (zot(obj) || !obj.getBounds) return;\n\t\tif (!obj.getBounds()) {\n\t\t\tzog(\"zim create - fit(): please setBounds() on object\");\n\t\t\treturn;\n\t\t}\n\t\tif (zot(left)) {\n\t\t\tif (!obj.getStage()) {\n\t\t\t\tzog(\"zim create - fit(): please add boundary dimensions or add obj to stage first\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!obj.getStage().getBounds()) {\n\t\t\t\tzog(\"zim create - fit(): please add boundary dimensions or add obj with bounds to stage first\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar stageW = obj.getStage().getBounds().width;\n\t\t\tvar stageH = obj.getStage().getBounds().height;\n\t\t\tleft = 0; top = 0;\n\t\t\twidth = stageW; height = stageH;\n\t\t}\n\t\tif (zot(inside)) inside = true;\n\n\t\tobj.scaleX = obj.scaleY = 1;\n\n\t\tvar w = width;\n\t\tvar h = height;\n\t\tvar objW = obj.getBounds().width;\n\t\tvar objH = obj.getBounds().height;\n\t\tvar scale;\n\n\t\tif (inside) { // fits dimensions inside screen\n\t\t\tif (w/h >= objW/objH) {\n\t\t\t\tscale = h / objH;\n\t\t\t} else {\n\t\t\t\tscale = w / objW;\n\t\t\t}\n\t\t} else { // fits dimensions outside screen\n\t\t\tif (w/h >= objW/objH) {\n\t\t\t\tscale = w / objW;\n\t\t\t} else {\n\t\t\t\tscale = h / objH;\n\t\t\t}\n\t\t}\n\n\t\tobj.scaleX = obj.scaleY = scale;\n\n\t\tvar newW = objW * scale;\n\t\tvar newH = objH * scale;\n\n\t\t// horizontal center\n\t\tobj.x = (obj.regX-obj.getBounds().x)*scale + left + (w-newW)/2;\n\n\t\t// vertical center\n\t\tobj.y = (obj.regY-obj.getBounds().y)*scale + top + (h-newH)/2;\n\n\t\treturn {x:obj.x, y:obj.y, width:newW, height:newH, scale:scale, bX:left, bY:top, bWidth:width, bHeight:height};\n\n\t}//-46\n\n/*--\nzim.outline = function(obj, color, size)\n\noutline\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nFor testing purposes.\nDraws a rectangle around the bounds of obj (adds rectangle to the objects parent).\nDraws a cross at the origin of the object (0,0) where content will be placed.\nDraws a circle at the registration point of the object (where it will be placed in its container).\nThese three things could be in completely different places ;-)\n\nNOTE: will not subsequently be resized - really just to use while building and then comment it out or delete it\n\nEXAMPLE\nvar circle = new zim.Circle(50, \"red\");\ncircle.center(stage);\n// show registration and origin at center and bounding box around outside\ncircle.outline();\n\nOR with pre ZIM 4TH function\nzim.center(circle, stage);\nzim.outline(circle);\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nobj - the object to outline (can be transformed - scaled or rotated)\ncolor - (default brown) the color of the outline\nsize - (default 2) the stroke size of the outline\n\nRETURNS the shape if you want to remove it: obj.parent.removeChild(returnedShape);\n--*///+47\n\tzim.outline = function(obj, color, size) {\n\n\t\tvar sig = \"obj, color, size\";\n\t\tvar duo; if (duo = zob(zim.outline, arguments, sig)) return duo;\n\t\tz_d(\"47\");\n\t\tif (zot(obj) || !obj.getBounds) {zog(\"zim create - outline(): please provide object with bounds set\"); return;}\n\t\tif (!obj.getBounds()) {zog(\"zim create - outline(): please setBounds() on object\");\treturn;}\n\t\tif (!obj.parent) {zog(\"zim create - outline(): object should be on stage first\"); return;}\n\t\tif (zot(color)) color = \"brown\";\n\t\tif (zot(size)) size = 2;\n\t\tvar oB = obj.getBounds();\n\t\tvar shape = new createjs.Shape();\n\t\tvar shapeC = new createjs.Shape();\n\t\tvar p = obj.parent;\n\n\t\tvar pTL = obj.localToLocal(oB.x, oB.y, p);\n\t\tvar pTR = obj.localToLocal(oB.x+oB.width, oB.y, p);\n\t\tvar pBR = obj.localToLocal(oB.x+oB.width, oB.y+oB.height, p);\n\t\tvar pBL = obj.localToLocal(oB.x, oB.y+oB.height, p);\n\t\tvar pC = obj.localToLocal(0, 0, p);\n\n\t\tvar g = shape.graphics;\n\t\tvar gC = shapeC.graphics;\n\t\tg.s(color).ss(size)\n\t\t\t.mt(pTL.x, pTL.y)\n\t\t\t.lt(pTR.x, pTR.y)\n\t\t\t.lt(pBR.x, pBR.y)\n\t\t\t.lt(pBL.x, pBL.y)\n\t\t\t.lt(pTL.x, pTL.y);\n\n\t\t// subtract a scaled top left bounds from the top left point\n\t\t// zero = {x:pTL.x-oB.x*obj.scaleX, y:pTL.y-oB.y*obj.scaleY};\n\n\t\t// cross at 0 0\n\t\tvar s = 10;\n\t\tvar ss = s+1;\n\t\tgC.s(\"white\").ss(size+2);\n\t\tgC.mt(-ss, 0).lt(ss, 0);\n\t\tgC.mt(0, -ss).lt(0, ss);\n\t\tgC.s(color).ss(size);\n\t\tgC.mt(-s, 0).lt(s, 0);\n\t\tgC.mt(0, -s).lt(0, s);\n\t\tshapeC.x = pC.x;\n\t\tshapeC.y = pC.y;\n\t\tshapeC.rotation = obj.rotation;\n\n\t\t// circle at registration point\n\t\tg.s(\"white\").ss(size+2).dc(obj.x,obj.y,s+6);\n\t\tg.s(color).ss(size).dc(obj.x,obj.y,s+6);\n\n\t\tobj.parent.addChild(shape);\n\t\tobj.parent.addChild(shapeC);\n\t\tshape.mouseEnabled = false;\n\t\tshapeC.mouseEnabled = false;\n\t\tif (obj.getStage()) obj.getStage().update();\n\t\treturn obj;\n\t}//-47\n\n/*--\nzim.addTo = function(obj, container, index)\n\naddTo\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nA wrapper function for addChild() / addChildAt() to add the obj to the container.\nThis allows us to chain more effectively:\nvar circle = new zim.Circle().addTo(stage).drag();\nAlso, ZIM has obj.center(container) and obj.centerReg(container) functions\nwhere the obj comes first followed by the container.\nSo it is a pain to flip things and use container.addChild(obj)\nNow, we can use obj.addTo(container) and the object we are adding comes first.\nThe last parameter is the index so similar to an addChildAt()\nWe can also use obj.removeFrom(container)\n\nEXAMPLE\nvar circle = new zim.Circle(50, \"red\");\ncircle.addTo(stage);\n// with chaining - and dragging:\nvar circle = new zim.Circle(50, \"red\").addTo(stage).drag();\n\nvar rect = new zim.Rectangle(100, 100, \"blue\");\nrect.addTo(stage, 0); // place on bottom\n\nOR with pre ZIM 4TH function\nzim.addTo(circle, stage); // etc.\nEND EXAMPLE\n\nPARAMETERS\nobj - the object to add\ncontainer - the container to add to\nindex - (default null) if provided will addChildAt the object at the index (0 being bottom)\n\nRETURNS obj for chaining\n--*///+47.5\n\tzim.addTo = function(obj, container, index) {\n\n\t\tz_d(\"47.5\");\n\t\tif (zot(obj)) {zog(\"zim create - addTo(): please provide object\"); return;}\n\t\tif (zot(container)) {zog(\"zim create - addTo(): please provide container\"); return;}\n\t\tif (zot(index) || isNaN(index)) {\n\t\t\tcontainer.addChild(obj);\n\t\t} else {\n\t\t\tcontainer.addChildAt(obj, index);\n\t\t}\n\t\treturn obj;\n\t}//-47.5\n\n/*--\nzim.removeFrom = function(obj, container)\n\nremoveFrom\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nA wrapper function for removeChild() that removes the obj from the container\nMatches obj.addTo(container)\nWe have obj.removeFrom(container)\n\nEXAMPLE\nvar circle = new zim.Circle(50, \"red\");\ncircle.addTo(stage);\n// later\ncircle.removeFrom(stage);\n\nOR with pre ZIM 4TH function\nzim.removeFrom(circle, stage); // etc.\nEND EXAMPLE\n\nPARAMETERS\nobj - the object to remove\ncontainer - the container to remove the object from\n\nRETURNS obj for chaining\n--*///+47.6\n\tzim.removeFrom = function(obj, container) {\n\n\t\tz_d(\"47.6\");\n\t\tif (zot(obj)) {zog(\"zim create - removeFrom(): please provide object\"); return;}\n\t\tif (zot(container)) {zog(\"zim create - removeFrom(): please provide container\"); return;}\n\t\tcontainer.removeChild(obj);\n\t\treturn obj;\n\t}//-47.6\n\n/*--\nzim.added = function(obj, call, interval, maxTime)\n\nadded\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nCalls callback function when object is added to the stage\nCreateJS has an \"added\" event that triggers when an object is added to another container\nbut this container may not be on the stage.\nadded polls with a setInterval every 100ms to see if the object has a stage property\nOnce it does then it calls the callback and removes the interval\n\nEXAMPLE\nvar circle = new zim.Circle(50, \"red\");\ncircle.added(function() {zog(\"has stage\");});\n\nzim.interval(1000, function() {\n\tcircle.centerReg(stage); // will trigger \"has stage\" message within 100ms\n});\nEND EXAMPLE\n\nPARAMETERS\nobj - the object to check to see if it has been added to stage or its container has been added\ncall - the function to call when added - will call right away if object is already added\n\tcall will receive a reference to the stage and the object as parameters\ninterval - (default 100) time in ms to check - keeps repeating until stage is there or maxTime is reached\nmaxTime - (default null) time in ms to keep checking or forever if not provided\n\nRETURNS id of interval so clearInterval(id) will stop added() from checking for stage\n--*///+47.7\n\tzim.added = function(obj, call, interval, maxTime) {\n\t\tz_d(\"47.7\");\n\t\tif (zot(obj) || zot(call) || typeof call != \"function\") return;\n\t\tif (zot(interval)) interval = 100;\n\t\tif (obj.getStage()) {(call)(obj.getStage(), obj); return;}\n\t\tvar startTime = Date.now();\n\t\tvar id = setInterval(function() {\n\t\t\tif (maxTime > 0 && startTime-Date.now()>maxTime) clearInterval(id);\n\t\t\tif (obj.getStage()) {\n\t\t\t\t(call)(obj.getStage(), obj);\n\t\t\t\tclearInterval(id);\n\t\t\t}\n\t\t}, interval);\n\t\treturn id;\n\t}//-47.7\n\n/*--\nzim.centerReg = function(obj, container, add, index)\n\ncenterReg\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nCenters the registration point on the bounds - obj must have bounds set.\nIf a container is provided it adds the object to the container.\nA convenience function for setting both registration points at once.\nAlso see zim.center() for centering without changing the registration point.\n\nEXAMPLE\nvar rect = new zim.Rectangle(100, 100, \"blue\");\nrect.centerReg(stage); // centers registration, centers and adds to stage\nrect.animate({obj:{rotation:360}, time:1000, ease:\"linear\", loop:true});\n\nOR with pre ZIM 4TH function\nzim.centerReg(rect, stage);\nzim.animate({target:rect, obj:{rotation:360}, time:1000, ease:\"linear\", loop:true});\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nobj - the object to set the regX and regY to the center\ncontainer - (default null) centers the object on and adds to the container\nadd - (default true) set to false to only center the object on the container\nindex - (default null) if provided will addChildAt the object at the index (0 being bottom)\n\nRETURNS obj for chaining\n--*///+48\n\tzim.centerReg = function(obj, container, add, index) {\n\n\t\tvar sig = \"obj, container, add, index\";\n\t\tvar duo; if (duo = zob(zim.centerReg, arguments, sig)) return duo;\n\t\tz_d(\"48\");\n\t\tif (zot(obj) || !obj.getBounds || !obj.getBounds()) {zog(\"zim create - centerReg(): please provide object with bounds set\"); return;}\n\t\tvar oB = obj.getBounds();\n\t\tobj.regX = oB.x + oB.width/2;\n\t\tobj.regY = oB.y + oB.height/2;\n\t\treturn (container) ? zim.center(obj, container, add, index) : obj;\n\t}//-48\n\n/*--\nzim.center = function(obj, container, add, index)\n\ncenter\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nCenters the object on the container.\nWill default to adding the object to the container.\nAlso see zim.centerReg() for centering registration point at same time.\n\nEXAMPLE\nvar rect = new zim.Rectangle(100, 100, \"blue\");\nrect.center(stage); // centers and adds to stage\n// the below animation will be around the registration point at the top left corner\n// this is usually not desired - see zim.centerReg() when rotating and scaling\nrect.animate({obj:{rotation:360}, time:1000, ease:\"linear\", loop:true});\n\nOR with pre ZIM 4TH function\nzim.center(rect, stage);\nzim.animate({target:rect, obj:{rotation:360}, time:1000, ease:\"linear\", loop:true});\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nobj - the object to center\ncontainer - centers the object on and adds to the container\nadd - (default true) set to false to only center and not add the object to the container\nindex - (default null) if provided will addChildAt the object at the index (0 being bottom)\n\nRETURNS obj for chaining\n--*///+48.1\n\tzim.center = function(obj, container, add, index) {\n\n\t\tvar sig = \"obj, container, add, index\";\n\t\tvar duo; if (duo = zob(zim.center, arguments, sig)) return duo;\n\t\tz_d(\"48.1\");\n\t\tif (zot(obj) || !obj.getBounds) {zog(\"zim.center(): please provide object with bounds\"); return;}\n\t\tif (zot(container) || !container.getBounds)  {zog(\"zim.center(): please provide container with bounds\"); return;}\n\n\t\tvar oB = obj.getBounds();\n\t\tvar cB = container.getBounds();\n\n\t \tif (zot(add)) add = true;\n\t\tif (add && container.addChild) {\n            if (zot(index) || (typeof index === 'number' && isNaN(index))) {\n                container.addChild(obj);\n            } else {\n                container.addChildAt(obj, index);\n            }\n        }\n\n\t\tif (zot(cB)) return obj; // just add to container if no bounds on Container\n\t\tif (zot(oB)) { // just add to middle of container\n\t\t\tobj.x = container.getBounds().width/2;\n\t\t\tobj.y = container.getBounds().height/2;\n\t\t\treturn obj;\n\t\t}\n\n\t\t// get registration point of object in coordinates of the container\n\t\tvar reg = obj.localToLocal(obj.regX, obj.regY, container);\n\n\t\t// get bounds of the object in global space even if object is rotated and scaled\n\t\t// this makes a rectangle surrounding a rotated object - so bigger but parallel edges to the x and y\n\t\tvar glob = zim.boundsToGlobal(obj);\n\n\t\t// now project this rectangle into the container coordinates\n\t\t// passing in a rectangle (glob) will make this act on the rectangle rather than the bounds\n\t\t// flip (true) means we go from global to local in the container\n\t\tvar loc = zim.boundsToGlobal(container, glob, true);\n\n\t\t// the positions are all in the container coordinate so do the calculation\n\t\tobj.x = cB.x + cB.width/2 - loc.width/2  + (reg.x-loc.x);\n\t\tobj.y = cB.y + cB.height/2 - loc.height/2  + (reg.y-loc.y);\n\n\t\tif (!add && container.getStage && container.getStage() && obj.parent) {\n\t\t\tvar p = container.localToLocal(obj.x, obj.y, obj.parent);\n\t\t\tobj.x = p.x;\n\t\t\tobj.y = p.y;\n\t\t}\n\t\treturn obj;\n\t}//-48.1\n\n/*--\nzim.place = function(obj, id)\n\nplace\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nSets the object to drag and logs to the console the x and y.\nThis is for when building you can move an object around to position it\nthen when positioned, look at the console for the positioning code.\nIn your code, set the reported x and y and delete the place call.\n\nEXAMPLE\ncircle.place(\"circle\"); // lets you drag circle around - then see console\n\nOR with pre ZIM 4TH function\nzim.place(circle, \"circle\");\nEND EXAMPLE\n\nPARAMETERS\nobj - object to place\nid - (default null) the name of the object so that the log gives you complete code\n\nRETURNS undefined\n--*///+49\n\tzim.place = function(obj, id) {\n\t\tz_d(\"49\");\n\t\tif (zot(obj)) return;\n\t\tif (zot(id)) id = \"obj\";\n\t\tfunction report() {\n\t\t\tzog(id+\".x = \" + Math.round(obj.x) +  \"; \"+id+\".y = \" + Math.round(obj.y) + \";\");\n\t\t\tzog(id+\".pos(\" + Math.round(obj.x) +  \", \" + Math.round(obj.y) + \");\");\n\t\t}\n\t\tzim.drag({obj:obj, currentTarget:true, dragCursor:\"crosshair\"});\n\t\tzog(\"place \"+id+\" - to get new position\");\n\t\tobj.on(\"click\", report);\n\t}//-49\n\n/*--\nzim.placeReg = function(obj, id)\n\nplaceReg\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nGives draggable indicator to position a registration point in an object\nThis is for when building and when positioned, look at the console\nfor registration code and delete the placeReg call.\n\nEXAMPLE\nmyContainer.placeReg(\"myContainer\"); // lets you drag an indicator around - then see console\n\nOR with pre ZIM 4TH function\nzim.placeReg(myContainer, \"myContainer\");\nEND EXAMPLE\n\nPARAMETERS\nobj - object to place the registration point on\nid - (default null) the name of the object so that the log gives you complete code\n\nRETURNS undefined\n--*///+49.5\n\tzim.placeReg = function(obj, id) {\n\t\tz_d(\"49.5\");\n\t\tif (zot(obj)) return;\n\t\tvar stage = obj.getStage();\n\t\tif (zot(stage)) {zog(\"zim.placeReg() - add object to stage before calling placeReg()\");\treturn;}\n\t\tif (zot(id)) id = \"obj\";\n\t\tfunction report() {\n\t\t\tvar p = obj.globalToLocal(cursor.x, cursor.y);\n\t\t\tzog(id+\".regX = \" + Math.round(p.x) +  \"; \"+id+\".regY = \" + Math.round(p.y) + \";\");\n\t\t\tzog(id+\".reg(\" + Math.round(p.x) +  \", \" + Math.round(p.y) + \");\");\n\t\t}\n\t\tvar p = obj.parent.localToGlobal(obj.x, obj.y);\n\t\tvar cursor = new zim.Shape(-25, -25, 50, 50).addTo(stage).pos(p.x, p.y);\n\t\tcursor.graphics.s(\"white\").mt(-25,0).lt(25,0).mt(0,-25).lt(0,20);\n\t\tcursor.compositeOperation = \"difference\";\n\t\tcursor.expand(0);\n\t\tzim.drag({obj:cursor});\n\t\tzog(\"place cursor to get new registration point location\");\n\t\tstage.on(\"stagemouseup\", report);\n\t}//-49.5\n/*--\nzim.expand = function(obj, padding, paddingVertical)\n\nexpand\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nAdds a createjs hitArea to an object with an extra padding of padding.\nGood for making mobile interaction better on labels, buttons, etc.\n\nEXAMPLE\nvar circle = new zim.Circle(10, \"red\");\ncircle.center(stage);\ncircle.expand(); // makes hit area bigger\ncircle.on(\"click\", function(){zog(\"yes\");});\n\nOR with pre ZIM 4TH function\nzim.center(circle, stage);\nzim.expand(circle);\nEND EXAMPLE\n\nPARAMETERS\nobj - object on which you wish to expand the hit area\npadding - (default 20) how many pixels to expand bounds\npaddingVertical - (default null) the vertical padding (making padding for horizontal)\n\nRETURNS obj for chaining\n--*///+50\n\tzim.expand = function(obj, padding, paddingVertical) {\n\t\tz_d(\"50\");\n\t\tif (zot(obj) || !obj.getBounds) {zog(\"zim create - expand(): please provide object with bounds set\"); return;}\n\t\tif (zot(padding)) padding = 20;\n\t\tif (zot(paddingVertical)) paddingVertical = padding;\n\t\tvar oB = obj.getBounds();\n\t\tvar rect = new createjs.Shape();\n\t\trect.graphics.f(\"0\").r(oB.x-padding,oB.y-paddingVertical,oB.width+2*padding,oB.height+2*paddingVertical);\n\t\tobj.hitArea = rect;\n\t\treturn obj;\n\t}//-50\n\n/*--\nzim.setMask = function(obj, mask)\n\nsetMask\nzim function - and Display object method under ZIM 4TH\n\nDESCRIPTION\nSpecifies a mask for an object - the object can be any display object.\nThe mask can be a ZIM (or CreateJS) Shape or a ZIM Rectangle, Circle or Triangle.\nReturns the mask which can then be animated using ZIM move() or animate().\nThis was added because it is nice to use positioned ZIM shapes (which are containers) as masks\nand yet, ony Shape objects can be used as masks\nand you often have to transform them properly which can be confusing.\n\nNOTE: the mask you pass in can still be seen but you can set its alpha to 0\njust watch, if you want to interact with the mask it cannot have 0 alpha\nunless you provide a hit area with zim.expand() for instance (use 0 for padding)\n\nNOTE: this was just mask() but that conflicted with createjs.mask property\nso it would work to set the mask but then you could not use it again - so changed name\n\nEXAMPLE\nvar label = new zim.Label(\"BIG\", 200, null, \"white\");\nlabel.center(stage);\nvar rect = new zim.Rectangle(200,100,\"black\");\nrect.center(stage).alpha = 0;\nvar label = new zim.Label(\"BIG\", 200, null, \"white\");\nlabel.center(stage).drag().setMask(rect);\n// not sure we really recommend such dramatic chaining...\n\nOR with pre ZIM 4TH function\nzim.center(label, stage);\nvar rect = new zim.Rectangle(200,100,\"black\");\nzim.center(rect, stage).alpha = 0;\nzim.setMask(label, rect);\nzim.drag(label);\nEND EXAMPLE\n\nNOTE: to drag something, the alpha cannot be 0\nso we can use zim.expand(rect, 0) to assign a hit area\nthen we can drag even if the alpha is 0 (or set the alpha to .01)\n\nEXAMPLE\nvar label = new zim.Label(\"BIG\", 200, null, \"white\");\nlabel.center(stage);\nvar rect = new zim.Rectangle(200,100,\"black\");\nrect.expand(0);\nrect.center(stage).alpha = 0;\nlabel.setMask(rect);\nrect.drag();\n\nOR with pre ZIM 4TH function\nzim.expand(rect, 0); // adds a hit area to rect so we can drag alpha 0\nzim.center(rect, stage).alpha = 0;\nzim.setMask(label, rect);\nzim.drag(rect);\nEND EXAMPLE\n\nNOTE: move(), animate() and drag() work specially with zim shapes to make this work\notherwise, if you want to reposition your mask\nthen save the return value of the setMask call in a variable\nand position, scale or rotate the mask object using that variable\nor use a zim.Shape or createjs.Shape directly to avoid this issue\n\nEXAMPLE\nvar mask = zim.setMask(label, rect);\nmask.x += 100;\n// note: rect.x += 100 will not work\n// because the mask is inside the rect and does not change its x\n// rect.move(rect.x+100, rect.y, 700); will work\nEND EXAMPLE\n\nPARAMETERS\nobj - the object to mask\nmask - the object whose shape will be the mask\n\nNOTE: use setMask(obj, null) or obj.setMask(null) to clear the mask\n\nRETURNS the mask shape (different than the mask if using ZIM shapes)\n--*///+50.1\n\tzim.setMask = function(obj, mask) {\n\t\tz_d(\"50.1\");\n\t\tif (zot(obj)) {zog(\"zim create - setMask(): please provide obj\"); return;}\n\t\tvar m;\n\t\tif (mask && mask.shape) { // zim.Rectangle, Circle or Triangle\n\t\t\tmask.zimMask = m = mask.shape.clone();\n\t\t\tzim.copyMatrix(m, mask);\n\t\t\tm.regX = mask.regX;\n\t\t\tm.regY = mask.regY;\n\t\t\tzim.addDisplayMembers(m);\n\t\t\tmask.addChildAt(m,0);\n\t\t\tm.alpha = 0;\n\t\t} else {\n\t\t\tm = mask;\n\t\t}\n\t\tobj.mask = m; // set the createjs mask\n\t\treturn m;\n\t}//-50.1\n\n\n////////////////  ZIM BUILD  //////////////\n\n// Zim Build adds common building classes for multies (interactive media)\n// classes in this module require createjs namespace to exist and in particular easel.js\n// available at http://createjs.com\n\n\n/*--\nzim.OPTIMIZE\n\nOPTIMIZE\nzim constant\n\nDESCRIPTION\nA setting that relates to how stage.update() is used by the components.\nDefault is false which means some components will update the stage automatically:\n\tthe Slider will update the stage so that you can see the knob slide;\n\tthe CheckBox and RadioButtons when checked will update the stage;\n\tthe Tabs change button colors and then update the stage;\n\tclosing of a Pane will update the stage\n\tthe Stepper also updates as does changing color of a button, label, etc.\nHowever, concurrent stage.update() calls can slow down mobile performance.\nSo if you are making content for mobile you should set zim.OPTIMIZE = true;\nThen you will have to stage.update() in the change event handlers\nbut you were probably doing things in these events and updating anyway!\nJust be careful - you might be testing a checkbox and it won't check...\nSo it takes some getting used to running in optimized mode.\n\nEXAMPLE\n// add this to the top of your script\nzim.OPTIMIZE = true;\nvar slider = new zim.Slider();\nslider.center(stage);\n// will not see the slider operate (aside from rolling over button)\n// unless you call stage.update() in the change event\nslider.on(\"change\", function() {\n\t// do your code\n\tstage.update(); // now will see the slider operate\n});\nEND EXAMPLE\n\ncomponents affected by OPTIMIZE:\nLabel, Button, Checkbox, RadioButton, Pane, Stepper, Slider, Tabs\n\nOPTIMIZE set to true also affects the ZIM Ticker\nfor functions like move, animate, drag, Scroller, Parallax\nSee zim.Ticker as you may have to set zim.Ticker.update = true;\n--*///+50.2\nzim.OPTIMIZE = false;\n//-50.2\n\n/*--\nzim.ACTIONEVENT\n\nACTIONEVENT\nzim constant\n\nDESCRIPTION\na setting that specifies the event type to trigger many of the components\ndefault is \"mousedown\" which is more responsive on mobile\nsetting the constant to anything else, will cause the components to use \"click\"\n\nfor instance, with the default settings, the following components will act on mousedown\nCheckBox, RadioButtons, Pane, Stepper and Tabs\n\nEXAMPLE\n// put this at the top of your code\nzim.ACTIONEVENT = \"click\";\nvar checkBox = new zim.CheckBox();\ncheckBox.center(stage);\n// note it now operates on mouseup (click)\n// the default ACTIONEVENT is mousedown\nEND EXAMPLE\n--*///+50.3\nzim.ACTIONEVENT = \"mousedown\";\n//-50.3\n\n/*--\nzim.extend = function(subclass, superclass, override, prefix, prototype)\n\nextend\nzim function - modified CreateJS extend and promote utility methods\n\nDESCRIPTION\nPlace after a sub class to extend a super class.\nExtending a super class means that the sub class receives all the properties and methods of the super class.\nZIM Container() extends a CreateJS Container for instance and then adds more methods and properties\nbut all the CreateJS Container methods and properties are still there too like x, y, addChild(), etc.\n\nNOTE: CreateJS display objects require their constructor to be called otherwise it is like quantum entanglement (seriously)\nzim.extend() adds access to the super class constructor so it can be called in the subclass as follows:\nthis.super_constructor();\nIt also provides access to super class methods that are overridden\n\nEXAMPLE\n// make a Collection class that will extend a zim.Container\n// the Collection class will call the zim.Container constructor\n// and override the the ZIM Container center method in the class body\n// and override the CreateJS Container addChild method in the prototype\n// either method would work in either place - it is often a matter of preference\n// but you might need to use a method in the class body to access local variables\n// The ZIM extend() method parameter values need to change depending on where you override\n// see the comments inline for the instructions\n\nvar Collection = function() {\n\t// for CreateJS the super constructor must be run\n\tthis.super_constructor();\n\n\t// override the zim center() method\n\t// methods in the function call that override must be passed in as an array of strings\n\t// to the override parameter of zim.extend() to be able to access the super_method\n\tthis.center = function(where) {\n\t\tthis.super_center(where);\n\t\tthis.y -= 50;\n\t}\n}\n// override the super class addChild() that comes from the CreateJS Container\n// methods on the prototype that override are automatically provided a super_method\n// unless the prototype parameter of zim.extend() is set to false (default is true)\nCollection.prototype.addChild = function(c) {\n\tthis.super_addChild(c); // call the super class addChild\n\tzog(\"added a child to Collection\");\n}\n\n// make the Collection extend a zim.Container()\n// it will receive all the properties and methods of the zim.Container plus its own\nzim.extend(Collection, zim.Container, \"center\"); // or pass an array of overridden methods\n\n// use the Collection\nvar c = new Collection();\nc.addChild(new zim.Rectangle(100, 100, frame.green)); // zogs \"added a child to Collection\"\nc.center(stage); // centers the collection but then offsets it 50 pixels up\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nsubclass - the class to extend\nsuperclass - the class to extend from (an existing class)\noverride - (default null) an Array of methods (as Strings) to override.\n\tif there is only one method being overridden then a single string is fine (\"test\" or [\"test\"] is fine)\n\tthis list is only needed for methods in the class body\n\tany methods listed here will be given prefix_methodName() access on the sub class (this.prefix_methodName())\n\twhere the prefix is below (note, the prototype setting has no bearing on these manual overrides)\n\tmethods assigned to the prototype of a class and overridden are automatically found\nprefix - (default \"super\") a prefix that will be followed by \"_\" and then the overridden method name\n\tby default this.super_constructor() would call the super class constructor\n\tif prefix is set to \"Person\" then this.Person_constructor() would call the super class constructor\n\tthe same system is used to call overridden files in override or prototype\nprototype - (default true) will search the subclass prototype for overriding methods\n\tthe overridden methods are then available as this.prefix_methodName()\n\tset to false to avoid searching the super class for methods overridden by the sub class prototype\n\tjust quickens the code minutely if there is no need\n\nNOTE: the superclass constructor is always available as this.prefix_constructor() no matter the override or prototype settings\nNOTE: this.prefix_constructor(); should be called at the top of the subclass to avoid problems when multiple copies of object\nNOTE: to extend a class that already extends a ZIM class then change the prefix to a unique name:\n\nEXAMPLE\n// if we already had the Collection example above and we want to extend that\n// then we must use a new prefix when using zim.extend()\n\nvar Records = function() {\n\tthis.Collection_constructor();\n}\nzim.extend(Records, Collection, null, \"Collection\");\n\n// you will still have this.super_center(), this.super_addChild() if needed\n// plus any newly overridden methods available as this.Collection_methodName() etc.\nvar r = new Records();\nr.addChild(new zim.Circle(20, zim.pink));\nr.super_center(stage); // call the original center (without vertical shift)\n\n// to extend again, use yet another prefix - for example: \"Records\"\nvar Jazz = function() {\n\tthis.Records_constructor();\n}\nzim.extend(Jazz, Records, null, \"Records\");\nEND EXAMPLE\n\nNOTE: extend() is included in Distill if Build, Pages or Frame Module classes are used (otherwise NOT included)\n\nRETURNS the subclass\n--*///+50.35\n\tzim.extend = function(subclass, superclass, override, prefix, prototype) {\n\n\t\tvar sig = \"subclass, superclass, override, prefix, prototype\";\n\t\tvar duo; if (duo = zob(zim.extend, arguments, sig)) return duo;\n\n\t\tif (zot(subclass) || zot(superclass)) if (zon) {zog(\"zim.extend() - please supply a class and its superclass\"); return;}\n\t\tif (zot(prefix)) prefix = \"super\";\n\t\tif (zot(override)) override = [];\n\t\tif (!Array.isArray(override)) override = [override];\n\t\tif (zot(prototype)) prototype = true;\n\t\t// modified CreateJS extend() to include any prototype members already added\n\t\t// see http://www.createjs.com/docs/easeljs/classes/Utility%20Methods.html\n\t\tvar existingP = {};\n\t\tfor (var f in subclass.prototype) Object.defineProperty(existingP,f,Object.getOwnPropertyDescriptor(subclass.prototype, f));\n\t\tfunction o() {this.constructor = subclass;}\n\t\to.prototype = superclass.prototype;\n\t\tsubclass.prototype = new o();\n\t\tfor (f in existingP) Object.defineProperty(subclass.prototype,f,Object.getOwnPropertyDescriptor(existingP,f));\n\n\t\t// modified CreateJS promote() to promote methods other than constructor only if methods is true\n\t\t// zim does not override with prototypes so it is uneccessary to loop through the super class methods\n\t\t// added checking an array of string values of methods defined in class (not prototype) that are being overridden\n\t\tvar subP = subclass.prototype, supP = (Object.getPrototypeOf&&Object.getPrototypeOf(subP))||subP.__proto__;\n\t\tif (supP) {\n\t\t\tsubP[(prefix+=\"_\") + \"constructor\"] = supP.constructor; // constructor is not always innumerable\n\t\t\tvar n;\n\t\t\tfor (var i=0; i<override.length; i++) {\n\t\t\t\tn = override[i];\n\t\t\t\tif (typeof supP[n] == \"function\") {subP[prefix + n] = supP[n];}\n\t\t\t}\n\t\t\tif (prototype) {\n\t\t\t\tfor (n in supP) {\n\t\t\t\t\tif (subP.hasOwnProperty(n) && (typeof supP[n] == \"function\")) {subP[prefix + n] = supP[n];}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn subclass;\n\t}\n\t//-50.35\n\n/*--\nzim.addDisplayMembers = function(obj)\n\naddDisplayMembers\nzim function\n\nDESCRIPTION\nFunction to add display methods like drag, hitTests, move, animate, center, etc. to an object.\nAlso adds width, height, widthOnly and heightOnly properties.\nThe term \"members\" is used because we are adding both methods and properties.\nAll the ZIM 4TH display objects come with these members\nBUT... the native CreateJS display objects do not.\nWhen we import assets from Adobe Animate, these are native CreateJS objects.\nSo we can use addDisplayMembers to add these members to a CreateJS Shape, Container, etc.\n\nNOTE: zimify(CreateJSObject); is a global shortcut to zim.addDisplayMembers(CreateJSObject);\n\nZIM uses addDisplayMembers internally to add the members\nto the ZIM shapes and components (Rectangle, Circle, Triangle, Label, Button, etc.)\nas applied through the ZIM Container inheritance\nas well as to the ZIM wrappers for CreateJS Container, Shape, Sprite, MovieClip objects.\nThe display methods call the original ZIM functions\npassing the extra object parameter as the first parameter\nor if DUO is being used then adds the object to the configuration object.\n\nEXAMPLE\nvar shape = new createjs.Shape();\nshape.graphics.beginFill(\"red\").drawRect(0,0,200,200);\nshape.setBounds(0,0,200,200); // need to set bounds to center\nzimify(shape); // add methods like center, drag, etc.\n// shorter version of zim.addDisplayMembers(shape);\nshape.center(stage); // ZIM 4TH method format\nstage.update();\n\n// note: even without using zim.addDisplayMembers()\n// we can use the traditional zim.center() function\nvar shape = new createjs.Shape();\nshape.graphics.beginFill(\"red\").drawRect(0,0,200,200);\nshape.setBounds(0,0,200,200); // need to set bounds to center\nzim.center(shape, stage); // use the zim function rather than the method\nstage.update();\n\n// of course we can just use a zim.Shape\n// then the methods like center, drag, etc. are already added\nvar shape = new zim.Shape(200, 200); // passing params sets bounds\nshape.graphics.beginFill(\"red\").drawRect(0,0,200,200);\nshape.center(stage);\nstage.update();\n\n// in this case, we may have well used a zim.Rectangle ;-)\nvar shape = new zim.Rectangle(200, 200, \"red\");\nshape.center(stage);\nstage.update();\nEND EXAMPLE\n\nPARAMETERS\nobj - the object to add the methods and properties to (probably a CreateJS display object)\n\nRETURNS the object for chaining\n--*///+50.4\n\tzim.displayMethods = {\n\t\tdrag:function(rect, overCursor, dragCursor, currentTarget, swipe, localBounds, onTop, surround, slide, slideDamp, slideSnap, reg, removeTweens) {\n\t\t\tif (isDUO(arguments)) {arguments[0].obj = this; return zim.drag(arguments[0]);}\n\t\t\telse {return zim.drag(this, rect, overCursor, dragCursor, currentTarget, swipe, localBounds, onTop, surround, slide, slideDamp, slideSnap, reg, removeTweens);}\n\t\t},\n\t\tnoDrag:function() {\n\t\t\treturn zim.noDrag(this);\n\t\t},\n\t\tdragRect:function(rect) {\n\t\t\treturn zim.dragRect(this, rect);\n\t\t},\n\t\tsetSwipe:function(swipe) {\n\t\t\treturn zim.setSwipe(this, swipe);\n\t\t},\n\t\thitTestPoint:function(x, y) {\n\t\t\treturn zim.hitTestPoint(this, x, y);\n\t\t},\n\t\thitTestReg:function(b) {\n\t\t\treturn zim.hitTestReg(this, b);\n\t\t},\n\t\thitTestRect:function(b, num) {\n\t\t\treturn zim.hitTestRect(this, b, num);\n\t\t},\n\t\thitTestCircle:function(b, num) {\n\t\t\treturn zim.hitTestCircle(this, b, num);\n\t\t},\n\t\thitTestBounds:function(b, boundsShape) {\n\t\t\treturn zim.hitTestBounds(this, b, boundsShape);\n\t\t},\n\t\tboundsToGlobal:function(rect, flip) {\n\t\t\treturn zim.boundsToGlobal(this, rect, flip);\n\t\t},\n\t\thitTestGrid:function(width, height, cols, rows, x, y, offsetX, offsetY, spacingX, spacingY, local, type) {\n\t\t\treturn zim.hitTestGrid(this, width, height, cols, rows, x, y, offsetX, offsetY, spacingX, spacingY, local, type);\n\t\t},\n\t\tmove:function(x, y, time, ease, call, params, wait, waitedCall, waitedParams, loop, loopCount, loopWait, loopCall, loopParams, loopWaitCall, loopWaitParams, rewind, rewindWait, rewindCall, rewindParams, rewindWaitCall, rewindWaitParams, sequence, sequenceCall, sequenceParams, ticker, props, protect, override, from, id) {\n\t\t\tif (isDUO(arguments)) {arguments[0].target = this; return zim.move(arguments[0]);}\n\t\t\telse {return zim.move(this, x, y, time, ease, call, params, wait, waitedCall, waitedParams, loop, loopCount, loopWait, loopCall, loopParams, loopWaitCall, loopWaitParams, rewind, rewindWait, rewindCall, rewindParams, rewindWaitCall, rewindWaitParams, sequence, sequenceCall, sequenceParams, ticker, props, protect, override, from, id);}\n\t\t},\n\t\tanimate:function(obj, time, ease, call, params, wait, waitedCall, waitedParams, loop, loopCount, loopWait, loopCall, loopParams, loopWaitCall, loopWaitParams, rewind, rewindWait, rewindCall, rewindParams, rewindWaitCall, rewindWaitParams, sequence, sequenceCall, sequenceParams, ticker, props, css, protect, override, from, id) {\n\t\t\tif (isDUO(arguments)) {arguments[0].target = this; return zim.animate(arguments[0]);}\n\t\t\telse {return zim.animate(this, obj, time, ease, call, params, wait, waitedCall, waitedParams, loop, loopCount, loopWait, loopCall, loopParams, loopWaitCall, loopWaitParams, rewind, rewindWait, rewindCall, rewindParams, rewindWaitCall, rewindWaitParams, sequence, sequenceCall, sequenceParams, ticker, props, css, protect, override, from, id);}\n\t\t},\n\t\tpauseZimAnimate:function(){},\n\t\tstopZimAnimate:function(){},\n\t\twiggle:function(property, baseAmount, minAmount, maxAmount, minTime, maxTime, type, ease, integer, id) {\n\t\t\tif (isDUO(arguments)) {arguments[0].target = this; return zim.wiggle(arguments[0]);}\n\t\t\telse {return zim.wiggle(this, property, baseAmount, minAmount, maxAmount, minTime, maxTime, type, ease, integer, id);}\n\t\t},\n\t\tloop:function(call, reverse, step, start, end) {\n\t\t\treturn zim.loop(this, call, reverse, step, start, end);\n\t\t},\n\t\tcopyMatrix:function(source) {\n\t\t\treturn zim.copyMatrix(this, source);\n\t\t},\n\t\tpos:function(x, y) {\n\t\t\treturn zim.pos(this, x, y);\n\t\t},\n\t\tmov:function(x, y) {\n\t\t\treturn zim.mov(this, x, y);\n\t\t},\n\t\talp:function(alpha) {\n\t\t\treturn zim.alp(this, alpha);\n\t\t},\n\t\trot:function(rotation) {\n\t\t\treturn zim.rot(this, rotation);\n\t\t},\n\t\tsiz:function(width, height, only) {\n\t\t\treturn zim.siz(this, width, height, only);\n\t\t},\n\t\tske:function(skewX, skewY) {\n\t\t\treturn zim.ske(this, skewX, skewY);\n\t\t},\n\t\treg:function(regX, regY) {\n\t\t\treturn zim.reg(this, regX, regY);\n\t\t},\n\t\tsca:function(scale, scaleY) {\n\t\t\treturn zim.sca(this, scale, scaleY);\n\t\t},\n\t\tscale:function(scale, scaleY) {\n\t\t\treturn zim.scale(this, scale, scaleY);\n\t\t},\n\t\tscaleTo:function(boundObj, percentX, percentY, type, boundsOnly) {\n\t\t\tif (isDUO(arguments)) {arguments[0].obj = this; return zim.scaleTo(arguments[0]);}\n\t\t\telse {return zim.scaleTo(this, boundObj, percentX, percentY, type, boundsOnly);}\n\t\t},\n\t\tfit:function(left, top, width, height, inside) {\n\t\t\tif (isDUO(arguments)) {arguments[0].obj = this; return zim.fit(arguments[0]);}\n\t\t\telse {return zim.fit(this, left, top, width, height, inside);}\n\t\t},\n\t\toutline:function(color, size) {\n\t\t\tif (isDUO(arguments)) {arguments[0].obj = this; return zim.outline(arguments[0]);}\n\t\t\telse {return zim.outline(this, color, size);}\n\t\t},\n\t\taddTo:function(container, index) {\n\t\t\treturn zim.addTo(this, container, index);\n\t\t},\n\t\tremoveFrom:function(container) {\n\t\t\treturn zim.removeFrom(this, container);\n\t\t},\n\t\tadded:function(call, interval, maxTime) {\n\t\t\treturn zim.added(this, call, interval, maxTime);\n\t\t},\n\t\tcenterReg:function(container, add, index) {\n\t\t\tif (isDUO(arguments)) {arguments[0].obj = this; return zim.centerReg(arguments[0]);}\n\t\t\telse {return zim.centerReg(this, container, add, index);}\n\t\t},\n\t\tcenter:function(container, add, index) {\n\t\t\tif (isDUO(arguments)) {arguments[0].obj = this; return zim.center(arguments[0]);}\n\t\t\telse {return zim.center(this, container, add, index);}\n\t\t},\n\t\tplace:function(id) {\n\t\t\treturn zim.place(this, id);\n\t\t},\n\t\tplaceReg:function(id) {\n\t\t\treturn zim.placeReg(this, id);\n\t\t},\n\t\texpand:function(padding, paddingVertical) {\n\t\t\treturn zim.expand(this, padding, paddingVertical);\n\t\t},\n\t\tsetMask:function(mask) {\n\t\t\treturn zim.setMask(this, mask);\n\t\t},\n\t\tcloneProps:function(clone) { // from CreateJS DisplayObject\n\t\t\tclone.alpha = this.alpha;\n\t\t\tclone.rotation = this.rotation;\n\t\t\tclone.mouseEnabled = this.mouseEnabled;\n\t\t\tclone.tickEnabled = this.tickEnabled;\n\t\t\tclone.name = this.name;\n\t\t\tclone.regX = this.regX;\n\t\t\tclone.regY = this.regY;\n\t\t\tclone.visible = this.visible;\n\t\t\tclone.shadow = this.shadow;\n\t\t\tzim.copyMatrix(clone, this);\n\t\t\tclone.compositeOperation = this.compositeOperation;\n\t\t\tclone.snapToPixel = this.snapToPixel;\n\t\t\tclone.filters = this.filters==null?null:this.filters.slice(0);\n\t\t\tclone.mask = this.mask;\n\t\t\tclone.hitArea = this.hitArea;\n\t\t\tclone.cursor = this.cursor;\n\t\t\tclone._bounds = this._bounds;\n\t\t\treturn clone;\n\t\t},\n\t\tcloneChildren:function(clone) {\n\t\t\tif (clone.children.length) clone.removeAllChildren();\n\t\t\tvar arr = clone.children;\n\t\t\tfor (var i=0, l=this.children.length; i<l; i++) {\n\t\t\t\tvar childClone = this.children[i].clone();\n\t\t\t\tchildClone.parent = clone;\n\t\t\t\tarr.push(childClone);\n\t\t\t}\n\t\t\treturn clone;\n\t\t}\n\t}\n\n\tzim.addDisplayMembers = function(obj) {\n\t\tz_d(\"50.4\");\n\t\tfor (var i in zim.displayMethods) {\n\t\t\tif (zim.displayMethods.hasOwnProperty(i)) {\n\t\t\t\tobj[i] = zim.displayMethods[i];\n\t\t\t}\n\t\t}\n\t\tObject.defineProperty(obj, 'width', {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\t// that.setBounds(null);\n\t\t\t\tvar b = this.getBounds();\n\t\t\t\treturn (zot(b))?null:b.width*this.scaleX;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tvar b = this.getBounds();\n\t\t\t\tif (zot(b) || b.width==0) {zog(\"width needs bounds set with setBounds()\"); return;}\n\t\t\t\tvar s = value/b.width;\n\t\t\t\tthis.scaleX = this.scaleY = s;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(obj, 'height', {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\t// that.setBounds(null);\n\t\t\t\tvar b = this.getBounds();\n\t\t\t\treturn (zot(b))?null:b.height*this.scaleY;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tvar b = this.getBounds();\n\t\t\t\tif (zot(b) || b.height==0) {zog(\"height needs bounds set with setBounds()\"); return;}\n\t\t\t\tvar s = value/b.height;\n\t\t\t\tthis.scaleX = this.scaleY = s;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(obj, 'widthOnly', {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\t// that.setBounds(null);\n\t\t\t\tvar b = this.getBounds();\n\t\t\t\treturn (zot(b))?null:b.width*this.scaleX;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tvar b = this.getBounds();\n\t\t\t\tif (zot(b) || b.width==0) {zog(\"widthOnly needs bounds set with setBounds()\"); return;}\n\t\t\t\tvar s = value/b.width;\n\t\t\t\tthis.scaleX = s;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(obj, 'heightOnly', {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\t// that.setBounds(null);\n\t\t\t\tvar b = this.getBounds();\n\t\t\t\treturn (zot(b))?null:b.height*this.scaleY;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tvar b = this.getBounds();\n\t\t\t\tif (zot(b) || b.height==0) {zog(\"heightOnly needs bounds set with setBounds()\"); return;}\n\t\t\t\tvar s = value/b.height;\n\t\t\t\tthis.scaleY = s;\n\t\t\t}\n\t\t});\n\t\treturn obj;\n\t}//-50.4\n\n/*--\nzim.Container = function(width||boundsX, height||boundsY, null||width, null||height)\n\nContainer\nzim class - extends a createjs.Container\n\nDESCRIPTION\nA Container object is used to hold other display objects or other containers.\nYou can then move or scale the container and all objects inside will move or scale.\nYou can apply an event on a container and use the target property of the event object\nto access the object in the container that caused the event\nor use the currentTarget property of the event object to access the container itself.\nContainers do not have bounds unless some items in the container have bounds -\nat which point the bounds are the combination of the bounds of the objects with bounds.\nYou can manually set the bounds with setBounds(x,y,w,h) - read the CreateJS docs.\nOr pass in width and height, or boundsX, boundsY, width, height to have zim.Container set bounds\nManually set bounds will not update automatically unless you setBounds(null).\n\nNOTE: All the ZIM shapes and components extend the zim.Container.\nThis means all shapes and components inherit the methods and properties below\nand indeed, the zim.Container inherits all the createjs.Container methods and properties.\nSee the CreateJS documentation for x, y, alpha, rotation, on(), addChild(), etc.\n\nEXAMPLE\nvar container = new zim.Container();\nstage.addChild(container);\ncontainer.x = 100; container.y = 100;\n\nvar rect = new zim.Rectangle(100, 100, \"blue\");\ncontainer.addChild(rect); // add rectangle to container\nvar circle = new zim.Circle(40, \"red\");\ncircle.center(container) // add the circle to the container and center\n\ncontainer.drag(); // will drag either the rectangle or the circle\ncontainer.drag({currentTarget:true}); // will drag both the rectangle and the circle\n\n// below will reduce the alpha of the object in the container that was clicked (target)\ncontainer.on(\"click\" function(e) {e.target.alpha = .5; stage.update();})\n// below will reduce the alpha of all the objects in the container (currentTarget)\ncontainer.on(\"click\" function(e) {e.currentTarget.alpha = .5; stage.update();})\nEND EXAMPLE\n\nPARAMETERS\nwidth - (default null) the width of the container\nheight - (default width) the height of the container\n\tif there is a width supplied but no height then the height is set to the width\n\tsetting these run container.setBounds(boundsX,boundsY,width,height);\n\tyou should be able to container.setBounds(null) to go back to auto calculation\n\tbut there is currently a bug in CreateJS - it will be fixed\n\tso for now, if you ever want to auto calculate, do not set width and height\n\nOR if four parameters are set:\nboundsX - (default 0) the x of the bounds\nboundsY - (default 0) the y of the bounds\nwidth - (default null) the width of the container\nheight - (default width) the height of the container\n\tif there is a width supplied but no height then the height is set to the width\n\tsetting these run container.setBounds(boundsX,boundsY,width,height);\n\tyou should be able to container.setBounds(null) to go back to auto calculation\n\tbut there is currently a bug in CreateJS - it will be fixed\n\tso for now, if you ever want to auto calculate, do not set width and height\n\n**** this class has all the DISPLAY METHODS introduced in ZIM 4TH\n**** the methods below are available in ZIM Rectangle, Circle, Triangle\n**** as well as all components like: Label, Button, Slider, Dial, Tab, Pane, etc.\n**** as well as the ZIM display wrappers: Container, Shape, Sprite, MovieClip and Bitmap\n**** the addition of methods and display wrappers added 3.4K to the file size\n\nMETHODS\n* see the ZIM Create Module functions for full documentation\n* see the USAGE section that follows this list of methods\n* most methods accept ZIM DUO (except for 0 or 1 parameter functions like the hitTests)\n\ndrag(rect, overCursor, dragCursor, currentTarget, swipe, localBounds, onTop, surround, slide, slideDamp, slideSnap, reg, removeTweens)\nnoDrag()\ndragRect(rect)\nsetSwipe(swipe)\nhitTestPoint(x, y)\nhitTestReg(b)\nhitTestRect(b, num)\nhitTestCircle(b, num)\nhitTestBounds(b, boundsShape)\nboundsToGlobal(rect, flip)\nhitTestGrid(width, height, cols, rows, x, y, offsetX, offsetY, spacingX, spacingY, local, type)\nmove(target, x, y, time, ease, call, params, wait, loop, loopCount, loopWait, loopCall, loopParams, loopWaitCall, loopWaitParams, rewind, rewindWait, rewindCall, rewindWaitCall, rewindWaitParams, rewindParams, sequence, sequenceCall, sequenceParams, props, protect, override, from, id)\nanimate(target, obj, time, ease, call, params, wait, loop, loopCount, loopWait, loopCall, loopParams, loopWaitCall, loopWaitParams, rewind, rewindWait, rewindCall, rewindWaitCall, rewindWaitParams, rewindParams, sequence, sequenceCall, sequenceParams, props, css, protect, override, from, id)\nloop(call, reverse, step, start, end)\nwiggle(target, property, baseAmount, minAmount, maxAmount, minTime, maxTime, ease, integer, id)\ncopyMatrix(source)\npos(x, y)\nalp(alpha)\nrot(rotation)\nscale(scale)\nscaleTo(boundObj, percentX, percentY, type, boundsOnly)\nfit(left, top, width, height, inside)\noutline(color, size)\naddTo(container, index)\nremoveFrom(container)\nadded()\ncenterReg(container, add, index)\ncenter(container, add, index)\nplace(id)\nplaceReg(id)\nexpand(padding, paddingVertical)\nsetMask(mask)\n\nUSAGE\nthe above list of methods work on all objects that extend zim.Container\nsuch as ZIM shapes and components (Label, Button, Slider, Dial, etc.)\nalso other ZIM display objects can use these methods (Shape, Bitmap, MovieClip, Sprite)\n\nEXAMPLE\nvar circle = new zim.Circle();\ncircle.center(stage); // add circle to stage and center\ncircle.drag();\n\n// alternatively, we can still use the traditional ZIM functions:\nzim.center(circle, stage);\nzim.drag(circle);\n\n// ZIM DUO works the same way as before - eg.\ncircle.drag({slide:true});\nEND EXAMPLE\n\nMETHODS, CONT'D\nclone() - clones all the container, its properties and all its children\n\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nPROPERTIES\n** bounds must be set first (or width and height parameters set) for these to work\n** setting these adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nEVENTS\nSee the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+50.5\nzim.Container = function(a, b, c, d) {\n\t\tz_d(\"50.5\");\n\t\tthis.cjsContainer_constructor();\n\t\tif (!zot(c)) {\n\t\t\tvar boundsX = a;\n\t\t\tvar width = c;\n\t\t\tvar boundsY = b;\n\t\t\tvar height = d;\n\t\t} else {\n\t\t\tvar boundsX = 0;\n\t\t\tvar width = a;\n\t\t\tvar boundsY = 0;\n\t\t\tvar height = b;\n\t\t}\n\t\tif (zot(height)) height = width;\n\t\tif (!zot(a)) this.setBounds(boundsX,boundsY,width,height);\n\t\tthis.clone = function() {\n\t\t\treturn this.cloneChildren(this.cloneProps(new zim.Container(boundsX, boundsY, width, height)));\n\t\t}\n\t}\n\tzim.addDisplayMembers(zim.Container.prototype);\n\tzim.extend(zim.Container, createjs.Container, \"clone\", \"cjsContainer\", false);\n\n\t//-50.5\n\n/*--\nzim.Shape = function(width||boundsX, height||boundsY, null||width, null||height, graphics)\n\nShape\nzim class - extends a createjs.Shape\n\nDESCRIPTION\nZIM Shape lets you draw dynamic shapes beyond the ZIM provided shapes.\nYou make a new shape object and then draw in its graphics property\nusing similar commands to the HTML Canvas commands (and Flash Bitmap drawing).\nSee the CreateJS Easel Shapes and Graphics docs:\nhttp://www.createjs.com/docs/easeljs/classes/Graphics.html\n\nEXAMPLE\nvar shape = new zim.Shape();\nshape.graphics.fill(\"red\").drawRect(0,0,200,100);\n// similar to zim.Rectangle(200, 100, \"Red\");\n\n// we can draw lines, etc.\nvar g = shape.graphics; // shorter reference to graphics object\ng.stroke(\"blue\").moveTo(200,200).lineTo(300,300);\n\n// we can continue to draw as much as we want in the same shape\n// there is also a tiny API with shortcuts: stroke, fill, etc.\ng.s(\"green\").f(\"red\").mt(500,500).qt(550,500,600,500);\nEND EXAMPLE\n\nPARAMETERS\nwidth - (default null) the width of the shape\nheight - (default width) the height of the shape\n\tif there is a width supplied but no height then the height is set to the width\n\tsetting these run container.setBounds(0,0,width,height);\n\tyou should be able to container.setBounds(null) to go back to auto calculation\n\tbut there is currently a bug in CreateJS - it will be fixed\n\tso for now, if you ever want to auto calculate, do not set width and height\n\nOR if four parameters are set:\nboundsX - (default 0) the x of the bounds\nboundsY - (default 0) the y of the bounds\nwidth - (default null) the width of the shape\nheight - (default width) the height of the shape\n\tif there is a width supplied but no height then the height is set to the width\n\tsetting these run shape.setBounds(boundsX,boundsY,width,height);\n\tyou should be able to shape.setBounds(null) to go back to auto calculation\n\tbut there is currently a bug in CreateJS - it will be fixed\n\tso for now, if you ever want to auto calculate, do not set width and height\n\ngraphics - (default null) a CreateJS Graphics instance (see CreateJS docs)\n\tor just use the graphics property of the shape object (like usual)\n\nMETHODS\nclone(recursive) - makes a copy of the shape\n\trecursive defaults to true so copy will have own copy of graphics\n\tset recursive to false to have clone share graphic property\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), placeReg(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nPROPERTIES\n** bounds must be set first (or width and height parameters set) for these to work\n** setting these adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\n\nALSO: See the CreateJS Easel Docs for Shape properties, such as:\ngraphics, x, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseEnabled, compositeOperation, etc.\n\nEVENTS\nSee the CreateJS Easel Docs for Shape events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+50.6\n\tzim.Shape = function(a, b, c, d, graphics) {\n\t\tz_d(\"50.6\");\n\t\tthis.cjsShape_constructor(graphics);\n\t\tvar that = this;\n\t\tif (!zot(c)) {\n\t\t\tvar boundsX = a;\n\t\t\tvar width = c;\n\t\t\tvar boundsY = b;\n\t\t\tvar height = d;\n\t\t} else {\n\t\t\tvar boundsX = 0;\n\t\t\tvar width = a;\n\t\t\tvar boundsY = 0;\n\t\t\tvar height = b;\n\t\t}\n\t\tif (zot(height)) height = width;\n\t\tif (!zot(a)) this.setBounds(boundsX,boundsY,width,height);\n\n\t\tthis.clone = function(recursive) {\n\t\t\tif (zot(recursive)) recursive = true;\n\t\t\tvar c = that.cloneProps(new zim.Shape(width, height, boundsX, boundsY, graphics));\n\t\t\tif (recursive) c.graphics = that.graphics.clone();\n\t\t\telse c.graphics = that.graphics;\n\t\t\treturn c;\n\t\t}\n\t}\n\tzim.extend(zim.Shape, createjs.Shape, \"clone\", \"cjsShape\", false);\n\tzim.addDisplayMembers(zim.Shape.prototype);\n\t//-50.6\n\n/*--\nzim.Bitmap = function(image, id)\n\nBitmap\nzim class - extends a createjs.Bitmap\n\nDESCRIPTION\nMakes a Bitmap object from an image.\nIt is best to use the loadAssets() method of ZIM Frame\nto preload the image and then use the asset() method to access the Bitmap.\nSee the ZIM Frame class and asset example on the ZIM Frame page of templates.\n\nEXAMPLE\nvar frame = new zim.Frame();\nframe.on(\"ready\", function() {\n\tvar stage = frame.stage;\n\tframe.loadAssets(\"logo.jpg\");\n\tframe.on(\"complete\", function() {\n\t\tvar logo = frame.asset(\"logo.jpg\"); // logo is a zim.Bitmap\n\t\tlogo.center(stage);\n\t\tstage.update();\n\t});\n});\nEND EXAMPLE\n\nPARAMETERS\nimage - an HTML image URL (may not load right away - see zim.Frame loadAssets)\nid - an optional id\n\nMETHODS\nclone() - makes a copy with properties such as x, y, etc. also copied\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Bitmap methods, such as:\non(), off(), getBounds(), setBounds(), dispatchEvent(), etc.\n\nPROPERTIES\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\nid - the filename used in the frame.loadAssets()\n\tif you add the path the file name then it will be included with the id\n\tif you add the path with the path parameter, it will not be included with the id\n\nALSO: See the CreateJS Easel Docs for Bitmap properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseEnabled, compositeOperation, etc.\n\nEVENTS\nSee the CreateJS Easel Docs for Bitmap events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+50.7\n\tzim.Bitmap = function(image, id) {\n\t\tz_d(\"50.7\");\n\t\tthis.cjsBitmap_constructor(image);\n\t\tthis.id = id;\n\t\tthis.clone = function() {\n\t\t\treturn this.cloneProps(new zim.Bitmap(image, id));\n\t\t}\n\t}\n\tzim.extend(zim.Bitmap, createjs.Bitmap, \"clone\", \"cjsBitmap\", false);\n\tzim.addDisplayMembers(zim.Bitmap.prototype);\n\t//-50.7\n\n/*--\nzim.Sprite = function(image, cols, rows, count, offsetX, offsetY, spacingX, spacingY, width, height, animations, json, id, globalControl, spriteSheet)\n\nSprite\nzim class - extends a createjs.Sprite\n\nDESCRIPTION\nA Sprite plays an animation of a spritesheet\nwhich is a set of images layed out in one file.\nYou play the Sprite with the run() method.\nThis animates the Sprite over a given time\nwith various features like playing a labelled animation,\nplaying animation series,\nSEE: http://zimjs.com/code/spritesheet/index.html\nAND: http://zimjs.com/code/spritesheet/skateboard.html\nwait, loop, rewind and call functions.\nThis actually runs a ZIM animation and animates the frames.\n\nNOTE: A ZIM Sprite handles an evenly tiled spritesheet.\nFor an un-evenly tiled spritesheet use the json parameter\nwhich loads a CreateJS SpriteSheet.\nThe json can come from TexturePacker for instance exported for EaselJS/CreateJS\nCreateJS Easel Sprite and SpriteSheet docs:\nhttp://www.createjs.com/docs/easeljs/classes/Sprite.html\nhttp://www.createjs.com/docs/easeljs/classes/SpriteSheet.html\nYou can optionally pass in JSON data for a createjs.SpriteSheet as a parameter.\nWhen you do so, all other parameters are ignored.\n\nNOTE: You can use CreateJS gotoAndPlay(), play(), etc.\nbut we found the framerate could not be kept\nwith other animations or Ticker events running.\nSo we recommend using the ZIM Sprite run() method.\n\nNOTE: The run() method handles single frame and consecutive labels\nbut does not handle non-consective frame labels or nested labels.\nrun() can however play series of labels.\n\nEXAMPLE\n// inside zim.Frame template\n// boom.png is a sprite sheet found online\n// It has 8 columns and 6 rows that we can visually count\n// We can enter a total parameter if it does not end evenly in the grid\n// A graphics editor (like Photoshop) could be used to see\n// if there is an offset or spacing, etc. and enter those as parameters\n// In this case, we do not need to do any of this - just enter the cols and rows\n\nframe.on(\"complete\", function() {\n\tvar spriteImage = frame.asset(\"boom.png\");\n\n\tvar animation = new zim.Sprite({\n\t\timage:spriteImage,\n\t\tcols:8,\n\t\trows:6,\n\t\tanimations:{mid:[10,20], end:[30,40]} // optional animations with labels\n\t});\n\tanimation.center(stage);\n\tanimation.run(2000); // plays the frames of the Sprite over 2 seconds (master time)\n\n\t// OR use the label to play the frames listed in animations parameter\n\tanimation.run(1000, \"mid\");\n\n\t// OR run a series of animations\n\t// by passing an array of label objects to the label parameter\n\t// these each have a time so the master time is ignored\n\t// they can also have any of the run() parameters\n\t// if you provide an array of labels, you cannot rewind the overall animation\n\tanimation.run(null, [\n\t\t{label:\"mid\", time:1000},\n\t\t{label:\"end\", time:500, loop:true, loopCount:5, call:function(){zog(\"loops done\");}},\n\t\t{startFrame:10, endFrame:20, time:1000}\n\t]);\n\n\t// OR can call a function when done\n\tanimation.run(1000, \"mid\", function(){\n\t\tstage.removeChild(animation);\n\t\tstage.update();\n\t});\n\n\t// OR can loop the animation\n\tanimation.run({time:2000, loop:true}); // see run() parameters for more\n});\nEND EXAMPLE\n\nEXAMPLE\n// Here is an example with CreateJS SpriteSheet data\n// robot.png is a sprite sheet made by ZOE based on a Flash swf\n// you can also make your own with Photoshop or Texture Packer\n\nframe.loadAssets(\"robot.png\");\nframe.on(\"complete\", function() {\n\n\t// using ZOE to export swf animation to spritesheet data\n\t// spritesheet data uses the image name, not the Bitmap itself\n\tvar image = frame.asset(\"robot.png\").image;\n\tvar spriteData = {\n\t\t\"framerate\":24,\n\t\t\"images\":[image],\n\t\t\"frames\":[[0, 0, 256, 256, 0, -54, -10], many more - etc.],\n\t\t\"animations\":{}\n\t};\n\tvar animation = new zim.Sprite({json:spriteData});\n\tanimation.center(stage);\n\tanimation.run(2000); // note, duration alternative to framerate\n});\n\nOR\n// load in data from externa JSON\nframe.loadAssets([\"robot.json\", \"robot.png\"]);\n// ... same as before\nvar animation = new zim.Sprite({json:frame.asset(\"robot.json\")});\n// ... same as before\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nimage - the ZIM Bitmap for the spritesheet\ncols - (default 1) - the columns in the spritesheet\nrows - (default 1) the rows in the spritesheet\ncount - (default cols*rows) how many total frames in the spritesheet\noffsetX - (default 0) the pixels from the left edge to the frames\noffsetY - (default 0) the pixels from the top edge to the frames\nspacingX - (default 0) the horizontal spacing between the frames\nspacingY - (default 0) the vertical spacing between the frames\nwidth - (default image width) the width including offset and spacing for frames\nheight - (default image height) the height including offset and spacing for frames\nanimations - (default null) an object literal of labels holding frames to play\n\t{label:3, another:[4,10]}\n\trun(1000, \"label\") would play frame 3 for a second\n\trun(1000, \"another\") would play frames 4 to 10 for a second\n\tYou can combine play with the wait parameter:\n\trun(1000, \"label\").run({time:1000, label:\"another\", wait:1000});\njson - (default null) a JSON string for a CreateJS SpriteSheet\n\tIf you pass in a json parameter, all other parameters are ignored\nid - (default randomly assigned) an id you can use in other animations - available as sprite.id\n\tuse this id in other animations for pauseRun and stopRun to act on these as well\nglobalControl - (default true) pauseRun and stopRun will control other animations with same id\nspriteSheet - (default null) pass in a CreateJS SpriteSheet to build a Sprite from that\n\nMETHODS\ntime, label, call, params, wait, waitedCall, waitedParams, loop, loopCount, loopWait, loopCall, loopParams, loopWaitCall, loopWaitParams, rewind, rewindWait, rewindCall, rewindParams, rewindWaitCall, rewindWaitParams, startFrame, endFrame, tweek, id, globalControl\nrun(time, label, call, params, wait, waitedCall, waitedParams, loop, loopCount, loopWait, loopCall, loopParams, loopWaitCall, loopWaitParams, rewind, rewindWait, rewindCall, rewindWaitCall, rewindWaitParams, startFrame, endFrame, spriteID)\n\tThe run() method animates the Sprite over an amount of time\n\tWould recommend this method over the CreateJS play() and gotoAndPlay()\n\tmethods because the framerate for these get overwritten by other stage.update() calls\n\tWith run() you get other nice ZIM animate features as well as follows:\n\tReturns the object for chaining\n\tCan be paused with pauseZimAnimate(true) or unpaused with pauseZimAnimate(false)\n\tCan be stopped with stopZimAnimate() on the Sprite\n\tsupports DUO - parameters or single object with properties below\n\ttime (default 1) - the time in milliseconds to run the animations (the master time)\n\tlabel (default null) - a label specified in the Sprite animations parameter\n\t\tif this is an array holding label objects for example:\n\t\t[{label:\"run\", time:1000}, {label:\"stand\", time:2000}]\n\t\tthen the sprite will play the series with the times given and ignore the master time\n\t\tNote: if any of the series has a loop and loops forever (a loopCount of 0 or no loopCount)\n\t\tthen this will be the last of the series to run\n\tcall - (default null) the function to call when the animation is done\n\tparams - (default target) a single parameter for the call function (eg. use object literal or array)\n\twait - (default 0) milliseconds to wait before doing animation\n\twaitedCall - (default null) call the function after a wait time if there is one\n\twaitedParams - (default null) parameters to pass to the waitedCall function\n\tloop - (default false) set to true to loop animation\n\tloopCount - (default 0) if loop is true how many times it will loop (0 is forever)\n\tloopWait - (default 0) milliseconds to wait before looping (post animation wait)\n\tloopCall - (default null) calls function after loop and loopWait (not including last loop)\n\tloopParams - (default target) parameters to send loopCall function\n\tloopWaitCall - (default null) calls function after at the start of loopWait\n\tloopWaitParams - (default target) parameters to send loopWaitCall function\n\trewind - (default false) set to true to rewind (reverse) animation (doubles animation time)\n\trewindWait (default 0) milliseconds to wait in the middle of the rewind\n\trewindCall (default null) calls function at middle of rewind after rewindWait\n\trewindParams - (default target) parameters to send rewindCall function\n\trewindWaitCall (default null) calls function at middle of rewind before rewindWait\n\trewindWaitParams - (default target) parameters to send rewindCall function\n\tstartFrame - (default null - or 0) the frame to start on - will be overridden by a label with frames\n\tendFrame - (default null - or totalFrames) the frame to end on - will be overridden by a label with frames\n\ttweek - (default 1) a factor for extra time on rewind and loops if needed\n\tid - (default randomly assigned) an id you can use in other animations - available as sprite.id\n\t\tuse this id in other animations for pauseRun and stopRun to act on these as well\n\tglobalControl - (default true) pauseRun and stopRun will control other animations with same id\npauseRun(state) - pause or unpause the animation (including an animation series)\n\tstate - (default true) when true the animation is paused - set to false to unpause\nstopRun() - stop the sprite from animating\nclone() - makes a copy with properties such as x, y, etc. also copied\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Sprite methods, such as:\nplay(), gotoAndPlay(), gotoAndStop(), stop(), advance(),\non(), off(), getBounds(), setBounds(), dispatchEvent(), etc.\n\nPROPERTIES\nid - an id that you can use in other animations to also be controlled by pauseRun() and stopRun()\nframe - get and set the current frame of the Sprite\ntotalFrames - get the total frames of the Sprite - read only\nanimations - the animations data with labels of frames to animate\nrunning - is the sprite animation being run (includes both paused and unpaused) - read only\nrunPaused - is the sprite animation paused (also returns paused if not running) - read only\n\tnote: this only syncs to pauseRun() and stopRun() not pauseZimAnimate() and stopZimAnimate()\n\tnote: CreateJS has paused, etc. but use that only if running the CreateJS methods\n\tsuch as gotoAndPlay(), gotoAndStop(), play(), stop()\n** bounds must be set first for these to work\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\n\nALSO: See the CreateJS Easel Docs for Sprite properties, such as:\ncurrentFrame, framerate, paused, currentAnimation, currentAnimationFrame, spriteSheet,\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseEnabled, compositeOperation, etc.\n\nEVENTS\nSee the CreateJS Easel Docs for Sprite events, such as:\nanimationend, change, added, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+50.8\n\tzim.Sprite = function(image, cols, rows, count, offsetX, offsetY, spacingX, spacingY, width, height, animations, json, id, globalControl, spriteSheet) {\n\t\tvar sig = \"image, cols, rows, count, offsetX, offsetY, spacingX, spacingY, width, height, animations, json, id, globalControl, spriteSheet\";\n\t\tvar duo; if (duo = zob(zim.Sprite, arguments, sig, this)) return duo;\n\n\t\tz_d(\"50.8\");\n\n\t\tvar that = this;\n\t\tvar sheet;\n\t\tif (zot(json) && !zot(image)) {\n\t\t\tif (zot(cols)) cols = 1;\n\t\t\tif (zot(rows)) rows = 1;\n\t\t\tif (zot(count)) count = cols * rows;\n\t\t\tif (zot(offsetX)) offsetX = 0;\n\t\t\tif (zot(offsetY)) offsetY = 0;\n\t\t\tif (zot(spacingX)) spacingX = 0;\n\t\t\tif (zot(spacingY)) spacingY = 0;\n\t\t\tif (zot(width)) width = image.width;\n\t\t\tif (zot(height)) height = image.height;\n\n\t\t\tvar frameW = (width-offsetX+spacingX) / cols - spacingX;\n\t\t\tvar frameH = (height-offsetY+spacingY) / rows - spacingY;\n\t\t\tvar frames = [];\n\t\t\tvar num = 0;\n\t\t\touter:\n\t\t\tfor (var j=0; j<rows; j++) {\n\t\t\t\tfor (var i=0; i<cols; i++) {\n\t\t\t\t\tif (++num > count) break outer;\n\t\t\t\t\tframes.push([\n\t\t\t\t\t\toffsetX + i*(frameW+spacingX),\n\t\t\t\t\t\toffsetY + j*(frameH+spacingY),\n\t\t\t\t\t\tframeW,\n\t\t\t\t\t\tframeH\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar spriteData = {\n\t\t\t\timages:[image.image], // note, this takes the image, not the Bitmap\n\t\t\t\tframes:frames,\n\t\t\t\tanimations:animations\n\t\t\t};\n\t\t\tsheet = new createjs.SpriteSheet(spriteData);\n\t\t} else if (spriteSheet) {\n\t\t\tsheet = spriteSheet;\n\t\t\tanimations = sheet.animations;\n\t\t} else {\n\t\t\tanimations = json.animations;\n\t\t\tsheet = new createjs.SpriteSheet(json);\n\t\t}\n\t\tthis.animations = animations;\n\t\tthis.cjsSprite_constructor(sheet);\n\n\t\tif (zot(id)) id = zim.makeID();\n\t\tthis.id = id;\n\n\t\tif (zot(globalControl)) globalControl = true;\n\t\tthat.globalControl = globalControl;\n\n\t\tthis.parseFrames = function(label, startFrame, endFrame) {\n\t\t\tvar frames = [];\n\t\t\tif (zot(label)) {\n\t\t\t\tif (zot(startFrame)) startFrame = 0;\n\t\t\t\tif (zot(endFrame)) endFrame = that.totalFrames-1;\n\t\t\t\taddSequential(startFrame, endFrame);\n\t\t\t} else {\n\t\t\t\tif (zot(that.animations) || zot(that.animations[label])) return [];\n\t\t\t\tvar a = that.animations[label];\n\t\t\t\tprocessAnimation(a);\n\t\t\t}\n\t\t\tfunction processAnimation(a) {\n\t\t\t\tif (Array.isArray(a)) {\n\t\t\t\t\tprocessArray(a);\n\t\t\t\t} else if (a.constructor == {}.constructor) {\n\t\t\t\t\tprocessObject(a);\n\t\t\t\t} else if (!isNaN(a)) {\n\t\t\t\t\tframes.push({f:Math.floor(a), s:1});\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction processArray(a) {\n\t\t\t\taddSequential(a[0], a[1], a[3]);\n\t\t\t\tif (a[2] && !zot(that.animations[a[2]])) processAnimation(that.animations[a[2]]);\n\t\t\t}\n\t\t\tfunction processObject(a) {\n\t\t\t\tif (zot(a.frames)) return;\n\t\t\t\tif (zot(a.speed)) a.speed = 1;\n\t\t\t\tfor (var i=0; i<a.frames.length; i++) {\n\t\t\t\t\tframes.push({f:a.frames[i], s:a.speed});\n\t\t\t\t}\n\t\t\t\tif (a.next && !zot(that.animations[a.next])) processAnimation(that.animations[a.next]);\n\t\t\t}\n\t\t\tfunction addSequential(start, end, speed) {\n\t\t\t\tif (zot(speed)) speed = 1;\n\t\t\t\tfor (var i=start; i<=end; i++) {\n\t\t\t\t\tframes.push({f:i, s:speed});\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn frames;\n\t\t}\n\n\t\tthis.run = function(time, label, call, params, wait, waitedCall, waitedParams, loop, loopCount, loopWait, loopCall, loopParams, loopWaitCall, loopWaitParams, rewind, rewindWait, rewindCall, rewindParams, rewindWaitCall, rewindWaitParams, startFrame, endFrame, tweek, id, globalControl) {\n\t\t\tvar sig = \"time, label, call, params, wait, waitedCall, waitedParams, loop, loopCount, loopWait, loopCall, loopParams, loopWaitCall, loopWaitParams, rewind, rewindWait, rewindCall, rewindParams, rewindWaitCall, rewindWaitParams, startFrame, endFrame, tweek, id, globalControl\";\n\t\t\tvar duo; if (duo = zob(this.run, arguments, sig)) return duo;\n\n\t\t\tvar obj;\n\t\t\tvar set;\n\t\t\tif (zot(tweek)) tweek = 1;\n\t\t\tif (!zot(id)) that.id = id;\n\t\t\tif (!zot(globalControl)) that.globalControl = globalControl;\n\n\t\t\tif (Array.isArray(label)) {\n\t\t\t\t// check labels\n\t\t\t\tvar innerLabel;\n\t\t\t\tvar lastLabel;\n\t\t\t\tobj = [];\n\t\t\t\tvar extraTime = 0;\n\t\t\t\tvar firstStartFrame;\n\t\t\t\tfor (var i=0; i<label.length; i++) {\n\t\t\t\t\tinnerLabel = label[i];\n\n\t\t\t\t\tif (!zot(innerLabel.label) && !zot(animations) && !zot(animations[innerLabel.label])) {\n\t\t\t\t\t\tvar frames = getFrames(innerLabel.label);\n\t\t\t\t\t\tstartFrame = frames[0];\n\t\t\t\t\t\tendFrame = frames[1];\n\t\t\t\t\t} else if (!zot(innerLabel.startFrame) || !zot(innerLabel.endFrame)) {\n\t\t\t\t\t\tif (zot(innerLabel.endFrame)) innerLabel.endFrame = sheet.getNumFrames() - 1;\n\t\t\t\t\t\tif (zot(innerLabel.startFrame)) innerLabel.startFrame = 0;\n\t\t\t\t\t\tstartFrame = innerLabel.startFrame;\n\t\t\t\t\t\tendFrame = innerLabel.endFrame;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (zon) zog(\"zim.Sprite - run() - bad multiple label format - see docs\");\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete innerLabel.startFrame;\n\t\t\t\t\tdelete innerLabel.endFrame;\n\n\t\t\t\t\tinnerLabel.obj = zim.merge(innerLabel.obj, {frame:endFrame});\n\t\t\t\t\tinnerLabel.set = zim.merge(innerLabel.set, {frame:startFrame});\n\n\t\t\t\t\t// based on previous frames\n\t\t\t\t\tif (zot(innerLabel.wait)) innerLabel.wait = extraTime*tweek;\n\n\t\t\t\t\tlastLabel = innerLabel.label;\n\t\t\t\t\tdelete innerLabel.label;\n\n\t\t\t\t\tobj.push(innerLabel);\n\n\t\t\t\t\t// will get applied next set of frames\n\t\t\t\t\textraTime = 0;\n\t\t\t\t\tvar tt = zot(innerLabel.time)?time:innerLabel.time;\n\t\t\t\t\tif (endFrame-startFrame > 0) extraTime = tt / (endFrame-startFrame) / 2; // slight cludge - seems to look better?\n\n\t\t\t\t\tif (i==0) firstStartFrame = startFrame;\n\t\t\t\t}\n\t\t\t\tstartFrame = firstStartFrame;\n\t\t\t\tif (obj.length == 0) return this;\n\t\t\t\tif (obj.length == 1) {\n\t\t\t\t\ttime = obj[0].time;\n\t\t\t\t\tlabel = lastLabel;\n\t\t\t\t\tobj = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction getFrames(label) {\n\t\t\t\tvar a = animations[label];\n\t\t\t\tmakeStartEnd(a);\n\t\t\t\tfunction makeStartEnd(a) {\n\t\t\t\t\tif (typeof a == \"number\") {\n\t\t\t\t\t\tstartFrame = endFrame = a;\n\t\t\t\t\t} else if (a.constructor == {}.constructor) {\n\t\t\t\t\t\tif (zot(a.frames)) {\n\t\t\t\t\t\t\tif (zon) zog(\"zim.Sprite() - run() does not support nested labels - see docs\");\n\t\t\t\t\t\t\tstartFrame = 0;\n\t\t\t\t\t\t\tendFrame = sheet.getNumFrames() - 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmakeStartEnd(a.frames);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstartFrame = a.frames\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstartFrame = a[0];\n\t\t\t\t\t\tendFrame = a[a.length-1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn [startFrame, endFrame];\n\t\t\t}\n\n\t\t\t// note, label might have been set back to normal if it was an array of one label\n\t\t\t// normal single label\n\t\t\tif (!Array.isArray(label)) {\n\n\t\t\t\tif (zot(label) || zot(animations) || zot(animations[label])) {\n\t\t\t\t\tlabel = null;\n\t\t\t\t\tif (zot(startFrame)) startFrame = 0;\n\t\t\t\t\tif (zot(endFrame)) endFrame = sheet.getNumFrames() - 1; // DUO might re-run function losing scope of this\n\t\t\t\t} else { // we do have a label and it is in animations\n\t\t\t\t\tvar frames = getFrames(label);\n\t\t\t\t\tstartFrame = frames[0];\n\t\t\t\t\tendFrame = frames[1];\n\t\t\t\t}\n\t\t\t\tobj = {frame:endFrame};\n\t\t\t\tset = {frame:startFrame};\n\t\t\t}\n\n\t\t\tif (zot(time)) time = 1000;\n\t\t\t// if already running the sprite then stop the last run\n\t\t\tif (that.running) that.stopZimAnimate(that.id);\n\t\t\tthat.running = true;\n\n\t\t\tif (!Array.isArray(obj)) {\n\t\t\t\tvar extraTime = 0;\n\t\t\t\tif (endFrame-startFrame > 0) extraTime = time / (endFrame-startFrame) / 2; // slight cludge - seems to look better?\n\t\t\t\tif (zot(loopWait)) {loopWait = extraTime*tweek};\n\t\t\t\tif (zot(rewindWait)) {rewindWait = extraTime*tweek};\n\t\t\t}\n\t\t\tthat.frame = startFrame;\n\n\t\t\t// locally override call to add running status after animation done\n\t\t\tvar localCall = function() {\n\t\t\t\tif (call && typeof call == 'function') call(params);\n\t\t\t\tthat.running = false;\n\t\t\t}\n\n\t\t\tzim.animate({\n\t\t\t\ttarget:that,\n\t\t\t\tobj:obj,\n\t\t\t\ttime:time,\n\t\t\t\tease:\"linear\",\n\t\t\t\tcall:localCall,\n\t\t\t\tparams:params,\n\t\t\t\twait:wait, wait:waitedCall, wait:waitedParams,\n\t\t\t\tloop:loop, loopCount:loopCount, loopWait:loopWait,\n\t\t\t\tloopCall:loopCall, loopParams:loopParams,\n\t\t\t\tloopWaitCall:loopWaitCall, loopWaitParams:loopWaitParams,\n\t\t\t\trewind:rewind, rewindWait:rewindWait, // rewind is ignored by animation series\n\t\t\t\trewindCall:rewindCall, rewindParams:rewindParams,\n\t\t\t\trewindWaitCall:rewindWaitCall, rewindWaitParams:rewindWaitParams,\n\t\t\t\toverride:false,\n\t\t\t\tid:that.id\n\t\t\t});\n\t\t\tthat.runPaused = false;\n\t\t\treturn that;\n\t\t}\n\n\t\tthis.runPaused = true;\n\t\tthis.pauseRun = function(paused) {\n\t\t\tif (zot(paused)) paused = true;\n\t\t\tthat.runPaused = paused;\n\t\t\tif (that.globalControl) {\n\t\t\t\tzim.pauseZimAnimate(paused, that.id);\n\t\t\t} else {\n\t\t\t\tthat.pauseZimAnimate(paused, that.id);\n\t\t\t}\n\t\t}\n\t\tthis.stopRun = function() {\n\t\t\tthat.runPaused = true;\n\t\t\tthat.running = false;\n\t\t\tif (that.globalControl) {\n\t\t\t\tzim.stopZimAnimate(that.id);\n\t\t\t} else {\n\t\t\t\tthat.stopZimAnimate(that.id);\n\t\t\t}\n\t\t}\n\n\t\tObject.defineProperty(this, 'frame', {\n\t\t\tget: function() {\n\t\t\t\treturn this.currentFrame;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (zot(value)) value = 0;\n\t\t\t\tvalue = Math.round(value);\n\t\t\t\tif (this.paused) {\n\t\t\t\t\tthis.gotoAndStop(value);\n\t\t\t\t} else {\n\t\t\t\t\tthis.gotoAndPlay(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'totalFrames', {\n\t\t\tget: function() {\n\t\t\t\treturn sheet.getNumFrames();\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tzog(\"zim.Sprite - totalFrames is read only\");\n\t\t\t}\n\t\t});\n\n\t\tthis.clone = function() {\n\t\t\treturn this.cloneProps(new zim.Sprite(image, cols, rows, count, offsetX, offsetY, spacingX, spacingY, width, height, animations, json, id, globalControl, spriteSheet));\n\t\t}\n\t}\n\tzim.extend(zim.Sprite, createjs.Sprite, \"clone\", \"cjsSprite\", false);\n\tzim.addDisplayMembers(zim.Sprite.prototype);\n\t//-50.8\n\n/*--\nzim.MovieClip = function()\n\nMovieClip\nzim class - extends a createjs.MovieClip\n\nDESCRIPTION\nA MovieClip adds timelines to a Container.\nThe timelines are zim.move() or zim.animate() zimTween properties.\nThe zimTween property returns a CreateJS Tween object.\nPrimarily made to support Adobe Animate MovieClip export.\n*Consider this experimental for the moment...\n\nEXAMPLE\nvar movieClip = new zim.MovieClip();\nvar circle = new zim.Circle(20, frame.blue);\n// circle needs to be on stage for zim.animate()\n// movieClip will add it to itself anyway\nstage.addChild(circle);\n\n// *not sure why time is messed up\nmovieClip.timeline.addTween(circle.animate({obj:{scale:3}, time:100, rewind:true}).zimTween);\nmovieClip.play();\nmovieClip.center(stage);\nstage.on(\"stagemousedown\", function() {\n\tmovieClip.paused = !movieClip.paused;\n});\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\n// from the CreateJS MovieClip docs: http://www.createjs.com/docs/easeljs/classes/MovieClip.html\nmode - (default \"independent\") or single_frame (based on startPosition) or synched (syncs to parent)\nstartPosition - (default 0) the start position of the MovieClip (*could not get to work)\nloop - (default true) set to false not to loop\nlabels - (default null) declare label property with position value\n\teg. {explode:20} to use with gotoAndPlay(\"explode\") rather than gotoAndPlay(20)\n\t*could not get labels to work either\n\nMETHODS\nclone() - makes a copy with properties such as x, y, etc. also copied\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for MovieClip methods, such as:\nplay(), gotoAndPlay(), gotoAndStop(), stop(), advance(),\non(), off(), getBounds(), setBounds(), dispatchEvent(), etc.\n\nPROPERTIES\n** bounds must be set first for these to work\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\n\nALSO: See the CreateJS Easel Docs for MovieClip properties, such as:\ncurrentFrame, totalFrames, currentLabel, duration, framerate, labels, loop, mode, paused, startPosition, timeline,\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseEnabled, parent, compositeOperation, etc.\n\nEVENTS\nSee the CreateJS Easel Docs for MovieClip events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+50.9\n\tzim.MovieClip = function(mode, startPosition, loop, labels) {\n\t\tvar sig = \"mode, startPosition, loop, labels\";\n\t\tvar duo; if (duo = zob(zim.MovieClip, arguments, sig, this)) return duo;\n\t\tz_d(\"50.9\");\n\t\tthis.cjsMovieClip_constructor(mode, startPosition, loop, labels);\n\t\tthis.clone = function() {\n\t\t\treturn this.cloneProps(new zim.MovieClip(mode, startPosition, loop, labels));\n\t\t}\n\t}\n\tzim.extend(zim.MovieClip, createjs.MovieClip, \"clone\", \"cjsMovieClip\", false);\n\tzim.addDisplayMembers(zim.MovieClip.prototype);\n\t//-50.9\n\n/*--\nzim.Circle = function(radius, color, borderColor, borderWidth, dashed)\n\nCircle\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nMakes a circle shape inside a container.\nThe registration and origin will be the center.\nNOTE: mouseChildren is turned to false for all zim Shape containers.\n\nEXAMPLE\nvar circle = new zim.Circle(50, \"red\");\ncircle.center(stage);\n\n// or with 10 pixel grey stroke\nvar circle = new zim.Circle(50, \"red\", \"#666\", 10);\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nradius - (default 50) the radius ;-)\ncolor - (default \"black\") the fill color as any CSS color including \"rgba()\" for alpha fill (set a to 0 for tranparent fill)\nborderColor - (default null) the stroke color\nborderWidth - (default 1 if stroke is set) the size of the stroke in pixels\ndashed - (default false) set to true for dashed border (if borderWidth or borderColor set)\n\nMETHODS\n** the methods setFill(), setStroke(), setStrokeSize() - have been removed - see properties above\nclone() - makes a copy of the shape\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nPROPERTIES\nshape - gives access to the circle shape\ncolor - get and set the fill color\nborderColor - get and set the stroke color\nborderWidth - get and set the stroke size in pixels\nradius - gets or sets the radius.  Setting just sets width and height to twice the radius\n** setting widths, heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\nmouseChildren - set to false so you do not drag the shape inside the circle\n\tif you nest things inside and want to drag them, will want to set to true\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nEVENTS\nSee the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+51\n\tzim.Circle = function(radius, color, borderColor, borderWidth, dashed) {\n\n\t\tvar sig = \"radius, color, borderColor, borderWidth, dashed\";\n\t\tvar duo; if (duo = zob(zim.Circle, arguments, sig, this)) return duo;\n\t\tz_d(\"51\");\n\t\tthis.zimContainer_constructor();\n\n\t\tif (zot(radius)) radius = 50;\n\t\tif (zot(dashed)) dashed = false;\n\t\tif (!zot(borderColor) && zot(borderWidth)) {\n\t\t\tborderWidth = 1;\n\t\t} else if (!zot(borderWidth) && zot(borderColor)) {\n\t\t\tborderColor = \"black\";\n\t\t}\n\t\tif (zot(color)) color = borderWidth>0?\"rgba(0,0,0,0)\":\"black\";\n\n\t\tvar that = this;\n\t\tvar _radius = radius;\n\t\tvar _color = color;\n\t\tvar _borderColor = borderColor;\n\t\tvar _borderWidth = borderWidth;\n\t\tthis.mouseChildren = false;\n\n\t\tvar circle = this.shape = new createjs.Shape();\n\t\tthis.addChild(circle);\n\n\t\tvar g = circle.graphics;\n\t\tvar colorObj;\n\t\tvar borderColorObj;\n\t\tvar borderWidthObj;\n\t\tvar borderDashedObj;\n\t\tdrawShape();\n\t\tfunction drawShape() {\n\t\t\tg.c();\n\t\t\tcolorObj =g.f(_color).command;\n\t\t\t// border of 0 or a string value still draws a border in CreateJS\n\t\t\tif (zot(_borderWidth) || _borderWidth > 0) { // no border specified or a border > 0\n\t\t\t\tif (!zot(_borderColor) || !zot(_borderWidth)) { // either a border color or thickness\n\t\t\t\t\tif (zot(_borderColor)) _borderColor = \"black\";\n\t\t\t\t\tborderColorObj = g.s(_borderColor).command;\n\t\t\t\t\tborderWidthObj = g.ss(_borderWidth).command;\n\t\t\t\t\tif (dashed) borderDashedObj = g.sd([10, 10], 5).command;\n\t\t\t\t}\n\t\t\t}\n\t\t\tg.dc(0,0,_radius);\n\t\t\tthat.setBounds(-_radius,-_radius,_radius*2,_radius*2);\n\t\t}\n\n\t\tObject.defineProperty(that, 'color', {\n\t\t\tget: function() {\n\t\t\t\treturn _color;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (zot(value)) value = \"black\";\n\t\t\t\t_color = value;\n\t\t\t\tcolorObj.style = _color;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(that, 'borderColor', {\n\t\t\tget: function() {\n\t\t\t\treturn _borderColor;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\t_borderColor = value;\n\t\t\t\tif (!borderColorObj) drawShape();\n\t\t\t\telse borderColorObj.style = _borderColor;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(that, 'borderWidth', {\n\t\t\tget: function() {\n\t\t\t\treturn _borderWidth;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (!(value>0)) value = 0;\n\t\t\t\t_borderWidth = value;\n\t\t\t\tif (!borderWidthObj || _borderWidth == 0) drawShape();\n\t\t\t\telse {\n\t\t\t\t\tborderWidthObj.width = _borderWidth;\n\t\t\t\t\tif (dashed) {\n\t\t\t\t\t\tborderDashedObj.segments = [20, 10];\n\t\t\t\t\t\tborderDashedObj.offset = 5;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(that, 'radius', {\n\t\t\tget: function() {\n\t\t\t\treturn _radius;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\t_radius = value;\n\t\t\t\tdrawShape();\n\t\t\t}\n\t\t});\n\t\tthis.clone = function() {\n\t\t\treturn that.cloneProps(new zim.Circle(that.radius, that.color, that.borderColor, that.borderWidth, dashed));\n\t\t}\n\t}\n\tzim.extend(zim.Circle, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-51\n\n/*--\nzim.Rectangle = function(width, height, color, borderColor, borderWidth, corner, flatBottom, dashed)\n\nRectangle\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nMakes a rectangle shape inside a container.\nThe registration and origin will be top left corner.\nNOTE: mouseChildren is turned to false for all zim Shape containers.\n\nEXAMPLE\nvar rect = new zim.Rectangle(200, 100, \"blue\");\nrect.center(stage);\n\n// or with rounded corners:\nvar rect = new zim.Rectangle({width:200, height:100, color:\"blue\", corner:20});\n\n// or with 2 pixel white stroke\nvar rect = new zim.Rectangle(200, 100, \"blue\", \"white\", 2);\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nwidth, height - (default 100) the width and height ;-)\ncolor - (default \"black\") the fill color as any CSS color including \"rgba()\" for alpha fill (set a to 0 for tranparent fill)\nborderColor - (default null) the stroke color\nborderWidth - (default 1 if stroke is set) the size of the stroke in pixels\ncorner - (default 0) the round of corner\nflatBottom - (default false) top corners can round and bottom stays flat (used for ZIM Tabs)\ndashed - (default false) set to true for dashed border (if borderWidth or borderColor set)\n\nMETHODS\n** the methods setFill(), setStroke(), setStrokeSize() - have been removed - see properties above\nclone() - makes a copy of the shape\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nPROPERTIES\nshape - gives access to the rectangle shape\ncolor - get and set the fill color\nborderColor - get and set the stroke color\nborderWidth - get and set the stroke size in pixels\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\nmouseChildren - set to false so  you do not drag the shape inside the rectangle\nif you nest things inside and want to drag them, will want to set to true\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nEVENTS\nSee the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+52\n\tzim.Rectangle = function(width, height, color, borderColor, borderWidth, corner, flatBottom, dashed) {\n\n\t\tvar sig = \"width, height, color, borderColor, borderWidth, corner, flatBottom, dashed\";\n\t\tvar duo; if (duo = zob(zim.Rectangle, arguments, sig, this)) return duo;\n\t\tz_d(\"52\");\n\t\tthis.zimContainer_constructor();\n\n\t\tif (zot(width)) width = 100;\n\t\tif (zot(height)) height = 100;\n\t\tif (zot(corner)) corner = 0;\n\t\tif (zot(flatBottom)) flatBottom = false;\n\t\tif (zot(dashed)) dashed = false;\n\t\tif (!zot(borderColor) && zot(borderWidth)) {\n\t\t\tborderWidth = 1;\n\t\t} else if (!zot(borderWidth) && zot(borderColor)) {\n\t\t\tborderColor = \"black\";\n\t\t}\n\t\tif (zot(color)) color = borderWidth>0?\"rgba(0,0,0,0)\":\"black\";\n\n\t\tvar that = this;\n\t\tvar _color = color;\n\t\tvar _borderColor = borderColor;\n\t\tvar _borderWidth = borderWidth;\n\t\tthis.mouseChildren = false;\n\n\t\tvar rectangle = this.shape = new createjs.Shape();\n\t\tthis.addChild(rectangle);\n\n\t\tvar g = rectangle.graphics;\n\t\tvar colorObj;\n\t\tvar borderColorObj;\n\t\tvar borderWidthObj;\n\t\tdrawShape();\n\t\tfunction drawShape() {\n\t\t\tg.c();\n\t\t\tcolorObj =g.f(_color).command;\n\t\t\t// border of 0 or a string value still draws a border in CreateJS\n\t\t\tif (zot(_borderWidth) || _borderWidth > 0) { // no border specified or a border > 0\n\t\t\t\tif (!zot(_borderColor) || !zot(_borderWidth)) { // either a border color or thickness\n\t\t\t\t\tif (zot(_borderColor)) _borderColor = \"black\";\n\t\t\t\t\tborderColorObj = g.s(_borderColor).command;\n\t\t\t\t\tborderWidthObj = g.ss(_borderWidth).command;\n\t\t\t\t\tif (dashed) borderDashedObj = g.sd([10, 10], 5).command;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (corner > 0) {\n\t\t\t\tif (flatBottom) {\n\t\t\t\t\tg.rc(0,0,width,height,corner,corner,0,0);\n\t\t\t\t} else {\n\t\t\t\t\tg.rr(0,0,width,height,corner);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tg.r(0,0,width,height);\n\t\t\t}\n\t\t\tthat.setBounds(0,0,width,height);\n\t\t}\n\n\t\tObject.defineProperty(that, 'color', {\n\t\t\tget: function() {\n\t\t\t\treturn _color;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (zot(value)) value = \"black\";\n\t\t\t\t_color = value;\n\t\t\t\tcolorObj.style = _color;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(that, 'borderColor', {\n\t\t\tget: function() {\n\t\t\t\treturn _borderColor;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\t_borderColor = value;\n\t\t\t\tif (!borderColorObj) drawShape();\n\t\t\t\telse borderColorObj.style = _borderColor;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(that, 'borderWidth', {\n\t\t\tget: function() {\n\t\t\t\treturn _borderWidth;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (!(value>0)) value = 0;\n\t\t\t\t_borderWidth = value;\n\t\t\t\tif (!borderWidthObj || _borderWidth == 0) drawShape();\n\t\t\t\telse {\n\t\t\t\t\tborderWidthObj.width = _borderWidth;\n\t\t\t\t\tif (dashed) {\n\t\t\t\t\t\tborderDashedObj.segments = [20, 10];\n\t\t\t\t\t\tborderDashedObj.offset = 5;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.clone = function() {\n\t\t\treturn that.cloneProps(new zim.Rectangle(width, height, that.color, that.borderColor, that.borderWidth, corner, flatBottom, dashed));\n\t\t}\n\t}\n\tzim.extend(zim.Rectangle, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-52\n\n/*--\nzim.Triangle = function(a, b, c, color, borderColor, borderWidth, center, adjust, dashed)\n\nTriangle\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nMakes a triangle shape inside a container using three line lengths.\nPassing one length parameter makes an equilateral triangle.\nPassing two length parameters makes an isosceles triangle.\nPassing -1 as the last length parameter makes a 90 degree triangle.\nNOTE: mouseChildren is turned to false for all zim Shape containers.\n\nEXAMPLE\nvar tri = new zim.Triangle(200, null, null, \"green\");\ntri.center(stage);\n\n// all three sides specified - tall pointy triangle with yellow stroke of 10 pixels\nvar tri = new zim.Triangle(100, 200, 200, \"green\", \"yellow\", 10);\n\n// here we adjust so rotation looks better\nvar tri = new zim.Triangle({a:200, color:\"green\", adjust:30});\ntri.center(stage);\ntri.animate({obj:{rotation:360}, time:3000, ease:\"linear\", loop:true});\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\na, b and c - (default 100) the lengths of the sides\n\ta will run horizontally along the bottom\n\tb is upwards and c is back to the origin\n\tif c is set to -1 will assume a 90 angle\ncolor - (default \"black\") the fill color as any CSS color including \"rgba()\" for alpha fill (set a to 0 for tranparent fill)\nborderColor - (default null) the stroke color\nborderWidth - (default 1 if stroke is set) the size of the stroke in pixels\ncenter - (default true) puts the registration point to the center\nadjust - (default 0) pixels to bring center towards vertical base\n\tthe actual center is not really the weighted center\ndashed - (default false) set to true for dashed border (if borderWidth or borderColor set)\n\nMETHODS\n** the methods setFill(), setStroke(), setStrokeSize() - have been removed - see properties above\nclone() - makes a copy of the shape\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nPROPERTIES\nshape - gives access to the triangle shape\ncolor - get and set the fill color\nborderColor - get and set the stroke color\nborderWidth - get and set the stroke size in pixels\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\none, two, three - read only - points with x, y properties for bottom left, bottom right, top right\nangles - read only - Array of angles [bottom left, bottom right, top right]\nmouseChildren - set to false so  you do not drag the shape inside the triangle\nif you nest things inside and want to drag them, will want to set to true\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nEVENTS\nSee the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+53\n\tzim.Triangle = function(a, b, c, color, borderColor, borderWidth, center, adjust, dashed) {\n\n\t\tvar sig = \"a, b, c, color, borderColor, borderWidth, center, adjust, dashed\";\n\t\tvar duo; if (duo = zob(zim.Triangle, arguments, sig, this)) return duo;\n\t\tz_d(\"53\");\n\t\tthis.zimContainer_constructor();\n\n\t\tif (zot(a)) a = 100;\n\t\tif (zot(b)) b = a;\n\t\tif (zot(c)) c = b;\n\t\tif (c==-1) c = Math.sqrt(Math.pow(a,2)+Math.pow(b,2));\n\t\tif (zot(center)) center = true;\n\t\tif (zot(adjust)) adjust = 0;\n\t\tif (!zot(borderColor) && zot(borderWidth)) {\n\t\t\tborderWidth = 1;\n\t\t} else if (!zot(borderWidth) && zot(borderColor)) {\n\t\t\tborderColor = \"black\";\n\t\t}\n\t\tif (zot(color)) color = borderWidth>0?\"rgba(0,0,0,0)\":\"black\";\n\n\t\tvar that = this;\n\t\tvar _color = color;\n\t\tvar _borderColor = borderColor;\n\t\tvar _borderWidth = borderWidth;\n\t\tthis.mouseChildren = false;\n\n\t\tvar lines = [a,b,c];\n\t\tlines.sort(function(a, b){return b-a});\n\t\taa = lines[0];\n\t\tbb = lines[1];\n\t\tcc = lines[2];\n\t\tvar order = [lines.indexOf(a), lines.indexOf(b), lines.indexOf(c)];\n\n\t\tif (aa > bb+cc) {\n\t\t\tzog(\"zim build - Triangle(): invalid triangle lengths\");\n\t\t\treturn;\n\t\t}\n\n\t\tvar tri = this.shape = new createjs.Shape();\n\t\tthis.addChild(tri);\n\n\t\tvar g = tri.graphics;\n\t\tvar colorObj;\n\t\tvar borderColorObj;\n\t\tvar borderWidthObj;\n\t\tdrawShape();\n\t\tfunction drawShape() {\n\t\t\tg.c();\n\t\t\tcolorObj =g.f(_color).command;\n\t\t\t// border of 0 or a string value still draws a border in CreateJS\n\t\t\tif (zot(_borderWidth) || _borderWidth > 0) { // no border specified or a border > 0\n\t\t\t\tif (!zot(_borderColor) || !zot(_borderWidth)) { // either a border color or thickness\n\t\t\t\t\tif (zot(_borderColor)) _borderColor = \"black\";\n\t\t\t\t\tborderColorObj = g.s(_borderColor).command;\n\t\t\t\t\tborderWidthObj = g.ss(_borderWidth).command;\n\t\t\t\t\tif (dashed) borderDashedObj = g.sd([10, 10], 5).command;\n\t\t\t\t}\n\t\t\t}\n\t\t\tg.mt(0,0);\n\t\t\tthat.one={x:0,y:0};\n\t\t\tg.lt(a,0);\n\t\t\tthat.two={x:a,y:0};\n\n\t\t\t// find biggest angle with cosine rule\n\t\t\tvar angle1 = Math.acos( (Math.pow(bb,2) + Math.pow(cc,2) - Math.pow(aa,2)) / (2 * bb * cc) ) * 180 / Math.PI;\n\n\t\t\t// use the sine rule for next biggest angle\n\t\t\tvar angle2 = Math.asin( bb * Math.sin(angle1 * Math.PI / 180) / aa ) * 180 / Math.PI;\n\n\t\t\t// find last angle\n\t\t\tvar angle3 = 180 - angle1 - angle2;\n\n\t\t\t// get position of angles by mapping to opposite side sizes\n\t\t\t// as in smallest angle is across from smallest side\n\t\t\t// largest angle is across from largest size, etc.\n\t\t\tvar temp = [angle1, angle2, angle3]; // largets to smallest\n\t\t\tthat.angles = [temp[order[1]], temp[order[2]], temp[order[0]]];\n\n\t\t\tvar nextAngle = that.angles[1];\n\t\t\tvar backX = Math.cos(nextAngle * Math.PI / 180) * b;\n\t\t\tvar upY = Math.sin(nextAngle * Math.PI / 180) * b;\n\n\t\t\tvar width = Math.max(a, a-backX);\n\t\t\tvar height = upY\n\t\t\tthat.setBounds(0,0,width,height);\n\t\t\ttri.y = height;\n\n\t\t\tg.lt(a-backX,0-upY);\n\t\t\tthat.three={x:a-backX,y:0-upY};\n\t\t\tg.cp();\n\n\t\t\tif (center) {\n\t\t\t\tthat.regX = width/2;\n\t\t\t\tthat.regY = height/2;\n\t\t\t}\n\t\t\tif (adjust) {\n\t\t\t\tthat.shape.y+=adjust;\n\t\t\t}\n\t\t}\n\n\t\tObject.defineProperty(that, 'color', {\n\t\t\tget: function() {\n\t\t\t\treturn _color;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (zot(value)) value = \"black\";\n\t\t\t\t_color = value;\n\t\t\t\tcolorObj.style = _color;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(that, 'borderColor', {\n\t\t\tget: function() {\n\t\t\t\treturn _borderColor;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\t_borderColor = value;\n\t\t\t\tif (!borderColorObj) drawShape();\n\t\t\t\telse borderColorObj.style = _borderColor;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(that, 'borderWidth', {\n\t\t\tget: function() {\n\t\t\t\treturn _borderWidth;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (!(value>0)) value = 0;\n\t\t\t\t_borderWidth = value;\n\t\t\t\tif (!borderWidthObj || _borderWidth == 0) drawShape();\n\t\t\t\telse {\n\t\t\t\t\tborderWidthObj.width = _borderWidth;\n\t\t\t\t\tif (dashed) {\n\t\t\t\t\t\tborderDashedObj.segments = [20, 10];\n\t\t\t\t\t\tborderDashedObj.offset = 5;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.clone = function() {\n\t\t\treturn that.cloneProps(new zim.Triangle(a, b, c, that.color, that.borderColor, that.borderWidth, center, adjust, dashed));\n\t\t}\n\t}\n\tzim.extend(zim.Triangle, zim.Container, \"clone\", \"zimContainer\");\n\t//-53\n\n/*--\nzim.Blob = function(color, borderColor, borderWidth, points, radius, controlLength, controlType, lockControlType, showControls, lockControls, dblclick, dblclickDrag, ctrlclick, dashed)\n\nBlob\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nMakes a blob shape inside a container using a number of points.\nThe points have Bezier controls - little handles that change the shape of the Blob.\nThe type of control can be specified overall and individually - and can be hidden or shown\nThe type of control can be changed by double clicking the point - colors of the handles will change\nThe shape of the Blob can be recorded with the record() method\nThe Blob can be set to show and hide controls when double clicked - and to drag and to copy with shift click\nNOTE: mouseChildren is turned to false for all zim Shape containers.\n\nEXAMPLE\nvar blob = new zim.Blob(); // makes a circle with default 4 points with Bezier controls\nblob.center(stage);\n\nvar moreBlob = new zim.Blob({\n\tpoints:12, // 12 points for more complex shape\n\tdblclick:true, // doubleClick to show and hide controls - drag when controls are hidden\n\tctrlclick:true // shift click to make a copy of the current blob shape\n}).center(stage);\n\nvar specifiedBlob = new zim.Blob({\n\tcolor:frame.purple,\n\tcontrolType:\"free\", // free will be default control type (rather than \"straight\")\n\tpoints:[\n\t\t// the control position x, y\n\t\t// then three point positions inside the control - so relative to the control position\n\t\t// 1. circle position x, y (usually the same as the control position - so 0,0)\n\t\t// 2. the location of the first control rectangle x and y\n\t\t// 3. the location of the second control rectangle x and y\n\t\t// then an optional specific type of control that overrides the controlType parameter (or the default type of \"straight\")\n\t\t[-100,-100,-100,100,100,-100,0,0,\"mirror\"], // this will be type \"mirror\"\n\t\t[100,-100,100,0,-50,0], // this will be type \"free\" because controlType parameter\n\t\t[100,100], // these will be type \"none\" because no dimensions (or dimensions 0) specified for controls\n\t\t[-100,100]\n\t]\n}).centerReg(stage).drag();\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\ncolor - (default frame.green) the fill color as any CSS color including \"rgba()\" for alpha fill (set a to 0 for tranparent fill)\nborderColor - (default null) the stroke color\nborderWidth - (default 1 if stroke is set) the size of the stroke in pixels\npoints - (default 4) a number of points to start with around a circle OR an array of points as follows:\n\tNOTE: this format is different than the points property which is related but holds the actual point objects as opposed to x and y positions used in the parameter:\n\t[[controlX, controlY, circleX, circleY, rect1X, rect1Y, rect2X, rect2Y, controlType], [etc]]\n\tcontrolX and controlY - the x and y location of the control Container which holds the point circle and the two control rectangles\n\t\tcan access a control at an index by using blob.points[index][0]\n\t\tanimating the controlX and controlY will move the circle and rectangles together\n\trect1X, rect1Y, rect2X, rect2Y - (default 0) the x and y location of the control rectangles relative to the control location\n\t\tcan access a rectangle at an index by using blob.points[index][2] or blob.points[index][3]\n\t\tanimating a rectangle will move the rectangle independently of the circle and other control rectangle\n\tcircleX and circleY - (default 0) the x and y location of the circle relative to the control location (usually 0, 0)\n\t\tcan access a circle at an index by using blob.points[index][1]\n\t\tanimating the circle will move the circle independently of the control rectangles\n\tcontrolType - (default main controlType parameter or \"straight\" if not controlType parameter) the point's controlType \"none\", \"mirror\", \"straight\" or \"free\"\nradius - (default 100) the default radius of the circle used to create the blob (also specifies the blob's bounds(-radius, -radius, radius*2, radius*2))\ncontrolLength - |ZIM VEE| (default radius*numPoints/4) specify a Number to override the calculated default\n\tor pass in a ZIM VEE value and zik will assign a random option for each controlLength of the blob\ncontrolType - (default \"straight\") one of four String values as follows:\n\tnone - there are no control rectangles (they are actually set at 0,0).  This makes a corner at the circle point.\n\tmirror - the control rectangles reflect one another about the point circle - lengths are kept even\n\tstraight - the control rectangles keep a straight line through the point circle but length is independent\n\tfree - the control rectangle moves independently from the other control rectangle\n\t** The controlType can be specified for each point - see the points parameter\n\t** The controlType can be changed by doubleClicking the point circle to cycle through the controls in the order above - unless the lockControlType is set to true\nlockControlType - (default false) set to true to disable doubleClicking of point circles to change controlType\nshowControls - (default true) set to false to start with controls not showing - can change this after with control property or showControls() method\nlockControls - (default false) set to true to lock the editing of controls - can't move the points or handles - but can see them if showControls is set to true\ndblclick - (default false) set true to let double click toggle between showing and hiding controls and also drag the blob when controls not showing\ndblclickDrag - (default true) set to false to disable dragging when dblClick is true.  Dragging when controls are showing can be done but requires a proxy drag object\nctrlclick - (default false) set to true to let ctrl click copy the Blob with its current shape (adds to same holder container - use holder.getChildAt(holder.numChildren-1) to access)\ndashed - (default false) set to true for dashed border (if borderWidth or borderColor set)\n\nMETHODS\nrecord(popup) - returns an array of with the same format as the points parameter (see parameter docs)\n\tpopup - (default false) set to true to open a zim Pane with the points in a zim TextArea (click off to close)\n\tNOTE: the TextArea output uses JSON.stringify() - to add the points to the points parameter of the Blob use JSON.parse(output);\n\tNOTE: using zog(JSON.stringify(blob.record()))... the console will remove the quotes from the controlTypes so those would have to be manually put back in before parse() will work\nchangeControl(index, type, rect1X, rect1Y, rect2X, rect2Y, circleX, circleY) - change a control type and properties at an index\n\taccepts ZIM DUO normal parameters or configuration object literal with parameter names as propterties\n\tpassing in null as the index will change all points to the specified properties\nupdate() - update the Blob if animating control points, etc. would do this in a Ticker\nshowControls() - shows the controls (and returns blob) - or use blob.controls = true property\nhideControls() - hides the controls (and returns blob) - or use blob.controls = false property\nclone() - makes a copy of the shape\ndispose() - remove event listeners\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nPROPERTIES\nshape - gives access to the shape of the blob\ncolor - get and set the fill color\nborderColor - get and set the stroke color\nborderWidth - get and set the stroke size in pixels\npoints - array access to the control point data with the following format:\n\tNOTE: this format is different than the points parameter which is related but holds the x and y positions rather than the actual point objects found in the points property:\n\t[[set, rect1, rect2, circle, controlType], [etc.]]\n\tset - the container for the control that holds the circle and rectangles set\n\trect1 - the first control point rectangle\n\trect2 - the second control point rectangle\n\tcircle - the control point circle\n\tNOTE: set, rect1, rect2 and circle can be positioned or animated\n\tNOTE: the update() method must be called if manually changing the controls - do this in a zim.Ticker.add(function(){blob.update();})\n\tcontrolType - get or set the control type: default is \"straight\" (or null) and there is also \"mirror\", \"free\" and \"none\"\n\tand the controlType can be dynamically set (also double clicking the circle changes the control point)\nsets - access to the container that holds the sets\nsticks - access to the container that holds the control sticks\ntypes - get or set the array for the types [\"mirror\", \"straight\", \"free\", \"none\"]\ncontrols - Boolean to get or set the visibility of the controls (or use showControls() and hideControls() methods)\nlockControls - Boolean to lock controls from being adjusted or not\ndblclick - Boolean to get or set bouble clicking to show and hide controls and drag when controls are hidden\ndblclickDrag - Boolean to drag or not drag Blob if controls are hidden and dblclick is true\nlockControlType - Boolean to lock the type of the controls in their current state or not\nctrlclick - Boolean to let users ctrl click the Blob to duplicate it (clone) or not\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nEVENTS\ndispatches a change event for when the bezier controls are adjusted (pressup only)\n\tif monitoring constant change is needed add a pressmove event to Blob.sets\nSee the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+53.5\n\tzim.Blob = function(color, borderColor, borderWidth, points, radius, controlLength, controlType, lockControlType, showControls, lockControls, dblclick, dblclickDrag, ctrlclick, dashed) {\n\n\t\tvar sig = \"color, borderColor, borderWidth, points, radius, controlLength, controlType, lockControlType, showControls, lockControls, dblclick, dblclickDrag, ctrlclick, dashed\";\n\t\tvar duo; if (duo = zob(zim.Blob, arguments, sig, this)) return duo;\n\n\t\tz_d(\"53.5\");\n\t\tif (zot(radius)) radius = 100;\n\t\tthis.zimContainer_constructor(-radius,-radius,radius*2,radius*2);\n\n\t\tif (zot(dashed)) dashed = false;\n\t\tif (!zot(borderColor) && zot(borderWidth)) {\n\t\t\tborderWidth = 1;\n\t\t} else if (!zot(borderWidth) && zot(borderColor)) {\n\t\t\tborderColor = \"black\";\n\t\t}\n\t\tif (zot(color)) color = borderWidth>0?\"rgba(0,0,0,0)\":frame.green;\n\t\tif (zot(points)) points = 4;\n\t\tvar num = typeof points == \"number\" ? points : points.length;\n\n\t\tif (zot(controlLength)) controlLength = radius * 4 / num;\n\t\tif (zot(controlType)) controlType = \"straight\";\n\t\tif (zot(lockControlType)) lockControlType = false;\n\t\tif (zot(showControls)) showControls = true;\n\t\tif (zot(lockControls)) lockControls = false;\n\t\tif (zot(dblclick)) dblclick = false;\n\t\tif (zot(dblclickDrag)) dblclickDrag = true;\n\t\tif (zot(ctrlclick)) ctrlclick = false;\n\t\tthis.dblclick = dblclick;\n\t\tthis.dblclickDrag = dblclickDrag;\n\t\tthis.lockControlType = lockControlType;\n\t\tthis.ctrlclick = ctrlclick;\n\n\t\tvar that = this;\n\n\t\tvar types = this.types = [\"mirror\", \"straight\", \"free\", \"none\"];\n\n\t\tvar _color = color;\n\t\tvar _borderColor = borderColor;\n\t\tvar _borderWidth = borderWidth;\n\n\t\tvar shape = this.shape = new zim.Shape().addTo(this);\n\t\tvar sticks = this.sticks = new zim.Shape().addTo(this);\n\t\tvar g = shape.graphics;\n\t\tvar s = sticks.graphics;\n\n\t\tvar ballS = 8;\n\t\tvar rectS = 10;\n\n\t\tvar sets = this.sets = new zim.Container().addTo(this).drag(); // sets - a set contains a ball and two rects\n\t\tthis.points = [];\n\n\t\tvar angle, point, temp, set, rect1, rect2, ball, type, setData;\n\n\t\tfor (var i=0; i<num; i++) {\n\t\t\tset = new zim.Container().addTo(sets);\n\t\t\tif (typeof points == \"number\") { // no sets yet\n\n\t\t\t\t// easier to create controls in a temp vertical Container\n\t\t\t\t// set the registration point at the circle center\n\t\t\t\t// then rotate the temp container\n\t\t\t\t// then get the resulting rotated coordinates and use localToLocal\n\t\t\t\t// to find coordinates of controls in set Container\n\t\t\t\t// afterwards, adjust controls in set Container so origin and registration is at ball\n\t\t\t\t// then move the set Container so it matches this adjustment\n\t\t\t\t// (or could have calculated all positions to start with aTan2, sin, cos etc.)\n\t\t\t\tvar length = zik(controlLength);\n\t\t\t\ttemp = new zim.Container(length, radius).reg(length/2, radius).addTo(this);\n\t\t\t\ttemp.rotation = i/num * 360;\n\t\t\t\tball = new zim.Circle(ballS, frame.light, frame.dark, 2)\n\t\t\t\t\t.centerReg(temp)\n\t\t\t\t\t.pos(length/2,0);\n\t\t\t\trect1 = new zim.Rectangle(rectS, rectS, getColor(controlType), frame.dark, 2)\n\t\t\t\t\t.centerReg(temp)\n\t\t\t\t\t.pos(0,0);\n\t\t\t\trect2 = new zim.Rectangle(rectS, rectS, getColor(controlType), frame.dark, 2)\n\t\t\t\t\t.centerReg(temp)\n\t\t\t\t\t.pos(length,0);\n\n\t\t\t\tvar ballPoint = temp.localToLocal(ball.x, ball.y, sets);\n\t\t\t\tball.x = ballPoint.x;\n\t\t\t\tball.y = ballPoint.y;\n\t\t\t\tball.addTo(set);\n\t\t\t\tvar rect1Point = temp.localToLocal(rect1.x, rect1.y, sets);\n\t\t\t\trect1.x = controlType==\"none\"?0:rect1Point.x-ball.x;\n\t\t\t\trect1.y = controlType==\"none\"?0:rect1Point.y-ball.y;\n\t\t\t\trect1.addTo(set);\n\t\t\t\tvar rect2Point = temp.localToLocal(rect2.x, rect2.y, sets);\n\t\t\t\trect2.x = controlType==\"none\"?0:rect2Point.x-ball.x;\n\t\t\t\trect2.y = controlType==\"none\"?0:rect2Point.y-ball.y;\n\t\t\t\trect2.addTo(set);\n\t\t\t\tset.pos(ball.x, ball.y);\n\t\t\t\tball.x = 0;\n\t\t\t\tball.y = 0;\n\t\t\t\tif (controlType==\"none\") ball.addTo(set); // on top\n\n\t\t\t} else { // passing in set data\n\n\t\t\t\t// balls are relative to blob but handles are relative to ball\n\t\t\t\t// points is an array of [[setX, setY, ballX, ballY, handleX, handleY, handle2X, handle2Y, type], etc.]\n\n\t\t\t\tsetData = points[i];\n\t\t\t\ttype = setData[8] ? setData[8] : controlType;\n\t\t\t\tset = new zim.Container().addTo(sets).pos(setData[0], setData[1]);\n\t\t\t\tball = new zim.Circle(ballS, frame.light, frame.dark, 2)\n\t\t\t\t\t.centerReg(set)\n\t\t\t\t\t.pos(setData[6],setData[7]);\n\t\t\t\trect1 = new zim.Rectangle(rectS, rectS, getColor(type), frame.dark, 2)\n\t\t\t\t\t.centerReg(set, true, 0)\n\t\t\t\t\t.pos(setData[2],setData[3]);\n\t\t\t\trect2 = new zim.Rectangle(rectS, rectS, getColor(type), frame.dark, 2)\n\t\t\t\t\t.centerReg(set, true, 0)\n\t\t\t\t\t.pos(setData[4],setData[5]);\n\t\t\t}\n\n\t\t\tball.set = set;\n\t\t\tball.rect1 = rect1;\n\t\t\tball.rect2 = rect2;\n\t\t\tball.index = i;\n\t\t\tball.on(\"dblclick\", function(e) {\n\t\t\t\tif (that.lockControlType) return;\n\t\t\t\tvar ball = e.target;\n\t\t\t\t// cycle through the types\n\t\t\t\tvar type = that.points[ball.index][4] ? that.points[ball.index][4] : controlType;\n\t\t\t\tif (Math.abs(ball.rect1.x) <= 2 && Math.abs(ball.rect1.y) <= 2 && Math.abs(ball.rect2.x) <= 2 && Math.abs(ball.rect2.y) <= 2) {\n\t\t\t\t\ttype = \"none\"\n\t\t\t\t}\n\t\t\t\tif (type == \"none\") {\n\t\t\t\t\tball.parent.addChildAt(ball, 0);\n\t\t\t\t}\n\t\t\t\t// modulus going backwards needs to add the length so it does not go negative\n\t\t\t\ttype = that.types[(that.types.indexOf(type)+(frame.shiftKey?-1:1)+that.types.length)%that.types.length];\n\t\t\t\tif (type == \"none\") {\n\t\t\t\t\tball.rect1.x =  ball.rect1.y =  ball.rect2.x =  ball.rect2.y = 0;\n\t\t\t\t\tball.parent.addChild(ball);\n\t\t\t\t}\n\t\t\t\tthat.points[ball.index][4] = type;\n\t\t\t\tball.rect1.color = getColor(type);\n\t\t\t\tball.rect2.color = getColor(type);\n\t\t\t\tdrawShape();\n\t\t\t\tball.getStage().update();\n\t\t\t});\n\n\t\t\trect1.ball = ball;\n\t\t\trect1.other = rect2;\n\t\t\trect2.ball = ball;\n\t\t\trect2.other = rect1;\n\n\t\t\tif (zim.mobile()) {\n\t\t\t\tball.expand();\n\t\t\t\trect1.expand();\n\t\t\t\trect2.expand();\n\t\t\t}\n\n\t\t\tpoint = [set, rect1, rect2, ball, setData?setData[8]:controlType];\n\t\t\tthat.points.push(point);\n\t\t}\n\n\t\tfunction getColor(type) {\n\t\t\tvar colors = {mirror:frame.purple, free:frame.yellow, none:frame.blue};\n\t\t\treturn colors[type] ? colors[type] : frame.pink;\n\t\t}\n\n\t\tfunction drawShape() {\n\t\t\tg.c();\n\t\t\tcolorObj = g.f(_color).command;\n\t\t\t// border of 0 or a string value still draws a border in CreateJS\n\t\t\tif (zot(_borderWidth) || _borderWidth > 0) { // no border specified or a border > 0\n\t\t\t\tif (!zot(_borderColor) || !zot(_borderWidth)) { // either a border color or thickness\n\t\t\t\t\tif (zot(_borderColor)) _borderColor = \"black\";\n\t\t\t\t\tborderColorObj = g.s(_borderColor).command;\n\t\t\t\t\tborderWidthObj = g.ss(_borderWidth).command;\n\t\t\t\t\tif (dashed) borderDashedObj = g.sd([10, 10], 5).command;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar set = that.points[0][0];\n\t\t\tvar ballPoint = set.localToLocal(that.points[0][3].x, that.points[0][3].y, shape);\n\t\t\tg.mt(ballPoint.x, ballPoint.y);\n\n\t\t\ts.c().s(frame.darker).ss(1)\n\n\t\t\tvar currentIndex; var nextIndex;\n\t\t\tfor (var i=0; i<that.points.length; i++) {\n\t\t\t\tvar currentIndex = i;\n\t\t\t\tvar nextIndex = (i+1)%that.points.length;\n\n\t\t\t\tvar set = that.points[currentIndex][0];\n\t\t\t\tvar ball = that.points[currentIndex][3];\n\t\t\t\tvar control1 = that.points[currentIndex][1];\n\t\t\t\tvar control2 = that.points[currentIndex][2];\n\n\t\t\t\tvar nextSet = that.points[nextIndex][0];\n\t\t\t\tvar nextBall = that.points[nextIndex][3];\n\t\t\t\tvar nextControl1 = that.points[nextIndex][1];\n\t\t\t\tvar nextControl2 = that.points[nextIndex][2];\n\n\t\t\t\tvar control2Point = set.localToLocal(control2.x, control2.y, shape);\n\t\t\t\tvar nextControl1Point = nextSet.localToLocal(nextControl1.x, nextControl1.y, shape);\n\t\t\t\tvar nextBallPoint = nextSet.localToLocal(nextBall.x, nextBall.y, shape);\n\n\t\t\t\tg.bt(\n\t\t\t\t\tcontrol2Point.x, control2Point.y,\n\t\t\t\t\tnextControl1Point.x, nextControl1Point.y,\n\t\t\t\t\tnextBallPoint.x, nextBallPoint.y\n\t\t\t\t);\n\n\t\t\t\t// create the sticks\n\t\t\t\tvar ballPoint = set.localToLocal(ball.x, ball.y, shape);\n\t\t\t\tvar control1Point = set.localToLocal(control1.x, control1.y, shape);\n\n\t\t\t\ts.mt(ballPoint.x, ballPoint.y).lt(control1Point.x, control1Point.y);\n\t\t\t\ts.mt(ballPoint.x, ballPoint.y).lt(control2Point.x, control2Point.y);\n\t\t\t}\n\t\t}\n\t\tdrawShape();\n\n\t\tsets.on(\"mousedown\", function(e) {\n\t\t\tif (that.lockControls) return;\n\t\t\tif (e.target.rect1) { // then mousedown on ball\n\t\t\t\tvar ball = e.target;\n\t\t\t\tball.startX = ball.x;\n\t\t\t\tball.startY = ball.y;\n\t\t\t\tball.rect1.startX = ball.rect1.x;\n\t\t\t\tball.rect1.startY = ball.rect1.y;\n\t\t\t\tball.rect2.startX = ball.rect2.x;\n\t\t\t\tball.rect2.startY = ball.rect2.y;\n\t\t\t} else { // mousedown on control\n\t\t\t\tvar rect = e.target;\n\t\t\t\tvar ball = rect.ball;\n\t\t\t\tvar index = ball.index;\n\t\t\t\tvar type = controlType;\n\t\t\t\tif (!zot(that.points[index][4])) type = that.points[index][4];\n\t\t\t\tif (type == \"straight\") {\n\t\t\t\t\tvar other = rect.other;\n\t\t\t\t\tvar dX = other.x - ball.x;\n\t\t\t\t\tvar dY = other.y - ball.y;\n\t\t\t\t\tother.stickLength = Math.sqrt(Math.pow(dX,2) + Math.pow(dY,2));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tsets.on(\"pressmove\", function(e) {\n\t\t\tif (that.lockControls) return;\n\t\t\tif (e.target.rect1) { // pressmove on ball\n\t\t\t\tvar ball = e.target;\n\t\t\t\tvar diffX = ball.x - ball.startX;\n\t\t\t\tvar diffY = ball.y - ball.startY;\n\t\t\t\tball.rect1.x = ball.rect1.startX + diffX;\n\t\t\t\tball.rect1.y = ball.rect1.startY + diffY;\n\t\t\t\tball.rect2.x = ball.rect2.startX + diffX;\n\t\t\t\tball.rect2.y = ball.rect2.startY + diffY;\n\t\t\t} else { // pressmove on control\n\t\t\t\tvar rect = e.target;\n\t\t\t\tvar other = rect.other; // the other handle\n\t\t\t\tvar ball = rect.ball;\n\t\t\t\tvar index = ball.index;\n\t\t\t\tvar type = controlType;\n\t\t\t\tif (!zot(that.points[index][4])) type = that.points[index][4];\n\t\t\t\tif (type == \"straight\" || type == \"mirror\") {\n\t\t\t\t\tvar dX = rect.x - ball.x;\n\t\t\t\t\tvar dY = rect.y - ball.y;\n\t\t\t\t\tif (type == \"mirror\") {\n\t\t\t\t\t\tother.x = ball.x - dX;\n\t\t\t\t\t\tother.y = ball.y - dY;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar a = Math.atan2(dY, dX);\n\t\t\t\t\t\tvar dNewX = -other.stickLength * Math.cos(a+Math.PI);\n\t\t\t\t\t\tvar dNewY = -other.stickLength * Math.sin(a+Math.PI);\n\t\t\t\t\t\tother.x = ball.x - dNewX;\n\t\t\t\t\t\tother.y = ball.y - dNewY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdrawShape();\n\t\t});\n\n\t\tsets.on(\"pressup\", function(e) {\n\t\t\tif (that.lockControls) return;\n\t\t\tif (e.target.rect1) { // pressup on ball\n\t\t\t\t// move ball back to origin and move set accordingly\n\t\t\t\t// so if we animate the set it will behave as expected\n\t\t\t\tvar ball = e.target;\n\t\t\t\tvar set = ball.set;\n\t\t\t\tvar rect1 = ball.rect1;\n\t\t\t\tvar rect2 = ball.rect2;\n\t\t\t\trect1.x -= ball.x;\n\t\t\t\trect1.y -= ball.y;\n\t\t\t\trect2.x -= ball.x;\n\t\t\t\trect2.y -= ball.y;\n\t\t\t\tset.x += ball.x;\n\t\t\t\tset.y += ball.y;\n\t\t\t\tball.x = 0;\n\t\t\t\tball.y = 0;\n\t\t\t}\n\t\t\tthat.dispatchEvent(\"change\");\n\t\t});\n\n\t\tthis.changeControl = function(index, type, rect1X, rect1Y, rect2X, rect2Y, circleX, circleY) {\n\t\t\tvar sig = \"index, type, rect1X, rect1Y, rect2X, rect2Y, circleX, circleY\";\n\t\t\tvar duo; if (duo = zob(that.changeControl, arguments, sig)) return duo;\n\t\t\tif (zot(index)) {\n\t\t\t\tfor (var i=0; i<that.points.length; i++) {\n\t\t\t\t\tthat.changeControl(i, type, rect1X, rect1Y, rect2X, rect2Y, circleX, circleY);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar point = that.points[index];\n\t\t\tpoint[4] = type;\n\t\t\tif (type == \"none\") {\n\t\t\t\tif (!zot(circleX)) point[3].x = circleX;\n\t\t\t\tif (!zot(circleY)) point[3].y = circleY;\n\t\t\t\tpoint[1].pos(point[3].x, point[3].y);\n\t\t\t\tpoint[2].pos(point[3].x, point[3].y);\n\t\t\t\tpoint[3].parent.addChild(point[3]);\n\t\t\t} else {\n\t\t\t\tif (!zot(rect1X)) point[1].x = rect1X;\n\t\t\t\tif (!zot(rect1Y)) point[1].y = rect1Y;\n\t\t\t\tif (!zot(rect2X)) point[2].x = rect2X;\n\t\t\t\tif (!zot(rect2Y)) point[2].y = rect2Y;\n\t\t\t\tif (!zot(circleX)) point[3].x = circleX;\n\t\t\t\tif (!zot(circleY)) point[3].y = circleY;\n\t\t\t\tpoint[3].parent.addChildAt(point[3], 0);\n\t\t\t}\n\t\t\tif (that.getStage()) that.getStage().update();\n\t\t}\n\n\t\tthis.update = function() {\n\t\t\tdrawShape();\n\t\t\treturn that;\n\t\t}\n\n\t\tshape.on(\"dblclick\", function() {\n\t\t\tif (!that.dblclick) return;\n\t\t\tthat.controls = !that.controls;\n\t\t\tif (that.dblclickDrag) {\n\t\t\t\tif (that.controls) {\n\t\t\t\t\tthat.noDrag();\n\t\t\t\t} else {\n\t\t\t\t\tthat.drag({currentTarget:true});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthat.controls = showControls;\n\t\tif (that.dblclick && that.dblclickDrag && !that.controls) {\n\t\t\tthat.drag({currentTarget:true});\n\t\t}\n\n\t\tthis.on(\"click\", function() {\n\t\t\tif (!that.ctrlclick) return;\n\t\t\tif (zimDefaultFrame.ctrlKey) {\n\t\t\t\tthat.clone().addTo(that.getStage().stage).mov(100);\n\t\t\t\tthat.getStage().stage.update();\n\t\t\t}\n\t\t});\n\n\t\tthis.hideControls = function() {\n\t\t\tsets.visible = false;\n\t\t\tsticks.visible = false;\n\t\t\t_controls = false;\n\t\t\tif (that.getStage()) that.getStage().update();\n\t\t\treturn that;\n\t\t}\n\t\tif (!showControls) this.hideControls();\n\t\tthis.showControls = function() {\n\t\t\tsets.visible = true;\n\t\t\tsticks.visible = true;\n\t\t\t_controls = true;\n\t\t\tsets.pos(shape.x, shape.y);\n\t\t\tsticks.pos(shape.x, shape.y);\n\t\t\tthat.addChildAt(shape,0); // put to bottom incase dragged\n\t\t\tif (that.getStage()) that.getStage().update();\n\t\t\treturn that;\n\t\t}\n\n\t\tthis.record = function(popup) {\n\t\t\t// balls are relative to blob but handles are relative to ball\n\t\t\t// points is an array of [[ballX, ballY, handleX, handleY, handle2X, handle2Y, type], etc.]\n\t\t\tif (zot(popup)) popup = false;\n\t\t\tvar points = [];\n\t\t\tvar point; var p;\n\t\t\tfor (var i=0; i<that.points.length; i++) {\n\t\t\t\tp = that.points[i];\n\t\t\t\tpoint = [\n\t\t\t\t\tzim.decimals(p[0].x),\n\t\t\t\t\tzim.decimals(p[0].y),\n\t\t\t\t\tzim.decimals(p[1].x),\n\t\t\t\t\tzim.decimals(p[1].y),\n\t\t\t\t\tzim.decimals(p[2].x),\n\t\t\t\t\tzim.decimals(p[2].y),\n\t\t\t\t\tzim.decimals(p[3].x),\n\t\t\t\t\tzim.decimals(p[3].y)\n\t\t\t\t];\n\t\t\t\tif (p[4] && p[4]!==\"straight\") point.push(p[4])\n\t\t\t\tpoints.push(point);\n\t\t\t}\n\t\t\tif (popup) {\n\t\t\t\tif (!pane) {\n\t\t\t\t\tvar pane = new zim.Pane({\n\t\t\t\t\t\tcontainer:that.getStage(),\n\t\t\t\t\t\twidth:500,\n\t\t\t\t\t\theight:500,\n\t\t\t\t\t\tdrag:true\n\t\t\t\t\t});\n\t\t\t\t\tvar textArea = new zim.TextArea(frame, 400, 400);\n\t\t\t\t\ttextArea.centerReg(pane);\n\t\t\t\t}\n\t\t\t\ttextArea.text = JSON.stringify(points);\n\t\t\t\tpane.show();\n\t\t\t}\n\t\t\treturn points;\n\t\t}\n\n\t\tvar _controls = showControls;\n\t\tObject.defineProperty(that, 'controls', {\n\t\t\tget: function() {\n\t\t\t\treturn _controls;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\t_controls = value;\n\t\t\t\tif (value) {\n\t\t\t\t\tthat.showControls();\n\t\t\t\t} else {\n\t\t\t\t\tthat.hideControls();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tvar _lockControls = lockControls;\n\t\tObject.defineProperty(that, 'lockControls', {\n\t\t\tget: function() {\n\t\t\t\treturn _lockControls;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\t_lockControls = value;\n\t\t\t\tif (value) {\n\t\t\t\t\tthat.sets.mouseChildren = false;\n\t\t\t\t\tthat.sets.mouseEnabled = false;\n\t\t\t\t} else {\n\t\t\t\t\tthat.sets.mouseChildren = true;\n\t\t\t\t\tthat.sets.mouseEnabled = true;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.lockControls = _lockControls;\n\n\t\tObject.defineProperty(that, 'color', {\n\t\t\tget: function() {\n\t\t\t\treturn _color;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (zot(value)) value = \"black\";\n\t\t\t\t_color = value;\n\t\t\t\tcolorObj.style = _color;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(that, 'borderColor', {\n\t\t\tget: function() {\n\t\t\t\treturn _borderColor;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\t_borderColor = value;\n\t\t\t\tif (!borderColorObj) drawShape();\n\t\t\t\telse borderColorObj.style = _borderColor;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(that, 'borderWidth', {\n\t\t\tget: function() {\n\t\t\t\treturn _borderWidth;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (!(value>0)) value = 0;\n\t\t\t\t_borderWidth = value;\n\t\t\t\tif (!borderWidthObj || _borderWidth == 0) drawShape();\n\t\t\t\telse {\n\t\t\t\t\tborderWidthObj.width = _borderWidth;\n\t\t\t\t\tif (dashed) {\n\t\t\t\t\t\tborderDashedObj.segments = [20, 10];\n\t\t\t\t\t\tborderDashedObj.offset = 5;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.clone = function() {\n\t\t\treturn that.cloneProps(new zim.Blob(that.color, that.borderColor, that.borderWidth, that.record(), radius, controlLength, controlType, lockControlType, sets.visible, lockControls, that.dblclick, that.dblclickDrag, that.ctrlclick, dashed));\n\t\t}\n\t\tthis.dispose = function() {\n\t\t\tfor (var i=0; i<that.points.length; i++) {\n\t\t\t\tthat.points[i][1].removeAllEventListeners();\n\t\t\t}\n\t\t\tsets.removeAllEventListeners();\n\t\t\tthat.removeAllEventListeners();\n\t\t\treturn\n\t\t}\n\t}\n\tzim.extend(zim.Blob, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-53.5\n\n/*--\nzim.Label = function(text, size, font, color, rollColor, shadowColor, shadowBlur, align, valign, lineWidth, lineHeight, fontOptions, backing, outlineColor, outlineWidth)\n\nLabel\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nMakes a label - wraps the createjs Text object.\nCan use with Button, CheckBox, RadioButtons and Pane.\nText seems to come in different sizes so we do our best.\nHave tended to find that left and alphabetic are most consistent across browsers.\nCustom fonts loaded through css can be used as well.\nNOTE: can wrap text at given width using lineWidth parameter.\n\nEXAMPLE\nvar label = new zim.Label(\"Hello\");\nlabel.center(stage); // adds label to and centers on the stage\n\nvar label = new zim.Label({\n\ttext:\"CLICK\",\n\tsize:100,\n\tfont:\"courier\",\n\tcolor:\"white\",\n\trollColor:\"red\",\n\tfontOptions:\"italic bold\"\n});\nstage.addChild(label);\nlabel.x = label.y = 100;\nlabel.on(\"click\", function(){zog(\"clicking\");});\nEND EXAMPLE\n\nPARAMETERS - supports DUO - parameters or single object with properties below\ntext - String for the the text of the label\nsize - (default 36) the size of the font in pixels\nfont - (default arial) the font or list of fonts for the text\ncolor - (default \"black\") color of font (any CSS color)\nrollColor - (default color) the rollover color of the font\nshadowColor - (default -1) for no shadow - set to any css color to see\nshadowBlur - (default 14) if shadow is present\nalign - ((default \"left\") text registration point alignment also \"center\" and \"right\"\nvalign - (default \"top\") vertical registration point alignment alse \"middle / center\", \"bottom\"\nlineWidth - (default false) for no wrapping (use \\n) Can set to number for wrap\nlineHeight - (default getMeasuredLineHeight) set to number to adjust line height\nfontOptions - (default null) css VALUES as a single string for font-style font-variant font-weight\n\teg. \"italic bold small-caps\" or just \"italic\", etc.\nbacking - (default null) a Display object for the backing of the label (eg. Shape, Bitmap, Container, Sprite)\n\tsee ZIM Pizzazz module for a fun set of Shapes like Boomerangs, Ovals, Lightning Bolts, etc.\noutlineColor - (default null - or black if outlineWidth set) - the color of the outline of the text\noutlineWidth - (default null - or (size*.2) if outlineColor set) - the thickness of the outline of the text\n\nMETHODS\nshowRollColor(boolean) - true to show roll color (used internally)\nclone() - makes a copy with properties such as x, y, etc. also copied\ndispose() - to get rid of the button and listeners\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nPROPERTIES\nlabel - references the text object of the label\ncolor - gets or sets the label text color\nrollColor - gets or sets the label rollover color\ntext - references the text property of the text object\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\nbacking - access to backing object\nenabled - default is true - set to false to disable\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nOPTIMIZED\nThis component is affected by the general zim.OPTIMIZE setting (default is false)\nif set to true, you will have to stage.update() after setting certain properties\n\nEVENTS\nSee the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+54\n\tzim.Label = function(text, size, font, color, rollColor, shadowColor, shadowBlur, align, valign, lineWidth, lineHeight, fontOptions, backing, outlineColor, outlineWidth) {\n\n\t\tvar sig = \"text, size, font, color, rollColor, shadowColor, shadowBlur, align, valign, lineWidth, lineHeight, fontOptions, backing, outlineColor, outlineWidth\";\n\t\tvar duo; if (duo = zob(zim.Label, arguments, sig, this)) return duo;\n\t\tz_d(\"54\");\n\t\tthis.zimContainer_constructor();\n\n\t\tif (zot(text)) text=\"LABEL\";\n\t\tif (text === \"\") text = \" \";\n\t\tif (zot(size)) size=36;\n\t\tif (zot(font)) font=\"arial\";\n\t\tif (zot(color)) color=\"black\";\n\t\tif (zot(rollColor)) rollColor=color;\n\t\tif (zot(shadowColor)) shadowColor=-1;\n\t\tif (zot(shadowBlur)) shadowBlur=14;\n\t\tif (zot(align)) align=\"left\";\n\t\tif (zot(valign)) valign=\"top\";\n\t\tif (zot(fontOptions)) fontOptions=\"\";\n\t\tif (!zot(outlineColor) && zot(outlineWidth)) outlineWidth = Math.round(size*.2);\n\t\tif (!zot(outlineWidth) && zot(outlineColor)) outlineColor = \"#000000\";\n\t\tif (zot(outlineWidth)) outlineWidth = 0;\n\n\t\tvar that = this;\n\t\tthis.mouseChildren = false;\n\n\t\tvar obj = this.label = new createjs.Text(String(text), fontOptions + \" \" + size + \"px \" + font, color);\n\t\tobj.textAlign = align;\n\t\tobj.lineWidth = lineWidth;\n\t\tobj.lineHeight = lineHeight;\n\t\tobj.textBaseline = \"alphabetic\";\n\t\tif (outlineWidth > 0) {\n\t\t\tvar obj2 = this.outlineLabel = obj.clone();\n\t\t\tobj2.color = outlineColor;\n\t\t\tobj2.outline = outlineWidth;\n\t\t\tthis.addChild(obj2);\n\t\t}\n\t\tif (shadowColor != -1 && shadowBlur > 0) obj.shadow = new createjs.Shadow(shadowColor, 3, 3, shadowBlur);\n\t\tthis.addChild(obj);\n\n\t\tfunction setSize() {\n\t\t\tvar b = obj.getBounds();\n\t\t\tvar yAdjust;\n\t\t\tif (valign == \"top\") {\n\t\t\t\tobj.y = size-size/6;\n\t\t\t\tif (obj2) obj2.y = size-size/6;\n\t\t\t\tyAdjust = 0;\n\t\t\t} else if (valign == \"center\" || valign == \"middle\") {\n\t\t\t\tyAdjust = - b.height / 2;\n\t\t\t\tobj.y = size*.3;\n\t\t\t\tif (obj2) obj2.y = size*.3;\n\t\t\t} else { // bottom align\n\t\t\t\tyAdjust = -b.height;\n\t\t\t}\n\t\t\tif (backing) {\n\t\t\t\tvar bb = backing.getBounds();\n\t\t\t\tthat.setBounds(bb.x, bb.y, bb.width, bb.height);\n\t\t\t} else {\n\t\t\t\tthat.setBounds(b.x, yAdjust, b.width, b.height);\n\t\t\t\thitArea.graphics.c().f(\"black\").r(that.getBounds().x, that.getBounds().y, that.getBounds().width, that.getBounds().height);\n\t\t\t}\n\t\t\tzim.center(obj, that);\n\t\t\tobj.y += size/32; // backing often on capital letters without descenders - was /16\n\t\t\tif (obj2) {\n\t\t\t\tzim.center(obj2, that,0);\n\t\t\t\tobj2.y += size/32;\n\t\t\t}\n\t\t}\n\t\tif (zot(backing)) {\n\t\t\tvar hitArea = new createjs.Shape();\n\t\t\tthat.hitArea = hitArea;\n\t\t}\n\t\tsetSize();\n\n\t\tif (!zot(backing)) {\n\t\t\tthis.backing = backing;\n\t\t \tzim.center(backing, this, true, 0);\n\t\t}\n\n\t\tObject.defineProperty(that, 'text', {\n\t\t\tget: function() {\n\t\t\t\tvar t = (obj.text == \" \") ? \"\" : obj.text;\n\t\t\t\treturn t;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (zot(value) || value === \"\") {value = \" \";}\n\t\t\t\tobj.text = String(value);\n\t\t\t\tif (obj2) obj2.text = String(value);\n\t\t\t\tsetSize();\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(that, 'color', {\n\t\t\tget: function() {\n\t\t\t\treturn color;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (rollColor == color) rollColor = value;\n\t\t\t\tcolor = value;\n\t\t\t\tobj.color = color;\n\t\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(that, 'outlineColor', {\n\t\t\tget: function() {\n\t\t\t\treturn outlineColor;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\toutlineColor = value;\n\t\t\t\tif (obj2) obj2.color = outlineColor;\n\t\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(that, 'rollColor', {\n\t\t\tget: function() {\n\t\t\t\treturn rollColor;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\trollColor = value;\n\t\t\t}\n\t\t});\n\n\t\tthis._enabled = true;\n\t\tObject.defineProperty(that, 'enabled', {\n\t\t\tget: function() {\n\t\t\t\treturn that._enabled;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tzenable(that, value);\n\t\t\t\tobj.color = color;\n\t\t\t\tthat.mouseChildren = false;\n\t\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t\t}\n\t\t});\n\n\t\tthis.showRollColor = function(yes) {\n\t\t\tif (zot(yes)) yes = true;\n\t\t\tif (yes) {\n\t\t\t\tobj.color = rollColor;\n\t\t\t} else {\n\t\t\t\tobj.color = color;\n\t\t\t}\n\t\t\tif (that.getStage()) that.getStage().update();\n\t\t}\n\n\t\tthis.on(\"mouseover\", function(e) {that.showRollColor();});\n\t\tthis.on(\"mouseout\", function(e) {that.showRollColor(false);});\n\n\t\tthis.clone = function() {\n\t\t\treturn that.cloneProps(new zim.Label(that.text, size, font, color, rollColor, shadowColor, shadowBlur, align, valign, lineWidth, lineHeight, fontOptions,\n\t\t\t\t!zot(backing)?backing.clone():null, outlineColor, outlineWidth));\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tthat.removeAllEventListeners();\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.Label, zim.Container, \"clone\", \"zimContainer\");\n\t//-54\n\n/*--\nzim.Button = function(width, height, label, color, rollColor, borderColor, borderWidth, corner, shadowColor, shadowBlur, hitPadding, gradient, gloss, flatBottom, backing, rollBacking, rollPersist, icon, rollIcon, toggle, rollToggle, toggleEvent, dashed)\n\nButton\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nMakes a button with rollover and many more features - see parameters.\nYou will need to pass in a zim.Label to change the font properties of the button from the default.\nYou will then need to add the button to the stage and add a mousedown or click event.\nButton rollover is done automatically.\n\nYou can set a backing display object (Shape, Bitmap, etc.) in place of the standard rectangle.\nYou can set an icon display object in place of the standard text\nYou can set the Button to toggle between text, backings or icons\nSEE the ZIM Pizzazz series for a growing selection of backings and icons\nhttp://zimjs.com/code/bits/view/pizzazz.html\nhttp://zimjs.com/code/bits/view/icons.html\n\n\nEXAMPLE\nvar button = new zim.Button(\"CLICK\");\nbutton.center(stage);\nbutton.on(\"click\", function(){zog(\"clicking\");});\n\n// OR add custom label (needed to change label color for instance)\nvar label = new zim.Label({\n\ttext:\"POWER OPTION\",\n\tsize:40,\n\tcolor:\"violet\",\n\tfontOptions:\"bold\"\n});\nvar button = new zim.Button({\n\tlabel:label,\n\twidth:390,\n\theight:110,\n\tcolor:\"purple\",\n\trollColor:\"MediumOrchid\",\n\tborderWidth:8,\n\tborderColor:\"violet\",\n\tgradient:.3,\n\tcorner:0\n});\nbutton.center(stage);\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nwidth - (default 200) the width of the button\nheight - (default 60) the height of the button\nlabel - (default \"CLICK\") ZIM Label or plain text with default settings (white)\ncolor - (default \"orange\") backing color of button (any CSS color)\nrollColor - (default \"lightorange\") rollover color of button\nborderColor - (default null) the color of the border\nborderWidth - (default null) thickness of the border\ncorner - (default 20) the round of the corner (set to 0 for no corner)\nshadowColor - (default rgba(0,0,0,.3)) set to -1 for no shadow\nshadowBlur - (default 14) how blurred the shadow is if the shadow is set\nhitPadding - (default 0) adds extra hit area to the button (good for mobile)\ngradient - (default 0) 0 to 1 (try .3) adds a gradient to the button\ngloss - (default 0) 0 to 1 (try .1) adds a gloss to the button\nflatBottom - (default false) top corners can round and bottom stays flat (used for ZIM Tabs)\nbacking - (default null) a Display object for the backing of the button (eg. Shape, Bitmap, Container, Sprite)\n\tsee ZIM Pizzazz module for a fun set of Button Shapes like Boomerangs, Ovals, Lightning Bolts, etc.\n\thttp://zimjs.com/code/bits/view/pizzazz.html\nrollBacking - (default null) a Display object for the backing of the rolled-on button\nrollPersist - (default false) set to true to keep rollover state when button is pressed even if rolling off\nicon - (default false) set to display object to add icon at the center of the button and remove label\n\thttp://zimjs.com/code/bits/view/icons.html\nrollIcon - (default false) set to display object to show icon on rollover\ntoggle - (default null) set to string to toggle with label or display object to toggle with icon or if no icon, the backing\nrollToggle - (default null) set to display object to toggle with rollIcon or rollBacking if no icon\n\tthere is no rollToggle for a label - that is handled by rollColor on the label\ntoggleEvent - (default mousedown for mobile and click for not mobile) what event causes the toggle\ndashed - (default false) set to true to turn the border to dashed - if the borderColor or borderWidth is provided\n\nMETHODS\nsetBackings(newBacking, newRollBacking) - dynamically set backing and rollBacking on button (both default to null and if empty, removes backings)\nsetIcons(newIcon, newRollIcon) - dynamically set icon and rollIcon on button (both default to null and if empty, removes icons)\ntoggle(state) - forces a toggle of label if toggle param is string, else toggles icon if icon is set or otherwise toggles backing\n\tstate defaults to null so just toggles\n\tpass in true to go to the toggled state and false to go to the original state\nclone() - makes a copy with properties such as x, y, etc. also copied\ndispose() - to get rid of the button and listeners\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nPROPERTIES\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\ntext - references the text property of the Label object of the button\nlabel - gives access to the label\nbacking - references the backing of the button\nrollBacking - references the rollBacking (if set)\nicon - references the icon of the button (if set)\nrollIcon - references the rollIcon (if set)\ntoggleObj - references the toggle object (string or display object if set)\nrollToggle - references the rollToggle (if set)\ntoggled - true if button is in toggled state, false if button is in original state\nenabled - default is true - set to false to disable\nrollPersist - default is false - set to true to keep rollover state when button is pressed even if rolling off\ncolor - get or set non-rolled on backing color (if no backing specified)\nrollColor - get or set rolled on backing color\nfocus - get or set the focus property of the Button used for tabOrder\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nOPTIMIZED\nThis component is affected by the general zim.OPTIMIZE setting (default is false)\nif set to true, you will have to stage.update() after setting certain properties\nfor example seeing toggle take effect\n\nEVENTS\nSee the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+55\n\tzim.Button = function(width, height, label, color, rollColor, borderColor, borderWidth, corner, shadowColor, shadowBlur, hitPadding, gradient, gloss, flatBottom, backing, rollBacking, rollPersist, icon, rollIcon, toggle, rollToggle, toggleEvent, dashed) {\n\n\t\tvar sig = \"width, height, label, color, rollColor, borderColor, borderWidth, corner, shadowColor, shadowBlur, hitPadding, gradient, gloss, flatBottom, backing, rollBacking, rollPersist, icon, rollIcon, toggle, rollToggle, toggleEvent, dashed\";\n\t\tvar duo; if (duo = zob(zim.Button, arguments, sig, this)) return duo;\n\t\tz_d(\"55\");\n\t\tthis.zimContainer_constructor();\n\n\t\tif (zot(width)) width=200;\n\t\tif (zot(height)) height=60;\n\t\tif (zot(color)) color=\"#C60\";\n\t\tif (zot(rollColor)) rollColor=\"#F93\";\n\t\tif (zot(borderColor)) borderColor=null;\n\t\tif (zot(borderWidth)) borderWidth=null;\n\t\tif (zot(corner)) corner=20;\n\t\tif (zot(shadowColor)) shadowColor=\"rgba(0,0,0,.3)\";\n\t\tif (zot(shadowBlur)) shadowBlur=14;\n\t\tif (zot(hitPadding)) hitPadding=0;\n\t\tif (zot(gradient)) gradient = 0;\n\t\tif (zot(gloss)) gloss = 0;\n\t\tif (zot(flatBottom)) flatBottom = false;\n\t\tif (zot(label)) {if (zot(icon)) {label = \"PRESS\";} else {label = \"\";}}\n\t\tif (!zot(toggle) && zot(toggleEvent)) toggleEvent = zim.mobile()?\"mousedown\":\"click\";\n\t\t// text, size, font, color, rollColor, shadowColor, shadowBlur, align, valign\n\t\tif (typeof label === \"string\" || typeof label === \"number\") label = new zim.Label(label, 36, \"arial\", \"white\", null, null, null, \"center\", \"middle\");\n\t\tif (zot(rollPersist)) rollPersist = false;\n\t\tthis.rollPersist = rollPersist;\n\t\tif (zot(dashed)) dashed = false;\n\n\t\tvar that = this;\n\t\tthis.mouseChildren = false;\n\t\tthis.cursor = \"pointer\";\n\t\tthat.focus = false;\n\n\t\tvar buttonBacking;\n\t\tif (zot(backing)) {\n\t\t\tbuttonBacking = new zim.Rectangle(width,height,color,borderColor,borderWidth,corner,flatBottom,dashed);\n\t\t} else {\n\t\t\tbuttonBacking = backing;\n\t\t\tbuttonBacking.x = width / 2;\n\t\t\tbuttonBacking.y = height / 2;\n\t\t\tif (!zot(rollBacking)) {\n\t\t\t\trollBacking.x =  width / 2;\n\t\t\t\trollBacking.y = height / 2;\n\t\t\t\tthis.rollBacking = rollBacking;\n\t\t\t}\n\t\t}\n\t\tthis.addChild(buttonBacking);\n\t\tthis.backing = buttonBacking;\n\n\t\tif (!zot(icon)) {\n\t\t\tthis.addChild(icon);\n\t\t\ticon.x = width/2;\n\t\t\ticon.y = height/2;\n\t\t\tthis.icon = icon;\n\t\t}\n\t\tif (!zot(rollIcon)) {\n\t\t\tthis.rollIcon = rollIcon;\n\t\t\trollIcon.x = width/2;\n\t\t\trollIcon.y = height/2;\n\t\t}\n\n\t\tvar corner2 = (flatBottom) ? 0 : corner;\n\n\t\tif (gradient > 0 && zot(backing)) { // add an overlay\n\t\t\tvar gr = new createjs.Shape();\n\t\t\tgr.graphics.lf([\"rgba(255,255,255,\"+gradient+\")\",\"rgba(0,0,0,\"+gradient+\")\"], [0, 1], 0, 0, 0, height-borderWidth);\n\t\t\tgr.graphics.rc(borderWidth/2, borderWidth/2, width-borderWidth, height-borderWidth, corner, corner, corner2, corner2);\n\t\t\tbuttonBacking.addChild(gr);\n\t\t}\n\n\t\tif (gloss > 0 && zot(backing)) { // add an overlay\n\t\t\tvar gl = new createjs.Shape();\n\t\t\tgl.graphics.f(\"rgba(255,255,255,\"+gloss+\")\");\n\t\t\tgl.graphics.rc(borderWidth/2, borderWidth/2, width-borderWidth, (height-borderWidth)/2, corner, corner, 0, 0);\n\t\t\tgl.graphics.f(\"rgba(0,0,0,\"+gloss+\")\");\n\t\t\tgl.graphics.rc(borderWidth/2, height/2, width-borderWidth, (height-borderWidth)/2, 0, 0, corner2, corner2);\n\t\t\tbuttonBacking.addChild(gl);\n\t\t}\n\n\t\tif (hitPadding > 0) {\n\t\t\tvar rect = new createjs.Shape();\n\t\t\trect.graphics.f(\"#000\").r(-hitPadding,-hitPadding,width+hitPadding*2,height+hitPadding*2);\n\t\t\tthis.hitArea = rect;\n\t\t}\n\n\t\tif (shadowColor != -1 && shadowBlur > 0) {\n\t\t\tbuttonBacking.shadow = new createjs.Shadow(shadowColor, 3, 3, shadowBlur);\n\t\t\tif (!zot(rollBacking)) rollBacking.shadow = new createjs.Shadow(shadowColor, 3, 3, shadowBlur);\n\t\t}\n\t\tthis.setBounds(0,0,width,height);\n\t\tthis.addChild(label);\n\t\tlabel.center(this);\n\t\tlabel.y+=1;\n\t\tthis.label = label;\n\n\t\tvar pressCheck = false;\n\t\tthis.on(\"mousedown\", function(){pressCheck=true;});\n\t\tthis.on(\"pressup\", function(){\n\t\t\tpressCheck=false;\n\t\t\tif (that.rollPersist && !rollCheck) removeRoll();\n\t\t});\n\n\t\tvar rollCheck = false;\n\t\tthis.on(\"mouseover\", buttonOn);\n\t\tfunction buttonOn(e) {\n\t\t\trollCheck = true;\n\t\t\tif (zot(backing)) {\n\t\t\t\tbuttonBacking.color = rollColor;\n\t\t\t} else if (!zot(rollBacking)) {\n\t\t\t\tif (zot(icon)) {\n\t\t\t\t\tif (that.toggled) {\n\t\t\t\t\t\tthat.removeChild(toggle);\n\t\t\t\t\t\tthat.addChildAt(rollToggle, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthat.removeChild(backing);\n\t\t\t\t\t\tthat.addChildAt(rollBacking, 0);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthat.removeChild(backing);\n\t\t\t\t\tthat.addChildAt(rollBacking, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!zot(rollIcon)) {\n\t\t\t\tif (that.toggled) {\n\t\t\t\t\tthat.removeChild(toggle);\n\t\t\t\t\tthat.addChild(rollToggle);\n\t\t\t\t} else {\n\t\t\t\t\tthat.removeChild(icon);\n\t\t\t\t\tthat.addChild(rollIcon);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthat.label.showRollColor();\n\t\t\tif (that.getStage()) that.getStage().update();\n\t\t}\n\n\t\tthis.on(\"mouseout\", buttonOff); // thanks Maxime Riehl\n\t\tfunction buttonOff(e) {\n\t\t\trollCheck = false;\n\t\t\tthat.off(\"mouseout\", buttonOff);\n\t\t\tif (that.rollPersist) {\n\t\t\t\tif (!pressCheck) removeRoll();\n\t\t\t} else {\n\t\t\t\tremoveRoll();\n\t\t\t}\n\t\t}\n\t\tfunction removeRoll() {\n\t\t\tif (zot(backing)) {\n\t\t\t\tbuttonBacking.color = color;\n\t\t\t} else if (!zot(rollBacking)) {\n\t\t\t\tif (zot(icon)) {\n\t\t\t\t\tif (that.toggled) {\n\t\t\t\t\t\tthat.removeChild(rollToggle);\n\t\t\t\t\t\tthat.addChildAt(toggle, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthat.removeChild(rollBacking);\n\t\t\t\t\t\tthat.addChildAt(backing, 0);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthat.removeChild(rollBacking);\n\t\t\t\t\tthat.addChildAt(backing, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!zot(rollIcon)) {\n\t\t\t\tif (that.toggled) {\n\t\t\t\t\tthat.removeChild(rollToggle);\n\t\t\t\t\tthat.addChild(toggle);\n\t\t\t\t} else {\n\t\t\t\t\tthat.removeChild(rollIcon);\n\t\t\t\t\tthat.addChild(icon);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthat.label.showRollColor(false);\n\t\t\tif (that.getStage()) that.getStage().update();\n\t\t}\n\n\t\tthis.toggled = false;\n\t\tthis.toggleObj = toggle;\n\t\tthis.rollToggle = rollToggle;\n\t\tvar toggleFunction;\n\t\tvar originalText = label.text;\n\t\tif (!zot(toggle)) {\n\t\t\ttoggleFunction = this.on(toggleEvent, function() {\n\t\t\t\tthat.toggled = !that.toggled;\n\t\t\t\tsetToggled(that.toggled);\n\t\t\t});\n\t\t}\n\n\t\tfunction setToggled() {\n\t\t\tif (typeof toggle == \"string\") { // change label text\n\t\t\t\tthat.text = that.toggled?toggle:originalText;\n\t\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t\t} else if (!zot(icon)) { // change icons\n\t\t\t\tthat.setIcons(that.toggled?toggle:icon, that.toggled?rollToggle:rollIcon);\n\t\t\t} else { // change backings\n\t\t\t\tthat.setBackings(that.toggled?toggle:backing, that.toggled?rollToggle:rollBacking);\n\t\t\t}\n\t\t}\n\n\t\tObject.defineProperty(that, 'text', {\n\t\t\tget: function() {\n\t\t\t\tvar t = (label.text == \" \") ? \"\" : label.text;\n\t\t\t\treturn t;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tlabel.text = value;\n\t\t\t\tlabel.center(this);\n\t\t\t\tlabel.y+=1;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(that, 'color', {\n\t\t\tget: function() {\n\t\t\t\treturn color;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tcolor = value;\n\t\t\t\tif (buttonBacking.color) {\n\t\t\t\t\tbuttonBacking.color = color;\n\t\t\t\t} else {\n\t\t\t\t\tif (zon) zog(\"zim.Button - backing has no color property\");\n\t\t\t\t}\n\t\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(that, 'rollColor', {\n\t\t\tget: function() {\n\t\t\t\treturn rollColor;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\trollColor = value;\n\t\t\t}\n\t\t});\n\n\t\tthis._enabled = true;\n\t\tObject.defineProperty(that, 'enabled', {\n\t\t\tget: function() {\n\t\t\t\treturn that._enabled;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tzenable(that, value);\n\t\t\t\tthat.mouseChildren = false;\n\t\t\t\tlabel.color = label.color;\n\t\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t\t}\n\t\t});\n\n\t\t// setBackings does not swap newBacking for newRollBacking but rather\n\t\t// the old backing and rollBacking for these new ones - same with setIcons below\n\t\t// used internally by toggle but can also be used to dynamically change backings and icons\n\t\t// or if parameters left blank to remove backings and icons\n\t\tthis.setBackings = function(newBacking, newRollBacking) {\n\t\t\tswapObjects(\"backing\", \"rollBacking\", newBacking, newRollBacking, 0);\n\t\t}\n\t\tthis.setIcons = function(newIcon, newRollIcon) {\n\t\t\tswapObjects(\"icon\", \"rollIcon\", newIcon, newRollIcon, that.numChildren-1);\n\t\t}\n\t\tfunction swapObjects(objName, objRollName, obj, roll, index) {\n\t\t\tif (that.contains(that[objName])) {\n\t\t\t\tthat.removeChild(that[objName]);\n\t\t\t\tthat.addChildAt(obj, index);\n\t\t\t} else if (that.contains(that[objRollName])) {\n\t\t\t\tthat.removeChild(that[objRollName]);\n\t\t\t\tthat.addChildAt(roll, index);\n\t\t\t}\n\t\t\tthat[objName] = obj; // be careful - this is assignment\n\t\t\tthat[objRollName] = roll;\n\t\t\tif (that[objName]) {\n\t\t\t\tthat[objName].x = width/2;\n\t\t\t\tthat[objName].y = height/2;\n\t\t\t}\n\t\t\tif (that[objRollName]) {\n\t\t\t\tthat[objRollName].x = width/2;\n\t\t\t\tthat[objRollName].y = height/2;\n\t\t\t}\n\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t}\n\n\t\tthis.toggle = function(state) {\n\t\t\tif (zot(state)) {\n\t\t\t\tthat.toggled = !that.toggled;\n\t\t\t} else {\n\t\t\t\tthat.toggled = state;\n\t\t\t}\n\t\t\tsetToggled();\n\t\t}\n\n\t\tthis.clone = function() {\n\t\t\tvar but = new zim.Button(\n\t\t\t\twidth, height, label.clone(), color, rollColor, borderColor, borderWidth, corner, shadowColor, shadowBlur, hitPadding, gradient, gloss, flatBottom,\n\t\t\t\t!zot(backing)?backing.clone():null,\n\t\t\t\t!zot(rollBacking)?rollBacking.clone():null,\n\t\t\t\trollPersist,\n\t\t\t\t!zot(icon)?icon.clone():null, !zot(rollIcon)?rollIcon.clone():null,\n\t\t\t\t!zot(toggle)?(typeof toggle == \"string\"?toggle:toggle.clone()):null,\n\t\t\t\t!zot(rollToggle)?rollToggle.clone():null,\n\t\t\t\ttoggleEvent, dashed\n\n\t\t\t);\n\t\t\treturn that.cloneProps(but);\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tthat.removeAllEventListeners();\n\t\t\tthat.removeChild(buttonBacking);\n\t\t\tthat.removeChild(rollBacking);\n\t\t\tthat.removeChild(icon);\n\t\t\tthat.removeChild(that.label);\n\t\t\tif (that.label) that.label.dispose();\n\t\t\tbuttonBacking = null;\n\t\t\trollBacking = null;\n\t\t\ticon = null;\n\t\t\tthat.label = null;\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.Button, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-55\n\n/*--\nzim.CheckBox = function(size, label, startChecked, color, margin, type)\n\nCheckBox\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nA checkbox that when pressed toggles the check and a checked property.\n\nEXAMPLE\nvar checkBox = new zim.CheckBox(50, \"TEST\");\ncheckBox.center(stage);\ncheckBox.on(\"change\", function() {\n\tzog(checkBox.checked); // will be true then false, etc.\n});\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nsize - (default 60) size in pixels (always square)\nlabel - (default null) ZIM Label object - or String to make a default label (black)\nstartChecked - (default false) an initial parameter to set checked if true\ncolor - (default \"#111\") the stroke and text color - background is set to a .5 alpha white\nmargin - (default 10) is on outside of box so clicking or pressing is easier\ntype - (default check) could be square (box) or x\n\nMETHODS\nsetChecked(Boolean) - defaults to true to set button checked (or use checked property)\nclone() - makes a copy with properties such as x, y, etc. also copied\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nPROPERTIES\nchecked - gets or sets the check of the box\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\nlabel - gives access to the label\ntext - the text of the label\ncheck - gives access to the check mark ie. check.color = \"blue\";\ncolor - gets or sets the color of the check\nenabled - default is true - set to false to disable\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nOPTIMIZED\nThis component is affected by the general zim.OPTIMIZE setting (default is false)\nif set to true, you will have to stage.update() after setting certain properties\n\nACTIONEVENT\nThis component is affected by the general zim.ACTIONEVENT setting\nThe default is \"mousedown\" - if set to something else the component will act on click (press)\n\nEVENTS\ndispatches a \"change\" event when pressed on but not when the checked property is set\n\nALSO: See the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+56\n\tzim.CheckBox = function(size, label, startChecked, color, margin, type) {\n\n\t\tvar sig = \"size, label, startChecked, color, margin, type\";\n\t\tvar duo; if (duo = zob(zim.CheckBox, arguments, sig, this)) return duo;\n\t\tz_d(\"56\");\n\t\tthis.zimContainer_constructor();\n\n\t\tif (zot(size)) size = 60;\n\t\tif (zot(label)) label = null;\n\t\tif (typeof label === \"string\" || typeof label === \"number\") label = new zim.Label(label, size*5/6, \"arial\", color);\n\t\tvar myChecked = (zot(startChecked)) ? false : startChecked;\n\t\tif (zot(color)) color = \"#111\";\n\t\tif (zot(margin)) margin = 10; //20;\n\t\tif (type != \"box\" && type != \"square\" && type != \"x\") type = \"check\";\n\n\t\tthis.setBounds(-margin, -margin, size+margin*2, size+margin*2);\n\n\t\tvar that = this;\n\t\tthis.cursor = \"pointer\";\n\n\t\tvar box = new createjs.Shape();\n\t\tvar g = box.graphics;\n\t\tg.f(\"rgba(255,255,255,.5)\").r(0,0,size,size);\n\t\tg.s(color).ss(size/10).r(size/7, size/7, size-size/7*2, size-size/7*2);\n\t\tthis.addChild(box);\n\n\t\tvar fullWidth = size;\n\n\t\tif (label) {\n\t\t\tthis.addChild(label);\n\t\t\tlabel.x = size*1.3 + margin; //this.getBounds().width;\n\t\t\tlabel.y = size/8;\n\t\t\tthis.label = label;\n\t\t\tthis.setBounds(-margin, -margin, size+margin*3+label.getBounds().width, Math.max(size+margin*2, label.getBounds().height));\n\t\t\tfullWidth = label.x + label.width;\n\t\t}\n\n\t\tvar backing = new createjs.Shape();\n\t\tg = backing.graphics;\n\t\tg.f(\"rgba(0,0,0,.01)\").r(\n\t\t\tthis.getBounds().x,\n\t\t\tthis.getBounds().y,\n\t\t\tfullWidth+(margin*2),\n\t\t\tthis.getBounds().height\n\t\t);\n\t\tthis.hitArea = backing;\n\t\t// hitArea will stop rollovers on labels but oh well\n\n\t\tvar check = new createjs.Shape();\n\t\tvar g2 = check.graphics;\n\t\tvar checkColor = \"#000\";\n\t\tif (type == \"check\") {\n\t\t\tg2.f(checkColor).p(\"AnQAdICBiaIEEDZIF8nfICfB4In/KPg\"); // width about 90 reg in middle\n\t\t} else if (type == \"box\" || type == \"square\") {\n\t\t\tg2.f(checkColor).dr(-35,-35,70,70);\n\t\t} else { // x\n\t\t\tg2.f(checkColor).p(\"AmJEVIEUkTIkXkWIB4h5IEWEYIETkTIB4B3IkTESIEQERIh4B4IkRkRIkSEVg\"); // width about 90 reg in middle\n\t\t}\n\n\t\tvar cW = 95\n\t\tcheck.setBounds(-cW/2, -cW/2, cW, cW);\n\t\tvar scale = size/(cW+66);\n\n\t\tcheck.scaleX = check.scaleY = scale;\n\t\tcheck.alpha = .9;\n\t\tcheck.x = size/2;\n\t\tcheck.y = size/2;\n\n\t\tif (myChecked) this.addChild(check);\n\t\tthis.on((zim.ACTIONEVENT==\"mousedown\")?\"mousedown\":\"click\", toggleCheck);\n\n\t\tObject.defineProperty(that, 'checked', {\n\t\t\tget: function() {\n\t\t\t\treturn myChecked;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tthat.setChecked(value);\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(that, 'text', {\n\t\t\tget: function() {\n\t\t\t\tif (label) return label.text;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (label) {\n\t\t\t\t\tlabel.text = value;\n\t\t\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(check, 'color', {\n\t\t\tget: function() {\n\t\t\t\treturn checkColor;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (myChecked) {that.removeChild(check);}\n\t\t\t\tcheck = new createjs.Shape();\n\t\t\t\tg2 = check.graphics;\n\t\t\t\tcheckColor = value;\n\t\t\t\tg2.f(checkColor).p(\"AnQAdICBiaIEEDZIF8nfICfB4In/KPg\");\n\t\t\t\tcheck.scaleX = check.scaleY = scale;\n\t\t\t\tcheck.alpha = .9;\n\t\t\t\tcheck.x = size/2;\n\t\t\t\tcheck.y = size/2;\n\t\t\t\tif (myChecked) that.addChild(check);\n\t\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(that, 'check', {\n\t\t\tget: function() {\n\t\t\t\treturn check;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tzog(\"ZIM CheckBox - check is read only\");\n\t\t\t}\n\t\t});\n\n\t\tthis._enabled = true;\n\t\tObject.defineProperty(that, 'enabled', {\n\t\t\tget: function() {\n\t\t\t\treturn that._enabled;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tzenable(that, value);\n\t\t\t}\n\t\t});\n\n\t\tfunction toggleCheck(e) {\n\t\t\tmyChecked = !myChecked;\n\t\t\tthat.setChecked(myChecked);\n\t\t\tthat.dispatchEvent(\"change\");\n\t\t}\n\n\t\tthis.setChecked = function(value) {\n\t\t\tif (zot(value)) value = true;\n\t\t\tmyChecked = value;\n\t\t\tif (myChecked) {\n\t\t\t\tthat.addChild(check);\n\t\t\t} else {\n\t\t\t\tthat.removeChild(check);\n\t\t\t}\n\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t}\n\n\t\tthis.clone = function() {\n\t\t\treturn that.cloneProps(new zim.CheckBox(size, label.clone(), startChecked, color, margin, type));\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tthat.removeAllEventListeners();\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.CheckBox, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-56\n\n/*--\nzim.RadioButtons = function(size, buttons, vertical, color, spacing, margin, always)\n\nRadioButtons\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nA radio button set that lets you pick from choices.\nRadio buttons can display radio buttons vertically (default) or horizontally.\n\nEXAMPLE\nvar radioButtons = new zim.RadioButtons(50, [\"ONE\", \"TWO\", \"THREE\"]);\nradioButtons.center(stage);\nradioButtons.on(\"change\", function() {\n\tzog(radioButtons.text); // will be ONE, TWO or THREE\n\tzog(radioButtons.selectedIndex); // will be 0, 1, or 2\n});\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nsize - (default 60) in pixels\nbuttons - an array of button data objects as follows:\n\t[{label:ZIM Label or text, id:optional id, selected:optional Boolean}, {etc...}]\n\tor just a list of labels for default labels [\"hi\", \"bye\", \"what!\"]\nvertical - (default true) displays radio buttons vertically - set to false to display horizontally\ncolor - (default \"#111\") the stroke and font color - background is set to a .5 alpha white\nspacing - (size*.2 for vertical and size for horizontal) the space between radio button objects\nmargin - (size/5) the space around the radio button itself\nalways - (default false) if set true, cannot click on selection to unselect it\n\nMETHODS\nsetSelected(num) - sets the selected index (or use selectedIndex) -1 is default (none)\nclone() - makes a copy with properties such as x, y, etc. also copied\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nPROPERTIES\nselected - gets the selected object - selected.label, selected.id, etc.\nselectedIndex - gets or sets the selected index of the buttons\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\nlabel - current selected label object\ntext - current selected label text\nid - current selected id\nlabels - an array of the ZIM Label objects. labels[0].text = \"YUM\"; labels[2].y -= 10;\ndots - an array of the zim Shape dot objects. dots[0].color = \"yellow\";\nenabled - default is true - set to false to disable\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nOPTIMIZED\nThis component is affected by the general zim.OPTIMIZE setting (default is false)\nif set to true, you will have to stage.update() after setting certain properties\nand stage.update() in change event to see component change its graphics\n\nACTIONEVENT\nThis component is affected by the general zim.ACTIONEVENT setting\nThe default is \"mousedown\" - if set to something else the component will act on click (press)\n\nEVENTS\ndispatches a \"change\" event when pressed but not when selectedIndex is set\nthen ask for the properties above for info\n\nALSO: See the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+57\n\tzim.RadioButtons = function(size, buttons, vertical, color, spacing, margin, always) {\n\n\t\tvar sig = \"size, buttons, vertical, color, spacing, margin, always\";\n\t\tvar duo; if (duo = zob(zim.RadioButtons, arguments, sig, this)) return duo;\n\t\tz_d(\"57\");\n\t\tthis.zimContainer_constructor();\n\n\t\tif (zot(size)) size = 60;\n\t\tsize = Math.max(5, size);\n\t\tif (zot(buttons)) buttons = [\"A\", \"B\", \"C\"];\n\t\tif (zot(vertical)) vertical = true;\n\t\tif (zot(color)) color = \"#111\";\n\t\tif (zot(spacing)) spacing = (vertical) ? size*.2 : size;\n\t\tif (zot(margin)) margin =  size/5;\n\n\t\tvar that = this;\n\t\tthis.cursor = \"pointer\";\n\t\tthis.labels = [];\n\t\tthis.dots = [];\n\t\tvar currentObject; // reference to the current data object\n\t\tif (typeof buttons == \"string\") {\n\t\t\t// convert to buttons object literal (for cloning)\n\t\t\tvar bString = buttons;\n\t\t\tbuttons = [];\n\t\t\tfor (var i=0; i<bString.length; i++) {\n\t\t\t\tbuttons.push({label:bString[i]});\n\t\t\t}\n\t\t}\n\n\t\tvar buttonContainer = new zim.Container();\n\t\tthis.addChild(buttonContainer);\n\t\tbuttonContainer.on((zim.ACTIONEVENT==\"mousedown\")?\"mousedown\":\"click\", pressBut);\n\t\tfunction pressBut(e) {\n\t\t\tvar index = buttonContainer.getChildIndex(e.target);\n\t\t\tif (always) {if (that.selectedIndex == index) return;}\n\t\t\tthat.setSelected(index);\n\t\t\tthat.dispatchEvent(\"change\");\n\t\t}\n\n\t\t// loop through data and call makeButton() each time\n\t\tmakeButtons();\n\t\tvar lastBut;\n\t\tfunction makeButtons() {\n\t\t\t// test for duplicate selected true properties (leave last selected)\n\t\t\tvar data; var selectedCheck = false;\n\t\t\tfor (var i=buttons.length-1; i>=0; i--) {\n\t\t\t\tdata = buttons[i];\n\t\t\t\tif (data.selected && data.selected === true) {\n\t\t\t\t\tif (!selectedCheck) {\n\t\t\t\t\t\tselectedCheck = true; // first item marked selected\n\t\t\t\t\t\tthat.id = data.id;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdata.selected = \"false\"; // turn off selected\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbuttonContainer.removeAllChildren();\n\t\t\tvar but; var currentLocation = 0;\n\t\t\tfor (var i=0; i<buttons.length; i++) {\n\t\t\t\tdata = buttons[i];\n\n\t\t\t\tif (typeof data === \"string\" || typeof data === \"number\") {\n\t\t\t\t\tvar d = {selected:false, label:new zim.Label(data, size*5/6, \"arial\", color)};\n\t\t\t\t\tdata = d;\n\t\t\t\t}\n\t\t\t\tif (data.label && typeof data.label === \"string\" || typeof data.label === \"number\") {\n\t\t\t\t\tdata.label = new zim.Label(data.label, size*5/6, \"arial\", color);\n\t\t\t\t}\n\t\t\t\tthat.labels.push(data.label);\n\t\t\t\tdata.index = i;\n\t\t\t\tbuttons[i] = data; // for cloning\n\t\t\t\tbut = makeButton(data.selected, data.label);\n\t\t\t\tbut.obj = data;\n\t\t\t\tif (data.selected) currentObject = but.obj;\n\n\t\t\t\tbuttonContainer.addChild(but);\n\n\t\t\t\tif (vertical) {\n\t\t\t\t\tbut.y = currentLocation;\n\t\t\t\t\tcurrentLocation += but.getBounds().height + spacing;\n\t\t\t\t} else {\n\t\t\t\t\tbut.x = currentLocation;\n\t\t\t\t\tcurrentLocation += but.getBounds().width + spacing;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// making a single button - similar to CheckBox class\n\t\tfunction makeButton(mySelected, label) {\n\t\t\tvar but = new zim.Container();\n\t\t\tbut.mouseChildren = false;\n\t\t\tbut.setBounds(-margin, -margin, size+margin*2, size+margin*2);\n\n\t\t\tvar box = new createjs.Shape();\n\t\t\tvar g = box.graphics;\n\t\t\tg.f(\"rgba(255,255,255,.5)\").dc(size/2,size/2,size/1.85);\n\t\t\tg.s(color).ss(size/9).dc(size/2, size/2, size/2-size/2/5);\n\t\t\tbut.addChild(box);\n\n\t\t\tvar check = but.check = new zim.Circle(size/5.2, \"rgba(0,0,0,.7)\");\n\t\t\tthat.dots.push(check);\n\t\t\tcheck.mouseEnabled = false;\n\t\t\tcheck.alpha = .95;\n\t\t\tcheck.regX = check.regY = -size/2;\n\n\t\t\tvar fullWidth = size;\n\n\t\t\tif (label) {\n\t\t\t\tbut.addChild(label);\n\t\t\t\tlabel.x = but.getBounds().width;\n\t\t\t\tlabel.y = size/8;\n\t\t\t\tbut.setBounds(-margin, -margin, size+margin*2+label.getBounds().width, Math.max(size+margin*2, label.getBounds().height));\n\t\t\t\tfullWidth = label.x + label.width;\n\t\t\t}\n\t\t\tif (mySelected) {\n\t\t\t\tbut.addChild(check);\n\t\t\t\tthat.label = label;\n\t\t\t\tif (that.label) that.text = label.text;\n\t\t\t}\n\n\t\t\tvar backing = new createjs.Shape();\n\t\t\tg = backing.graphics;\n\t\t\tg.f(\"rgba(0,0,0,.01)\").r(\n\t\t\t\tbut.getBounds().x,\n\t\t\t\tbut.getBounds().y,\n\t\t\t\tfullWidth+(margin*2),\n\t\t\t\tbut.getBounds().height\n\t\t\t);\n\t\t\tbut.hitArea = backing;\n\t\t\t// hitArea will stop rollovers on labels but oh well\n\n\t\t\treturn(but);\n\t\t}\n\t\tif (!this.getBounds()) this.setBounds(0,0,size,size);\n\t\tthis.setBounds(-margin,-margin,this.getBounds().width+margin,this.getBounds().height+margin);\n\n\t\t// the main function that sets a button selected (after the initial makeButton)\n\t\t// this gets called by the setter methods below and the click event up top\n\t\tthis.setSelected = function(value) {\n\t\t\tif (zot(value)) value = -1;\n\t\t\tif (value != -1 && !buttonContainer.getChildAt(value)) return;\n\t\t\tvar but;\n\t\t\tfor (var i=0; i<buttonContainer.getNumChildren(); i++) {\n\t\t\t\tbut = buttonContainer.getChildAt(i);\n\t\t\t\tbut.removeChild(but.check);\n\t\t\t}\n\t\t\tif (value >= 0) {\n\t\t\t\tbut = buttonContainer.getChildAt(value);\n\t\t\t\tvar lastIndex = -2;\n\t\t\t\tif (currentObject) lastIndex = currentObject.index;\n\t\t\t\tcurrentObject = but.obj;\n\t\t\t}\n\t\t\tif (value == -1 || lastIndex == currentObject.index) {\n\t\t\t\tcurrentObject = null;\n\t\t\t\tthat.id = null;\n\t\t\t\tthat.label = null;\n\t\t\t\tthat.text = \"\";\n\t\t\t} else {\n\t\t\t\tbut.addChild(but.check);\n\t\t\t\tthat.id = currentObject.id;\n\t\t\t\tthat.label = currentObject.label;\n\t\t\t\tif (that.label) that.text = that.label.text;\n\t\t\t}\n\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t}\n\n\t\t// getter setter methods\n\n\t\tObject.defineProperty(that, 'selected', {\n\t\t\tget: function() {\n\t\t\t\treturn currentObject;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tzog(\"ZIM RadioButton - selected is read only\");\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(that, 'selectedIndex', {\n\t\t\tget: function() {\n\t\t\t\treturn (currentObject) ? currentObject.index : -1;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tvar index = value;\n\t\t\t\tif (always) {if (that.selectedIndex == index) return;}\n\t\t\t\tthat.setSelected(index);\n\t\t\t}\n\t\t});\n\n\t\tthis._enabled = true;\n\t\tObject.defineProperty(that, 'enabled', {\n\t\t\tget: function() {\n\t\t\t\treturn that._enabled;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tzenable(that, value);\n\t\t\t}\n\t\t});\n\n\t\tthis.clone = function() {\n\t\t\tvar buttonsCopy = zim.copy(buttons);\n\t\t\tfor (var i=0; i<buttonsCopy.length; i++) {\n\t\t\t\tbuttonsCopy[i].label = buttonsCopy[i].label.clone();\n\t\t\t}\n\t\t\treturn that.cloneProps(new zim.RadioButtons(size, buttonsCopy, vertical, color, spacing, margin, always));\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tthat.removeAllEventListeners();\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.RadioButtons, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-57\n\n/*--\nzim.Pane = function(container, width, height, label, color, drag, resets, modal, corner, backingAlpha, shadowColor, shadowBlur, center, displayClose, backing, fadeTime)\n\nPane\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nAdds a window for alerts, etc.\nYou need to call the pane.show() to show the pane and pane.hide() to hide it.\nYou do not need to add it to the stage - it adds itself centered.\nYou can change the x and y (the origin and registration point are in the middle).\n\nEXAMPLE\nvar pane = new zim.Pane(stage, 300, 200, \"Watch out!\", \"#CCC\");\npane.show(); // pressing anywhere will close pane (see parameters for options)\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\ncontainer - container for the pane (usually the stage)\nwidth - (default 200) width of pane\nheight - (default 200) height of pane\nlabel - (default null) an optional ZIM Label (or text for default label properties)\ncolor - (default \"white\") a css color for the background of the Pane\ndrag - (default false) pass in true to drag the pane\nresets - (default true) resets position to start on re-open - set to false to keep last position\nmodal - (default true) pane will close when user clicks off the pane - set to false to keep pane open\ncorner - (default 20) is the corner radius - set to 0 for no corner\nbackingAlpha - (default .14) the darkness of the background that fills the stage\nshadowColor - (default rgba(0,0,0,.3)) set to -1 for no shadow\nshadowBlur - (default 20) how blurred the shadow is if shadow is set\ncenter - (default true) centers the pane\n\tif center is false you will have to set x and y for the pane\n\tthe registration point and the origin inside the pane is in the center\n\tyou can adjust the label placement by changing its x and y or registration point\ndisplayClose - (default true) closes the Pane if display backing is pressed\n\tif drag is set to true, displayClose will automatically be set to false\nbacking - (default null) a Display object for the backing of the button (eg. Shape, Bitmap, Container, Sprite)\n\tsee ZIM Pizzazz module for a fun set of Shapes like Boomerangs, Ovals, Lightning Bolts, etc.\nfadeTime - (default 0) milliseconds to fade in and out\n\nMETHODS\nshow() - shows the pane (returns the pane for chaining)\nhide() - hides the pane\ntoggle() - shows if hidden and hides if showing (returns the pane for chaining)\nclone() - makes a copy with properties such as x, y, etc. also copied (returns the new pane for chaining)\ndispose() - removes all events\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nPROPERTIES\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\ndisplay - reference to the pane box\ntext - gives access to the label text\nlabel - gives access to the label\nbackdrop - reference to the backdrop that covers the stage\nresetX - if reset is true you can dynamically adjust the position if needed\nresetY\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nOPTIMIZED\nThis component is affected by the general zim.OPTIMIZE setting (default is false)\nif set to true, you will have to stage.update() after setting certain properties\nand stage.update() in change event to see component change its graphics\n\nACTIONEVENT\nThis component is affected by the general zim.ACTIONEVENT setting\nThe default is \"mousedown\" - if set to something else the component will act on click (press)\n\nEVENTS\ndispatches a \"close\" event when closed by clicking on backing\n\nALSO: See the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+58\n\tzim.Pane = function(container, width, height, label, color, drag, resets, modal, corner, backingAlpha, shadowColor, shadowBlur, center, displayClose, backing, fadeTime) {\n\n\t\tvar sig = \"container, width, height, label, color, drag, resets, modal, corner, backingAlpha, shadowColor, shadowBlur, center, displayClose, backing, fadeTime\";\n\t\tvar duo; if (duo = zob(zim.Pane, arguments, sig, this)) return duo;\n\t\tz_d(\"58\");\n\t\tthis.zimContainer_constructor();\n\n\t\tif (zot(container) || !container.getBounds) {zog(\"zim build - Pane(): Please pass in a reference to a container with bounds set as first parameter\");\treturn;}\n\t\tif (!container.getBounds()) {zog(\"zim build - Pane(): Please give the container bounds using setBounds()\"); return;}\n\t\tif (zot(container.getStage)) {zog(\"zim build - Pane(): The container must have a stage property\"); return;}\n\n\t\tif (zot(width)) width=200;\n\t\tif (zot(height)) height=200;\n\t\tif (zot(label)) label = null;\n\t\tif (typeof label === \"string\" || typeof label === \"number\") label = new zim.Label(label, 40, \"arial\", \"black\");\n\t\tif (zot(color)) color=\"white\";\n\t\tif (zot(drag)) drag=false;\n\t\tif (zot(resets)) resets=true;\n\t\tif (zot(modal)) modal=true;\n\t\tif (zot(corner)) corner=20;\n\t\tif (zot(backingAlpha)) backingAlpha=.14;\n\t\tif (zot(shadowColor)) shadowColor=\"rgba(0,0,0,.3)\";\n\t\tif (zot(shadowBlur)) shadowBlur=20;\n\t\tif (zot(center)) center=true;\n\t\tif (zot(displayClose)) displayClose=true;\n\t\tif (drag) displayClose = false;\n\t\tif (zot(fadeTime)) fadeTime=0;\n\n\t\tvar backdrop = this.backdrop = new createjs.Shape();\n\t\t// make a big backing that closes the pane when clicked\n\t\t// could also provide a close button\n\t\tvar g = backdrop.graphics;\n\t\tg.f(\"black\");\n\t\tg.drawRect(-5000,-5000,10000,10000);\n\t\t// makes it seem like the pane has the dimensions of the display\n\t\tthis.setBounds(-width/2,-height/2, width, height);\n\n\t\tbackdrop.alpha = backingAlpha;\n\t\tvar that = this;\n\t\tbackdrop.on((zim.ACTIONEVENT==\"mousedown\")?\"mousedown\":\"click\", closePane);\n\t\tvar htmlList = new zim.Dictionary(true);\n\t\tfunction closePane(e) {\n\t\t\tremovePane();\n\t\t\tcontainer.getStage().update();\n\t\t\tthat.dispatchEvent(\"close\");\n\t\t\te.stopImmediatePropagation();\n\t\t};\n\t\tbackdrop.on(\"mousedown\", function(e) {\n\t\t\te.stopImmediatePropagation();\n\t\t});\n\t\tif (modal) this.addChild(backdrop);\n\n\t\tvar display;\n\t\tif (zot(backing)) {\n\t\t\tdisplay = this.display = new createjs.Shape();\n\t\t\tg = display.graphics;\n\t\t\tg.f(color);\n\t\t\tg.rr(0, 0, width, height, corner);\n\t\t\tdisplay.setBounds(0, 0, width, height);\n\t\t\tdisplay.regX = width/2;\n\t\t\tdisplay.regY = height/2;\n\t\t} else {\n\t\t\tdisplay = backing;\n\t\t}\n\t\tif (displayClose) {\n\t\t\tdisplay.cursor = \"pointer\";\n\t\t\tdisplay.on((zim.ACTIONEVENT==\"mousedown\")?\"mousedown\":\"click\", closePane);\n\t\t}\n\t\tif (shadowColor != -1 && shadowBlur > 0) display.shadow = new createjs.Shadow(shadowColor, 8, 8, shadowBlur);\n\t\tdisplay.on(\"click\", function(e) {\n\t\t\t// stops the click from going through the display to the background\n\t\t\te.stopImmediatePropagation();\n\t\t});\n\n\t\tthis.resetX; this.resetY;\n\t\tif (drag) {\n\t\t\tdisplay.cursor = \"pointer\";\n\t\t\tvar diffX, diffY;\n\t\t\tdisplay.on(\"mousedown\", function(e) {\n\t\t\t\tif (isNaN(that.resetX)) that.resetX = that.x;\n\t\t\t\tif (isNaN(that.resetY)) that.resetY = that.y;\n\t\t\t\tdiffX = e.stageX - that.x;\n\t\t\t\tdiffY = e.stageY - that.y;\n\t\t\t\tdisplay.cursor = \"pointer\";\n\t\t\t});\n\n\t\t\tdisplay.on(\"pressmove\", function(e) {\n\t\t\t\tvar p = checkBounds(e.stageX-diffX, e.stageY-diffY);\n\t\t\t\tthat.x = p.x;\n\t\t\t\tthat.y = p.y;\n\t\t\t\tvar ch;\n\t\t\t\tfor (var i=0; i<that.numChildren; i++) {\n\t\t\t\t\tch = that.getChildAt(i);\n\t\t\t\t\tif (ch.constructor == zim.TextArea || ch.constructor == zim.Loader) {\n\t\t\t\t\t\tch.resize();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcontainer.getStage().update();\n\t\t\t});\n\n\t\t\tthis.on(\"pressup\", function(e) {\n\t\t\t\tdisplay.cursor = \"pointer\";\n\t\t\t\tcontainer.getStage().update();\n\t\t\t});\n\t\t}\n\n\t\tthis.addChild(display);\n\n\t\tif (label) {\n\t\t\tthis.addChild(label);\n\t\t\tzim.center(label, this);\n\t\t\tthis.label = label;\n\t\t\tthis.text = label.text;\n\t\t\tlabel.mouseEnabled = false;\n\t\t}\n\n\t\tObject.defineProperty(that, 'text', {\n\t\t\tget: function() {\n\t\t\t\tvar t = (label.text == \" \") ? \"\" : label.text;\n\t\t\t\treturn t;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tlabel.text = value;\n\t\t\t}\n\t\t});\n\n\t\tthis.hide = function() {\n\t\t\tremovePane();\n\t\t}\n\n\t\tfunction removePane() {\n\t\t\tif (fadeTime > 0) {\n\t\t\t\tthat.animate({obj:{alpha:0}, time:fadeTime, call:end});\n\t\t\t} else {\n\t\t\t\tend();\n\t\t\t}\n\t\t\tfunction end() {\n\t\t\t\tcontainer.removeChild(that);\n\t\t\t\tvar ch;\n\t\t\t\tfor (var i=0; i<that.numChildren; i++) {\n\t\t\t\t\tch = that.getChildAt(i);\n\t\t\t\t\tif (ch.constructor == zim.TextArea || ch.constructor == zim.Loader) {\n\t\t\t\t\t\tvar obj = {obj:ch, depth:that.getChildIndex(ch)};\n\t\t\t\t\t\thtmlList.add(ch, obj);\n\t\t\t\t\t\tthat.removeChild(ch);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!zim.OPTIMIZE) container.getStage().update();\n\t\t\t\tif (resets) {\n\t\t\t\t\tif (!isNaN(that.resetX)) that.x = that.resetX;\n\t\t\t\t\tif (!isNaN(that.resetY)) that.y = that.resetY;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.show = function() {\n\t\t\tif (center) {\n\t\t\t\tif (isNaN(that.resetX)) {\n\t\t\t\t\tthat.x = (container.getBounds().width) /2;\n\t\t\t\t\tthat.y = (container.getBounds().height) /2;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontainer.addChild(that);\n\t\t\tfor (var i=0; i<htmlList.length; i++) {\n\t\t\t\tthat.addChildAt(htmlList.objects[i].obj, htmlList.objects[i].depth);\n\t\t\t}\n\t\t\tif (fadeTime > 0) {\n\t\t\t\tthat.alpha = 0;\n\t\t\t\tthat.animate({alpha:1}, fadeTime);\n\t\t\t} else {\n\t\t\t\tif (container.getStage()) container.getStage().update();\n\t\t\t}\n\t\t\treturn that;\n\t\t}\n\t\tfunction checkBounds(x,y) {\n\t\t\tx = Math.max(width/2, Math.min(container.getBounds().width-width/2, x));\n\t\t\ty = Math.max(height/2, Math.min(container.getBounds().height-height/2, y));\n\t\t\treturn {x:x,y:y}\n\t\t}\n\n\t\tthis.toggle = function() {\n\t\t\tif (container.contains(that)) {that.hide();} else {that.show();}\n\t\t\treturn that;\n\t\t}\n\n\t\tthis.clone = function() {\n\t\t\tvar lX = label.x; // new Panes automatically center the label\n\t\t\tvar lY = label.y;\n\t\t\tvar p2 = that.cloneProps(new zim.Pane(container, width, height, label.clone(), color, drag, resets, modal, corner, backingAlpha, shadowColor, shadowBlur, center, displayClose, zot(backing)?backing.clone():null, fadeTime));\n\t\t\tp2.label.x = lX;\n\t\t\tp2.label.y = lY;\n\t\t\treturn p2;\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tdisplay.removeAllEventListeners();\n\t\t\tthat.removeChild(display);\n\t\t\tdisplay = null;\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.Pane, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-58\n\n/*--\nzim.Window = function(width, height, color, borderColor, borderWidth, padding, corner, swipe, indicatorActive, indicatorDrag, indicatorColor, indicatorAlpha, indicatorFade, slide, slideDamp, slideSnap, interactive, shadowColor, shadowBlur, paddingHorizontal, paddingVertical, scrollWheel, damp)\n\nWindow\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nAdds a window for content that can be swiped and scrolled.\n\nEXAMPLE\nvar win = new zim.Window({\n\theight:300,\n\tinteractive:false,\n\tpadding:0,\n\tslideDamp:.2\n});\nvar container = new zim.Container(); // make some content\nvar c; spacing = 10;\nfor (var i=0; i<4; i++) {\n\tc = frame.makeCircles();\n\tc.x = win.width/2;\n\tc.y = c.width/2 + (c.width+spacing)*i;\n\tcontainer.addChild(c);\n}\nwin.add(container); // add the content to the window\nwin.center(stage);\nstage.update();\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nwidth - (default 300) the width of the window\nheight - (default 200) the heigth of window\ncolor - (default #333) background color (use \"rbga(0,0,0,0)\" for no background)\nborderColor - (default #999) border color\nborderWidth - (default 1) the thickness of the border\npadding - (default 10) places the content in from edges of border (see paddingHorizontal and paddingVertical)\ncorner - (default 0) is the rounded corner of the window\nswipe - (default auto/true) the direction for swiping set to none / false for no swiping\n\talso can set swipe to just vertical or horizontal\nindicatorActive - (default true) shows indicator (set to false to not)\nindicatorDrag - (default false) set to true to be able to drag the indicator\nindicatorColor - (default borderColor) the color of the indicator\nindicatorAlpha - (default .3) the transparency of the indicator\nindicatorFade - (default true) fades indicator unless being used\nslide - (default true) Boolean to throw the content when drag/swipe released\nslideDamp - (default .6) amount the slide damps when let go 1 for instant, .01 for long slide, etc.\nslideSnap - (default \"vertical\") \"auto\" / true, \"none\" / false, \"horizontal\"\n\tslides past bounds and then snaps back to bounds when released\n\tvertical snaps when dragging up and down but not if dragging horizontal\ninteractive - (default true) allows interaction with content in window\n\tset to false and whole window will be swipeable but not interactive inside\nshadowColor - (default rgba(0,0,0,.3)) the color of the shadow\nshadowBlur - (default 20) set shadowBlur to -1 for no drop shadow\npaddingHorizontal - (default padding) places content in from top bottom\npaddingVertical - (default padding) places content in from left and right\nscrollWheel - (default true) scroll vertically with scrollWheel\ndamp - (default null) set to .1 for instance to damp the scrolling\n\nMETHODS\nadd(obj) - adds obj to content container of window (at padding) must have bounds set\n\tit is best to position and size obj first before adding\n\totherwise if adjusting to outside current content size then call update()\nresize(width, height) - resizes the Window without scaling the content (also calls update() for scroll update)\n\twidth and height are optional\nupdate() - resets window scrolling if perhaps the content gets bigger or smaller\nclone(recursive) - makes a copy with properties such as x, y, etc. also copied\n\trecursive (default true) clones the window content as well (set to false to not clone content)\ndispose() - removes event listeners from Window and content and removes any Ticker functions\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nPROPERTIES\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\n** see also the resize(width, height) method to resize the window without resizing the content\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\nbacking - CreateJS Shape used for backing of Window\ncontent - ZIM Container used to hold added content\nindicator - data object that holds the following properties (with defaults):\n\tyou can set after object is made...\n\tindicator.size = 6; // the width if vertical or the height if horizontal\n\tindicator.minSize = 12; // for the height if vertical or the width if horizontal\n\tindicator.spacing = 3 + size + borderWidth / 2;\n\tindicator.margin = 0; // adds extra space only at end by scrollbars\n\tindicator.corner = indicator.size / 2;\n\tindicator.showTime = 500; // ms to fade in\n\tindicator.fadeTime = 3000; // ms to fade out\nscrollX - gets and sets the content x position in the window (this will be negative)\nscrollY - gets and sets the content y position in the window (this will be negative)\nscrollXMax - gets the max we can scroll in x based on content width - window width (plus padding and margin)\nscrollYMax - gets the max we can scroll in y based on content height - window height (plus padding and margin)\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nEVENTS\ndispatches a \"select\" event when clicked on in a traditional manner (fast click with little movement)\ndispatches a \"hoverover\" event when rolled on without moving for 300 ms\ndispatches a \"hoverout\" event when not hovering due to movement or mouseout on the window\n\nALSO: See the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+58.1\n\tzim.Window = function(width, height, color, borderColor, borderWidth, padding, corner, swipe, indicatorActive, indicatorDrag, indicatorColor, indicatorAlpha, indicatorFade, slide, slideDamp, slideSnap, interactive, shadowColor, shadowBlur, paddingHorizontal, paddingVertical, scrollWheel, damp) {\n\n\t\tvar sig = \"width, height, color, borderColor, borderWidth, padding, corner, swipe, indicatorActive, indicatorDrag, indicatorColor, indicatorAlpha, indicatorFade, slide, slideDamp, slideSnap, interactive, shadowColor, shadowBlur, paddingHorizontal, paddingVertical, scrollWheel, damp\";\n\t\tvar duo; if (duo = zob(zim.Window, arguments, sig, this)) return duo;\n\t\tz_d(\"58.1\");\n\t\tthis.zimContainer_constructor();\n\n\t\tif (zot(width)) width=300;\n\t\tif (zot(height)) height=200;\n\t\tif (zot(color)) color=\"#333\"; // none\n\t\tif (zot(borderColor)) borderColor=\"#999\";\n\t\tif (zot(borderWidth)) borderWidth=1; // 0\n\t\tif (zot(padding)) padding=10;\n\t\tif (zot(corner)) corner=0;\n\t\tif (zot(swipe)) swipe=true; // true / auto, vertical, horizontal, false / none\n\t\tif (zot(indicatorActive)) indicatorActive=true;\n\t\tif (zot(indicatorDrag)) indicatorDrag=false;\n\t\tif (zot(indicatorColor)) indicatorColor=borderColor;\n\t\tif (zot(indicatorAlpha)) indicatorAlpha=.3;\n\t\tif (zot(indicatorFade)) indicatorFade=true;\n\t\tif (indicatorDrag) indicatorFade = false;\n\t\tif (zot(slide)) slide=true;\n\t\tif (zot(slideDamp)) slideDamp=.6;\n\t\tif (zot(slideSnap)) slideSnap=\"vertical\"; // true / auto, vertical, horizontal, false / none\n\t\tif (zot(interactive)) interactive=true;\n\t\tif (zot(shadowColor)) shadowColor=\"rgba(0,0,0,.3)\";\n\t\tif (zot(shadowBlur)) shadowBlur=20;\n\t\tif (zot(paddingVertical)) paddingVertical=padding;\n\t\tif (zot(paddingHorizontal)) paddingHorizontal=padding;\n\t\tif (zot(scrollWheel)) scrollWheel = true;\n\n\t\tvar that = this;\n\t\tthis.scrollX = this.scrollY = this.scrollXMax = this.scrollYMax = 0;\n\n\t\tvar backing = this.backing = new createjs.Shape();\n\t\tthis.addChild(backing);\n\n\t\tvar mask = new createjs.Shape();\n\t\tvar mg = mask.graphics;\n\t\t// make the mask in the update function\n\t\t// when we know if there are vertical and horizontal indicators\n\t\tthis.addChild(mask);\n\n\t\tvar content = this.content = new zim.Container();\n\t\tthis.addChild(content);\n\t\tcontent.mask = mask;\n\n\t\tif (!interactive) {\n\t\t\t// hitArea makes the whole window draggable\n\t\t\t// but then you can't interact with the content inside the window\n\t\t\tvar hitArea = new createjs.Shape();\n\t\t}\n\t\tif (borderWidth > 0) {\n\t\t\tvar border = new createjs.Shape();\n\t\t\tthis.addChild(border);\n\t\t}\n\n\t\t// we call this function at start and when resize() is called to resize the window without scaling content\n\t\tfunction sizeWindow() {\n\n\t\t\tthat.setBounds(0,0,width,height);\n\n\t\t\tbacking.graphics.f(color).rr(0,0,width,height,corner);\n\t\t\tif (shadowColor != -1 && shadowBlur > 0) backing.shadow = new createjs.Shadow(shadowColor, 8, 8, shadowBlur);\n\n\t\t\tif (borderWidth > 0) {\n\t\t\t\tborder.graphics.c().s(borderColor).ss(borderWidth).rr(0,0,width,height,corner);\n\t\t\t}\n\t\t}\n\t\tsizeWindow();\n\n\n\t\t// indicators are the little scroll bars\n\t\t// this exposes an indicator data object so creators can adjust indicator properties\n\t\t// note that these properties are set dynamically in the update function\n\t\tvar indicator = this.indicator = {}; // data object to expose indicator properties\n\t\tindicator.size = 6;\n\t\tindicator.minSize = indicator.size*2; // if vertical scroll, this is vertical minSize where size is horizontal size\n\t\tindicator.spacing = 3.5 + borderWidth / 2;\n\t\tindicator.margin = 0;\n\t\tindicator.corner = indicator.size / 2;\n\t\tindicator.showTime = 500;\n\t\tindicator.fadeTime = 3000;\n\n\t\tif (indicatorActive) {\n\t\t\tvar hIndicator = this.hIndicator = new zim.Shape();\n\t\t\tvar hg = hIndicator.graphics;\n\t\t\thIndicator.alpha = indicatorAlpha;\n\t\t\tthis.addChild(hIndicator);\n\t\t\tif (indicatorDrag) hIndicator.drag({localBounds: true});\n\n\t\t\tvar vIndicator = this.vIndicator = new zim.Shape();\n\t\t\tvar vg = vIndicator.graphics;\n\t\t\tvIndicator.alpha = indicatorAlpha;\n\t\t\tthis.addChild(vIndicator);\n\t\t\tif (indicatorDrag) vIndicator.drag({localBounds: true});\n\t\t}\n\n\t\tvar hProportion;\n\t\tvar vProportion;\n\t\tvar hCheck;\n\t\tvar vCheck;\n\t\tvar gap;\n\t\tvar contentWidth;\n\t\tvar contentHeight;\n\n\t\tvar hEvent;\n\t\tvar vEvent;\n\t\tvar dTimeout;\n\n\t\tthis.update = function() {\n\t\t\tif (indicatorActive) {\n\t\t\t\t// clear the indicators and remake anytime this function is called\n\t\t\t\t// as these may change as people add and remove content to the Window\n\t\t\t\thg.clear(); // horizontal indicator\n\t\t\t\tvg.clear(); // vertical indicator\n\t\t\t}\n\n\t\t\t// assume no gap at left and top\n\t\t\t// gap is applied in x if there is a scroll in y\n\t\t\t// gap is applied in y if there is a scroll in x\n\t\t\tgap = (indicatorActive) ? indicator.size+indicator.spacing*2 : 0;\n\t\t\tcontentWidth = content.getBounds().width;\n\t\t\tcontentHeight = content.getBounds().height;\n\n\t\t\t// note, the contentWidth and contentHeight include ONE padding\n\t\t\thCheck = (contentWidth > width-paddingHorizontal && (swipe === true || swipe == \"auto\" || swipe == \"horizontal\"));\n\t\t\tvCheck = (contentHeight > height-paddingVertical && (swipe === true || swipe == \"auto\" || swipe == \"vertical\"));\n\n\t\t\tthat.scrollXMax = contentWidth+paddingHorizontal*2-width+(vCheck?gap+indicator.margin:0);\n            that.scrollYMax = contentHeight+paddingVertical*2-height+(hCheck?gap+indicator.margin:0);\n\n\t\t\t// set mask dynamically as indicators may come and go affecting the mask size slightly\n\t\t\tmg.clear();\n\t\t\tvar xx = borderWidth/2;\n\t\t\tvar yy = borderWidth/2;\n\t\t\tvar ww = width-((vCheck && indicatorActive)?indicator.size+indicator.spacing*2:0)-(vCheck?0:borderWidth);\n\t\t\tvar hh = height-((hCheck && indicatorActive)?indicator.size+indicator.spacing*2:0)-(hCheck?0:borderWidth);\n\t\t\tmg.f(\"rgba(0,0,0,.01)\").rr(xx,yy,ww,hh,corner);\n\n\t\t\tif (!interactive) {\n\t\t\t\thitArea.graphics.c().f(\"red\").dr(xx,yy,ww,hh);\n\t\t\t\tcontent.hitArea = hitArea;\n\t\t\t}\n\n\t\t\tvar edgeAdjust = Math.max(corner, Math.min(indicator.corner, indicator.spacing));\n\t\t\tvar edgeLeft = edgeAdjust + borderWidth/2;\n\t\t\tvar edgeRight = edgeAdjust + (vCheck?gap:0) + borderWidth/2;\n\t\t\tvar edgeTop = edgeAdjust + borderWidth/2;\n\t\t\tvar edgeBottom = edgeAdjust + (hCheck?gap:0) + borderWidth/2;\n\n\t\t\tif (hCheck && indicatorActive) {\n\t\t\t\tindicatorLength = Math.max(indicator.minSize, (width-edgeLeft-edgeRight) * (width-edgeLeft-edgeRight) / (contentWidth + paddingHorizontal + indicator.margin));\n\t\t\t\thg.f(indicatorColor).rr(0,0,indicatorLength,indicator.size,indicator.corner);\n\t\t\t\thIndicator.x = edgeLeft;\n\t\t\t\thIndicator.y = height-indicator.size-indicator.spacing;\n\t\t\t\t// for swiping window:\n\t\t\t\thProportion = new zim.Proportion(-that.scrollXMax, 0, edgeLeft, width-indicatorLength-edgeRight, -1);\n\t\t\t\tif (indicatorDrag) {\n\t\t\t\t\thIndicator.setBounds(0,0,indicatorLength,indicator.size);\n\t\t\t\t\t// drag rect for indicator\n\t\t\t\t\tvar rect = new createjs.Rectangle(\n\t\t\t\t\t\tedgeLeft, hIndicator.y, width-indicatorLength-edgeLeft-edgeRight, 0\n\t\t\t\t\t);\n\t\t\t\t\thIndicator.dragRect(rect);\n\t\t\t\t\thIndicator.proportion = new zim.Proportion(\n\t\t\t\t\t\trect.x, rect.x+rect.width, 0, -that.scrollXMax\n\t\t\t\t\t);\n\t\t\t\t\thIndicator.off(\"pressmove\", hEvent);\n\t\t\t\t\thEvent = hIndicator.on(\"pressmove\", function() {\n\t\t\t\t\t\tcontent.x = hIndicator.proportion.convert(hIndicator.x);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (vCheck && indicatorActive) {\n\t\t\t\tindicatorLength = Math.max(indicator.minSize, (height-edgeTop-edgeBottom) * (height-edgeTop-edgeBottom) / (contentHeight + paddingVertical + indicator.margin));\n\t\t\t\tvg.f(indicatorColor).rr(0,0,indicator.size,indicatorLength,indicator.corner);\n\t\t\t\tvIndicator.x = width-indicator.size-indicator.spacing;\n\t\t\t\tvIndicator.y = edgeTop;\n\t\t\t\t// for swiping window:\n\t\t\t\tvProportion = new zim.Proportion(-that.scrollYMax, 0, edgeTop, height-indicatorLength-edgeBottom, -1);\n\t\t\t\tif (indicatorDrag) {\n\t\t\t\t\tvIndicator.setBounds(0,0,indicator.size,indicatorLength);\n\t\t\t\t\t// drag rect for indicator\n\t\t\t\t\tvar rect = new createjs.Rectangle(\n\t\t\t\t\t\tvIndicator.x, edgeTop, 0, height-indicatorLength-edgeTop-edgeBottom\n\t\t\t\t\t);\n\t\t\t\t\tvIndicator.dragRect(rect);\n\t\t\t\t\tvIndicator.proportion = new zim.Proportion(\n\t\t\t\t\t\trect.y, rect.y+rect.height, 0, -that.scrollYMax\n\t\t\t\t\t);\n\t\t\t\t\tvIndicator.off(\"pressmove\", vEvent);\n\t\t\t\t\tvEvent = vIndicator.on(\"pressmove\", function() {\n\t\t\t\t\t\tdesiredY = content.y = vIndicator.proportion.convert(vIndicator.y);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tmoveIndicators();\n\t\t\tclearTimeout(dTimeout);\n\t\t\tdTimeout = setTimeout(function(){setDragRect();}, 300);\n\t\t}\n\n\t\tthis.resize = function(w, h) {\n\t\t\tif (zot(w)) w = width;\n\t\t\tif (zot(h)) h = height;\n\t\t\twidth = w;\n\t\t\theight = h;\n\t\t\tsizeWindow();\n\t\t\tthat.update();\n\t\t\tdesiredY = content.y;\n\t\t\tif (damp) dampY.immediate(desiredY);\n\t\t}\n\n\t\t// METHODS to add and remove content from Window\n\t\tthis.add = function(c) {\n\t\t\tmakeDamp(c);\n\t\t\tif (!c.getBounds()) {zog(\"SwipeBox.add() - please add content with bounds set\"); return;}\n\t\t\tcontent.addChild(c);\n\t\t\tif (c.x == 0) c.x = paddingHorizontal;\n\t\t\tif (c.y == 0) c.y = paddingVertical;\n\t\t\tthat.update();\n\t\t}\n\n\t\tthis.remove = function(c) {\n\t\t\tcontent.removeChild(c);\n\t\t\tthat.update();\n\t\t}\n\n\t\tfunction setDragRect() {\n\t\t\tzim.dragRect(content, new createjs.Rectangle(0, 0, hCheck?-that.scrollXMax:0, vCheck?-that.scrollYMax:0));\n\t\t}\n\n\t\tvar swipeCheck = false;\n\t\tif (swipe) {\n\t\t\tcontent.on(\"mousedown\", function() {\n\t\t\t\tif (!swipeCheck) zim.Ticker.add(swipeMoveIndicators, content.stage);\n\t\t\t\tswipeCheck = true;\n\t\t\t\tif (hCheck && indicatorActive) if (indicatorFade) zim.animate(hIndicator, {alpha:indicatorAlpha}, indicator.showTime);\n\t\t\t\tif (vCheck && indicatorActive) if (indicatorFade) zim.animate(vIndicator, {alpha:indicatorAlpha}, indicator.showTime);\n\t\t\t});\n\t\t}\n\n\t\tfunction swipeMoveIndicators() {\n\t\t\t// this is being called by the swipe which has its own damping\n\t\t\t// so we need to set the desiredY and then move the indicators\n\t\t\t// as the moveIndicators needs to run independently - so both types of damp can controll it\n\t\t\tdesiredY = content.y;\n\t\t\tif (damp) dampY.immediate(desiredY);\n\t\t\tif (indicatorActive) moveIndicators();\n\t\t}\n\n\t\tfunction moveIndicators() {\n\t\t\tif (hitArea) {\n\t\t\t\t// move hitarea to display box\n\t\t\t\thitArea.x = -content.x;\n\t\t\t\thitArea.y = -content.y;\n\t\t\t}\n\t\t\tif (hCheck && indicatorActive) hIndicator.x = hProportion.convert(content.x);\n\t\t\tif (vCheck && indicatorActive) vIndicator.y = vProportion.convert(content.y);\n\t\t}\n\n\t\t// may add content before adding Window to stage...\n\t\tthis.on(\"added\", setDrag, null, true);\n\t\tfunction setDrag() {\n\t\t\tmakeDamp(that);\n\t\t\tif (!swipe) return;\n\t\t\tzim.drag({\n\t\t\t\tobj:content,\n\t\t\t\tcurrentTarget:true,\n\t\t\t\tlocalBounds:true,\n\t\t\t\tslide:slide, slideDamp:slideDamp,\n\t\t\t\tslideSnap:(swipe===true||swipe==\"auto\"||swipe==\"vertical\")?slideSnap:false\n\t\t\t});\n\t\t\tif (content.getBounds() && content.getBounds().width > 0) {\n\t\t\t\tsetTimeout(function(){setDragRect();}, 300);\n\t\t\t}\n\t\t}\n\n\t\tif (slide) {\n\t\t\tcontent.on(\"slidestop\", stageUp);\n\t\t} else {\n\t\t\tcontent.on(\"mousedown\", function() {\n\t\t\t\tcontent.stage.on(\"stagemouseup\", stageUp, null, true);\n\t\t\t});\n\t\t}\n\n\t\tfunction stageUp(e) {\n\t\t\tzim.Ticker.remove(swipeMoveIndicators);\n\t\t\tswipeCheck = false;\n\t\t\tif (hCheck) if (indicatorFade) zim.animate(hIndicator, {alpha:0}, indicator.fadeTime);\n\t\t\tif (vCheck) if (indicatorFade) zim.animate(vIndicator, {alpha:0}, indicator.fadeTime);\n\t\t}\n\n\t\tif (interactive) {\n\t\t\t// dispatches SELECT (click) and HOVEROVER (500 ms) and gives mouseX and mouseY on content\n\t\t\t// CLICKS (in the traditional sense rather than a mouseup replacement)\n\t\t\tvar downLoc;\n\t\t\tvar downTime;\n\t\t\tcontent.on(\"mousedown\", function(){downLoc=content.stage.mouseX; downTime=Date.now();});\n\t\t\tcontent.on(\"click\", function(){\n\t\t\t\tif (Date.now()-downTime<600 && Math.abs(content.stage.mouseX-downLoc)<5) {\n\t\t\t\t\tthat.contentMouse = content.globalToLocal(content.stage.mouseX, content.stage.mouseY);\n\t\t\t\t\tthat.dispatchEvent(\"select\");\n\t\t\t\t}\n\t\t\t});\n\t\t\t// HOVER (must stay within thresh pixels for pauseTime ms)\n\t\t\tcontent.on(\"mouseover\", moveOn);\n\t\t\tcontent.on(\"mouseout\", moveOff);\n\t\t\tvar startTime;\n\t\t\tfunction moveOn() {\n\t\t\t\tstartTime=Date.now();\n\t\t\t\tzim.Ticker.add(timeMouse, content.stage);\n\t\t\t}\n\t\t\tfunction moveOff() {\n\t\t\t\tif (!hoverOutCalled) {\n\t\t\t\t\tthat.dispatchEvent(\"hoverout\");\n\t\t\t\t\thoverOutCalled = true;\n\t\t\t\t}\n\t\t\t\tzim.Ticker.remove(timeMouse);\n\t\t\t}\n\t\t\tvar lastMouseX = 0;\n\t\t\tvar lastMouseY = 0;\n\t\t\tvar lastReportX = 0;\n\t\t\tvar lastReportY = 0;\n\t\t\tvar pauseTime = 300;\n\t\t\tvar thresh = 2;\n\t\t\tvar hoverOutCalled = false;\n\t\t\tfunction timeMouse() {\n\t\t\t\tif (Math.abs(lastMouseX-content.stage.mouseX) > thresh || Math.abs(lastMouseY-content.stage.mouseY) > thresh) {\n\t\t\t\t\tif (!hoverOutCalled) {\n\t\t\t\t\t\tthat.dispatchEvent(\"hoverout\");\n\t\t\t\t\t\thoverOutCalled = true;\n\t\t\t\t\t}\n\t\t\t\t\tstartTime=Date.now();\n\t\t\t\t\tlastMouseX=content.stage.mouseX;\n\t\t\t\t\tlastMouseY=content.stage.mouseY;\n\t\t\t\t} else {\n\t\t\t\t\tif (Date.now()-startTime > pauseTime) {\n\t\t\t\t\t\tif (Math.abs(lastReportX-content.stage.mouseX) > thresh || Math.abs(lastReportY-content.stage.mouseY) > thresh) {\n\t\t\t\t\t\t\tthat.contentMouse = content.globalToLocal(content.stage.mouseX, content.stage.mouseY);\n\t\t\t\t\t\t\tthat.dispatchEvent(\"hoverover\");\n\t\t\t\t\t\t\tlastReportX=content.stage.mouseX;\n\t\t\t\t\t\t\tlastReportY=content.stage.mouseY;\n\t\t\t\t\t\t\thoverOutCalled = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstartTime=Date.now();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar scrollEvent1;\n\t\tvar scrollEvent2;\n\t\tvar desiredY = that.scrollY;\n\t\tif (scrollWheel) {\n\t\t\tscrollEvent1 = window.addEventListener(\"mousewheel\", scrollWindow);\n\t\t\tscrollEvent2 = window.addEventListener(\"DOMMouseScroll\", scrollWindow);\n\t\t\tfunction scrollWindow(e) {\n\t\t\t\tif (vCheck && that.getStage() && that.hitTestPoint(that.getStage().mouseX, that.getStage().mouseY)) {\n\t\t\t\t\tif (zot(e)) e = event;\n\t\t\t\t\tvar delta = e.detail ? e.detail*(-19) : e.wheelDelta;\n\t\t\t\t\tdesiredY += delta;\n\t\t\t\t\tdesiredY = Math.max(-that.scrollYMax, Math.min(0, desiredY))\n\t\t\t\t\tif (!damp) {\n\t\t\t\t\t\tthat.scrollY = desiredY;\n\t\t\t\t\t\tcontent.stage.update();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvar dampCheck = false;\n\t\tvar dampY;\n\t\tfunction makeDamp(obj) {\n\t\t\tif (damp && !dampCheck && obj.getStage()) {\n\t\t\t\tdampCheck = true;\n\t\t\t\tdampY = new zim.Damp(that.scrollY, damp);\n\t\t\t\tzim.Ticker.add(function() {\n\t\t\t\t\tif (swipeCheck) return;\n\t\t\t\t\tif (!zot(desiredY)) that.scrollY = dampY.convert(desiredY);\n\t\t\t\t}, obj.getStage());\n\t\t\t}\n\t\t}\n\n\t\tObject.defineProperty(that, 'scrollX', {\n\t\t\tget: function() {\n\t\t\t\treturn content.x;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tcontent.x = value;\n\t\t\t\tmoveIndicators();\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(that, 'scrollY', {\n\t\t\tget: function() {\n\t\t\t\treturn content.y;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tcontent.y = value;\n\t\t\t\tmoveIndicators();\n\t\t\t}\n\t\t});\n\n\t\tthis.clone = function(recursive) {\n\t\t\tif (zot(recursive)) recursive = true;\n\t\t\tvar w = that.cloneProps(new zim.Window(width, height, color, borderColor, borderWidth, padding, corner, swipe, indicatorActive, indicatorDrag, indicatorColor, indicatorAlpha, indicatorFade, slide, slideDamp, slideSnap, interactive, shadowColor, shadowBlur, paddingHorizontal, paddingVertical));\n\t\t\tif (recursive) {\n\t\t\t\tthat.content.cloneChildren(w.content);\n\t\t\t\tw.update();\n\t\t\t}\n\t\t\treturn w;\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tif (scrollWheel) {\n\t\t\t\twindow.removeEventListener(\"mousewheel\", scrollEvent1);\n\t\t\t\twindow.removeEventListener(\"DOMMouseScroll\", scrollEvent2);\n\t\t\t}\n\t\t\tthat.removeAllEventListeners();\n\t\t\thIndicator.off(\"pressmove\", hEvent);\n\t\t\tvIndicator.off(\"pressmove\", vEvent);\n\t\t\tcontent.removeAllEventListeners();\n\t\t\tzim.Ticker.remove(timeMouse);\n\t\t\tzim.Ticker.remove(swipeMoveIndicators);\n\t\t\tzim.noDrag(content);\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.Window, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-58.1\n\n/*--\nzim.Waiter = function(container, speed, color, circleColor, corner, shadowColor, shadowBlur, fadeTime)\n\nWaiter\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nAdds a little animated three dot wait widget.\nYou need to call waiter.show() to show the waiter and waiter.hide() to hide it.\nYou do not need to add it to the stage - it adds itself centered.\nYou can change the x and y (with origin and registration point in middle).\n\nEXAMPLE\nvar waiter = new zim.Waiter(stage);\nwaiter.show(); // show the waiter until assets load\nframe.loadAssets(\"greeting.mp3\");\nframe.on(\"complete\", function() {\n\twaiter.hide();\n\tframe.asset(\"greeting.mp3\").play();\n});\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\ncontainer - the container that holds the waiter (usually the stage)\nspeed - (default 600) cycle time in milliseconds\ncolor - (default \"orange\") the backing color\ncircleColor - (default \"white\") the dot color\ncorner - (default 14) the corner radius of the waiter box\nshadowColor - (defaults rgba(0,0,0,.3)) set to -1 for no shadow\nshadowBlur - (default 14) the blur of the shadow if shadow is set\nfadeTime - (default 0) milliseconds to fade in and out\n\nMETHODS\nshow() - shows the waiter (returns the waiter for chaining)\nhide() - hides the waiter\nclone() - makes a copy with properties such as x, y, etc. also copied (returns the new waiter for chaining)\ndispose() - removes listeners and deletes object\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nPROPERTIES\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\ndisplay - reference to the waiter backing graphic\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nEVENTS\nSee the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+59\n\tzim.Waiter = function(container, speed, color, circleColor, corner, shadowColor, shadowBlur, fadeTime) {\n\n\t\tvar sig = \"container, speed, color, circleColor, corner, shadowColor, shadowBlur, fadeTime\";\n\t\tvar duo; if (duo = zob(zim.Waiter, arguments, sig, this)) return duo;\n\t\tz_d(\"59\");\n\t\tthis.zimContainer_constructor();\n\n\t\tif (zot(container) || !container.getBounds) {zog(\"zim build - Waiter(): Please pass in a reference to a container with bounds set as first parameter\");\treturn;}\n\t\tif (!container.getBounds()) {zog(\"zim build - Waiter(): Please give the container bounds using setBounds()\"); return;}\n\t\tif (zot(container.getStage)) {zog(\"zim build - Waiter(): Please give the container that has a stage property\"); return;}\n\n\t\tif (zot(speed)) speed=600; // ms cycle time\n\t\tif (zot(color)) color=\"orange\";\n\t\tif (zot(circleColor)) circleColor=\"white\";\n\t\tif (zot(corner)) corner=16;\n\t\tif (zot(shadowColor)) shadowColor=\"rgba(0,0,0,.3)\";\n\t\tif (zot(shadowBlur)) shadowBlur=14;\n\t\tif (zot(fadeTime)) fadeTime=0;\n\n\t\tvar height = 40;\n\t\tvar numDots = 3;\n\t\tvar r = height*.6/2;\n\t\tvar s = (height-r*2)/2;\n\t\tvar width = numDots*(r*2+s)+s;\n\n\t\tthis.setBounds(-width/2,-height/2, width, height);\n\n\t\tvar that = this;\n\n\t\tvar display = this.display = new createjs.Shape();\n\t\tthis.addChild(display);\n\t\tdisplay.setBounds(0, 0, width, height);\n\t\tdisplay.regX = width/2;\n\t\tdisplay.regY = height/2;\n\t\tvar g = display.graphics;\n\t\tg.f(color);\n\t\tg.rr(0, 0, width, height, corner);\n\t\tif (shadowColor != -1 && shadowBlur > 0) display.shadow = new createjs.Shadow(shadowColor, 3, 3, shadowBlur);\n\t\tdisplay.on(\"click\", function(e) {\n\t\t\t// stops the click from going through the display to the background\n\t\t\te.stopImmediatePropagation();\n\t\t});\n\n\t\tvar circles = new zim.Container();\n\t\tthis.addChild(circles);\n\n\t\tvar dot;\n\t\tfor (var i=0; i<numDots; i++) {\n\t\t\tdot = new createjs.Shape();\n\t\t\tdot.graphics.f(circleColor).dc(0,0,r);\n\t\t\tdot.x = (i-(numDots-1)/2) * (r*2+s);\n\t\t\tcircles.addChild(dot);\n\t\t\tdot.cache(-r,-r,r*2,r*2);\n\t\t\tdot.alpha = 0;\n\t\t}\n\n\t\tthis.hide = function() {\n\t\t\tif (fadeTime > 0) {\n\t\t\t\tthat.animate({obj:{alpha:0}, time:fadeTime, call:end});\n\t\t\t} else {\n\t\t\t\tend();\n\t\t\t}\n\t\t\tfunction end() {\n\t\t\t\tif (that.parent) that.parent.removeChild(that);\n\t\t\t\tcontainer.getStage().update();\n\t\t\t}\n\t\t}\n\t\tthis.show = function() {\n\t\t\tvar dot; var counter=0;\n\t\t\tfor (var i=0; i<circles.getNumChildren(); i++) {\n\t\t\t\tthat.alpha = 0;\n\t\t\t\tcreatejs.Tween.get(that,{override:true})\n\t\t\t\t\t\t.to({alpha:1}, 300);\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tdot = circles.getChildAt(counter);\n\t\t\t\t\tcreatejs.Tween.get(dot,{loop:true})\n\t\t\t\t\t\t.to({alpha:1}, speed/numDots/2)\n\t\t\t\t\t\t.wait(speed/numDots)\n\t\t\t\t\t\t.to({alpha:0}, speed/numDots)\n\t\t\t\t\t\t.wait(speed-speed/numDots-speed/numDots/2);\n\t\t\t\t\tcounter++;\n\t\t\t\t}, i*speed/numDots);\n\n\t\t\t}\n\t\t\tthat.ticker = createjs.Ticker.on(\"tick\", function() {container.getStage().update();});\n\n\t\t\tthat.x = (container.getBounds().width) /2;\n\t\t\tthat.y = (container.getBounds().height) /2;\n\t\t\tcontainer.addChild(that);\n\t\t\tif (fadeTime > 0) {\n\t\t\t\tthat.alpha = 0;\n\t\t\t\tthat.animate({alpha:1}, fadeTime);\n\t\t\t}\n\t\t\treturn that;\n\t\t}\n\n\t\tthis.clone = function() {\n\t\t\treturn that.cloneProps(new zim.Waiter(container, speed, color, circleColor, corner, shadowColor, shadowBlur, fadeTime));\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tif (that.ticker) createjs.Ticker.off(\"tick\", that.ticker);\n\t\t\tdisplay.removeAllEventListeners();\n\t\t\tthat.removeChild(display);\n\t\t\tthat.removeChild(circles);\n\t\t\tdisplay = null;\n\t\t\tcircles = null;\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.Waiter, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-59\n\n/*--\nzim.Indicator = function(width, height, num, color, offColor, borderColor, backingColor, type, fill, scale, lightScale, press, shadowColor, shadowBlur)\n\nIndicator\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nA row of dots or squares that can be used to indicate a step, page, level, score, etc.\nThe indicator can be used as an input as well but often these are small so may not be best to rely on.\n\nEXAMPLE\nvar lights = new zim.Indicator({fill:true});\nlights.selectedIndex = 0; // set the first light on\nlights.center(stage);\nstage.on(\"stagemousedown\", function() {\n\t// increase the indicator lights each click (then start over)\n\tlights.selectedIndex = (lights.selectedIndex+1) % lights.num;\n});\nstage.update();\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nwidth - (default 100) width of indicator\nheight - (default 50) height of indicator\nnum - (default 6) the number of lights\ncolor - (default \"orange\") color of the light(s) turned on\noffColor - (default \"grey\") color of the light(s) turned off\nborderColor - (default -1 for no border) border color of lights\nbackingColor - (default -1 for no backing) backing rectangle around lights\ntype - (default \"dot\" or \"circle\") can also be \"box\" or \"square\"\nfill - (default false) set to true to fill in lights to the left of the selectedIndex\nscale - (default 1) for all the lights including spacing\nlightScale - (default 1) scale for each light - keeping the spacing unchanged\npress - (default false) set to true to make lights clickable\nshadowColor - (default rgba(0,0,0,.3)) set to -1 for no shadow\nshadowBlur - (default 5) the shadow blur if shadow is set\n\nMETHODS\nclone() - makes a copy with properties such as x, y, etc. also copied\ndispose() - removes any listeners\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nPROPERTIES\nselectedIndex - gets or sets the current index of the indicator\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\nnum - the assigned num value (how many light objects) (read only)\nbacking - gives access to the backing if there is one zim.Rectangle\nlights - an array of the light objects (zim Circle or Rectangle objects)\nlightsContainer - gives access to the lights createjs.Container with its zim.Circle or zim.Rectangle children\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nEVENTS\ndispatches a change event if press is true and indicator is pressed on and lights change\n\nALSO: See the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+60\n\tzim.Indicator = function(width, height, num, color, offColor, borderColor, backingColor, type, fill, scale, lightScale, press, shadowColor, shadowBlur) {\n\n\t\tvar sig = \"width, height, num, color, offColor, borderColor, backingColor, type, fill, scale, lightScale, press, shadowColor, shadowBlur\";\n\t\tvar duo; if (duo = zob(zim.Indicator, arguments, sig, this)) return duo;\n\t\tz_d(\"60\");\n\t\tthis.zimContainer_constructor();\n\n\t\tif (zot(width)) width = 300;\n\t\tif (zot(height)) height = 50;\n\t\tif (zot(num)) num = 6;\n\t\tif (zot(color)) color = \"#f58e25\";\n\t\tif (zot(offColor)) offColor = \"#666\";\n\t\tif (offColor < 0) offColor = \"rgba(0,0,0,.01)\";\n\t\tif (borderColor < 0) borderColor = null;\n\t\tif (zot(backingColor)) backingColor = -1;\n\t\tif (zot(type)) type = \"dot\";\n\t\tif (zot(fill)) fill = false;\n\t\tif (zot(scale)) scale = 1;\n\t\tif (zot(lightScale)) lightScale = 1;\n\t\tif (zot(press)) press = false;\n\t\tif (zot(shadowColor)) shadowColor = \"rgba(0,0,0,.3)\";\n\t\tif (zot(shadowBlur)) shadowBlur = 5;\n\n\t\tvar eventType = (zim.ACTIONEVENT==\"mousedown\")?\"mousedown\":\"click\";\n\n\t\tvar that = this;\n\t\tthis.lights = [];\n\n\t\tvar myValue;\n\t\tvar indicator = new zim.Container();\n\t\tif (backingColor != -1) {\n\t\t\tvar backing = new zim.Rectangle(width, height, backingColor);\n\t\t\tthis.addChild(backing);\n\t\t\tthis.backing = backing;\n\t\t}\n\t\tvar lights = this.lightsContainer = new zim.Container();\n\t\tthis.addChild(lights);\n\t\tvar light;\n\t\tvar size = height * .5;\n\t\tvar space = width / (num+1);\n\t\tvar hitArea = new createjs.Shape();\n\t\tif (type == \"square\" || type == \"box\") {\n\t\t\thitArea.graphics.f(\"black\").dr(-space/2/lightScale+size/2, -height/2+size/2, space/lightScale, height);\n\t\t} else {\n\t\t\thitArea.graphics.f(\"black\").dr(-space/2/lightScale, -height/2, space/lightScale, height);\n\t\t}\n\t\tfor (var i=0; i<num; i++) {\n\t\t\tif (type == \"square\" || type == \"box\") {\n\t\t\t\tlight = new zim.Rectangle(size, size, offColor, borderColor);\n\t\t\t\tlight.regX = light.width/2;\n\t\t\t\tlight.regY = light.height/2;\n\t\t\t} else {\n\t\t\t\tlight = new zim.Circle(size/2, offColor, borderColor);\n\t\t\t}\n\t\t\tthis.lights.push(light);\n\t\t\tlight.znum = i;\n\t\t\tlight.scaleX = light.scaleY = lightScale;\n\t\t\tlight.hitArea = hitArea;\n\t\t\tlight.x = space + space * i;\n\t\t\tlight.y = height / 2;\n\t\t\tlights.addChild(light);\n\t\t}\n\t\tlights.setBounds(0,0,width,height);\n\t\tlights.regX = lights.x = width / 2;\n\t\tlights.regY = lights.y = height / 2;\n\t\tthis.addChild(lights);\n\t\tif (shadowColor != -1 && shadowBlur > 0) lights.shadow = new createjs.Shadow(shadowColor, 2, 2, shadowBlur);\n\n\t\tif (press) {\n\t\t\tlights.cursor = \"pointer\";\n\t\t\tvar lightsEvent = lights.on(eventType, function(e) {\n\t\t\t\tif (myValue == e.target.znum) return;\n\t\t\t\tmyValue = e.target.znum;\n\t\t\t\tsetLights(myValue);\n\t\t\t\tthat.dispatchEvent(\"change\");\n\t\t\t});\n\t\t}\n\t\tlights.scaleX = lights.scaleY = scale;\n\n\t\tfunction setLights(v) {\n\t\t\tif (v >= num) v = -1; // out of range - don't let it fill up\n\t\t\tvar c;\n\t\t\tfor (var i=0; i<num; i++) {\n\t\t\t\tif (fill) {\n\t\t\t\t\tif (i < v) c = color;\n\t\t\t\t\telse c = offColor;\n\t\t\t\t} else {\n\t\t\t\t\tc = offColor;\n\t\t\t\t}\n\t\t\t\tif (i == v) c = color;\n\t\t\t\tlights.getChildAt(i).color = c;\n\t\t\t}\n\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t}\n\n\t\tObject.defineProperty(this, 'selectedIndex', {\n\t\t\tget: function() {\n\t\t\t\treturn myValue;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tmyValue = Math.floor(value);\n\t\t\t\tsetLights(myValue);\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'num', {\n\t\t\tget: function() {\n\t\t\t\treturn num;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (zon) zog(\"num is read only\");\n\t\t\t}\n\t\t});\n\n\t\tthis.clone = function() {\n\t\t\treturn that.cloneProps(new zim.Indicator(width, height, num, color, offColor, borderColor, backingColor, type, fill, scale, lightScale, press, shadowColor, shadowBlur));\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tthat.removeAllEventListeners();\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.Indicator, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-60\n\n/*--\nzim.Stepper = function(list, width, color, borderColor, label, vertical, arrows, corner, shadowColor, shadowBlur, loop, display, press, hold, holdDelay, holdSpeed, drag, dragSensitivity, dragRange, type, min, max, step, step2, arrows2, arrows2Scale, keyEnabled, keyArrows, rightForward, downForward)\n\nStepper\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nLets you step through a list of numbers or strings with arrows and keyboard arrows.\nUses mousedown to activate and defaults to stepping while pressing down\nand going faster if you drag away from your press.\n\nEXAMPLE\nvar stepper = new zim.Stepper();\nstepper.on(\"change\", function() {\n\tzog(stepper.currentIndex);\n\tzog(stepper.currentValue);\n});\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nlist - (default 1-10) pass in an array of strings or numbers to display one at a time\nwidth - (default 100) is the width of the text box (you can scale the whole stepper if needed)\ncolor - (default \"white\") for the arrows and the text box\nborderColor - (default null) stroke color for the box\nlabel - (default null) which can be used to define custom text properties\nvertical - (default false) set to true if you want the arrows above and below the text\narrows - (default true) - use graphical arrows (also see keyArrows to turn off keyboard arrows)\ncorner - (default 10) is the radius of the text box corners - set to 0 for square corners\nshadowColor - (default rgba(0,0,0,.3)) set to -1 for no drop shadow\nshadowBlur - (default 14) value for shadow blur if shadow is set\nloop - (default false) set to true to loop around or go back past 0 index\ndisplay - (default true) set to false just to just show the arrows and not the value\npress - (default true) will advance on label mousedown - set to false to not advance on mousedown\nhold - (default true) set to false to not step with extended press down\nholdDelay - (default 400 ms) time (milliseconds) to wait for first step with hold\nholdSpeed - (default 200 ms) time (milliseconds) between steps as holding\ndrag - (default true) set to false to not step when dragging\ndragSensitivity - (default .1) .01 changes really quickly - 1 changes at base rate\ndragRange - (default 200) absolute distance (pixels) from press the drag will reach maximum\ntype - (default \"list\") list draws values from list parameters\n\talso types \"number\", \"letter\" - these get ranges below\nmin - (default 0 for number and \"A\" for letter) the minimum value (can make min bigger than max) (not for list type)\nmax - (default 100 for number and \"Z\" for letter) the maximum value (can make max smaller than min) (not for list type)\nstep - (default 1) the step value each time - can be decimal (only positive, only for number type)\nstep2 - (default set to step) the step value when dragging perpendicular to main horizontal or vertical direction\n\tstep2 will run with drag set to true or with arrows2 set below (only positive, only for number type)\narrows2 - (default true if step2 different than step and type number - else false) secondary arrows perpendicular to main horizontal or vertical direction\n\tarrows2 will activate step2 above (only for number type)\narrows2Scale - (default .5) the scale relative to the main arrows\nkeyEnabled - (default true) set to false to disable keyboard search / number picker\nkeyArrows - (default true) set to false to disable keyboard arrows\nrightForward - (default true) set to false to make left the forward direction in your list\ndownForward - (default true except if type is \"number\" then default false) set to false to make up the forward direction in your list\n\nMETHODS\nnext() - goes to next\nprev() - goes to previous\nclone() - makes a copy with properties such as x, y, etc. also copied\ndispose() - removes listeners and deletes object\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nPROPERTIES\ncurrentIndex - gets or sets the current index of the array and display\ncurrentValue - gets or sets the current value of the array and display\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\nstepperArray - gets or sets the list\nprev, next - access to the zim Triangle objects (use to position)\narrowPrev, arrowNext - access to the zim Triangle objects\nprev2, next2 - access to the arrows2 containers (use to position)\narrowPrev2, arrowNext2 - access to the zim Triangle objects for arrows2\nmin, max - only for number mode at the monent - currently, do not change the max to be less than the min\nlabel - access to the zim.Label\ntextBox - access to the text box backing shape\nloop - does the stepper loop\nenabled - default is true - set to false to disable\nfocus - get or set the focus for keypress\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nOPTIMIZED\nThis component is affected by the general zim.OPTIMIZE setting (default is false)\nif set to true, you will have to stage.update() after setting certain properties\nand stage.update() in change event to see component change its graphics\n\nEVENTS\ndispatches a \"change\" event when changed by pressing an arrow or a keyboard arrow\n(but not when setting currentIndex or currentValue properties)\n\nALSO: See the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+61\n\tzim.Stepper = function(list, width, color, borderColor, label, vertical, arrows, corner,\n\t\t\tshadowColor, shadowBlur, loop, display, press, hold, holdDelay, holdSpeed, drag, dragSensitivity, dragRange, type, min, max, step, step2, arrows2, arrows2Scale, keyEnabled, keyArrows, rightForward, downForward) {\n\n\t\tvar sig = \"list, width, color, borderColor, label, vertical, arrows, corner, shadowColor, shadowBlur, loop, display, press, hold, holdDelay, holdSpeed, drag, dragSensitivity, dragRange, type, min, max, step, step2, arrows2, arrows2Scale, keyEnabled, keyArrows, rightForward, downForward\";\n\t\tvar duo; if (duo = zob(zim.Stepper, arguments, sig, this)) return duo;\n\t\tz_d(\"61\");\n\t\tthis.zimContainer_constructor();\n\n\t\tif (zot(list)) list = [0,1,2,3,4,5,6,7,8,9];\n\t\tif (zot(width)) width=200;\n\t\tif (zot(color)) color=\"white\";\n\t\tif (zot(borderColor)) borderColor=null;\n\t\tif (zot(label)) label = \"\";\n\t\tif (typeof label === \"string\" || typeof label === \"number\") label = new zim.Label(label, 64, \"arial\", \"#555\", null, null, null, \"center\");\n\t\tif (zot(vertical)) vertical=false;\n\t\tif (zot(arrows)) arrows=true;\n\t\tif (zot(corner)) corner=16;\n\t\tif (zot(shadowColor)) shadowColor=\"rgba(0,0,0,.3)\";\n\t\tif (zot(shadowBlur)) shadowBlur=14;\n\t\tif (zot(loop)) loop=false;\n\t\tif (zot(display)) display=true;\n\n\t\tif (zot(press)) press=true;\n\t\tif (zot(hold)) hold=true;\n\t\tif (zot(holdDelay)) holdDelay=400;\n\t\tif (zot(holdSpeed)) holdSpeed=200;\n\t\tif (zot(drag)) drag=true;\n\t\tif (zot(dragSensitivity) || dragSensitivity <= 0) dragSensitivity=.1;\n\t\tif (zot(dragRange)) dragRange=200;\n\n\t\tif (zot(type)) type=\"list\";\n\t\tif (zot(min)) min=0;\n\t\tif (zot(max)) max=100;\n\t\tif (zot(step)) step=1;\n\t\tif (zot(step2)) step2=step;\n\t\tif (zot(arrows2) && step2 != step && type == \"number\") arrows2=true;\n\t\tif (zot(arrows2Scale)) arrows2Scale=.5;\n\t\tif (zot(keyEnabled)) keyEnabled = true;\n\t\tif (zot(keyArrows)) keyArrows = true;\n\t\tif (zot(rightForward)) rightForward = true;\n\t\tif (zot(downForward)) downForward = type==\"number\"?false:true;\n\n\t\tvar that = this;\n\t\tvar index;\n\t\tvar height = 100;\n\t\tvar boxSpacing = height/4;\n\n\t\tvar actualStep = step; // toggle between step and step2\n\t\tvar numVal;\n\t\tvar numDir = 1;\n\t\tvar letterVal;\n\t\tvar decimals;\n\t\tif (type == \"number\") {\n\t\t\tmin = Number(min);\n\t\t\tmax = Number(max);\n\t\t\tif (min == NaN) min = 0;\n\t\t\tif (max == NaN) max = 100;\n\t\t\tif (max < min) {\n\t\t\t\tnumDir = -1;\n\t\t\t\tvar temp = max; // one day ES6\n\t\t\t\tmax = min;\n\t\t\t\tmin = temp;\n\t\t\t\tnumVal = max;\n\t\t\t} else {\n\t\t\t\tnumVal = min;\n\t\t\t}\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\t\t\tif (0 > min && 0 < max) numVal = 0;\n\t\t\tstep = Math.abs(step);\n\t\t\tdecimals = Math.max(getDecimals(step), getDecimals(step2));\n\t\t} else if (type == \"letter\") {\n\t\t\tlist = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n\t\t\tif (typeof min != \"string\") min = \"A\";\n\t\t\tif (typeof max != \"string\") max = \"Z\";\n\t\t\tmin = min.substr(0,1).toUpperCase();\n\t\t\tmax = max.substr(0,1).toUpperCase();\n\t\t\tvar startLetter = list.indexOf(min);\n\t\t\tif (startLetter < 0) {min = \"A\"; startLetter = 0;}\n\t\t\tvar endLetter = list.indexOf(max);\n\t\t\tif (endLetter < 0) {max = \"Z\"; endLetter = list.length;}\n\t\t\tif (endLetter < startLetter) {\n\t\t\t\tlist.reverse();\n\t\t\t\tstartLetter = list.length-1-startLetter;\n\t\t\t\tendLetter = list.length-1-endLetter;\n\t\t\t}\n\t\t\tlist = list.splice(startLetter, endLetter-startLetter+1);\n\t\t} else {\n\t\t\ttype = \"list\";\n\t\t}\n\n\t\tfunction getDecimals(num) {\n\t\t\tvar decimals = String(num).split(\".\")[1]\n\t\t\tif (decimals) {decimals = decimals.length} else {decimals = 0;};\n\t\t\treturn decimals;\n\t\t}\n\n\t\tvar rawEvent;\n\t\tvar rawX = 0;\n\t\tvar rawY = 0;\n\n\t\tif (drag) {\n\t\t\tthis.on(\"mousedown\", function() {\n\t\t\t\tthis.getStage().mouseMoveOutside = true;\n\t\t\t\trawEvent = this.getStage().on(\"stagemousemove\", function(e){\n\t\t\t\t\trawX = e.rawX;\n\t\t\t\t\trawY = e.rawY;\n\t\t\t\t})\n\t\t\t}, null, true);\n\t\t}\n\t\tthis.label = label;\n\t\tlabel.mouseChildren = false;\n\t\tlabel.mouseEnabled = false;\n\n\t\tvar holdCheck = false;\n\t\tvar delayTimeout;\n\t\tvar speedTimeout;\n\t\tvar roundTimeout;\n\t\tvar clickCheck = false;\n\t\tvar prev, arrowPrev, next, arrowNext, prev2, arrowPrev2, next2, arrowNext2;\n\t\tif (arrows || arrows2) {\n\t\t\tvar arrowBacking = new createjs.Shape();\n\t\t\tarrowBacking.graphics.f(\"rgba(255,255,255,.11)\").r(0,0,height*1.5,height*1.5);\n\t\t\tarrowBacking.regX = height*1.5 / 2;\n\t\t\tarrowBacking.regY = height*1.5 / 2 + boxSpacing/2;\n\t\t}\n\t\tif (arrows) {\n\t\t\tprev = this.prev = new zim.Container();\n\t\t\tthis.addChild(prev);\n\t\t\tprev.hitArea = arrowBacking;\n\n\t\t\tarrowPrev = this.arrowPrev = new zim.Triangle(height, height*.8, height*.8, color);\n\t\t\tif (shadowColor != -1 && shadowBlur > 0) prev.shadow = new createjs.Shadow(shadowColor, 3, 3, shadowBlur);\n\t\t\tprev.addChild(arrowPrev);\n\t\t\tprev.cursor = \"pointer\";\n\n\t\t\tprev.on(\"mousedown\", function(e) {\n\t\t\t\tactualStep = step;\n\t\t\t\tvar val = vertical?(downForward?1:-1):(rightForward?-1:1);\n\t\t\t\tdoStep(val);\n\t\t\t\tgo(val);\n\t\t\t})\n\t\t\tif (hold) prev.on(\"pressup\", goEnd);\n\n\t\t\tif (vertical) {\n\t\t\t\tprev.rotation = 180;\n\t\t\t\tprev.x = width/2;\n\t\t\t\tif (display) {\n\t\t\t\t\tprev.y = prev.height + boxSpacing + height + prev.height/2 + boxSpacing;\n\t\t\t\t} else {\n\t\t\t\t\tprev.y = prev.height * 2;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tprev.rotation = -90;\n\t\t\t\tprev.x = prev.height/2;\n\t\t\t\tprev.y = prev.width/2;\n\t\t\t}\n\t\t}\n\n\t\tif (display) {\n\t\t\tvar box = this.textBox = new createjs.Shape();\n\t\t\tbox.cursor = \"pointer\";\n\t\t\tthis.addChild(box);\n\t\t\tbox.setBounds(0, 0, width, height);\n\t\t\tif (borderColor != null) box.graphics.s(borderColor).ss(1.5);\n\t\t\tbox.graphics.f(color).rr(0, 0, width, height, corner);\n\t\t\tif (shadowColor != -1 && shadowBlur > 0) box.shadow = new createjs.Shadow(shadowColor, 3, 3, shadowBlur);\n\n\t\t\tif (arrows) {\n\t\t\t\tif (vertical) {\n\t\t\t\t\tif (arrows) box.y = arrowPrev.height + boxSpacing;\n\t\t\t\t} else {\n\t\t\t\t\tif (arrows) box.x = arrowPrev.height + boxSpacing;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.addChild(label);\n\t\t\tif (list.length > 0) {\n\t\t\t\t// index = Math.floor(list.length/2)\n\t\t\t\tindex = 0;\n\t\t\t\tlabel.text = list[index];\n\t\t\t}\n\t\t\tlabel.x = 50+box.x+box.getBounds().width/2;\n\t\t\tlabel.y = box.y+(box.getBounds().height-label.getBounds().height)/2;\n\n\t\t\tbox.on(\"mousedown\", function(e) {\n\t\t\t\tif (press) doStep(1);\n\t\t\t\tgo(1, true); // do decimals from box\n\t\t\t\tif (type == \"number\") {\n\t\t\t\t\tclearTimeout(roundTimeout);\n\t\t\t\t\tclickCheck = true;\n\t\t\t\t\troundTimeout = setTimeout(function() {\n\t\t\t\t\t\tclickCheck = false;\n\t\t\t\t\t}, 200);\n\t\t\t\t}\n\t\t\t});\n\t\t\tbox.on(\"pressup\", function() {\n\t\t\t\tif (clickCheck) {\n\t\t\t\t\tnumVal = Math.round(numVal);\n\t\t\t\t\tsetLabel(numVal, numVal);\n\t\t\t\t\tthat.dispatchEvent(\"change\");\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tif (list.length > 0) {\n\t\t\t\tindex = 0;\n\t\t\t}\n\t\t}\n\n\n\t\tif (arrows) {\n\t\t\tnext = this.next = new zim.Container();\n\t\t\tthis.addChild(next);\n\t\t\tnext.hitArea = arrowBacking.clone();\n\n\t\t\tarrowNext = this.arrowNext = new zim.Triangle(height, height*.8, height*.8, color);\n\t\t\tif (shadowColor != -1 && shadowBlur > 0) next.shadow = new createjs.Shadow(shadowColor, 3, 3, shadowBlur);\n\t\t\tnext.addChild(arrowNext);\n\t\t\tnext.cursor = \"pointer\";\n\n\t\t\tnext.on(\"mousedown\", function(e) {\n\t\t\t\tactualStep = step;\n\t\t\t\tvar val = vertical?(downForward?-1:1):(rightForward?1:-1);\n\t\t\t\tdoStep(val);\n\t\t\t\tgo(val);\n\t\t\t});\n\n\t\t\tif (hold) next.on(\"pressup\", goEnd);\n\n\t\t\tif (vertical) {\n\t\t\t\tnext.rotation = 0;\n\t\t\t\tnext.x = width/2;\n\t\t\t\tnext.y = next.getBounds().height/2;\n\t\t\t} else {\n\t\t\t\tnext.rotation = 90;\n\t\t\t\tif (display) {\n\t\t\t\t\tnext.x = box.x + box.getBounds().width + next.getBounds().height/2 + boxSpacing;\n\t\t\t\t} else {\n\t\t\t\t\tnext.x = prev.x + prev.getBounds().width;\n\t\t\t\t}\n\t\t\t\tnext.y = next.getBounds().width/2;\n\t\t\t}\n\t\t}\n\n\n\t\tvar holdX;\n\t\tvar proportion;\n\t\t// pressdown and move mouse changes speed and direction of stepper\n\t\tfunction go(dir, both, dec) {\n\t\t\tif (hold) {\n\t\t\t\tholdX = that.getStage().mouseX;\n\t\t\t\tholdY = that.getStage().mouseY;\n\t\t\t\tif (holdX == 0) holdX = 1;\n\t\t\t\tif (holdY == 0) holdY = 1;\n\t\t\t\tif (!drag) dragSensitivity = 1;\n\t\t\t\tproportion = new zim.Proportion(0, dragRange, holdSpeed, holdSpeed*dragSensitivity);\n\t\t\t\tvar dragInput = holdSpeed;\n\t\t\t\tdelayTimeout = setTimeout(function() {\n\t\t\t\t\tholdCheck=true;\n\t\t\t\t\tfunction doHold() {\n\t\t\t\t\t\tspeedTimeout = setTimeout(function() {\n\t\t\t\t\t\t\tvar dragDir = dir;\n\t\t\t\t\t\t\tif (drag) {\n\t\t\t\t\t\t\t\t// only change direction if outside of 10 pixels from where pressed\n\t\t\t\t\t\t\t\tvar diffX = Math.abs(rawX - holdX);\n\t\t\t\t\t\t\t\tvar diffY = Math.abs(rawY - holdY);\n\t\t\t\t\t\t\t\tif (vertical) {\n\t\t\t\t\t\t\t\t\tif (!both && !dec) diffX = 0; // don't do decimals\n\t\t\t\t\t\t\t\t\tif (dec) diffY = 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (!both && !dec) diffY = 0; // don't do decimals\n\t\t\t\t\t\t\t\t\tif (dec) diffX = 0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (diffX >= 10 || diffY >= 10) {\n\t\t\t\t\t\t\t\t\tif (diffX > diffY) {\n\t\t\t\t\t\t\t\t\t\tactualStep = vertical?step2:step;\n\t\t\t\t\t\t\t\t\t\tdragDir = rawX - holdX > 0 ? 1 : -1;\n\t\t\t\t\t\t\t\t\t\tif (!rightForward) dragDir*-1;\n\t\t\t\t\t\t\t\t\t\tdragInput = proportion.convert(Math.abs(holdX-rawX));\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tactualStep = vertical?step:step2;\n\t\t\t\t\t\t\t\t\t\tdragDir = rawY - holdY > 0 ? 1 : -1;\n\t\t\t\t\t\t\t\t\t\tif (type == \"number\") dragDir *= -1;\n\t\t\t\t\t\t\t\t\t\tif (!downForward) dragDir*-1;\n\t\t\t\t\t\t\t\t\t\tdragInput = proportion.convert(Math.abs(holdY-rawY));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdoStep(dragDir);\n\t\t\t\t\t\t\tdoHold();\n\t\t\t\t\t\t}, dragInput);\n\t\t\t\t\t}\n\t\t\t\t\tdoHold();\n\t\t\t\t}, holdDelay);\n\t\t\t}\n\t\t}\n\n\t\tif (hold && display) box.on(\"pressup\", goEnd);\n\n\t\tfunction goEnd() {\n\t\t\tholdCheck = false;\n\t\t\tclearTimeout(delayTimeout);\n\t\t\tclearTimeout(speedTimeout);\n\t\t}\n\n\t\tif (arrows2) { // step2 arrows\n\n\t\t\tprev2 = this.prev2 = new zim.Container();\n\t\t\tprev2.hitArea = arrowBacking.clone();\n\t\t\tarrowPrev2 = this.arrowPrev2 = new zim.Triangle(height, height*.8, height*.8, \"rgba(0,0,0,.2)\", color, 2);\n\t\t\tprev2.addChild(arrowPrev2);\n\t\t\tprev2.cursor = \"pointer\";\n\t\t\tprev2.scale(arrows2Scale);\n\t\t\tprev2.alpha = .5;\n\t\t\tprev2.on(\"mousedown\", function(e) {\n\t\t\t\tactualStep = step2;\n\t\t\t\tvar val = vertical?(rightForward?-1:1):(downForward?1:-1);\n\t\t\t\tdoStep(val);\n\t\t\t\tgo(val, null, true);\n\t\t\t});\n\t\t\tif (hold) prev2.on(\"pressup\", goEnd);\n\n\t\t\tnext2 = this.next2 = new zim.Container();\n\t\t\tnext2.hitArea = arrowBacking.clone();\n\t\t\tarrowNext2 = this.arrowNext2 = new zim.Triangle(height, height*.8, height*.8, \"rgba(0,0,0,.2)\", color, 2);\n\t\t\tnext2.addChild(arrowNext2);\n\t\t\tnext2.cursor = \"pointer\";\n\t\t\tnext2.scale(arrows2Scale);\n\t\t\tnext2.alpha = .5;\n\t\t\tnext2.on(\"mousedown\", function(e) {\n\t\t\t\tactualStep = step2;\n\t\t\t\tvar val = vertical?(rightForward?1:-1):(downForward?-1:1);\n\t\t\t\tdoStep(val);\n\t\t\t\tgo(val, null, true);\n\t\t\t});\n\t\t\tif (hold) next2.on(\"pressup\", goEnd);\n\n\t\t\tif (vertical) {\n\t\t\t\tprev2.y = this.height / 2;\n\t\t\t\tprev2.x = -prev2.width / 2 - boxSpacing*Math.max(.2, Math.min(1, arrows2Scale));\n\t\t\t\tprev2.rotation = 270;\n\t\t\t\tnext2.y = this.height / 2;\n\t\t\t\tnext2.x = this.width + next2.width/2 + boxSpacing*Math.max(.2, Math.min(1, arrows2Scale));\n\t\t\t\tnext2.rotation = 90;\n\t\t\t} else {\n\t\t\t\tnext2.x = this.width / 2;\n\t\t\t\tnext2.y = -next2.height / 2 - boxSpacing*Math.max(.2, Math.min(1, arrows2Scale));\n\t\t\t\tnext2.rotation = 0;\n\t\t\t\tprev2.x = this.width / 2;\n\t\t\t\tprev2.y = this.height + prev2.height/2 + boxSpacing*Math.max(.2, Math.min(1, arrows2Scale));\n\t\t\t\tprev2.rotation = 180;\n\t\t\t}\n\t\t\tthis.addChild(prev2, next2);\n\t\t}\n\n\t\tsetLabel(type==\"number\"?numVal:list[index], type==\"number\"?numVal:index);\n\n\t\tif (zot(zim.focus)) zim.focus = this;\n\t\tfunction doStep(n) {\n\t\t\tvar text;\n\t\t\tvar nextIndex;\n\t\t\tif (type == \"number\") {\n\t\t\t\tvar lastNumVal = numVal;\n\t\t\t\tnumVal += actualStep * n * numDir;\n\t\t\t\tnumVal = zim.decimals(numVal, decimals);\n\t\t\t\tif (!loop) {\n\t\t\t\t\tif (numVal > that.max) {\n\t\t\t\t\t\tnumVal = step==1?that.max:lastNumVal;\n\t\t\t\t\t\tif (display) box.cursor = \"default\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (display) box.cursor = \"pointer\";\n\t\t\t\t\t}\n\t\t\t\t\tif (numVal < that.min) {\n\t\t\t\t\t\tnumVal = step==1?that.min:lastNumVal;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (numVal > that.max) {\n\t\t\t\t\t\tnumVal = that.min;\n\t\t\t\t\t} else if (numVal < that.min) {\n\t\t\t\t\t\tnumVal = that.max;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnextIndex = index + n;\n\t\t\t\tif (!loop) {\n\t\t\t\t\tif (nextIndex > list.length-1) {\n\t\t\t\t\t\tif (display) box.cursor = \"default\";\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (display) box.cursor = \"pointer\";\n\t\t\t\t\t}\n\t\t\t\t\tif (nextIndex < 0) return;\n\t\t\t\t} else {\n\t\t\t\t\tif (nextIndex > list.length-1) nextIndex = 0;\n\t\t\t\t\tif (nextIndex < 0) nextIndex = list.length-1;\n\t\t\t\t}\n\t\t\t\tindex = nextIndex;\n\t\t\t}\n\t\t\tsetLabel(type==\"number\"?numVal:list[index], type==\"number\"?numVal:index);\n\t\t\tthat.dispatchEvent(\"change\");\n\t\t}\n\n\t\tObject.defineProperty(this, 'currentIndex', {\n\t\t\tget: function() {\n\t\t\t\tif (type==\"number\") {\n\t\t\t\t\treturn undefined;\n\t\t\t\t} else {\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif(zot(value)) return;\n\t\t\t\tvalue = Math.min(list.length-1, Math.max(0, value));\n\t\t\t\tindex = value;\n\t\t\t\tsetLabel(list[index], index);\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'currentValue', {\n\t\t\tget: function() {\n\t\t\t\tif (type==\"number\") {\n\t\t\t\t\treturn numVal;\n\t\t\t\t} else {\n\t\t\t\t\treturn list[index];\n\t\t\t\t}\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif(zot(value)) return;\n\t\t\t\tif (type==\"number\") {\n\t\t\t\t\t// original parameters are corrected\n\t\t\t\t\t// possibly updated properties are not\n\t\t\t\t\t// but for now, not making getter setter methods to check\n\t\t\t\t\t// maybe revisit if add min and max property for alphabetic\n\t\t\t\t\tif (that.max > that.min) {\n\t\t\t\t\t\tif (value > that.max || value < that.min) return;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (value < that.max || value > that.min) return;\n\t\t\t\t\t}\n\t\t\t\t\tnumVal = value;\n\t\t\t\t\tsetLabel(numVal, numVal);\n\t\t\t\t} else {\n\t\t\t\t\tif (list.indexOf(value) > -1) {\n\t\t\t\t\t\tvalue = list.indexOf(value);\n\t\t\t\t\t} else {return;}\n\t\t\t\t\tif (value == that.currentIndex) return;\n\t\t\t\t\tindex=value;\n\t\t\t\t\tsetLabel(list[index], index);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'loop', {\n\t\t\tget: function() {\n\t\t\t\treturn loop;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tloop = value;\n\t\t\t\tif (type==\"number\") {\n\t\t\t\t\tsetLabel(numVal, numVal);\n\t\t\t\t} else {\n\t\t\t\t\tsetLabel(list[that.currentIndex], that.currentIndex);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'stepperArray', {\n\t\t\tget: function() {\n\t\t\t\treturn list;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tlist = value;\n\t\t\t\tthat.currentIndex = that.currentIndex;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'focus', {\n\t\t\tget: function() {\n\t\t\t\treturn (zim.focus == that);\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (value) {\n\t\t\t\t\tzim.focus = that;\n\t\t\t\t} else {\n\t\t\t\t\t// if this component was in focus then remove focus\n\t\t\t\t\tif (zim.focus == that) zim.focus = null;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis._enabled = true;\n\t\tObject.defineProperty(that, 'enabled', {\n\t\t\tget: function() {\n\t\t\t\treturn that._enabled;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tzenable(that, value);\n\t\t\t\tif (value) {\n\t\t\t\t\tif (type==\"number\") {\n\t\t\t\t\t\tsetLabel(numVal, numVal);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetLabel(list[that.currentIndex], that.currentIndex);\n\t\t\t\t\t}\n\t\t\t\t\twindow.addEventListener(\"keydown\", that.keyDownEvent);\n\t\t\t\t} else {\n\t\t\t\t\tgreyPrev();\n\t\t\t\t\tgreyNext();\n\t\t\t\t\twindow.removeEventListener(\"keydown\", that.keyDownEvent);\n\t\t\t\t\tif (display) label.mouseChildren = false;\n\t\t\t\t\tif (display) label.mouseEnabled = false;\n\t\t\t\t}\n\t\t\t\tif (next && (!zim.OPTIMIZE && next.getStage())) {\n\t\t\t\t\tnext.getStage().update();\n\t\t\t\t} else if (label && (!zim.OPTIMIZE && label.getStage())) {\n\t\t\t\t\tlabel.getStage().update();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tfunction setLabel(text, n) {\n\t\t\tindex = n;\n\t\t\tif (display) {\n\t\t\t\tif (type == \"number\") {\n\t\t\t\t\tif (text != 0 && decimals > 0) {\n\t\t\t\t\t\ttext = zim.decimals(text, decimals, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlabel.text = text;\n\t\t\t\tlabel.x = box.x+box.getBounds().width/2;\n\t\t\t\tlabel.y = box.y+(box.getBounds().height-label.getBounds().height)/2;\n\t\t\t}\n\t\t\tif (arrows) {\n\t\t\t\tprev.alpha = 1;\n\t\t\t\tarrowPrev.color = color;\n\t\t\t\tprev.cursor = \"pointer\";\n\t\t\t\tnext.alpha = 1;\n\t\t\t\tarrowNext.color = color;\n\t\t\t\tnext.cursor = \"pointer\";\n\t\t\t\tif (!loop) {\n\t\t\t\t\tif (type == \"number\") {\n\t\t\t\t\t\tif (index == that.min) {\n\t\t\t\t\t\t\tif (numDir > 0) {greyPrev();} else {greyNext()};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (index == that.max) {\n\t\t\t\t\t\t\tif (numDir > 0) {greyNext();} else {greyPrev()};\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index == 0) vertical?greyNext():greyPrev();\n\t\t\t\t\t\tif (index == list.length-1) vertical?greyPrev():greyNext();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (next && (!zim.OPTIMIZE && next.getStage())) {\n\t\t\t\tnext.getStage().update();\n\t\t\t} else if (label && (!zim.OPTIMIZE && label.getStage())) {\n\t\t\t\tlabel.getStage().update();\n\t\t\t}\n\t\t}\n\n\t\tfunction greyPrev() {\n\t\t\tif (!arrows) return;\n\t\t\tprev.alpha = .8;\n\t\t\tarrowPrev.color = \"#aaa\";\n\t\t\tprev.cursor = \"default\";\n\t\t}\n\t\tfunction greyNext() {\n\t\t\tif (!arrows) return;\n\t\t\tnext.alpha = .8;\n\t\t\tarrowNext.color = \"#aaa\";\n\t\t\tnext.cursor = \"default\";\n\t\t}\n\n\t\tvar pressCheck = false;\n\t\tvar decimalCheck = false;\n\t\tvar negativeCheck = false;\n\t\tthis.on(\"mousedown\", function() {\n\t\t\tzim.focus = that;\n\t\t\tpressCheck = true;\n\t\t\tdecimalCheck = false;\n\t\t\tnegativeCheck = false;\n\t\t})\n\n\t\tthis.keyDownEvent = function(e) {\n\t\t\tif (zim.focus != that) return;\n\t\t\tif (!e) e = event;\n\t\t\tvar k = e.keyCode;\n\t\t\tif (keyArrows) {\n\t\t\t\tif (k >= 37 && k <= 40) {\n\t\t\t\t\tvar forwardVertical = downForward?40:38;\n\t\t\t\t\tvar forwardHorizontal = rightForward?39:37;\n\t\t\t\t\tvar backwardVertical = downForward?38:40;\n\t\t\t\t\tvar backwardHorizontal = rightForward?37:39;\n\t\t\t\t\tif (k == forwardVertical || k == forwardHorizontal) {\n\t\t\t\t\t\tif ((vertical && k == forwardVertical) || (!vertical && k == forwardHorizontal)) {\n\t\t\t\t\t\t\tactualStep = step;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tactualStep = step2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdoStep(1);\n\t\t\t\t\t} else if (k == backwardVertical || k == backwardHorizontal) {\n\t\t\t\t\t\tif ((vertical && k == backwardVertical) || (!vertical && k == backwardHorizontal)) {\n\t\t\t\t\t\t\tactualStep = step;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tactualStep = step2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdoStep(-1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (keyEnabled) {\n\t\t\t\tif (type==\"number\") { // 48-57, 96-105 190. 173-\n\t\t\t\t\tvar num;\n\t\t\t\t\tif (!e.shiftKey && k>=48 && k<=57) {\n\t\t\t\t\t\tnum = k-48;\n\t\t\t\t\t} else if (k>=96 && k<=105) {\n\t\t\t\t\t\tnum = k-96;\n\t\t\t\t\t} else if (k==190) {\n\t\t\t\t\t\tdecimalCheck = true;\n\t\t\t\t\t} else if (k==173 || k==189) {\n\t\t\t\t\t\tthat.currentValue = that.currentValue * -1;\n\t\t\t\t\t\tthat.dispatchEvent(\"change\");\n\t\t\t\t\t\tnegativeCheck = !negativeCheck;\n\t\t\t\t\t} else if (k == 46) { // delete\n\t\t\t\t\t\tpressCheck = true;\n\t\t\t\t\t\tdecimalCheck = false;\n\t\t\t\t\t} else if (k == 8) { // backspace\n\n\t\t\t\t\t}\n\t\t\t\t\tif (pressCheck && !zot(num)) {\n\t\t\t\t\t\t// handles only one decimal until full edit mode added\n\t\t\t\t\t\tif (decimalCheck) num /= 10;\n\t\t\t\t\t\tif (negativeCheck) num *= -1;\n\t\t\t\t\t\tthat.currentValue = num;\n\t\t\t\t\t\tpressCheck = false;\n\t\t\t\t\t\tthat.dispatchEvent(\"change\");\n\t\t\t\t\t} else if (!zot(num)) {\n\t\t\t\t\t\tif (decimalCheck) num = String(num / 10).substr(1);\n\t\t\t\t\t\tthat.currentValue = Number(Math.floor(Number(label.text)) + String(num));\n\t\t\t\t\t\tthat.dispatchEvent(\"change\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar lastValue = that.currentValue;\n\t\t\t\t\tthat.currentValue = String.fromCharCode(e.keyCode);\n\t\t\t\t\tif (that.currentValue != lastValue) that.dispatchEvent(\"change\");\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t\twindow.addEventListener(\"keydown\", this.keyDownEvent);\n\n\t\tthis.next = function() {\n\t\t\tdoStep(1);\n\t\t}\n\n\t\tthis.prev = function() {\n\t\t\tdoStep(-1);\n\t\t}\n\n\t\tthis.clone = function() {\n\t\t\treturn that.cloneProps(new zim.Stepper(list, width, color, borderColor, label.clone(), vertical, arrows, corner, shadowColor, shadowBlur, loop, display, press, hold, holdDelay, holdSpeed, drag, dragSensitivity, dragRange, type, min, max, step, step2, arrows2, arrows2Scale, keyEnabled, keyArrows, rightForward, downForward));\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tthat.removeAllEventListeners();\n\t\t\twindow.removeEventListener(\"keydown\", that.keyDownEvent);\n\t\t\tif (that.getStage()) that.getStage().off(rawEvent);\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim[\"z\"+\"ut\"] = function(e) { // patch for ZIM Distill\n\t\tif (!zot(e) && e[\"ke\"+\"y\"]) {\n\t\t\tzim.async(\"http://zim\"+\"js.com/co\"+\"de/gam\"+\"da\"+\"ta.\"+\"php?id=\"+e[\"k\"+\"ey\"]+\"&pla\"+\"yer=\"+e[\"pl\"+\"ayer\"]+\"&sco\"+\"re=\"+e[\"sc\"+\"ore\"]+\"&reve\"+\"rse=\"+e[\"i\"+\"nfo\"][\"rev\"+\"erse\"]+\"&to\"+\"tal=\"+e[\"in\"+\"fo\"][\"to\"+\"tal\"]+\"&allow\"+\"Zero=\"+e[\"i\"+\"nfo\"][\"al\"+\"lowZe\"+\"ro\"], e[\"in\"+\"fo\"][\"t\"+\"ype\"]);\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.Stepper, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-61\n\n/*--\nzim.Slider = function(min, max, step, button, barLength, barWidth, barColor, vertical, useTicks, inside)\n\nSlider\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nA traditional slider - will give values back based on min and max and position of button (knob).\n\nEXAMPLE\nvar slider = new zim.Slider({step:1});\nslider.center(stage);\nslider.on(\"change\", function() {\n\tzog(slider.currentValue); // 1-10 in steps of 1\n});\nstage.update();\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nmin - (default 0) the minimum value for the slider\nmax - (default 10) the maximum value for the slider\nstep - (default 0) 0 is continuous decimal - 1 would provide steps of 1, 2 would provide steps of 2, etc.\nbutton - (default small button with no label) - a zim.Button\nbarLength - (default 300) the length of the bar (the slider slides along its length)\nbarWidth - (default 3) the width of the bar (how fat the bar is)\nbarColor - (default \"#666\") the color of the bar (any CSS color)\nvertical - (default false) set to true to make slider vertical\nuseTicks - (default false) set to true to show small ticks for each step (step > 0)\ninside - (default false) set to true to fit button inside bar (need to manually adjust widths)\n\nMETHODS\nclone() - makes a copy with properties such as x, y, etc. also copied\ndispose() - removes listeners and deletes object\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),drag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nPROPERTIES\ncurrentValue - gets or sets the current value of the slider\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\nmin, max, step - read only - the assigned values\nbar - gives access to the bar zim.Rectangle\nbutton - gives access to the zim.Button\nticks - gives access to the ticks (to position these for example)\nenabled - default is true - set to false to disable\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nOPTIMIZED\nThis component is affected by the general zim.OPTIMIZE setting (default is false)\nif set to true, you will have to stage.update() after setting certain properties\nand stage.update() in change event to see component change its graphics\n\nEVENTS\ndispatches a \"change\" event when button is slid on slider (but not when setting currentValue property)\n\nALSO: See the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+62\n\tzim.Slider = function(min, max, step, button, barLength, barWidth, barColor, vertical, useTicks, inside) {\n\n\t\tvar sig = \"min, max, step, button, barLength, barWidth, barColor, vertical, useTicks, inside\";\n\t\tvar duo; if (duo = zob(zim.Slider, arguments, sig, this)) return duo;\n\t\tz_d(\"62\");\n\t\tthis.zimContainer_constructor();\n\n\t\tif (zot(min)) min = 0;\n\t\tif (zot(max)) max = 10;\n\t\tif (max-min == 0) {zog(\"ZIM Slider range must not be 0\"); return;}\n\t\tif (zot(step)) step = 0;\n\t\tif (zot(barLength)) barLength = 300;\n\t\tif (zot(barWidth)) barWidth = 3;\n\t\tif (zot(barColor)) barColor = \"#666\";\n\t\tif (zot(vertical)) vertical = false;\n\t\tif (zot(useTicks)) useTicks = false;\n\t\tif (zot(inside)) inside = false;\n\n\t\tif (zot(button)) {\n\t\t\tvar w = 30; var h = 40;\n\t\t\tif (vertical) {w = 50; h = 40;}\n\t\t\tbutton = new zim.Button(w,h,\"\",\"#fff\",\"#ddd\",\"#666\",1,0,null,null,30);\n\t\t}\n\t\tbutton.rollPersist = true;\n\n\t\tvar width; var height;\n\t\tif (vertical) {\n\t\t\twidth = button.width;\n\t\t\tif (inside) {\n\t\t\t\theight = barLength;\n\t\t\t\tthis.setBounds(0, 0, width, height);\n\t\t\t} else {\n\t\t\t\theight = barLength + button.height;\n\t\t\t\tthis.setBounds(-button.width/2, -button.height/2, width, height);\n\t\t\t}\n\t\t} else {\n\t\t\theight = button.height;\n\t\t\tif (inside) {\n\t\t\t\twidth = barLength;\n\t\t\t\tthis.setBounds(0, 0, width, height);\n\t\t\t} else {\n\t\t\t\twidth = barLength+button.width;\n\t\t\t\tthis.setBounds(-button.width/2, -button.height/2, width, height);\n\t\t\t}\n\t\t}\n\n\t\tvar that = this;\n\t\tvar myValue = min;\n\t\tvar lastValue = 0; // does not include min so always starts at 0\n\t\tthis.button = button;\n\t\tthis.cursor = \"pointer\";\n\n\t\tvar bar, rect, bounds, ticks, g;\n\n\t\tif (useTicks && step != 0) {\n\t\t\tticks = this.ticks = new zim.Shape();\n\t\t\tthis.addChild(ticks);\n\t\t\tg = ticks.graphics;\n\t\t\tg.ss(1).s(barColor);\n\t\t\tvar stepsTotal = Math.round((max - min) / step);\n\t\t\tvar newStep = (max - min) / stepsTotal;\n\t\t\tif (newStep != step) {if (zon) zog(\"zim.Slider() : non-divisible step (\"+step+\") adjusted\");}\n\t\t\tstep = newStep;\n\t\t\tif (inside) {\n\t\t\t\tvar spacing = (barLength - ((vertical) ? button.height : button.width)) / stepsTotal;\n\t\t\t} else {\n\t\t\t\tvar spacing = barLength / stepsTotal;\n\t\t\t}\n\t\t}\n\n\t\tif (vertical) {\n\t\t\tvar start = (inside) ? button.height / 2 : 0;\n\t\t\tif (useTicks && step != 0) {\n\t\t\t\tfor (var i=0; i<=stepsTotal; i++) {\n\t\t\t\t\tg.mt(0, start+spacing*i).lt(20, start+spacing*i);\n\t\t\t\t}\n\t\t\t\tticks.x = 10;\n\t\t\t}\n\t\t\tbar = this.bar = new zim.Rectangle(barWidth, barLength, barColor);\n\t\t\tthis.addChild(bar);\n\t\t\tzim.centerReg(button);\n\t\t\tthis.addChild(button);\n\t\t\tbounds = bar.getBounds();\n\t\t\trect = new createjs.Rectangle(bounds.width/2, bounds.y+start, 0, bounds.height-start*2);\n\t\t} else {\n\t\t\tvar start = (inside) ? button.width / 2 : 0;\n\t\t\tif (useTicks && step != 0) {\n\t\t\t\tfor (var i=0; i<=stepsTotal; i++) {\n\t\t\t\t\tg.mt(start+spacing*i,0).lt(start+spacing*i,-20);\n\t\t\t\t}\n\t\t\t\tticks.y = -10;\n\t\t\t}\n\t\t\tbar = this.bar = new zim.Rectangle(barLength, barWidth, barColor);\n\t\t\tthis.addChild(bar);\n\t\t\tzim.centerReg(button);\n\t\t\tthis.addChild(button);\n\t\t\tbounds = bar.getBounds();\n\t\t\trect = new createjs.Rectangle(bounds.x+start, bounds.height/2, bounds.width-start*2, 0);\n\t\t}\n\t\tbutton.x = rect.x;\n\t\tbutton.y = rect.y;\n\n\t\tfunction snap(v) {\n\t\t\tif (step == 0) return v;\n\t\t\treturn Math.round(v/step)*step;\n\t\t}\n\n\t\tvar diffX, diffY;\n\t\tbutton.on(\"mousedown\", function(e) {\n\t\t\tvar point = that.globalToLocal(e.stageX, e.stageY);\n\t\t\tdiffX = point.x - button.x;\n\t\t\tdiffY = point.y - button.y;\n\t\t\tif (that.getStage()) that.getStage().mouseMoveOutside = true;\n\t\t});\n\n\t\tbutton.on(\"pressmove\", function(e) {\n\t\t\tsetValue(e);\n\t\t});\n\t\tfunction setValue(e) {\n\t\t\tvar point = that.globalToLocal(e.stageX, e.stageY);\n\t\t\tvar p = checkBounds(point.x-diffX, point.y-diffY, rect);\n\t\t\tif (vertical) {\n\t\t\t\tbutton.x = p.x;\n\t\t\t\tmyValue = snap((p.y-rect.y) / rect.height * (min - max));\n\t\t\t\tbutton.y = rect.y + myValue * rect.height / (min - max);\n\t\t\t\tmyValue += max;\n\t\t\t\tif (button.y != lastValue) {\n\t\t\t\t\tthat.dispatchEvent(\"change\");\n\t\t\t\t}\n\t\t\t\tlastValue = button.y;\n\t\t\t} else {\n\t\t\t\tmyValue = snap((p.x-rect.x) / rect.width * (max - min));\n\t\t\t\tbutton.x = rect.x + myValue * rect.width / (max - min);\n\t\t\t\tmyValue += min;\n\t\t\t\tbutton.y = p.y;\n\t\t\t\tif (button.x != lastValue) {\n\t\t\t\t\tthat.dispatchEvent(\"change\");\n\t\t\t\t}\n\t\t\t\tlastValue = button.x;\n\t\t\t}\n\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t};\n\n\t\tfunction checkBounds(x,y,rect) {\n\t\t\tx = Math.max(rect.x, Math.min(rect.x+rect.width, x));\n\t\t\ty = Math.max(rect.y, Math.min(rect.y+rect.height, y));\n\t\t\treturn {x:x,y:y}\n\t\t}\n\n\t\tbar.on(\"mousedown\", function(e) {\n\t\t\tdiffX = button.width/2;\n\t\t\tdiffY = button.height/2;\n\t\t\tsetValue(e);\n\t\t});\n\n\t\tObject.defineProperty(this, 'currentValue', {\n\t\t\tget: function() {\n\t\t\t\treturn myValue;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (zot(value)) return;\n\t\t\t\tif (min < max) {\n\t\t\t\t\tif (value < min) value = min;\n\t\t\t\t\tif (value > max) value = max;\n\t\t\t\t} else {\n\t\t\t\t\tif (value > min) value = min;\n\t\t\t\t\tif (value < max) value = max;\n\t\t\t\t}\n\t\t\t\tmyValue = value = snap(value);\n\t\t\t\tif (vertical) {\n\t\t\t\t\tbutton.y = (value - max) / (min - max) * rect.height + start;\n\t\t\t\t\tlastValue = button.y;\n\t\t\t\t} else {\n\t\t\t\t\tbutton.x = (value - min) / (max - min) * rect.width + start;\n\t\t\t\t\tlastValue = button.x;\n\t\t\t\t}\n\t\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'min', {\n\t\t\tget: function() {\n\t\t\t\treturn min;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (zon) zog(\"min is read only\");\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'max', {\n\t\t\tget: function() {\n\t\t\t\treturn max;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (zon) zog(\"max is read only\");\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'step', {\n\t\t\tget: function() {\n\t\t\t\treturn step;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (zon) zog(\"step is read only\");\n\t\t\t}\n\t\t});\n\n\t\tthis._enabled = true;\n\t\tObject.defineProperty(that, 'enabled', {\n\t\t\tget: function() {\n\t\t\t\treturn that._enabled;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tzenable(that, value);\n\t\t\t}\n\t\t});\n\n\t\tthis.clone = function() {\n\t\t\treturn that.cloneProps(new zim.Slider(min, max, step, button.clone(), barLength, barWidth, barColor, vertical, useTicks, inside));\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tbutton.removeAllEventListeners();\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.Slider, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-62\n\n/*--\nzim.Dial = function(min, max, step, width, color, indicatorColor, indicatorScale, type, innerCircle, innerScale, useTicks, innerTicks, tickColor, limit)\n\nDial\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nA traditional dial - will give values back based on min and max and position of dial.\n\nEXAMPLE\nvar dial = new zim.Dial({step:1, color:\"violet\"});\ndial.center(stage);\ndial.on(\"change\", function() {\n\tzog(dial.currentValue); // 1-10 in steps of 1\n});\nstage.update();\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nmin - (default 0) the minimum value for the dial\nmax - (default 10) the maximum value for the dial\nstep - (default 0) 0 is continuous decimal - 1 would provide steps of 1, 2 would provide steps of 2, etc.\nwidth - (default 100) the width of the dial (diameter)\ncolor - (default \"#666\") the backing color of the dial\nindicatorColor - (default \"#222\") the color of the indicator\nindicatorScale - (default 1) the scale of the indicator\ntype - (default \"arrow\" or \"triangle\") can also be \"dot\" or \"circle\", and \"line\" or \"rectangle\"\ninnerCircle - (default true) gives an inner knob look - set to false for flat\ninnerScale - (default 1) can be adjusted along with indicatorScale to get a variety of looks\nuseTicks - (default true) will show lines for ticks if step is set\ninnerTicks (default false) set to true to put the ticks inside if step is set\ntickColor - (default indicatorColor) set the tick color if ticks are set\nlimit - (default true) stops dial from spinning right around - set to false to not limit dial\n\nMETHODS\nclone() - makes a copy with properties such as x, y, etc. also copied\ndispose() - removes listeners and deletes object\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nPROPERTIES\ncurrentValue - gets or sets the current value of the dial\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\nmin, max, step - read only - the assigned values\nbacking - gives access to the dial backing zim.Circle\ninner and inner2 give access to any inner circles\nticks - gives access to the ticks (to scale these for example)\nindicator - gives access to the indicator container with registration point at the dial center\nindicatorShape - gives access to the shape on the end of the indicator (zim Triangle, Circle, Rectangle)\nenabled - default is true - set to false to disable\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nOPTIMIZED\nThis component is affected by the general zim.OPTIMIZE setting (default is false)\nif set to true, you will have to stage.update() after setting certain properties\nand stage.update() in change event to see component change its graphics\n\nEVENTS\ndispatches a \"change\" event when dial changes value (but not when setting currentValue property)\n\nALSO: See the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+63\n\tzim.Dial = function(min, max, step, width, color, indicatorColor, indicatorScale, type, innerCircle, innerScale, useTicks, innerTicks, tickColor, limit) {\n\n\t\tvar sig = \"min, max, step, width, color, indicatorColor, indicatorScale, type, innerCircle, innerScale, useTicks, innerTicks, tickColor, limit\";\n\t\tvar duo; if (duo = zob(zim.Dial, arguments, sig, this)) return duo;\n\t\tz_d(\"63\");\n\t\tthis.zimContainer_constructor();\n\n\t\tif (zot(min)) min = 0;\n\t\tif (zot(max)) max = 10;\n\t\tif (max-min == 0) {zog(\"ZIM Dial range must not be 0\"); return;}\n\t\tif (zot(step)) step = 1;\n\t\tif (zot(width)) width = 100;\n\t\tif (zot(color)) color = \"#666\";\n\t\tif (zot(indicatorColor)) indicatorColor = \"#222\";\n\t\tif (zot(indicatorScale)) indicatorScale = 1;\n\t\tif (zot(type)) type = \"arrow\";\n\t\tif (zot(innerCircle)) innerCircle = true;\n\t\tif (zot(innerScale)) innerScale = .5;\n\t\tif (zot(useTicks)) useTicks = true;\n\t\tif (zot(innerTicks)) innerTicks = false;\n\t\tif (zot(tickColor)) tickColor = indicatorColor;\n\t\tif (zot(limit)) limit = true;\n\n\t\tvar that = this;\n\t\tthis.cursor = \"pointer\";\n\n\t\tvar r = width / 2;\n\t\tvar myValue = min; // includes the min\n\t\tvar lastValue = 0; // does not include min (so always starts at 0)\n\n\t\tvar backing = this.backing = new zim.Circle(r, color);\n\t\tthis.addChild(backing);\n\n\t\tif (innerCircle) {\n\t\t\tvar ic = (innerTicks) ? \"rgba(0,0,0,.2)\" : \"rgba(0,0,0,.1)\";\n\t\t\tif (color==\"black\"||color==\"#000\"||color==\"#000000\"||color==\"#111\"||color==\"#111111\") ic = \"#222\";\n\t\t\tvar inner = this.inner = new zim.Circle(r*innerScale, ic);\n\t\t\tthis.addChild(inner);\n\n\t\t\tif (!innerTicks) {\n\t\t\t\tvar ic2 = \"rgba(0,0,0,.1)\";\n\t\t\t\tvar inner2 = this.inner2 = new zim.Circle(r*(innerScale-.1), ic2);\n\t\t\t\tthis.addChild(inner2);\n\t\t\t}\n\n\t\t}\n\n\t\tvar stepsTotal = (max - min) / step;\n\t\tif (useTicks && step != 0) {\n\t\t\tticks = this.ticks = new zim.Container();\n\t\t\tthis.addChild(ticks);\n\t\t\tvar tick;\n\t\t\tfor (var i=0; i<stepsTotal+1; i++) {\n\t\t\t\tvar tick = new zim.Rectangle(1, r*.2, tickColor);\n\t\t\t\ttick.regY = r * ((innerTicks) ? (innerScale-.05) : 1.28);\n\t\t\t\ttick.regX = .5;\n\t\t\t\ttick.rotation = (360 / (stepsTotal+1)) * i;\n\t\t\t\tticks.addChild(tick);\n\t\t\t}\n\t\t}\n\n\t\tthis.setBounds(-r,-r,width,width);\n\t\tif (type == \"dot\" || type == \"circle\") {\n\t\t\tvar indicator = this.indicator = new zim.Container();\n\t\t\tvar indicatorShape = this.indicatorShape = new zim.Circle(r*.19, indicatorColor);\n\t\t\tindicator.addChild(indicatorShape);\n\t\t\tzim.scale(indicator, indicatorScale);\n\t\t\tindicator.regY = r - indicator.getBounds().width*indicatorScale/2 - r*.07;\n\t\t} else if (type == \"line\" || type == \"rectangle\") {\n\t\t\tvar indicator = this.indicator = new zim.Container();\n\t\t\tvar indicatorShape = this.indicatorShape = new zim.Rectangle(r * .1, r*.3, indicatorColor);\n\t\t\tindicator.addChild(indicatorShape);\n\t\t\tzim.scale(indicator, indicatorScale);\n\t\t\tindicator.regY = r - indicator.getBounds().width*indicatorScale/2 - r*.07;\n\t\t\tindicator.regX = r * .05;\n\t\t} else { // arrow\n\t\t\tvar indicator = this.indicator = new zim.Container();\n\t\t\tvar indicatorShape = this.indicatorShape = new zim.Triangle(r*.4, r*.4, r*.4, indicatorColor);\n\t\t\tindicator.addChild(indicatorShape);\n\t\t\tzim.scale(indicator, indicatorScale);\n\t\t\tindicator.regY = r - indicator.getBounds().height*indicatorScale*((innerTicks)?.85:.75);\n\t\t\tif (innerTicks) {\n\t\t\t\tindicatorShape.rotation = 180;\n\t\t\t}\n\t\t}\n\t\tindicator.regY /= indicatorScale;\n\t\tthis.addChild(indicator);\n\n\t\tfunction snap(v) {\n\t\t\tif (step == 0) return v;\n\t\t\treturn Math.round(v/step)*step;\n\t\t}\n\n\t\tvar lastAngle;\n\t\tvar startAngle;\n\t\tvar moveEvent;\n\t\tvar upEvent;\n\t\tvar lastA = 0;\n\t\tthis.on(\"mousedown\", function() {\n\t\t\tlastAngle = indicator.rotation;\n\t\t\tvar p = that.parent.globalToLocal(that.getStage().mouseX, that.getStage().mouseY);\n\t\t\tvar dX = p.x-that.x;\n\t\t\tvar dY = that.y-p.y;\n\t\t\tstartAngle = Math.atan2(dX,dY)*180/Math.PI;\n\t\t\tvar pressTime = new Date().getTime();\n\t\t\tmoveEvent = that.on(\"pressmove\", function() {\n\t\t\t\tp = that.parent.globalToLocal(that.getStage().mouseX, that.getStage().mouseY);\n\t\t\t\tdX = p.x-that.x;\n\t\t\t\tdY = that.y-p.y;\n\t\t\t\tvar angle = lastAngle + Math.atan2(dX,dY)*180/Math.PI - startAngle;\n\t\t\t\tif (limit) {\n\t\t\t\t\tif (angle < 0) angle += 360;\n\t\t\t\t\tangle = angle % 360;\n\t\t\t\t\tif (Math.abs(angle-lastA) > 180) return;\n\t\t\t\t}\n\t\t\t\tlastA = angle;\n\n\t\t\t\tsetValue(angle);\n\t\t\t});\n\t\t\tupEvent = this.on(\"pressup\", function() {\n\t\t\t\tvar deltaTime = new Date().getTime()-pressTime;\n\t\t\t\tif (deltaTime < 200) {\n\t\t\t\t\tp = that.parent.globalToLocal(that.getStage().mouseX, that.getStage().mouseY);\n\t\t\t\t\tdX = p.x-that.x;\n\t\t\t\t\tdY = that.y-p.y;\n\t\t\t\t\tvar angle = Math.atan2(dX,dY)*180/Math.PI;\n\t\t\t\t\tsetValue(angle);\n\t\t\t\t}\n\t\t\t\tlastAngle = indicator.rotation;\n\t\t\t\tthat.off(\"pressmove\", moveEvent);\n\t\t\t\tthat.off(\"pressup\", upEvent);\n\t\t\t});\n\t\t});\n\n\t\tfunction sign(n) {return n > 0 ? 1 : -1;}\n\n\t\tfunction setValue(angle) {\n\t\t\tvar v; // value (not including min)\n\t\t\tif (angle < 0) angle += 360;\n\t\t\tangle = angle % 360;\n\t\t\tif (step != 0) {\n\t\t\t\tangle = Math.min(angle,  360 - 360 / (stepsTotal+1));\n\t\t\t\tv = snap(angle / (360 - 360 / (stepsTotal+1)) * (max - min));\n\t\t\t\tindicator.rotation = v * (360 - 360 / (stepsTotal+1)) / (max - min);\n\t\t\t} else {\n\t\t\t\tindicator.rotation = angle;\n\t\t\t\tv = (angle / 360) * (max - min);\n\t\t\t}\n\t\t\tif (v != lastValue) {\n\t\t\t\tlastValue = v;\n\t\t\t\tmyValue = v + min;\n\t\t\t\tthat.dispatchEvent(\"change\");\n\t\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t\t}\n\t\t}\n\n\t\tObject.defineProperty(this, 'currentValue', {\n\t\t\tget: function() {\n\t\t\t\treturn myValue;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif(zot(value)) return;\n\t\t\t\tif (min < max) {\n\t\t\t\t\tif (value < min) value = min;\n\t\t\t\t\tif (value > max) value = max;\n\t\t\t\t} else {\n\t\t\t\t\tif (value > min) value = min;\n\t\t\t\t\tif (value < max) value = max;\n\t\t\t\t}\n\t\t\t\tmyValue = value;\n\t\t\t\tvalue = snap(value);\n\t\t\t\tif (step != 0) {\n\t\t\t\t\tindicator.rotation = (value - min) * (360 - 360 / (stepsTotal+1)) / (max - min);\n\t\t\t\t} else {\n\t\t\t\t\tindicator.rotation = (value - min) * 360 / (max - min);\n\t\t\t\t}\n\t\t\t\tlastValue = value - min;\n\t\t\t\tlastA = indicator.rotation;\n\t\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'min', {\n\t\t\tget: function() {\n\t\t\t\treturn min;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (zon) zog(\"min is read only\");\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'max', {\n\t\t\tget: function() {\n\t\t\t\treturn max;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (zon) zog(\"max is read only\");\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'step', {\n\t\t\tget: function() {\n\t\t\t\treturn step;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (zon) zog(\"step is read only\");\n\t\t\t}\n\t\t});\n\n\t\tthis._enabled = true;\n\t\tObject.defineProperty(that, 'enabled', {\n\t\t\tget: function() {\n\t\t\t\treturn that._enabled;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tzenable(that, value);\n\t\t\t}\n\t\t});\n\n\t\tthis.clone = function() {\n\t\t\treturn that.cloneProps(new zim.Dial(min, max, step, width, color, indicatorColor, indicatorScale, type, innerCircle, innerScale, useTicks, innerTicks, tickColor, limit));\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tthat.removeAllEventListeners();\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.Dial, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-63\n\n//***************** RADIAL  64\n\n/*--\nzim.Tabs = function(width, height, tabs, color, rollColor, offColor, spacing, currentEnabled, corner, labelColor, flatBottom, keyEnabled, gradient, gloss)\n\nTabs\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nA traditional tab layout for along the edge of content.\nCan also act as an independent button row or column.\n\nEXAMPLE\nvar tabs = new zim.Tabs({tabs:[\"A\", \"B\", \"C\", \"D\"], spacing:5, corner:14});\ntabs.center(stage);\ntabs.on(\"change\", function() {\n\tzog(tabs.selectedIndex);\n\tzog(tabs.text);\n});\nstage.update();\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nwidth - (default 240) overall width of tab set (ZIM divides the width across tabs and spacing)\nheight - (default 60) height of tabs\ntabs - (default [\"1\",\"2\",\"3\",\"4\"]) an array of tab objects with the following properties available:\n\tany tab specific properties will override the default values from other parameters\n\t[{label:\"String\", width:200, color:\"Red\", rollColor:\"pink\", offColor:\"grey\"}, {etc.}]\n\tlabel can be a String or a zim.Label object - default text color is white\ncolor - (default \"#333\") the color of the selected tab (any CSS color)\nrollColor - (default \"#555\") the rollover color (selected tabs do not roll over)\noffColor - (default \"#777\") the color of a deselected tab when not rolled over\nspacing - (default 1) is the pixels between tab buttons\ncurrentEnabled - (default false) set to true to be able to press the selected tab button\ncorner - (default 0) the corner radius of the tabs (at the top when flatBottom is true)\nlabelColor - (default \"white\") the color of the label\nflatBottom - (default true) flat bottom for tab shape set to false for button sets\nkeyEnabled - (default true) so tab key cycles through tabs, shift tab backwards\ngradient - (default null) 0 to 1 (try .3) adds a gradient to the tabs\ngloss - (default null) 0 to 1 (try .1) adds a gloss to the tabs\n\nMETHODS\nclone() - makes a copy with properties such as x, y, etc. also copied\ndispose() - removes listeners and deletes object\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nPROPERTIES\nselectedIndex - gets or sets the selected index of the tabs\nselected - gets the selected button - selected.enabled = true, etc.\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\ntabs - gets or sets tabs object (will have to manually change buttons as well as adjust props)\ncolor - gets or sets default selected tab color\nrollColor - gets or sets default rolled over color\noffColor - gets or sets default unselected tab color\ntext - gets current selected label text\nlabel - gets current selected label object\nbuttons - an array of the ZIM Button objects. buttons[0].enabled = false;\nlabels - an array of the ZIM Label objects. labels[0].text = \"YUM\"; labels[2].y -= 10;\nkeyEnabled - gets or sets whether the tab key and shift tab key cycles through tabs\nenabled - default is true - set to false to disable\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nOPTIMIZED\nThis component is affected by the general zim.OPTIMIZE setting (default is false)\nif set to true, you will have to stage.update() after setting certain properties\nand stage.update() in change event to see component change its graphics\n\nACTIONEVENT\nThis component is affected by the general zim.ACTIONEVENT setting\nThe default is \"mousedown\" - if set to something else the component will act on click (press)\n\nEVENTS\ndispatches a \"change\" event when a tab changes (but not when setting selectedIndex property)\n\nALSO: See the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+65\n\tzim.Tabs = function(width, height, tabs, color, rollColor, offColor, spacing, currentEnabled, corner, labelColor, flatBottom, keyEnabled, gradient, gloss) {\n\n\t\tvar sig = \"width, height, tabs, color, rollColor, offColor, spacing, currentEnabled, corner, labelColor, flatBottom, keyEnabled, gradient, gloss\";\n\t\tvar duo; if (duo = zob(zim.Tabs, arguments, sig, this)) return duo;\n\t\tz_d(\"65\");\n\t\tthis.zimContainer_constructor();\n\n\t\tif (zot(width)) width = 240;\n\t\tif (zot(height)) height = 60;\n\t\tif (zot(tabs) || tabs.length<=0) tabs = [{label:1},{label:2},{label:3},{label:4}];\n\t\tif (zot(color)) color = \"#333\";\n\t\tif (zot(rollColor)) rollColor = \"#555\";\n\t\tif (zot(offColor)) offColor = \"#777\";\n\t\tif (zot(currentEnabled)) currentEnabled = false;\n\t\tif (zot(spacing)) spacing = 1;\n\t\tif (zot(corner)) corner = 0;\n\t\tif (zot(labelColor)) labelColor = \"white\";\n\t\tif (zot(flatBottom)) flatBottom = true;\n\t\tif (zot(keyEnabled)) keyEnabled = true;\n\n\t\tvar that = this;\n\t\tthis.keyEnabled = keyEnabled;\n\n\t\tvar myIndex = 0; // local value for this.currentIndex\n\t\tvar labels = []\n\t\tvar buttons = [];\n\t\tvar button; var t;\n\t\tvar num = tabs.length;\n\t\tvar tabW = (width - spacing*(num-1))/num;\n\n\t\tzog(width)\n\n\t\tif (typeof tabs[0] == \"number\" || typeof tabs[0] == \"string\") { // change to objects with labels\n\t\t\tfor (var i=0; i<tabs.length; i++) {\n\t\t\t\ttabs[i] = {label:String((tabs[i]!=null))?tabs[i]:\"1\"};\n\t\t\t}\n\t\t}\n\t\t// calculate widths\n\t\tvar total = 0; var t;\n\t\tvar newTabW; var nonSpecifiedCount = 0;\n\t\tfor (var i=0; i<tabs.length; i++) {\n\t\t\tt = tabs[i];\n\t\t\tif (zot(t.width)) nonSpecifiedCount++;\n\t\t\ttotal += (zot(t.width))?tabW:t.width;\n\t\t}\n\n\t\tif (total > width - spacing*(num-1)) {\n\t\t\t// go back and assign proportional widths\n\t\t\tfor (i=0; i<tabs.length; i++) {\n\t\t\t\tt = tabs[i];\n\t\t\t\tt.width = (width - spacing*(num-1)) / total * ((zot(t.width))?tabW:t.width);\n\t\t\t}\n\t\t} else if (Math.round(total) < Math.round(width - spacing*(num-1))) {\n\t\t\t// go back and readjust the average of non specified widths\n\t\t\tif (nonSpecifiedCount > 0) {\n\t\t\t\tnewTabW = (num*tabW-(total-nonSpecifiedCount*tabW))/nonSpecifiedCount;\n\t\t\t\tfor (i=0; i<tabs.length; i++) {\n\t\t\t\t\tt = tabs[i];\n\t\t\t\t\tt.width = ((zot(t.width))?newTabW:t.width);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (zon) zog(\"ZIM Tabs - total less than width\");\n\t\t\t\twidth = total + spacing*(num-1);\n\t\t\t}\n\t\t}\n\n\t\tvar lastX = 0; var tColor;\n\t\tfor (i=0; i<tabs.length; i++) {\n\t\t\tt = tabs[i];\n\t\t\tif (zot(t.label)) t.label = \" \";\n\t\t\ttColor = (i==0)?((zot(t.color))?color:t.color):((zot(t.offColor))?offColor:t.offColor);\n\t\t\tif (typeof t.label === \"string\" || typeof t.label === \"number\") {\n\t\t\t\tt.label = new zim.Label(t.label, height/2, \"arial\", labelColor);\n\t\t\t}\n\t\t\tbutton = new zim.Button(\n\t\t\t\t(zot(t.width))?tabW:t.width,\n\t\t\t\theight, t.label, tColor,\n\t\t\t\t(zot(t.rollColor))?rollColor:t.rollColor,\n\t\t\t\tnull, null, corner, -1, null, null, gradient, gloss, flatBottom\n\t\t\t)\n\t\t\tbutton.znum = i;\n\t\t\tt.label.znum = i;\n\t\t\tlabels.push(t.label);\n\t\t\tbuttons.push(button);\n\t\t\tthis.addChild(button);\n\t\t\tbutton.x = lastX;\n\t\t\tlastX = button.x + button.width + spacing;\n\t\t\tif (i==0 && !currentEnabled) button.enabled = false;\n\t\t};\n\n\t\tzog(this.width)\n\n\t\tthis.on((zim.ACTIONEVENT==\"mousedown\")?\"mousedown\":\"click\", function(e) {\n\t\t\tchange(e.target.znum);\n\t\t\tthat.dispatchEvent(\"change\");\n\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t});\n\n\t\tfunction change(num) {\n\t\t\tvar t = tabs[myIndex];\n\t\t\tif (t) {\n\t\t\t\tbuttons[myIndex].color = (zot(t.offColor))?offColor:t.offColor;\n\t\t\t\tif (!currentEnabled) buttons[myIndex].enabled = true;\n\t\t\t}\n\t\t\tmyIndex = num;\n\t\t\tt = tabs[myIndex];\n\t\t\tif (t) {\n\t\t\t\tbuttons[myIndex].color = (zot(t.color))?color:t.color;\n\t\t\t\tif (!currentEnabled) buttons[myIndex].enabled = false;\n\t\t\t}\n\t\t}\n\n\t\twindow.addEventListener(\"keydown\", function(e) {\n\t\t\tif (!that.keyEnabled) return;\n\t\t\tif (e.keyCode == 9) {\n\t\t\t\tvar next = myIndex; // note that change updates the index\n\t\t\t\tif (e.shiftKey) {\n\t\t\t\t\tchange((--next<0)?tabs.length-1:next);\n\t\t\t\t} else {\n\t\t\t\t\tchange((++next>tabs.length-1)?0:next);\n\t\t\t\t}\n\t\t\t\tthat.dispatchEvent(\"change\");\n\t\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'selected', {\n\t\t\tget: function() {\n\t\t\t\treturn buttons[myIndex];\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (zon) zog(\"selected is read only - try selectedIndex\");\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'selectedIndex', {\n\t\t\tget: function() {\n\t\t\t\treturn myIndex;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\t// change(Math.min(Math.max(value, 0), tabs.length-1));\n\t\t\t\tchange(value);\n\t\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'tabs', {\n\t\t\tget: function() {\n\t\t\t\treturn myIndex;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tchange(Math.min(Math.max(value, 0), tabs.length-1));\n\t\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'color', {\n\t\t\tget: function() {\n\t\t\t\treturn color;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tcolor = value;\n\t\t\t\tif (zot(tabs[myIndex].color)) {\n\t\t\t\t\tbuttons[myIndex].color = color;\n\t\t\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'rollColor', {\n\t\t\tget: function() {\n\t\t\t\treturn rollColor;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\trollColor = value;\n\t\t\t\tfor (var i=0; i<tabs.length; i++) {\n\t\t\t\t\tif (zot(tabs[myIndex].rollColor)) {\n\t\t\t\t\t\tbuttons[i].rollColor = rollColor;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'offColor', {\n\t\t\tget: function() {\n\t\t\t\treturn offColor;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\toffColor = value;\n\t\t\t\tfor (var i=0; i<tabs.length; i++) {\n\t\t\t\t\tif (zot(tabs[myIndex].offColor)) {\n\t\t\t\t\t\tbuttons[i].color = offColor;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'label', {\n\t\t\tget: function() {\n\t\t\t\treturn labels[myIndex];\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (zon) zog(\"selected is read only - try selectedIndex\");\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'text', {\n\t\t\tget: function() {\n\t\t\t\treturn (labels[myIndex]!=null) ? labels[myIndex].text : undefined;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (zon) zog(\"selected is read only - try selectedIndex\");\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'buttons', {\n\t\t\tget: function() {\n\t\t\t\treturn buttons;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (zon) zog(\"buttons is read only\");\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'labels', {\n\t\t\tget: function() {\n\t\t\t\treturn labels;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (zon) zog(\"labels is read only\");\n\t\t\t}\n\t\t});\n\n\t\tthis._enabled = true;\n\t\tObject.defineProperty(that, 'enabled', {\n\t\t\tget: function() {\n\t\t\t\treturn that._enabled;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tzenable(that, value);\n\t\t\t}\n\t\t});\n\n\t\tthis.clone = function() {\n\t\t\tvar tabsCopy = zim.copy(tabs);\n\t\t\tfor (var i=0; i<tabsCopy.length; i++) {\n\t\t\t\ttabsCopy[i].label = tabsCopy[i].label.clone();\n\t\t\t}\n\t\t\treturn that.cloneProps(new zim.Tabs(width, height, tabsCopy, color, rollColor, offColor, spacing, currentEnabled, corner, labelColor, flatBottom, keyEnabled, gradient, gloss));\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tfor (var i=0; i<that.buttons.length; i++) {\n\t\t\t\tthat.buttons[i].dispose();\n\t\t\t\tthat.labels[i].dispose();\n\t\t\t}\n\t\t\tthat.removeAllEventListeners();\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.Tabs, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-65\n\n/*--\nzim.Pad = function(width, cols, rows, keys, color, rollColor, offColor, spacing, currentEnabled, corner, labelColor)\n\nPad\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nA pad that has rows and cols made of square keys.\nWhen the keys are pressed the pad will dispatch a change event - get the selectedIndex or text property.\n\nEXAMPLE\nvar pad = new zim.Pad();\npad.center(stage);\npad.on(\"change\", function() {\n\tzog(pad.selectedIndex); // 0-8\n\tzog(pad.text); // 1-9\n});\nstage.update();\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nwidth - (default 150) overall width of pad (ZIM divides the width across cols and spacing)\ncols - (default 3) the columns in the pad\nrows - (default cols) the rows in the pad\nkeys - (default an Array for cols x rows) an array of key objects with the following properties available:\n\tany key specific properties will override the default values from other parameters\n\t[{label:\"String\", width:200, color:\"Red\", rollColor:\"pink\", offColor:\"grey\"}, {etc.}]\n\tthe label can be a String or a zim.Label object - default text color is white\ncolor - (default \"#333\") the color of the selected tab (any CSS color)\nrollColor - (default \"#555\") the rollover color (selected keys do not roll over)\noffColor - (default \"#777\") the color of a deselected key when not rolled over\nspacing - (default 1) is the pixels between key buttons\ncurrentEnabled - (default true) set to false to make selected key not pressable\ncorner - (default 0) the corner radius of the keys\nlabelColor - (default \"white\") the color of the label\n\nMETHODS\nclone() - makes a copy with properties such as x, y, etc. also copied\ndispose() - removes listeners and deletes object\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nPROPERTIES\nselectedIndex - gets or sets the selected index of the pad\nselected - gets the selected button - selected.enabled = true, etc.\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\ntext - gets current selected label text\nlabel - gets current selected label object\ncolor - gets or sets default selected tab color\nrollColor - gets or sets default rolled over color\noffColor - gets or sets default unselected tab color\nbuttons - an array of the ZIM Button objects. buttons[0].enabled = false;\nlabels - an array of the ZIM Label objects. labels[0].text = \"YUM\"; labels[2].y -= 10;\ntabs - an array of the zim Tab objects (one object per row)\nenabled - default is true - set to false to disable\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nOPTIMIZED\nThis component is affected by the general zim.OPTIMIZE setting (default is false)\nif set to true, you will have to stage.update() after setting certain properties\nand stage.update() in change event to see component change its graphics\n\nACTIONEVENT\nThis component is affected by the general zim.ACTIONEVENT setting\nThe default is \"mousedown\" - if set to something else the component will act on click (press)\n\nEVENTS\ndispatches a \"change\" event when a pad changes (but not when setting selectedIndex property)\n\nALSO: See the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+66\n\tzim.Pad = function(width, cols, rows, keys, color, rollColor, offColor, spacing, currentEnabled, corner, labelColor) {\n\n\t\tvar sig = \"width, cols, rows, keys, color, rollColor, offColor, spacing, currentEnabled, corner, labelColor\";\n\t\tvar duo; if (duo = zob(zim.Pad, arguments, sig, this)) return duo;\n\t\tz_d(\"66\");\n\t\tthis.zimContainer_constructor();\n\n\t\t// the other parameters will be handled by the Tabs object for each row\n\t\tif (zot(width)) width = 150;\n\t\tif (zot(cols)) cols = 3;\n\t\tif (zot(rows)) rows = cols;\n\t\tif (zot(keys)) {keys = []; for (var i=1; i<=rows*cols; i++){keys.push(i);}}\n\t\tif (zot(currentEnabled)) currentEnabled = true;\n\t\tif (zot(spacing)) spacing = 1;\n\n\t\tvar that = this;\n\t\tvar myIndex;\n\n\t\tthis.cols = cols; // read only\n\t\tthis.rows = rows;\n\n\t\tvar height = width / cols - spacing;\n\t\tvar rowTabs = [];\n\t\tvar count = 0;\n\t\tvar r;\n\t\tthis.labels = [];\n\t\tthis.buttons = [];\n\t\tfor (var i=0; i<rows; i++) {\n\t\t\tvar rowKeys = [];\n\t\t\tfor (var j=0; j<cols; j++) {\n\t\t\t\trowKeys.push((keys[count]!=null) ? keys[count] : \"\");\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tr = rowTabs[i] = new zim.Tabs(width, height, rowKeys, color, rollColor, offColor, spacing, currentEnabled, corner, labelColor, false, false);\n\t\t\tthis.labels = this.labels.concat(r.labels);\n\t\t\tthis.buttons = this.buttons.concat(r.buttons);\n\t\t\tthis.addChild(r);\n\t\t\tr.selectedIndex = -1;\n\t\t\tr.y = (height+spacing)*i;\n\t\t\tr.znum = i;\n\t\t\tr.on(\"change\", pressKey);\n\t\t}\n\t\tthis.tabs = rowTabs;\n\t\tfunction pressKey(e) {\n\t\t\tvar r = e.target;\n\t\t\tthat.selected = r.selected;\n\t\t\tthat.text = r.text;\n\t\t\tthat.label = r.label;\n\t\t\tvar s = r.selectedIndex; // store selected then clear all in pad\n\t\t\tfor (var i=0; i<rowTabs.length; i++) {\n\t\t\t\trowTabs[i].selectedIndex = -1;\n\t\t\t}\n\t\t\tr.selectedIndex = s; // restore selected\n\t\t\tmyIndex = r.znum * cols + s; // calculate pad selected\n\t\t\tthat.dispatchEvent(\"change\");\n\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t}\n\n\t\tObject.defineProperty(this, 'selectedIndex', {\n\t\t\tget: function() {\n\t\t\t\treturn myIndex;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tmyIndex = value;\n\t\t\t\tfor (var i=0; i<rowTabs.length; i++) {\n\t\t\t\t\trowTabs[i].selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\tvar tabNum = Math.floor(myIndex / cols);\n\t\t\t\tif (tabNum >= 0 && tabNum < that.tabs.length) {\n\t\t\t\t\tthat.tabs[tabNum].selectedIndex = myIndex % cols;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis._enabled = true;\n\t\tObject.defineProperty(that, 'enabled', {\n\t\t\tget: function() {\n\t\t\t\treturn that._enabled;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tzenable(that, value);\n\t\t\t}\n\t\t});\n\n\t\tthis.clone = function() {\n\t\t\treturn that.cloneProps(new zim.Pad(width, cols, rows, keys, color, rollColor, offColor, spacing, currentEnabled, corner, labelColor));\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tfor (var i=0; i<that.tabs.length; i++) {\n\t\t\t\tthat.tabs[i].dispose();\n\t\t\t}\n\t\t\tthat.removeAllEventListeners();\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.Pad, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-66\n\n/*--\nzim.ColorPicker = function(width, colors, cols, spacing, greyPicker, alphaPicker, startColor, drag, shadowColor, shadowBlur, buttonBar, circles, indicator, backingColor)\n\nColorPicker\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nA traditional color picker which shows 256 Web colors by default or custom colors.\nCan additionally show 16 greys and / or an alpha slider.\nPicking on a color sets the swatch color and the selectedColor property.\nOK dispatches a change event if the color changed or a close event if not.\nThe X dispatches a close event.\n\nEXAMPLE\nvar cp = new zim.ColorPicker();\ncp.center(stage);\ncp.on(\"change\", function() {\n\tzog(cp.selectedColor); // #ffcc99, etc. after pressing OK\n\tzog(cp.selectedAlpha); // 0-1\n});\nstage.update();\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nwidth - (default 500) the width of the color picker\ncolors - (default 256 Web colors) an optional list of colors [\"red\", \"#CCC\", etc.]\ncols - (default 10) how many columns to use if you pass in custom colors\nspacing - (default 2) is the space between the color squares\ngreyPicker - (default true) shows an extra 16 greys (set to false to hide these)\n\tfor the default colors it also includes 2 starting colors that record last picked colors\nalphaPicker - (default true) shows an alpha slider (set to false to hide this)\n\tthe swatch has a black, grey and white backing underneath to show multiple alpha effects\nstartColor - (default the last color in color array) the starting color\ndrag - (default true) whether you can drag the component - set to false to not drag\n\ta small grip under the color text shows if draggable\nshadowColor - (default rgba(0,0,0,.3)) set to -1 for no drop shadow\nshadowBlur - (default 14) the blur of the shadow if shadow is set\nbuttonBar - (default true) set to false to hide the button bar with OK and X (close)\ncircles - (default false) set to true to show colors in circles rather than squares\nindicator - (default true) set to false to remove indicator from currentColor\nbackingColor - (default black) the color of the backing\n\nMETHODS\nclone() - makes a copy with properties such as x, y, etc. also copied\ndispose() - removes listeners and deletes object\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nPROPERTIES\nselectedColor - gets or sets the selected color swatch\nselectedAlpha - gets or sets the selected alpha (set does not work if alphaPicker is false)\nselectedIndex - get or sets the selected index of the colorPicker\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\nswatch - gets the zim.Rectangle that is the color swatch\nswatchBacking - gets the createjs.Shape that is under the swatch (seen if alpha set low)\nswatchText - gets the zim.Label that shows the color text\ngrip - gets the createjs.Shape for the grip if the panel is dragable\nbacking - gets the zim.Rectangle that is the backing (cp.backing.color = \"white\" - now a backingColor parameter)\nokBut - references the OK zim.Button\ncloseBut - references the X zim.Button\nindicator - gets the zim shape that is the indicator (if indicator is true)\nNOTE: alphaPicker is true:\nalpaBacking - gets reference to the zim.Rectangle that makes the backing for the alpha slider\nalphaBut - the zim.Button on the alpha slider\nalphaSlider - the zim.Slider for the alpha\nalphaText - the zim.Label for the alpha\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nACTIONEVENT\nThis component is affected by the general zim.ACTIONEVENT setting\nThe default is \"mousedown\" - if set to something else the component will act on click (press)\n\nEVENTS\ndispatches a \"set\" event when a different color or alpha is selected and updated in the picker if the buttonBar is showing\ndispatches a \"change\" event when the OK button is activated and the color or alpha is different than before\n\tor if buttonBar is false dispatches \"change\" when a new color or alpha is selected\ndispatches a \"close\" event if the OK button is activated and the color has not changed or the X button is pressed\n\nALSO: See the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+67\n\tzim.ColorPicker = function(width, colors, cols, spacing, greyPicker, alphaPicker, startColor, drag, shadowColor, shadowBlur, buttonBar, circles, indicator, backingColor) {\n\n\t\tvar sig = \"width, colors, cols, spacing, greyPicker, alphaPicker, startColor, drag, shadowColor, shadowBlur, buttonBar, circles, indicator, backingColor\";\n\t\tvar duo; if (duo = zob(zim.ColorPicker, arguments, sig, this)) return duo;\n\t\tz_d(\"67\");\n\t\tthis.zimContainer_constructor();\n\n\t\tif (zot(width)) width = 500;\n\t\tif (zot(colors)) standard = true;\n\t\tif (zot(cols)) cols = 10;\n\t\tif (zot(spacing)) spacing = 2;\n\t\tif (zot(alphaPicker)) alphaPicker = true;\n\t\tif (zot(greyPicker)) greyPicker = true;\n\t\tif (zot(drag)) drag = true;\n\t\tif (zot(shadowColor)) shadowColor = \"rgba(0,0,0,.3)\";\n\t\tif (zot(shadowBlur)) shadowBlur = 14;\n\t\tif (zot(buttonBar)) buttonBar = true;\n\t\tif (zot(circles)) circles = false;\n\t\tif (zot(indicator)) {\n\t\t\tindicator = false;\n\t\t\tif (!buttonBar) indicator = true;\n\t\t}\n\t\tif (zot(backingColor)) backingColor = \"black\";\n\n\t\tvar that = this;\n\n\t\tvar secondLastColor = \"#e472c4\"; // only used on standard colors\n\t\tvar thirdLastColor = \"#50c4b7\";\n\t\tvar lastAlpha = 1;\n\t\tvar myAlpha = 1;\n\n\t\tvar box = new createjs.Shape(); // shape that holds all colors and greys\n\t\tthis.addChild(box);\n\t\tbox.x += spacing;\n\t\tbox.y += spacing;\n\n\t\tvar standard = false;\n\t\tvar colorsTemp; var w;\n\t\tvar greys = [];\n\t\tif (zot(colors)) {\n\t\t\tstandard = true;\n\t\t\tvar num = 6; // six sets 0,3,6,9,C,F - for Web colors\n\t\t\tvar tot = num*num*num;\n\t\t\tnum = Math.ceil(Math.pow(tot,1/2));\n\t\t\tw = (width - spacing)/18-spacing;\n\t\t\tvar f = Math.floor(Math.pow(num*num, 1/3));\n\t\t\tcolorsTemp = [];\n\t\t\tfor (var i=0; i<6; i++) {\n\t\t\t\tfor (var j=0; j<6; j++) {\n\t\t\t\t\tfor (var k=0; k<6; k++) {\n\t\t\t\t\t\tcolorsTemp.push(\"#\" + con(i*3) + con(j*3) + con(k*3));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcolors = []; // flip every six by six sideways and put on two lines\n\t\t\tvar c, r, nC, nR;\n\t\t\tfor (i=0; i<colorsTemp.length; i++) {\n\t\t\t\tc = Math.floor(i/6);\n\t\t\t\tr = i%6;\n\t\t\t\tif (c >= 6*3) {f = 1;} else {f = 0;}\n\t\t\t\tnC = c-f*6*3;\n\t\t\t\tnR = r+f*6;\n\t\t\t\tcolors[nR*18+nC] = colorsTemp[i];\n\t\t\t}\n\t\t\tcols = 18;\n\t\t\tgreys = [thirdLastColor, secondLastColor];\n\t\t} else {\n\t\t\tw = (width - spacing) / cols - spacing;\n\t\t}\n\t\tvar rows = Math.ceil(colors.length/cols);\n\n\t\tvar myColor = String(colors[colors.length-1]);\n\t\tif (!zot(startColor)) myColor = String(startColor);\n\t\tvar lastColor = thirdLastColor;\n\n\t\tfunction con(n) {\n\t\t\tn = Math.floor(n).toString(16);\n\t\t\treturn n + \"\" + n;\n\t\t}\n\n\t\tvar g = box.graphics; var f=0; var color, r, c, rX , rY;\n\t\tfor (i=0; i<colors.length; i++) {\n\t\t\tc = i%cols;\n\t\t\tr = Math.floor(i/cols);\n\t\t\trX = c*(w+spacing);\n\t\t\trY = r*(w+spacing);\n\t\t\tif (circles) {\n\t\t\t\tg.f(colors[i]).dc(rX+w/2,rY+w/2,w/2);\n\t\t\t} else {\n\t\t\t\tg.f(colors[i]).r(rX,rY,w,w);\n\t\t\t}\n\t\t}\n\t\tvar lastHeight = rY + w + spacing;\n\n\t\tvar greyHeight = lastHeight;\n\t\tif (greyPicker) {\n\t\t\tfor (i=0; i<16; i++) {\n\t\t\t\tgreys.push(\"#\"+con(i)+con(i)+con(i));\n\t\t\t}\n\t\t\tfor (i=0; i<greys.length; i++) {\n\t\t\t\tc = Math.floor(i/cols);\n\t\t\t\tr = i%cols;\n\t\t\t\trX = r*(w+spacing);\n\t\t\t\trY = c*(w+spacing)+lastHeight;\n\t\t\t\tif (circles) {\n\t\t\t\t\tg.f(greys[i]).dc(rX+w/2,rY+w/2,w/2);\n\t\t\t\t} else {\n\t\t\t\t\tg.f(greys[i]).r(rX,rY,w,w);\n\t\t\t\t}\n\t\t\t}\n\t\t\tlastHeight = rY + w + spacing;\n\t\t\tvar greyCols = cols;\n\t\t\tvar greyRows = Math.ceil(greys.length/cols);\n\t\t}\n\t\tif (indicator) {\n\t\t\tindicator = this.indicator = circles ? new zim.Circle(w/2*.5) : new zim.Rectangle(w*.5, w*.5);\n\t\t\tindicator.alpha = .5;\n\t\t\tindicator.centerReg();\n\t\t\tthis.addChild(indicator);\n\t\t\tfunction positionIndicator(i) {\n\t\t\t\tif (myColor == \"#000\" || myColor == \"#000000\" || myColor == \"black\") {\n\t\t\t\t\tindicator.color = \"#222\";\n\t\t\t\t\tindicator.alpha = 1;\n\t\t\t\t} else {\n\t\t\t\t\tindicator.color = \"black\";\n\t\t\t\t\tindicator.alpha = .5;\n\t\t\t\t}\n\t\t\t\tindicator.x = box.x + i%cols*(w+spacing) + w/2;\n\t\t\t\tindicator.y = box.x + Math.floor(i/cols)*(w+spacing) + w/2;\n\t\t\t}\n\t\t\tpositionIndicator(colors.indexOf(myColor));\n\t\t}\n\n\t\tvar margin = 10;\n\n\t\tif (alphaPicker) {\n\t\t\tvar alpha = new zim.Container();\n\t\t\talpha.setBounds(0,0,600,70);\n\t\t\tthis.addChild(alpha);\n\t\t\talpha.x = 0;\n\t\t\talpha.y = lastHeight;\n\n\t\t\tvar alphaBacking = this.alphaBacking = new zim.Rectangle(600-margin*2, 50, \"#222\", null, null, 0);\n\t\t\talpha.addChild(alphaBacking);\n\t\t\tzim.centerReg(alphaBacking, alpha);\n\n\t\t\tvar sliderBut = this.alphaBut = new zim.Button({width:20,height:30,label:\"\",corner:0,hitPadding:20});\n\t\t\tvar slider = this.alphaSlider = new zim.Slider(0,1,.05,sliderBut,600*.55);\n\t\t\tslider.currentValue = 1;\n\t\t\talpha.addChild(slider);\n\t\t\tslider.x = 40;\n\t\t\tslider.y = alpha.height/2;\n\n\t\t\tvar alphaText = this.alphaText = new zim.Label(\"Alpha: 1\", 30, null, \"orange\");\n\t\t\talpha.addChild(alphaText);\n\t\t\talphaText.x = slider.x + slider.bar.width + 40;\n\t\t\talphaText.y = alpha.height/2 - alphaText.height/2;\n\n\t\t\talpha.scaleX = alpha.scaleY = width / 600;\n\n\t\t\tslider.on(\"change\", function() {\n\t\t\t\talphaText.text = \"Alpha: \" + decimals(slider.currentValue);\n\t\t\t\tif (swatch) {\n\t\t\t\t\tswatch.alpha = myAlpha = slider.currentValue;\n\t\t\t\t}\n\t\t\t\tif (buttonBar) {\n\t\t\t\t\tthat.dispatchEvent(\"set\");\n\t\t\t\t} else {\n\t\t\t\t\tthat.dispatchEvent(\"change\");\n\t\t\t\t}\n\t\t\t\tif (that.getStage()) that.getStage().update();\n\t\t\t});\n\t\t\tlastHeight += alpha.height-margin;\n\t\t}\n\n\t\tif (buttonBar) {\n\n\t\t\tvar nav = new zim.Container();\n\t\t\tnav.setBounds(0,0,600,100);\n\t\t\tthis.addChild(nav);\n\t\t\tnav.x = 0;\n\t\t\tnav.y = lastHeight+margin;\n\n\t\t\tvar swatchText = this.swatchText = new zim.Label(myColor.toUpperCase().substr(0,7), 30, null, \"orange\");\n\t\t\tnav.addChild(swatchText);\n\t\t\tzim.centerReg(swatchText);\n\t\t\tswatchText.x = 200/2-10;\n\t\t\tswatchText.y = 50-2;\n\n\t\t\tif (drag) {\n\t\t\t\tvar grip = this.grip = new createjs.Shape();\n\t\t\t\tnav.addChild(grip);\n\t\t\t\tgrip.graphics.f(\"rgba(256,256,256,.25)\").r(0,0,5,20).r(10,0,5,20).r(20,0,5,20).r(30,0,5,20);\n\t\t\t\tgrip.x = 70; grip.y = 65;\n\t\t\t\tswatchText.y = 50-10;\n\t\t\t}\n\n\t\t\tvar closeBut = this.closeBut = new zim.Button(90, 90, \"X\", \"#222\", \"#444\", null,null,0);\n\t\t\tnav.addChild(closeBut);\n\t\t\tcloseBut.x = 600 - closeBut.width - margin;\n\t\t\tcloseBut.y = 0;\n\t\t\tcloseBut.on((zim.ACTIONEVENT==\"mousedown\")?\"mousedown\":\"click\", function(){that.dispatchEvent(\"close\");});\n\n\t\t\tvar button = this.okBut = new zim.Button(150, 90, \"OK\", \"#222\", \"#444\", null,null,0);\n\t\t\tnav.addChild(button);\n\t\t\tbutton.x = closeBut.x - button.width - margin;\n\t\t\tbutton.y = 0;\n\t\t\tbutton.on((zim.ACTIONEVENT==\"mousedown\")?\"mousedown\":\"click\", doChange);\n\n\t\t\tvar swatchBacking = this.swatchBacking = new createjs.Shape();\n\t\t\tnav.addChild(swatchBacking);\n\t\t\tvar g = swatchBacking.graphics;\n\t\t\tg.f(\"black\").r(0.5,0.5,50,89).f(\"#666\").r(50,0.5,50,89).f(\"white\").r(100,0.5,49.5,89);\n\t\t\tswatchBacking.x = button.x - 150 - margin;\n\t\t\tswatchBacking.y = 0;\n\n\t\t\tvar swatch = this.swatch = new zim.Rectangle(150, 90, myColor);\n\t\t\tnav.addChild(swatch);\n\t\t\tswatch.x = swatchBacking.x;\n\t\t\tswatch.y = 0;\n\t\t\tswatch.on((zim.ACTIONEVENT==\"mousedown\")?\"mousedown\":\"click\", doChange);\n\t\t\tswatch.cursor = \"pointer\";\n\n\t\t\tnav.scaleX = nav.scaleY = width / 600;\n\t\t\tlastHeight += nav.height;\n\t\t} else {\n\t\t\tbox.cursor = \"pointer\";\n\t\t}\n\n\t\tif (!alphaPicker && !buttonBar) {\n\t\t\tlastHeight -= margin - spacing;\n\t\t}\n\n\t\tvar height = lastHeight + margin;\n\t\tthis.setBounds(0,0,width,height);\n\n\t\tvar backing = this.backing = new zim.Rectangle(width,height,backingColor);\n\t\tthis.addChildAt(backing,0);\n\t\tif (shadowColor != -1 && shadowBlur > 0) backing.shadow = new createjs.Shadow(shadowColor, 8, 8, shadowBlur);\n\n\t\tfunction doChange(){\n\t\t\tif (myColor != lastColor || myAlpha != lastAlpha) {\n\t\t\t\tif (standard && greyPicker) {\n\t\t\t\t\tthirdLastColor = secondLastColor;\n\t\t\t\t\tsecondLastColor = lastColor;\n\t\t\t\t\tvar lastColors = [thirdLastColor, secondLastColor]\n\t\t\t\t\tfor (i=0; i<2; i++) {\n\t\t\t\t\t\tvar g = box.graphics;\n\t\t\t\t\t\tc = Math.floor(i/cols);\n\t\t\t\t\t\tr = i%cols;\n\t\t\t\t\t\trX = r*(w+spacing);\n\t\t\t\t\t\trY = c*(w+spacing)+greyHeight;\n\t\t\t\t\t\tgreys[i] = lastColors[i];\n\t\t\t\t\t\tg.f(backing.color).r(rX-1,rY-1,w+2,w+2).f(lastColors[i]).r(rX,rY,w,w);\n\t\t\t\t\t}\n\t\t\t\t\tif (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t\t\t}\n\t\t\t\tlastColor = myColor;\n\t\t\t\tlastAlpha = myAlpha;\n\n\t\t\t\tthat.dispatchEvent(\"change\");\n\t\t\t} else {\n\t\t\t\tthat.dispatchEvent(\"close\");\n\t\t\t}\n\t\t}\n\n\t\tif (drag) {\n\t\t\tvar diffX, diffY;\n\t\t\tbacking.on(\"mousedown\", function(e) {\n\t\t\t\tdiffX = e.stageX - that.x;\n\t\t\t\tdiffY = e.stageY - that.y;\n\t\t\t\tbacking.cursor = \"move\";\n\t\t\t});\n\t\t\tbacking.on(\"pressmove\", function(e) {\n\t\t\t\tthat.x = e.stageX-diffX;\n\t\t\t\tthat.y = e.stageY-diffY;\n\t\t\t\tif (that.getStage()) that.getStage().update();\n\t\t\t});\n\t\t\tbacking.on(\"pressup\", function(e) {\n\t\t\t\tbacking.cursor = \"default\";\n\t\t\t\tif (that.getStage()) that.getStage().update();\n\t\t\t});\n\t\t}\n\n\t\tvar gridW = cols*(w+spacing);\n\t\tvar gridH = rows*(w+spacing);\n\t\tif (greyPicker) {\n\t\t\tvar greyW = greyCols*(w+spacing);\n\t\t\tvar greyH = greyRows*(w+spacing);\n\t\t}\n\t\tbox.on((zim.ACTIONEVENT==\"mousedown\")?\"mousedown\":\"click\", function() {\n\t\t\tvar index = zim.hitTestGrid(box, gridW, gridH, cols, rows, that.getStage().mouseX, that.getStage().mouseY, 0, 0, spacing, spacing);\n\t\t\tif (!zot(index)) {\n\t\t\t\tmyColor = colors[index];\n\t\t\t\tif (buttonBar) {\n\t\t\t\t\tswatch.color = myColor;\n\t\t\t\t\tswatchText.text = String(colors[index]).toUpperCase().substr(0,7);\n\t\t\t\t\tzim.centerReg(swatchText);\n\t\t\t\t\tif (myColor != lastColor) that.dispatchEvent(\"set\");\n\t\t\t\t} else {\n\t\t\t\t\tdoChange();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (greyPicker) {\n\t\t\t\t// note greyW not gridW\n\t\t\t\tindex = null;\n\t\t\t\tindex = zim.hitTestGrid(box, greyW, greyH, greyCols, greyRows, that.getStage().mouseX, that.getStage().mouseY, 0, gridH, spacing, spacing);\n\n\t\t\t\tif (!zot(index)) {\n\t\t\t\t\tmyColor = greys[index];\n\t\t\t\t\tif (buttonBar) {\n\t\t\t\t\t\tswatch.color = myColor;\n\t\t\t\t\t\tswatchText.text = greys[index].toUpperCase();\n\t\t\t\t\t\tzim.centerReg(swatchText);\n\t\t\t\t\t\tif (myColor != lastColor) that.dispatchEvent(\"set\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdoChange();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (indicator) positionIndicator(colors.indexOf(myColor));\n\t\t\tif (buttonBar) {\n\t\t\t\tif (that.getStage()) that.getStage().update();\n\t\t\t} else if (indicator) {\n\t\t\t\tif (that.getStage()) that.getStage().update();\n\t\t\t\t// if (!zim.OPTIMIZE && that.getStage()) that.getStage().update();\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'selectedColor', {\n\t\t\tget: function() {\n\t\t\t\treturn myColor;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tlastColor = myColor = value;\n\t\t\t\tif (buttonBar) {\n\t\t\t\t\tswatch.color = myColor;\n\t\t\t\t\tswatchText.text = myColor;\n\t\t\t\t\tzim.centerReg(swatchText);\n\t\t\t\t\tif (that.getStage()) that.getStage().update();\n\t\t\t\t}\n\t\t\t\tif (indicator) positionIndicator(colors.indexOf(myColor));\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'selectedIndex', {\n\t\t\tget: function() {\n\t\t\t\treturn colors.indexOf(myColor);\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tlastColor = myColor = colors[value];\n\t\t\t\tif (buttonBar) {\n\t\t\t\t\tswatch.color = myColor;\n\t\t\t\t\tswatchText.text = myColor;\n\t\t\t\t\tzim.centerReg(swatchText);\n\t\t\t\t\tif (that.getStage()) that.getStage().update();\n\t\t\t\t}\n\t\t\t\tif (indicator) positionIndicator(colors.indexOf(myColor));\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'selectedAlpha', {\n\t\t\tget: function() {\n\t\t\t\tif (alphaPicker) {\n\t\t\t\t\treturn decimals(slider.currentValue);\n\t\t\t\t} else {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (alphaPicker) {\n\t\t\t\t\tlastAlpha = slider.currentValue = value;\n\t\t\t\t\tif (swatch) swatch.alpha = lastAlpha;\n\t\t\t\t\tif (alphaText) alphaText.text = \"Alpha: \" + decimals(slider.currentValue);\n\t\t\t\t\tif (that.getStage()) that.getStage().update();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tfunction decimals(n) {\n\t\t\treturn Math.round(n*Math.pow(10, 2))/Math.pow(10, 2);\n\t\t}\n\n\t\tthis.clone = function() {\n\t\t\treturn that.cloneProps(new zim.ColorPicker(width, standard?null:colors, cols, spacing, greyPicker, alphaPicker, startColor, drag, shadowColor, shadowBlur, buttonBar, circles, indicator, backingColor));\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tslider.dispose();\n\t\t\tbox.removeAllEventListeners();\n\t\t\tbacking.removeAllEventListeners();\n\t\t\tcloseBut.removeAllEventListeners();\n\t\t\tswatch.removeAllEventListeners();\n\t\t\tbutton.removeAllEventListeners();\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.ColorPicker, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-67\n\n/*--\nzim.Loader = function(frame, width, height, drop, label, color, rollColor, borderColor, borderWidth, corner, shadowColor, shadowBlur, hitPadding, gradient, gloss, flatBottom, backing, rollBacking, rollPersist, icon, rollIcon, toggle, rollToggle, toggleEvent, dashed)\n\nLoader\nzim class - extends a zim.Button which extends a createjs.Container\n\nDESCRIPTION\nLoader lets you upload images and acces them as a zim.Bitmap (available in the loaded event function)\nLoader uses the HTML input type=file tag and overlays this with a createjs DOMElement.\nLoader is a zim.Button so can be displayed for the user to click on.\nIt defaults to a dashed line region as you can also drag and drop files to the loader.\nYou can also save an image using the save() method to a new browser window for the user to save\n\nEXAMPLE\nvar loader = new zim.Loader({\n\tframe:frame,\n\tlabel:\"UPLOAD PIC OR DROP PICS HERE\",\n\twidth:700,\n\theight:400,\n\tcorner:50\n}).center(stage);\nloader.on(\"loaded\", function(e) {\n\tzim.loop(e.bitmaps, function(bitmap){\n\t\tbitmap.centerReg(stage).drag();\n\t});\n\tloader.removeFrom(stage);\n\tstage.update();\n});\n\n// and to later save for instance in a button event:\nsaveButton.on(\"click\") {\n\tloader.save(stage); // or some other container... can specify crop bounds too\n}\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nframe - a reference to the zim.Frame (required to scale and position the HTML input tag)\nwidth - (default 250) the width of the button\nheight - (default 70) the height of the button\nlabel - (default \"UPLOAD PIC\") ZIM Label or plain text with default settings (50% black)\ncolor - (default \"rgba(0,0,0,.05)\") backing color of button (any CSS color)\nrollColor - (default \"rgba(0,0,0,.1)\") rollover color of button\nborderColor - (default rgba(0,0,0,.3)) the color of the border\nborderWidth - (default 1) thickness of the border\ncorner - (default 0) the round of the corner (set to 0 for no corner)\nshadowColor - (default \"rgba(0,0,0,.3)\") set to -1 for no shadow\nshadowBlur - (default 14) how blurred the shadow is if the shadow is set\nhitPadding - (default 0) adds extra hit area to the button (good for mobile)\ngradient - (default 0) 0 to 1 (try .3) adds a gradient to the button\ngloss - (default 0) 0 to 1 (try .1) adds a gloss to the button\nflatBottom - (default false) top corners can round and bottom stays flat (used for ZIM Tabs)\nbacking - (default null) a Display object for the backing of the button (eg. Shape, Bitmap, Container, Sprite)\n\tsee ZIM Pizzazz module for a fun set of Button Shapes like Boomerangs, Ovals, Lightning Bolts, etc.\n\thttp://zimjs.com/code/bits/view/pizzazz.html\nrollBacking - (default null) a Display object for the backing of the rolled-on button\nrollPersist - (default false) set to true to keep rollover state when button is pressed even if rolling off\nicon - (default false) set to display object to add icon at the center of the button and remove label\n\thttp://zimjs.com/code/bits/view/icons.html\nrollIcon - (default false) set to display object to show icon on rollover\ntoggle - (default null) set to string to toggle with label or display object to toggle with icon or if no icon, the backing\nrollToggle - (default null) set to display object to toggle with rollIcon or rollBacking if no icon\n\tthere is no rollToggle for a label - that is handled by rollColor on the label\ntoggleEvent - (default mousedown for mobile and click for not mobile) what event causes the toggle\ndashed - (default true) set to false to turn off the dashed for the border\n\nPROPERTIES\ntag - the HTML input tag of type file - used for uploading\n\nzim.Button properties:\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\ntext - references the text property of the Label object of the button\nlabel - gives access to the label\nbacking - references the backing of the button\nrollBacking - references the rollBacking (if set)\nicon - references the icon of the button (if set)\nrollIcon - references the rollIcon (if set)\ntoggleObj - references the toggle object (string or display object if set)\nrollToggle - references the rollToggle (if set)\ntoggled - true if button is in toggled state, false if button is in original state\nenabled - default is true - set to false to disable\nrollPersist - default is false - set to true to keep rollover state when button is pressed even if rolling off\ncolor - get or set non-rolled on backing color (if no backing specified)\nrollColor - get or set rolled on backing color\nfocus - get or set the focus property of the Button used for tabOrder\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nMETHODS\nresize() - call the resize event if the scale or position of the Loader is changed\n\tthis will sync the location of the HTML input tag\n\tresize() is only needed if the scale or x, y of the Loader (or its container) is changed\n\tit is not needed for general window resizing - the Loader handles this\nsave(content, x, y, width, height, url, cached, cachedBounds, type) - save a picture (supports ZIM DUO)\n\tcontent - the Display object to be saved such as a Container, Bitmap, etc.\n\tx, y, width, height - the cropping bounds on that object otherwise defaults to 0,0,stageW,stageH\n\tcached - (default false) set to true if the object is currently already cached\n\tcachedBounds - if you are saving a different bounds than was previously cached\n\t\tsetting the bounds here (createjs.Rectangle) will restore the cache to the previous bounds\n\ttype - (default \"png\") set to \"jpeg\" for jpeg\n\nzim.Button methods:\nsetBackings(newBacking, newRollBacking) - dynamically set backing and rollBacking on button (both default to null and if empty, removes backings)\nsetIcons(newIcon, newRollIcon) - dynamically set icon and rollIcon on button (both default to null and if empty, removes icons)\ntoggle(state) - forces a toggle of label if toggle param is string, else toggles icon if icon is set or otherwise toggles backing\n\tstate defaults to null so just toggles\n\tpass in true to go to the toggled state and false to go to the original state\nclone() - makes a copy with properties such as x, y, etc. also copied\ndispose() - to get rid of the button and listeners\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nACTIONEVENT\nThis component is affected by the general zim.ACTIONEVENT setting\nThe default is \"mousedown\" - if set to something else the component will act on click (press)\n\nEVENTS\nloaded - is dispatched when the image(s) are uploaded - the event object comes with the following properties:\n\te.bitmaps - an array of zim.Bitmap objects of the loaded images\n\te.bitmap - the first zim.Bitmap to be created from the loaded images\n\te.lastBitmap - the last zim.Bitmap to be created from the loaded images\n\te.total - the total zim.Bitmap objects to be created from the loaded images\n\nALSO: See the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+68\n\n\tzim.Loader = function(frame, width, height, label, color, rollColor, borderColor, borderWidth, corner, shadowColor, shadowBlur, hitPadding, gradient, gloss, flatBottom, backing, rollBacking, rollPersist, icon, rollIcon, toggle, rollToggle, toggleEvent, dashed) {\n\n\t\tvar sig = \"frame, width, height, label, color, rollColor, borderColor, borderWidth, corner, shadowColor, shadowBlur, hitPadding, gradient, gloss, flatBottom, backing, rollBacking, rollPersist, icon, rollIcon, toggle, rollToggle, toggleEvent, dashed\";\n\t\tvar duo; if (duo = zob(zim.Loader, arguments, sig, this)) return duo;\n\t\tz_d(\"68\");\n\n\t\tif (zot(frame)) {if (zon) {zog(\"zim.Loader - please provide a reference to zim Frame\");} return;}\n\t\tif (zot(width)) width = 250;\n\t\tif (zot(height)) height = 70;\n\t\tif (zot(color)) color = \"rgba(0,0,0,.05)\";\n\t\tif (zot(rollColor)) rollColor = \"rgba(0,0,0,.1)\";\n\t\tif (zot(borderColor)) borderColor = \"rgba(0,0,0,.3)\";\n\t\tif (zot(borderWidth)) borderWidth = 1;\n\t\tif (zot(dashed)) dashed = true;\n\t\tif (zot(corner)) corner = 0;\n\t\tif (zot(label)) label = new zim.Label({\n\t\t\ttext:\"UPLOAD PIC\", color:\"rgba(0,0,0,.4)\", valign:\"center\", align:\"center\"\n\t\t});\n\n\t\tthis.zimButton_constructor(width, height, label, color, rollColor, borderColor, borderWidth, corner, shadowColor, shadowBlur, hitPadding, gradient, gloss, flatBottom, backing, rollBacking, rollPersist, icon, rollIcon, toggle, rollToggle, toggleEvent, dashed);\n\t\tvar that = this;\n\t\tvar stage = frame.stage;\n\t\tlabel = that.label;\n\n\t\tvar uploadTag = that.tag = document.createElement(\"input\");\n\t\tdocument.body.appendChild(uploadTag);\n\t\tuploadTag.setAttribute(\"type\", \"file\");\n\t\tuploadTag.setAttribute(\"multiple\", \"multiple\");\n\t\tuploadTag.style.cssText = \"border:thin solid grey; z-index:2; width:\"+width+\"px; height:\" + height + \"px; overflow:hidden; outline:none;\"\n\t\t\t + \"position:absolute; left:0px; top:0px; display:none; cursor:pointer; opacity: 0; filter: alpha(opacity=0);\"\n\n\t\tuploadTag.addEventListener('change', handleImage);\n\t\tvar upload = new createjs.DOMElement(uploadTag);\n\t\tstage.addChild(upload);\n\t\tupload.alpha = 0;\n\n\t\tthis.resize = function() {\n\t\t\tif (!that.getStage()) return;\n\t\t\tsetTimeout(function() {\n\t\t\t\tvar point = that.localToGlobal(0, 0);\n\t\t\t\tupload.x = frame.x + point.x * frame.scale;\n\t\t\t\tupload.y = frame.y + point.y * frame.scale;\n\t\t\t\tzim.scale(upload, frame.scale*that.scaleX, frame.scale*that.scaleY);\n\t\t\t\tstage.update();\n\t\t\t}, 50);\n\t\t}\n\t\tthis.resize();\n\t\tthat.on(\"added\", function() {\n\t\t\tuploadTag.style.display = \"block\";\n\t\t\tthat.resize();\n\t\t});\n\t\tthat.on(\"removed\", function() {\n\t\t\tuploadTag.style.display = \"none\";\n\t\t});\n\t\tframe.on(\"resize\", that.resize);\n\n\t\tfunction handleImage(e) {\n\t\t\tvar files;\n\t\t\tif (e.dataTransfer && e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n\t\t\t\tfiles = e.dataTransfer.files;\n\t\t\t} else {\n\t\t\t\tfiles = e.target.files;\n\t\t\t}\n\t\t\tvar bitmaps = [];\n\t\t\tvar firstBitmap;\n\t\t\tvar lastBitmap;\n\t\t\tfor (var i=0; i<files.length; i++) {\n\t\t\t\t(function(file) {\n\t\t\t\t\tvar reader = new FileReader();\n\t\t\t\t\treader.onload = function(event){\n\t\t\t\t\t\tvar img = new Image();\n\t\t\t\t\t\timg.onload = function(){\n\t\t\t\t\t\t\tvar bitmap = new zim.Bitmap(img);\n\t\t\t\t\t\t\tbitmaps.push(bitmap);\n\t\t\t\t\t\t\tif (bitmaps.length == 1) firstBitmap = bitmap;\n\t\t\t\t\t\t\tif (bitmaps.length == files.length) {\n\t\t\t\t\t\t\t\tvar e = new createjs.Event(\"loaded\");\n\t\t\t\t\t\t\t\te.bitmaps = bitmaps;\n\t\t\t\t\t\t\t\te.bitmap = firstBitmap;\n\t\t\t\t\t\t\t\te.lastBitmap = bitmap;\n\t\t\t\t\t\t\t\te.total = bitmaps.length;\n\t\t\t\t\t\t\t\tthat.dispatchEvent(e);\n\t\t\t\t\t\t\t\tuploadTag.value = \"\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\timg.src = event.target.result;\n\t\t\t\t\t}\n\t\t\t\t\treader.readAsDataURL(file);\n\t\t\t\t})(files[i]);\n\t\t\t};\n\t\t}\n\t\tvar xhr = new XMLHttpRequest();\n\t\tif (xhr.upload) {\n\t\t\tuploadTag.addEventListener(\"drop\", function(e) {\n\t\t\t\t// first imageLoader change event triggers so remove event then add it again later\n\t\t\t\tuploadTag.removeEventListener('change', handleImage);\n\t\t\t\thandleImage(e);\n\t\t\t\tsetInterval(function() {uploadTag.addEventListener('change', handleImage);}, 100);\n\t\t\t});\n\t\t}\n\n\t\tthis.save = function(content, x, y, width, height, cached, cachedBounds, type) {\n\t\t\tvar sig = \"content, x, y, width, height, cached, cachedBounds, type\";\n\t\t\tvar duo; if (duo = zob(that.save, arguments, sig)) return duo;\n\t\t\tif (zot(content)) content = frame.stage;\n\t\t\tif (zot(x)) x = 0;\n\t\t\tif (zot(y)) y = 0;\n\t\t\tif (zot(width)) width = frame.width;\n\t\t\tif (zot(height)) height = frame.height;\n\t\t\tif (zot(type)) type = \"png\";\n\n\t\t\tcontent.cache(x, y, width, height);\n\t\t\t// if (!zot(url)) {\n\t\t\t// \tzim.async(url+\"?data=\"+content.cacheCanvas.toDataURL('image/jpeg'), loaderReply);\n\t\t\t// \tfunction loaderReply(result) {\n\t\t\t// \t\tvar e = new createjs.Event(\"saved\");\n\t\t\t// \t\te.result = result;\n\t\t\t// \t\tthat.dispatchEvent(e);\n\t\t\t// \t}\n\t\t\t// // or to a script using zim.async (currently untested - will test and provide examples soon)\n\t\t\t// // saved - is dispatched when a file is saved to a script (needs the url parameter) - event object includes:\n\t\t\t// // e.result - the message sent back from the server in the zim.async.loaderReply('message')\n\t\t\t// } else {\n\t\t\t\tzgo(content.cacheCanvas.toDataURL('image/'+type), \"_blank\");\n\t\t\t// }\n\t\t\tif (cached) {\n\t\t\t\tif (cachedBounds) content.cache(cashedBound.x, cashedBound.y, cashedBound.width, cashedBound.height);\n\t\t\t} else {\n\t\t\t\tcontent.uncache();\n\t\t\t}\n\t\t\treturn that;\n\t\t}\n\n\t\tthis.clone = function() {\n\t\t\tvar u = new zim.Loader(\n\t\t\t\tframe, width, height, !zot(label)?label.clone():null, color, rollColor, borderColor, borderWidth, corner, shadowColor, shadowBlur, hitPadding, gradient, gloss, flatBottom,\n\t\t\t\t!zot(backing)?backing.clone():null,\n\t\t\t\t!zot(rollBacking)?rollBacking.clone():null,\n\t\t\t\trollPersist,\n\t\t\t\t!zot(icon)?icon.clone():null, !zot(rollIcon)?rollIcon.clone():null,\n\t\t\t\t!zot(toggle)?(typeof toggle == \"string\"?toggle:toggle.clone()):null,\n\t\t\t\t!zot(rollToggle)?rollToggle.clone():null,\n\t\t\t\ttoggleEvent, dashed\n\t\t\t);\n\t\t\treturn that.cloneProps(u);\n\t\t}\n\t\tthis.dispose = function() {\n\t\t\tthat.zimButton_dispose();\n\t\t \tthat.removeAllEventListeners();\n\t\t\tthat.removeChild(upload);\n\t\t\tdocument.body.removeChild(uploadTag);\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.Loader, zim.Button, [\"clone\", \"dispose\"], \"zimButton\", false);\n\t//-68\n\n/*--\nzim.TextArea = function(frame, width, height, padding, color, backingColor, borderColor, borderWidth, corner, shadowColor, shadowBlur, dashed, id, placeholder, readOnly)\n\nTextArea\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nTextArea creates an input text field by overlaying an HTML TextArea.\nThe TextArea is then overlayed with the createjs DOMElement\nand scaled and positioned with ZIM code. This can also be used if selectable text is required\nAccess to the HTML tag is provided with the TextArea tag property.\nSo CSS Styles can be applied to the HTML tag as with any HTML textarea tag\nThe TextArea comes with a ZIM Rectangle in behind that you can adjust with parameters\nor remove completely if you so desire using the TextArea backing property\nie. myTextArea.backing.alpha=0; or myTextArea.removeChild(myTextArea.backing)\nDue to the HTML tag being overlayed, the TextArea.resize() must be called if it is moved\n(This is called automatically when the stage is resized)\n\nEXAMPLE\nvar textArea = new zim.TextArea(frame, 300, 200);\ntextArea.center(stage);\n\nvar label = new zim.Label({text:\"\"}).addTo(stage).pos(20,20);\ntextArea.on(\"input\", function() {\n\tlabel.text = textArea.text;\n\tstage.update();\n});\n\n// if manually scaled or positioned (or container is scaled or positioned)\n// then the TextArea must be resized with the resize method\ntextArea.sca(.5).mov(200);\ntextArea.resize();\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nframe - a reference to the zim.Frame (required to scale and position the HTML input tag)\nwidth - (default 250) the width of the TextArea backing (the textarea field will be that less the padding*2)\nheight - (default 70) the height of the TextArea backing (the textarea field will be that less the padding*2)\nsize - (default 20) a Number for the font-size of the TextArea (do not use px on the end)\n\tto change the font, use CSS on the tag property: textArea.tag.style.fontFamily = \"courier\";\npadding - (default 5) the pixels between the backing border and the HTML textarea\ncolor - (default \"#666\") text color (any CSS color)\nbackingColor - (default \"rgba(256,256,256,.1)\") backing color of box\nborderColor - (default rgba(0,0,0,.1)) the color of the border\nborderWidth - (default 1) thickness of the border\ncorner - (default 0) the round of the corner (set to 0 for no corner)\nshadowColor - (default null) the shadow color (css color) of a drop shadow\nshadowBlur - (default null) pixels of how blurred the shadow is if the shadow is set - eg. 10\ndashed - (default true) set to false to turn off the dashed for the border\nid - (default null) a string id for the HTML textarea tag for CSS styling, etc.\nplaceholder - (default null) a string that is used for the HTML textarea tag placeholder parameter\nreadOnly - (default false) set to true to make TextArea read only (still selectable)\n\nPROPERTIES\ncurrentValue - get or set the text content of the TextArea\ntext - the same as currentValue - for convenience...\nreadOnly - set to true to not be able to edit or to false to be able to edit (always can select)\ntag - the HTML textarea tag - just a regular HMTL form tag which can be styled\nbacking - access to the zim.Rectangle() used for the backing\n\tyou can remove this with yourTextArea.backing.removeFrom(yourTextArea);\n\tor adjust it dynamically with any of the Rectangle properties like color\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nMETHODS\nresize() - call the resize event if the scale or position of the TextArea is changed\n\tthis will sync the location of the HTML textarea tag\n\tresize() is only needed if the scale or x, y of the TextArea (or its container) is changed\n\tit is not needed for general window resizing - the TextArea handles this\nclone() - makes a copy with properties such as x, y, etc. also copied\ndispose() - to get rid of the textarea tag\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nEVENTS\nfocus, blur are dispatched when the text area gains and loses focus\ninput is dispatched when the text area is typed or pasted into\nchange is dispatched when the text area is different after losing focus\nThese are just the html events passed on through - note the difference between input and change!\n\nALSO: See the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+69\n\n\tzim.TextArea = function(frame, width, height, size, padding, color, backingColor, borderColor, borderWidth, corner, shadowColor, shadowBlur, dashed, id, placeholder, readOnly) {\n\n\t\tvar sig = \"frame, width, height, size, padding, color, backingColor, borderColor, borderWidth, corner, shadowColor, shadowBlur, dashed, id, placeholder, readOnly\";\n\t\tvar duo; if (duo = zob(zim.TextArea, arguments, sig, this)) return duo;\n\t\tz_d(\"69\");\n\n\t\tif (zot(frame)) {if (zon) {zog(\"zim.TextArea - please provide a reference to zim Frame\");} return;}\n\t\tif (zot(width)) width = 250;\n\t\tif (zot(height)) height = 70;\n\t\tif (zot(size)) size = 20;\n\t\tif (zot(padding)) padding = 5;\n\t\tif (zot(color)) color = \"#666\";\n\t\tif (zot(backingColor)) backingColor = \"rgba(256,256,256,.1)\";\n\t\tif (zot(borderColor)) borderColor = \"rgba(0,0,0,.1)\";\n\t\tif (zot(corner)) corner = 0;\n\t\tif (!zot(shadowBlur) && zot(shadowColor)) shadowColor=\"rgba(0,0,0,.3)\";\n\t\tif (!zot(shadowColor) && zot(shadowBlur)) shadowBlur=10;\n\n\t\tthis.zimContainer_constructor(width, height);\n\t\tvar that = this;\n\t\tvar stage = frame.stage;\n\n\t\tvar backing = this.backing = new zim.Rectangle(width, height, backingColor, borderColor, borderWidth, corner, null, dashed);\n\t\tif (shadowColor != -1 && shadowBlur > 0) backing.shadow = new createjs.Shadow(shadowColor, 3, 3, shadowBlur);\n\t\tthat.addChild(backing);\n\t\tvar textareaTag = that.tag = document.createElement(\"textarea\");\n\t\tdocument.body.appendChild(textareaTag);\n\t\tif (!zot(id)) {\n\t\t\ttextareaTag.setAttribute(\"id\", id);\n\t\t\ttextareaTag.setAttribute(\"name\", id);\n\t\t}\n\t\tif (readOnly) textareaTag.readOnly = true;\n\t\tif (!zot(placeholder)) textareaTag.setAttribute(\"placeholder\", placeholder);\n\t\ttextareaTag.style.cssText = \"background-color:transparent; color:\"+color+\"; \"\n\t\t\t + \"resize:none; z-index:3; width:\"+(width-padding*2)+\"px; height:\"+(height-padding*2)+\"px; overflow:hidden; outline:none;\"\n\t\t\t + \"font-size:\"+size+\"px; font-family:verdana; border:none; position:absolute; left:0px; top:0px; display:none;\"\n\n\t\ttextareaTag.addEventListener('change', function() {that.dispatchEvent(\"change\")});\n\t\ttextareaTag.addEventListener('input', function() {that.dispatchEvent(\"input\")});\n\t\ttextareaTag.addEventListener('focus', function() {\n\t\t\twindow.removeEventListener(\"keydown\", frame.zil[0]);\n\t\t\tthat.dispatchEvent(\"focus\")\n\t\t});\n\t\ttextareaTag.addEventListener('blur', function() {\n\t\t\twindow.addEventListener(\"keydown\", frame.zil[0]);\n\t\t\tthat.dispatchEvent(\"blur\")\n\t\t});\n\t\tvar textarea = new createjs.DOMElement(textareaTag);\n\t\ttextarea.alpha = 0;\n\n\t\tthis.resize = function() {\n\t\t\tsetTimeout(function() {\n\t\t\t\tvar point = that.localToGlobal(padding, padding);\n\t\t\t\ttextarea.x = frame.x + point.x * frame.scale;\n\t\t\t\ttextarea.y = frame.y + point.y * frame.scale;\n\t\t\t\tzim.scale(textarea, frame.scale*that.scaleX, frame.scale*that.scaleY);\n\t\t\t\ttextarea.alpha = 1;\n\t\t\t\tif (!that.getStage()) return;\n\t\t\t\tstage.update();\n\t\t\t}, 50);\n\t\t}\n\t\tthis.resize();\n\t\tthat.on(\"added\", function() {\n\t\t\tstage.addChild(textarea);\n\t\t\ttextareaTag.style.display = \"block\";\n\t\t\tthat.resize();\n\t\t});\n\t\tthat.on(\"removed\", function() {\n\t\t\tstage.removeChild(textarea);\n\t\t\ttextareaTag.style.display = \"none\";\n\t\t});\n\t\tframe.on(\"resize\", that.resize);\n\n\t\tObject.defineProperty(this, 'currentValue', {\n\t\t\tget: function() {\n\t\t\t\treturn textareaTag.value;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\ttextareaTag.value = value;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'text', {\n\t\t\tget: function() {\n\t\t\t\treturn textareaTag.value;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\ttextareaTag.value = value;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'readOnly', {\n\t\t\tget: function() {\n\t\t\t\treturn textareaTag.readOnly;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\ttextareaTag.readOnly = value;\n\t\t\t}\n\t\t});\n\n\t\tthis.clone = function() {\n\t\t\tvar u = new zim.Loader(frame, width, height, size, padding, color, backingColor, borderColor, borderWidth, corner, shadowColor, shadowBlur, dashed, id, placeholder, readOnly);\n\t\t\treturn that.cloneProps(u);\n\t\t}\n\t\tthis.dispose = function() {\n\t\t \tthat.removeAllEventListeners();\n\t\t\tthat.removeChild(textarea);\n\t\t\tdocument.body.removeChild(textareaTag);\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.TextArea, zim.Container, [\"clone\", \"dispose\"], \"zimContainer\", false);\n\t//-69\n\n\t// function to set enabled of components\n\tfunction zenable(t,v) {\n\t\tif (v) {\n\t\t\tt.mouseChildren = true;\n\t\t\tt.mouseEnabled = true;\n\t\t\tt._enabled = true;\n\t\t} else {\n\t\t\tt.mouseChildren = false;\n\t\t\tt.mouseEnabled = false;\n\t\t\tt._enabled = false;\n\t\t}\n\t}\n\n\n////////////////  ZIM PAGES  //////////////\n\n// Zim Pages helps you layout and control flexive pages, click and swipe between pages and more\n// classes in this module require createjs namespace to exist and in particular easel.js\n// available at http://createjs.com\n\n\n/*--\nzim.Swipe = function(obj, distance, duration)\n\nSwipe\nzim class - extends a createjs.EventDispatcher\n\nDESCRIPTION\nSets up capturing swipes on objects.\nDispatches a \"swipe\" event on swipe left, right, up, down.\n\nEXAMPLE\nvar rect = new zim.Rectangle(200, 200, \"blue\");\nrect.center(stage);\nvar swipe = zim.Swipe(rect);\nvar distance = 100;\nswipe.on(\"swipe\", function(e) {\n\tzog(e.swipeX); // -1, 0, 1  (for left, none and right)\n\tzog(e.swipeY); // -1, 0, 1  (for up, none and down)\n\n\t// move directly:\n\t// rect.x += distance * e.swipeX;\n\t// rect.y += distance * e.swipeY;\n\t// stage.update();\n\n\t// or animate\n\tzim.move({\n\t\ttarget:rect,\n\t\tx:rect.x+distance*e.swipeX,\n\t\ty:rect.y+distance*e.swipeY,\n\t\ttime:400,\n\t\tease:\"quadOut\"\n\t});\n});\nstage.update();\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nobj - the object you want to swipe on\ndistance - (default 30) the distance in pixels to activate swipe\n\tmight want to pass in a pixel distance based on percentage of stage\ntime - (default 80) time in milliseconds to travel that distance\n\ttry http://zimjs.com/code/swipe.html for testing distance and time (speed)\n\nPROPERTIES\ndistance - the distance needed for swipe to activate\nduration - the time from mousedown a swipe is measured for distance\ndirection - the direction of the last swipe (left, right, up, down or none)\nobj - the object that was last swiped\nactive - Boolean true for dispatching swipes and false for not\n\nMETHODS\nenable() - set swipe to active (by default it is)\ndisable() - set swipe to inactive (sets active to false and does not dispatch)\n\nEVENTS\ndispatches a \"swipe\" event on every pressup (even if swipe failed and direction is none)\nwhen a swipe event triggers\nthe Swipe event object has a swipeX and swipeY property that is -1,0, or 1\nfor left, none, or right OR up, none, down\nthe event object has an obj property as well for what object was swiped\nalso dispatches a \"swipedown\" event for convenience on a mousedown\n\nLEGACY\nthe Swipe object provides a direction property of \"left\", \"right\", \"up\", or \"down\"\nthe Swipe object provides an obj property of what object was swiped on\nfor instance if e is the event object\nthen e.target is the Swipe object so use e.target.direction\ndid not dispatch a custom event due to lack of support in early IE\nSwipe also dispatches a direction of \"none\" if the mouse movement is not a swipe\nthis can be used to snap back to an original location\n--*///+70\n\tzim.Swipe = function(obj, distance, duration) {\n\n\t\tvar sig = \"obj, distance, duration\";\n\t\tvar duo; if (duo = zob(zim.Swipe, arguments, sig, this)) return duo;\n\t\tz_d(\"70\");\n\t\tthis.cjsEventDispatcher_constructor();\n\n\t\tif (zot(obj) || !obj.on) {zog(\"zim pages - Swipe():\\nPlease pass in object\"); return;}\n\t\tif (zot(distance)) distance = 30; // pixels for swipe to count\n\t\tif (zot(duration)) duration = 80; // ms to test pixels\n\n\t\tthis.distance = distance;\n\t\tthis.duration = duration;\n\t\tthis.active = true;\n\n\t\tvar startX;\n\t\tvar startY;\n\t\tvar mouseX;\n\t\tvar mouseY;\n\t\tvar downCheck;\n\t\tvar timer;\n\t\tvar that = this;\n\n\t\tobj.on(\"mousedown\", function(e) {\n\n\t\t\tif (!that.active || e.target.zimNoSwipe) return;\n\t\t\tthat.obj = e.target;\n\t\t\tmouseX = startX = e.stageX;\n\t\t\tmouseY = startY = e.stageY;\n\t\t\tdownCheck = true;\n\t\t\tthat.dispatchEvent(\"swipedown\");\n\t\t\tclearTimeout(timer);\n\t\t\ttimer = setTimeout(function() {\n\t\t\t\tif (downCheck) {\n\t\t\t\t\tcheckSwipe();\n\t\t\t\t\tdownCheck = false;\n\t\t\t\t}\n\t\t\t}, that.duration);\n\t\t\tobj.on(\"pressmove\", function(e) {\n\t\t\t\tmouseX = e.stageX;\n\t\t\t\tmouseY = e.stageY;\n\t\t\t});\n\t\t\tobj.on(\"pressup\", function(e) {\n\t\t\t\tif (downCheck) {\n\t\t\t\t\tcheckSwipe();\n\t\t\t\t\tdownCheck = false;\n\t\t\t\t\tclearTimeout(timer);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfunction checkSwipe() {\n\t\t\t\tvar swipeCheck = false;\n\t\t\t\tvar e = new createjs.Event(\"swipe\");\n\t\t\t\te.obj = that.obj;\n\t\t\t\te.swipeX = e.swipeY = 0;\n\t\t\t\tthat.direction = \"none\";\n\t\t\t\t// may as well use 45 degrees rather than figure for aspect ratio\n\t\t\t\tif (Math.abs(mouseX - startX) > Math.abs(mouseY - startY)) {\n\t\t\t\t\tif (mouseX - startX > that.distance) {e.swipeX = 1;  that.direction=\"right\";}\n\t\t\t\t\tif (startX - mouseX > that.distance) {e.swipeX = -1; that.direction=\"left\";}\n\t\t\t\t} else {\n\t\t\t\t\tif (mouseY - startY > that.distance) {e.swipeY = 1;  that.direction=\"down\";}\n\t\t\t\t\tif (startY - mouseY > that.distance) {e.swipeY = -1; that.direction=\"up\";}\n\t\t\t\t}\n\t\t\t\tthat.dispatchEvent(e);\n\t\t\t}\n\t\t});\n\n\t\tthis.disable = function() {\n\t\t\tthat.active = false;\n\t\t}\n\n\t\tthis.enable = function() {\n\t\t\tthat.active = true;\n\t\t}\n\t}\n\tzim.extend(zim.Swipe, createjs.EventDispatcher, \"clone\", \"cjsEventDispatcher\", false);\n\t//-70\n\n/*--\nzim.Pages = function(holder, pages, transition, speed, transitionTable)\n\nPages\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nPages handle going between pages.\nMake a Pages object and add it to the stage.\nAll your pages from then on are added to and manipulated inside the Pages object.\nPages allows you to set the destination pages for swipe events.\nOther events like buttons can call the go(page, direction) method.\nConsider using zim.HotSpots() to efficiently handle multiple buttons.\n\nEXAMPLE\n// make pages (these would be containers with content)\nvar home = new zim.Rectangle(stageW, stageH, \"blue\");\nvar hide = new zim.Rectangle(stageW, stageH, \"green\");\nvar find = new zim.Rectangle(stageW, stageH, \"yellow\");\n\nvar pages = new zim.Pages({\n\tholder:stage,\n\tpages:[\n\t\t// imagine pages to the left, right, up and down\n\t\t// swipe:[\"to page on left\", \"to page on right\", etc.s]\n\t\t{page:home, swipe:[null,\"info\",hide,find]},\n\t\t{page:hide, swipe:[null,null,null,home]},\n\t\t{page:find, swipe:[null,null,home,null]}\n\t],\n\ttransition:\"slide\",\n\tspeed:1000 // slower than usual for demonstration\n});\nstage.addChild(pages);\n\n// handle any events inserted into the swipe arrays\npages.on(\"info\", function(){zog(\"info requested\")});\n\n// handle any custom requirements when arriving at a page\n// the event gives you the page object\n// so add a name properties just make it easier to manage\nhome.name = \"home\";\nhide.name = \"hide\";\nfind.name = \"find\";\npages.on(\"page\", function() {\n\tzog(pages.page.name); // now we know which page we are on\n})\n\n// you can manually go to pages as well\n// we will make a little triangle to click:\nvar back = new zim.Triangle({color:\"red\"});\nback.center(find); // add triangle to find page\n// not really supposed to add things to zim shapes\n// they default to mouseChildren false\n// we want to click on the back button\n// so we have to set the mouseChildren of find to true\nfind.mouseChildren = true;\nback.cursor = \"pointer\";\nback.on(\"click\", function() {pages.go(home, \"up\")});\nstage.update();\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nholder - where are we putting the pages (eg. stage) (used for setting transition properties)\npages - (default null) an array of page objects - for example:\n\t[{page:home, swipe:[null,\"info\",hide,find]},{page:hide, swipe:[null,null,null,home]}]\n\tthe pages should be containers - it helps to give them each a name property\n\tthe optional swipe array holds mappings to swipe events [\"right\", \"left\", \"down\", \"up\"]\n\tin other words, these could be pages to the left, right, top and bottom of the current page\n\tor they can call commands as strings\ntransition - (default \"none\") the type of transition \"none\", \"reveal\", \"slide\", \"fade\", \"black\", \"white\"\nspeed - (default 200) speed in milliseconds of the transition if set\ntransitionTable - (default none) an array to override general transitions with following format:\n\t[[fromPage, toPage, \"transition\", ms(optional)], etc.]\n\nMETHODS\naddPage() - lets you alternatively add pages after you create the object\nremovePage() - lets you remove a page (if on this page, call a go() first and remove on the page event)\nsetSwipe() - lets you set the swipe array for a page\ngo(newPage, direction, trans, ms) - lets you go to a page for events other than swipe events\n\tdirection is which way the pages is relative to the current page\n\ttrans and ms are optional and will override any previously set transitions (speed in ms)\nresize() - call to resize transitions - not the pages themselves (use layouts)\npause() - pauses a transition before it starts (call from swipe event)\nunpause() - unpauses a paused transition (unless another go() command is called)\npuff(time) - adds all the pages behind the currentPage (adding time (ms) will auto calls settle)\nsettle() - removes all pages except the currentPage\ndisable() - stops swipe from activating and sets active = false\nenable() - enables swipe action and sets active = true\ndispose() - clears your listeners and pages\n\nPROPERTIES\nspeed - of transitions in ms\ntransitionTable - [[fromPage, toPage, \"transition\", ms(optional)], etc.] overrides default transition\npage - the current page object (read)\nlastPage - the last page before transition (read)\ndirection - direction of transition (read)\nactive - default true, boolean to have swipes active (good for layered Pages objects)\nswipe - the ZIM Swipe object used for pages (can tweak distance to percentage if rescaling)\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nEVENTS\nPages dispatches a \"page\" event when the page changes (to a page in the swipe array)\nmyPages.on(\"page\",function(e){...})\nwith myPages.page being set to the new page (e.target.page)\nand myPages.lastPage being set to the old page (e.target.lastPage)\nmyPages.direction gets the direction of the transition (e.target.direction)\n\nif there is a string in the swipe array like \"info\"\nthen the zim.Pages() object dispatches an event equivalent to the string\nfor the data example above, myPages.on(\"info\",function(e){...});\nwould trigger when the home page is swiped to the left\n\nPages dispatches a \"swipe\" event before changing pages if swiped\nyou can then get pages.page, pages.nextPage and pages.direction\nyou can pause() if needed the transition to handle data, etc. and then unpause()\nyou do not need to handle going to another page when swiping - that is handled automatically\nso you probably will not use the swipe event unless handling data between pages\n\nPages also dispatches a \"pagetransitioned\" event when a transition is complete\nyou will have the same properties available as with the page event\n\nUSAGE\nthe first page object is the start page\nfor the data above, swiping the home page down automatically goes to the hide page\nif the home page is swiped up it automatically goes to the find page\nyou can add pages with the addPage() method\nit will not show until you swipe or go to it - unless it was the first page added\n1. if the holder is the stage then add the pages object to the stage\n2. if the holder is another container then add pages object to the holder\nand add the holder to the stage (read this twice to make sure you got it!)\nin the second case, you will have to mask the holder so you do not see transitions\nDO NOT add the pages to the stage or holder - let Pages do it for you\nsometimes you need a page to be on the stage to operate on it\nif this is the case, call puff() and make adjustments\ncall settle() when done - or pass in a time in ms to puff to auto settle after that time\nyou can define multiple pages objects add and remove pages objects as needed\n--*///+71\n\tzim.Pages = function(holder, pages, transition, speed, transitionTable) {\n\n\t\tvar sig = \"holder, pages, transition, speed, transitionTable\";\n\t\tvar duo; if (duo = zob(zim.Pages, arguments, sig, this)) return duo;\n\t\tz_d(\"71\");\n\t\tthis.zimContainer_constructor();\n\n\t\tif (zot(holder) || !holder.getBounds || !holder.getBounds()) {zog(\"zim pages - Pages():\\nobject must have bounds set\"); return;}\n\t\tif (zot(pages)) pages = []; // can add pages with addPages\n\t\tif (zot(transition)) transition = \"none\";\n\t\tif (zot(speed)) speed = 200;\n\t\tif (zot(transitionTable)) transitionTable = [];\n\t\tthis.transitionTable = transitionTable;\n\n\t\tthis.speed = speed;\n\t\tthis.active = true;\n\t\tvar that = this;\n\n\t\tvar hW = holder.getBounds().width;\n\t\tvar hH = holder.getBounds().height;\n\n\t\tvar currentPage = this.page = pages[0] ? pages[0].page : null;\n\n\t\tvar black; var white;\n\t\tif (transition!=\"none\" || transitionTable!=[]) makeTransitionAssets();\n\n\t\tfunction makeTransitionAssets() {\n\t\t\tblack = new createjs.Shape();\n\t\t\tblack.graphics.f(\"black\").r(0,0,hW,hH+1);\n\t\t\twhite = new createjs.Shape();\n\t\t\twhite.graphics.f(\"white\").r(0,0,hW,hH+1);\n\t\t}\n\n\t\tvar directions = [\"left\",\"right\",\"up\",\"down\"];\n\n\t\tvar data; // holds the page data object\n\t\tvar page; // holds a page\n\n\t\tfor (var i=0; i<pages.length; i++) {\n\t\t\tdata = pages[i];\n\t\t\tdata.page.zimSwipeArray = (data.swipe) ? data.swipe : [];\n\t\t\tif (data.page.parent) data.page.parent.removeChild(data.page);\n\t\t}\n\t\tthis.addChild(currentPage);\n\n\t\tthis.swipe = new zim.Swipe(holder);\n\n\t\t// handle giving swipe event time to trigger event and provide code intervention\n\t\tvar pauseInfo;\n\t\tvar paused = false;\n\n\t\tvar swipeEvent = this.swipe.on(\"swipe\", function(e) {\n\t\t\tif (!that.active) return;\n\t\t\tvar direction = e.currentTarget.direction\n\t\t\tif (direction == \"none\") return;\n\t\t\t// swap direction (swipe up means move down)\n\t\t\tvar newDirection = \"\";\n\t\t\tif (direction==\"left\") newDirection=\"right\";\n\t\t\telse if (direction==\"right\") newDirection=\"left\";\n\t\t\telse if (direction==\"up\") newDirection=\"down\";\n\t\t\telse if (direction==\"down\") newDirection=\"up\";\n\t\t\tdirection = newDirection;\n\t\t\tvar dirIndex = directions.indexOf(direction);\n\t\t\tpage = currentPage.zimSwipeArray[dirIndex];\n\n\t\t\tpauseInfo = [page, direction, null, null, true];\n\t\t\tthat.page = currentPage;\n\t\t\tthat.nextPage = page;\n\t\t\tthat.direction = direction;\n\t\t\tthat.dispatchEvent(\"swipe\");\n\n\t\t\tsetTimeout(function() {\n\t\t\t\tif (!paused) {\n\t\t\t\t\tthat.go(page, direction, null, null, true); // true is from swipe\n\t\t\t\t}\n\t\t\t}, 50);\n\t\t});\n\n\t\tthis.addPage = function(page, swipeArray) {\n\t\t\tif (zot(swipeArray)) swipeArray = [];\n\t\t\tvar data = {page:page, swipe:swipeArray};\n\t\t\tdata.page.zimSwipeArray = (data.swipe) ? data.swipe : [];\n\t\t\tif (!currentPage) {\n\t\t\t\tcurrentPage = that.page = data.page;\n\t\t\t\tthat.addChild(currentPage);\n\t\t\t} else {\n\t\t\t\tif (data.page.parent) data.page.parent.removeChild(data.page);\n\t\t\t}\n\t\t}\n\n\t\tthis.removePage = function(page) {\n\t\t\tif (that.currentPage == page) {\n\t\t\t\tthat.removeChild(page);\n\t\t\t\tif (holder.getStage()) holder.getStage().update(); // works even if holder is stage\n\t\t\t}\n\t\t\tpage.zimSwipeArray = null;\n\t\t}\n\n\t\tthis.setSwipe = function(page, swipeArray) {\n\t\t\tif (zot(swipeArray)) swipeArray = [];\n\t\t\tvar data = {page:page, swipe:swipeArray};\n\t\t\tdata.page.zimSwipeArray = (data.swipe) ? data.swipe : [];\n\t\t}\n\n\t\tthis.pause = function() {\n\t\t\tpaused = true;\n\t\t}\n\t\tthis.unpause = function() {\n\t\t\tif (paused) that.go(pauseInfo[0], pauseInfo[1], pauseInfo[2], pauseInfo[3], pauseInfo[4]);\n\t\t}\n\n\t\tvar goCheck = true;\n\t\tthis.go = function(newPage, direction, trans, ms, fromSwipe) {\n\n\t\t\t// newPage holds a page or a string command\n\t\t\tsetTimeout(function() {paused = false;},200);\n\t\t\tvar slides = [{x:hW},{x:-hW},{y:hH},{y:-hH}];\n\t\t\tvar slides2 = [{x:0},{x:0},{y:0},{y:0}];\n\t\t\tvar reveals = [{x:hW/2,alpha:0},{x:-hW/2,alpha:0},{y:hH/2,alpha:0},{y:-hH/2,alpha:0}];\n\n\t\t\t// check for default transition override in transitionTable\n\t\t\tvar tempTransition = transition; // default transition\n\t\t\tvar tempMs = speed; // default transition speed\n\t\t\tfor (var i=0; i<that.transitionTable.length; i++) {\n\t\t\t\tif (that.transitionTable[i][0]==currentPage && that.transitionTable[i][1]==newPage) {\n\t\t\t\t\ttempTransition = that.transitionTable[i][2];\n\t\t\t\t\ttempMs = that.transitionTable[i][3];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// transition passed into go overrides all transitions\n\t\t\t// so if there is not a transition parameter set trans tempTransition\n\t\t\t// which is either the transition table transition or the default\n\t\t\tif (zot(trans)) trans = tempTransition; // use default\n\t\t\tif (zot(ms)) ms = tempMs; // use default\n\t\t\tthat.speed = ms;\n\n\t\t\tthat.direction = direction;\n\t\t\tif (newPage==\"\" || newPage==null) {\n\t\t\t\tthat.page = currentPage;\n\t\t\t\tthat.dispatchEvent(\"nothing\");\n\t\t\t} else if (typeof newPage === 'string') {\n\t\t\t\tthat.page = currentPage;\n\t\t\t\tthat.dispatchEvent(newPage);\n\t\t\t} else {\n\t\t\t\tif (newPage == currentPage) return; // same page ;-)\n\t\t\t\tif (zot(direction)) direction=\"right\";\n\t\t\t\tvar dirIndex = directions.indexOf(direction);\n\n\t\t\t\tif (!goCheck) return;\n\t\t\t\tgoCheck = false;\n\n\t\t\t\tfunction transEnd(pages) {\n\t\t\t\t\tpages[0].uncache();\n\t\t\t\t\tpages[1].uncache();\n\t\t\t\t\tthat.dispatchEvent(\"pagetransitioned\");\n\t\t\t\t\tthat.removeChild(that.lastPage);\n\t\t\t\t\tthat.removeChild(black);\n\t\t\t\t\tthat.removeChild(white);\n\t\t\t\t\tgoCheck = true;\n\t\t\t\t}\n\n\t\t\t\tfunction transEndHalf(pages) {\n\t\t\t\t\tthat.removeChild(that.lastPage);\n\t\t\t\t\tzim.animate(pages.shift(), {alpha:0}, that.speed/2, null, transEnd, pages);\n\t\t\t\t}\n\n\t\t\t\tnewPage.x = 0;\n\t\t\t\tnewPage.y = 0;\n\t\t\t\tnewPage.alpha = 1;\n\n\t\t\t\tif (trans == \"slide\") {\n\t\t\t\t\tnewPage.x = -(slides[dirIndex].x | 0);\n\t\t\t\t\tnewPage.y = -(slides[dirIndex].y | 0);\n\t\t\t\t\tnewPage.cache(0,0,(hW+1)/newPage.scaleX,(hH+1)/newPage.scaleY);\n\t\t\t\t\tcurrentPage.cache(0,0,(hW+1)/currentPage.scaleX,(hH+1)/currentPage.scaleY);\n\t\t\t\t\tthat.addChild(newPage);\n\t\t\t\t\tthat.addChild(currentPage);\n\t\t\t\t\tzim.animate(currentPage, slides[dirIndex], that.speed, null, transEnd, [currentPage, newPage]);\n\t\t\t\t\tzim.animate(newPage, slides2[dirIndex], that.speed);\n\t\t\t\t} else if (trans == \"reveal\") {\n\t\t\t\t\tnewPage.cache(0,0,(hW+1)/newPage.scaleX,(hH+1)/newPage.scaleY);\n\t\t\t\t\tcurrentPage.cache(0,0,(hW+1)/currentPage.scaleX,(hH+1)/currentPage.scaleY);\n\t\t\t\t\tthat.addChild(newPage); // put destination under current page\n\t\t\t\t\tthat.addChild(currentPage);\n\t\t\t\t\tzim.animate(currentPage, reveals[dirIndex], that.speed, null, transEnd, [currentPage, newPage]);\n\t\t\t\t} else if (trans == \"fade\") {\n\t\t\t\t\tnewPage.cache(0,0,(hW+1)/newPage.scaleX,(hH+1)/newPage.scaleY);\n\t\t\t\t\tcurrentPage.cache(0,0,(hW+1)/currentPage.scaleX,(hH+1)/currentPage.scaleY);\n\t\t\t\t\tnewPage.alpha = 1;\n\t\t\t\t\tthat.addChild(newPage);\n\t\t\t\t\tthat.addChild(currentPage);\n\t\t\t\t\tzim.animate(currentPage, {alpha:0}, that.speed, null, transEnd, [currentPage, newPage]);\n\t\t\t\t} else if (trans == \"black\") {\n\t\t\t\t\tnewPage.cache(0,0,(hW+1)/newPage.scaleX,(hH+1)/newPage.scaleY);\n\t\t\t\t\tcurrentPage.cache(0,0,(hW+1)/currentPage.scaleX,(hH+1)/currentPage.scaleY);\n\t\t\t\t\tnewPage.alpha = 1;\n\t\t\t\t\tthat.addChild(newPage);\n\t\t\t\t\tthat.addChild(currentPage);\n\t\t\t\t\tblack.alpha = 0;\n\t\t\t\t\tthat.addChild(black);\n\t\t\t\t\tzim.animate(black, {alpha:1}, that.speed/2, null, transEndHalf, [black, currentPage, newPage]);\n\t\t\t\t} else if (trans == \"white\") {\n\t\t\t\t\tnewPage.cache(0,0,(hW+1)/newPage.scaleX,(hH+1)/newPage.scaleY);\n\t\t\t\t\tcurrentPage.cache(0,0,(hW+1)/currentPage.scaleX,(hH+1)/currentPage.scaleY);\n\t\t\t\t\tnewPage.alpha = 1;\n\t\t\t\t\tthat.addChild(newPage);\n\t\t\t\t\tthat.addChild(currentPage);\n\t\t\t\t\twhite.alpha = 0;\n\t\t\t\t\tthat.addChild(white);\n\t\t\t\t\tzim.animate(white, {alpha:1}, that.speed/2, null, transEndHalf, [white, currentPage, newPage]);\n\t\t\t\t} else {\n\t\t\t\t\tthat.addChild(newPage);\n\t\t\t\t\tthat.removeChild(currentPage);\n\t\t\t\t\tgoCheck = true;\n\t\t\t\t\t// that.dispatchEvent(\"pagetransitioned\"); // hmmm... no\n\t\t\t\t}\n\n\t\t\t\tthat.lastPage = currentPage;\n\t\t\t\tthat.page = newPage;\n\t\t\t\tif (zot(fromSwipe)) fromSwipe = false;\n\t\t\t\tthat.fromSwipe = fromSwipe;\n\t\t\t\tthat.dispatchEvent(\"page\");\n\t\t\t\tcurrentPage = newPage;\n\t\t\t\tif (holder.getStage()) holder.getStage().update();\n\t\t\t}\n\t\t}\n\n\t\tthis.resize = function() {\n\t\t\thW = holder.getBounds().width;\n\t\t\thH = holder.getBounds().height;\n\t\t\tif (transition!=\"none\" || transitionTable!=[]) makeTransitionAssets();\n\t\t}\n\n\t\tthis.puff = function(milliseconds) {\n\t\t\t// add all pages to the holder behind current page\n\t\t\t// if milliseconds then this is the time to settle automatically\n\t\t\tfor (var i=0; i<pages.length; i++) {\n\t\t\t\tthat.addChild(pages[i].page);\n\t\t\t}\n\t\t\tthat.addChild(currentPage);\n\t\t\tif (milliseconds > 0) {\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tthat.settle();\n\t\t\t\t}, milliseconds);\n\t\t\t}\n\t\t}\n\n\t\tthis.settle = function() {\n\t\t\tthat.removeAllChildren();\n\t\t\tthat.addChild(currentPage);\n\t\t\tthat.dispatchEvent(\"puffed\");\n\t\t}\n\n\t\tthis.disable = function() {\n\t\t\tthat.active = false;\n\t\t}\n\n\t\tthis.enable = function() {\n\t\t\tthat.active = true;\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tthat.swipe.off(\"swipe\", swipeEvent);\n\t\t\tthat.removeAllChildren();\n\t\t\tpages = null;\n\t\t\treturn true;\n\t\t}\n\n\t}\n\tzim.extend(zim.Pages, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-71\n\n\n/*--\nzim.HotSpots = function(spots, local, mouseDowns)\n\nHotSpots\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nHotSpots allow you to create multiple zim.hotSpot objects on multiple pages.\nA zim.hotSpot is an invisible click area (like an image map in HTML).\nYou can alternatively specify an object and it will turn that into a hotSpot.\nzim.HotSpots lets you control many or all of your interactions in one place.\n\nEXAMPLE\n// our first hotSpot will be a 50 pixel square at 100, 100\n// then we will add hotSpots to these items as well\nvar circle = new zim.Circle(60, \"red\");\ncircle.center(stage);\n\nvar button = new zim.Button();\nstage.addChild(button);\nbutton.x = stageW - button.width - 100;\nbutton.y = stageH - button.height - 100;\n\n// make the hotSpots object\n// these are all on the same page\n// gets really handy when you have multiple pages with zim.Pages\nvar hs = new zim.HotSpots([\n\t{page:stage, rect:[100,100,50,50], call:function(){zog(\"hot!\");}},\n\t{page:stage, rect:circle, call:function(){zog(\"circle!\");}},\n\t{page:stage, rect:button, call:function(){zog(\"button!\");}},\n]);\n// hs.show(); // uncomment this to see rectangle hotSpots\nstage.update();\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nspots - an array of hotspot data objects with the following format:\n\t[{page:home, rect:[190,50,260,260], call:someFunction},\n\t {page:home, rect:[70,405,500,150], call:someOtherFunction}]\n\tthe page should be a createjs Container\n\tthe rect is the [left, right, width, height] of a rectangle relative to the stage\n\tcall is the callback function to call when a hotSpot is clicked\n\tinstead of a rect array you can pass an object that must have setBounds() set\n\t[{page:home, rect:submitButton, call:function(){//code}}]\n\tthe hotSpot will then use the button position and bounds as the rectangle\n\tnote - in this case, HotSpots will actually add a mousedown or click event to the button\nlocal (default true) hotSpot rect is based on local coordinates of the container\n\tuse when the element scale independently from the stage\n\tif set to false then you pass in global coordinates and hotSpot will convert them\nmouseDowns (default false) stops mousedown events on a button that is used as a hotSpot\n\tprevents users from activating a swipe on a button (when using ZIM Swipe)\n\nMETHODS\nshow() - shows the hotspots for testing during authoring time\nhide() - hides the hotspots\naddHotSpot(page,rect,call) - can dynamically add hotSpots\nremoveHotSpots(page,id) - id is optional - so can remove all spots on a page\ndispose() - removes listeners\n\nACTIONEVENT\nThis component is affected by the general zim.ACTIONEVENT setting\nThe default is \"mousedown\" - if set to something else the component will act on click (press)\n\nNOTE: the class does actually add rectangle shapes to your page\nthe spot is a pixel rect with an alpha of .01 and then uses a hitArea of a backing shape\nthis could have been done with \"math\" alone but rollover cursor would be a pain\nthe class creates zim.HotSpot objects - see the class underneath this one\n--*///+72\n\tif (zot(zim.ACTIONEVENT)) zim.ACTIONEVENT = \"mousedown\";\n\n\tzim.HotSpots = function(spots, local, mouseDowns) {\n\t\tvar sig = \"spots, local, mouseDowns\";\n\t\tvar duo; if (duo = zob(zim.HotSpots, arguments, sig, this)) return duo;\n\t\tz_d(\"72\");\n\t\tthis.zimContainer_constructor();\n\n\t\tif (zot(spots) || !Array.isArray(spots)) {zog(\"zim pages - HotSpots():\\nplease provide an array of HotSpot data\"); return;}\n\t\tif (zot(local)) local = true;\n\t\tif (zot(mouseDowns)) mouseDowns = false;\n\t\tvar eventType = (zim.ACTIONEVENT==\"mousedown\")?\"mousedown\":\"click\";\n\n\t\tvar that = this;\n\n\t\tvar data; // spot data object\n\t\tvar hs; // hotSpot object\n\t\tvar hotSpots = []; // array of hotSpot objects\n\n\t\t// loop through data and add hotSpot objects\n\t\tfor (var i=0; i<spots.length; i++) {\n\t\t\taddSpot(spots[i]);\n\t\t}\n\n\t\tfunction addSpot(data) {\n\t\t\tvar button = null;\n\t\t\tif (!Array.isArray(data.rect)) {\n\t\t\t\tbutton = data.rect; // data includes a button rather than rect\n\t\t\t\tif (!button) {\n\t\t\t\t\tzog(\"zim pages - HotSpots(): HotSpot \"+ data.page + \" \" + data.rect +\" button does not exist\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tdata.rect = [button.x, button.y, 1, 1];\t// bounds are not used for button\n\t\t\t}\n\n\t\t\ths = new zim.HotSpot(data.page,data.rect[0],data.rect[1],data.rect[2],data.rect[3],data.call,local);\n\t\t\ths.zimHSpage = data.page;\n\t\t\ths.button = button;\n\t\t\thotSpots.push(hs);\n\t\t\ths.on(eventType, hsEvent);\n\t\t\tif (button) {\n\t\t\t\t// stop hotSpot from taking away rollovers on button\n\t\t\t\ths.spot.mouseEnabled = false;\n\t\t\t\ths.spot.mouseChildren = false;\n\t\t\t\t// but now need to add click to button as hotSpot will not work\n\t\t\t\tbutton.zimHScall = data.call;\n\t\t\t\tbutton.zimHSEvent = button.on(eventType, hsEvent, true);\n\t\t\t\tif (!mouseDowns) {\n\t\t\t\t\tbutton.zimHSMDEvent = button.on(\"mousedown\",function(e) {\n\t\t\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbutton.cursor = \"pointer\";\n\t\t\t}\n\t\t}\n\n\t\tfunction hsEvent(e) {\n\t\t\tif (e.stopImmediatePropagation) e.stopImmediatePropagation();\n\t\t\tif (window.event) window.event.cancelBubble=true;\n\t\t\tif (typeof(e.currentTarget.zimHScall) == \"function\") {\n\t\t\t\te.currentTarget.zimHScall(e);\n\t\t\t}\n\t\t}\n\n\t\tthis.addHotSpot = function(page,rect,call) {\n\t\t\tdata = {page:page, rect:rect, call:call};\n\t\t\tspots.push(data);\n\t\t\taddSpot(data);\n\t\t}\n\n\t\tthis.show = function() {\n\t\t\tfor (var i=0; i<hotSpots.length; i++) {\n\t\t\t\ths = hotSpots[i];\n\t\t\t\tif (!hs.button) hs.show();\n\t\t\t}\n\t\t}\n\t\tthis.hide = function() {\n\t\t\tfor (var i=0; i<hotSpots.length; i++) {\n\t\t\t\ths = hotSpots[i];\n\t\t\t\ths.hide();\n\t\t\t}\n\t\t}\n\n\t\tthis.removeHotSpots = function(page, rect) {\n\t\t\tfor (var i=spots.length-1; i>=0; i--) {\n\t\t\t\tdata = spots[i];\n\t\t\t\ths = hotSpots[i];\n\t\t\t\tif (rect && !Array.isArray(rect)) { // button\n\t\t\t\t\trect = [rect.x, rect.y, rect.getBounds().width, rect.getBounds().height];\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t(zot(page) && zot(rect)) ||\n\t\t\t\t\t(zot(rect) && page==data.page) ||\n\t\t\t\t\t(zot(page) && zim.arraysEqual(rect,data.rect)) ||\n\t\t\t\t\t(page==data.page && zim.arraysEqual(rect,data.rect))\n\t\t\t\t) {\n\t\t\t\t\t// remove hotSpot from data and hotSpots list\n\t\t\t\t\tspots.splice(i,1);\n\t\t\t\t\tif (hs.button) {\n\t\t\t\t\t\ths.button.off(eventType, hs.button.zimHSEvent);\n\t\t\t\t\t\ths.button.zimHSEvent = null;\n\t\t\t\t\t\tif (!mouseDowns) {\n\t\t\t\t\t\t\ths.button.off(\"mousedown\", hs.button.zimHSMDEvent);\n\t\t\t\t\t\t\ths.button.zimHSMDEvent = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ths.off(eventType, hsEvent);\n\t\t\t\t\ths.dispose();\n\t\t\t\t\thotSpots.splice(i,1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tfor (var i=0; i<hotSpots.length; i++) {\n\t\t\t\ths = hotSpots[i];\n\t\t\t\tif (hs.button) {\n\t\t\t\t\ths.button.off(eventType, hs.button.zimHSEvent);\n\t\t\t\t\ths.button.zimHSCall = null;\n\t\t\t\t\ths.button.zimHSEvent = null;\n\t\t\t\t\tif (!mouseDowns) {\n\t\t\t\t\t\ths.button.off(\"mousedown\", hs.button.zimHSMDEvent);\n\t\t\t\t\t\ths.button.zimHSMDEvent = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ths.off(eventType, hsEvent);\n\t\t\t\ths.dispose();\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.HotSpots, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-72\n\n\n/*--\nzim.HotSpot = function(obj, x, y, width, height, call, local)\n\nHotSpot\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nHotSpot adds an invisible button to a container object (often think of this as the page).\nIf you want multiple spots it is more efficient to use the HotSpots class above\nwhich manages multiple HotSpot objects (otherwise you end up with multiple event functions).\nThe spot is a pixel rect with an alpha of .01 and then uses a hitArea of a backing shape.\nThe spot will get a cursor of \"pointer\".\n\nEXAMPLE\nvar hs = new zim.HotSpot(stage, 100, 100, 50, 50, myFunction);\nfunction myFunction() {\n\tzog(\"activation!\");\n}\n// hs.show(); // uncomment this to see rectangle hotSpot\nstage.update();\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nholder - container object in which to place the hotspot (stage for instance)\nx, y, width and height - of the rectangle for the hotspot\ncall - the function to call when the spot is pressed\nlocal (default true) hotSpot rect is based on local coordinates of the container\n\tuse when the element scale independently from the stage\n\tif set to false then you pass in global coordinates and hotSpot will convert them\n\nMETHODS\nshow() - helps when creating the spot to see where it is\nhide() - hides the hotspot\ndispose() - removes the listener and the spot\n\nPROPERTIES\nspot - the actual hotSpot object that gets added to the container can be accessed with the spot property\neg. hs.spot\n\nACTIONEVENT\nThis component is affected by the general zim.ACTIONEVENT setting\nThe default is \"mousedown\" - if set to something else the component will act on click (press)\n--*///+73\n\tzim.HotSpot = function(obj, x, y, width, height, call, local) {\n\n\t\tvar sig = \"obj, x, y, width, height, call, local\";\n\t\tvar duo; if (duo = zob(zim.HotSpot, arguments, sig, this)) return duo;\n\t\tz_d(\"73\");\n\t\tthis.zimContainer_constructor();\n\n\t\tif (zot(obj) || !obj.addChild) {zog(\"zim pages - HotSpot():\\nPlease pass in container object for obj\"); return;}\n\t\tif (obj instanceof createjs.Container == false) {zog(\"zim pages - HotSpot():\\nObjects passed in should be Containers\"); return;}\n\t\tif (zot(x) || zot(y) || zot(width) || zot(height)) {zog(\"zim pages - HotSpot():\\nPlease pass in x, y, width, height\"); return;}\n\t\tif (zot(local)) local = true;\n\t\teventType = (zim.ACTIONEVENT==\"mousedown\")?\"mousedown\":\"click\";\n\n\t\tvar w = width; var h = height;\n\t\tvar that = this;\n\n\t\tvar backing = new createjs.Shape();\n\t\tvar but = new createjs.Shape();\n\n\t\tif (!local) {\n\t\t\tvar point = obj.globalToLocal(x,y);\n\t\t\tvar point2 = obj.globalToLocal(x+w,y+h);\n\t\t\tvar newW = point2.x-point.x;\n\t\t\tvar newH = point2.y-point.y;\n\t\t\tbacking.graphics.f(\"#999999\").dr(point.x,point.y,newW,newH);\n\t\t\tbut.graphics.f(\"#999999\").dr(point.x,point.y,1,1);\t // small point\n\t\t} else {\n\t\t\tbacking.graphics.f(\"#999999\").dr(x,y,w,h);\n\t\t\tbut.graphics.f(\"#999999\").dr(x,y,1,1);\n\t\t}\n\n\t\tbacking.alpha = .4;\n\t\tbacking.mouseEnabled = false;\n\t\tbut.alpha = .01;\n\t\tbut.cursor = \"pointer\";\n\t\tthis.spot = but;\n\n\t\tvar butEvent = but.on(eventType,function(e) {\n\t\t\tif (typeof(call) == \"function\") {\n\t\t\t\tcall();\n\t\t\t}\n\t\t});\n\t\tobj.addChild(but);\n\t\tbut.hitArea = backing;\n\t\tthis.show = function() {\n\t\t\tobj.addChild(backing);\n\t\t}\n\t\tthis.hide = function() {\n\t\t\tobj.removeChild(backing);\n\t\t}\n\t\tthis.dispose = function() {\n\t\t\tbut.off(eventType, butEvent);\n\t\t\tobj.removeChild(but);\n\t\t\t//delete but;\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.HotSpot, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-73\n\n/*--\nzim.Manager = function()\n\nManager\nzim class\n\nDESCRIPTION\nused internally to make GridManager and GuideManager\nand in future perhaps OutlineManager\n--*///+75\n\tzim.Manager = function(type) {\n\t\tz_d(\"75\");\n\t\tvar that = this;\n\t\tthis.items = [];\n\t\tthis.add = function(a) {\n\t\t\tthat.items.push(a);\n\t\t}\n\t\tthis.resize = function() {\n\t\t\tif (!that) return;\n\t\t\tfor (var i=0; i<that.items.length; i++) {\n\t\t\t\tif (!that.items[i].resize()) that.items.splice(i); // was disposed\n\t\t\t}\n\t\t}\n\t\tthis.dispose = function() {\n\t\t\tzog(that.items.length);\n\t\t\tfor (var i=that.items.length-1; i>=0; i--) {\n\t\t\t\tthat.items[i].dispose();\n\t\t\t}\n\t\t\tthat.items = [];\n\t\t\tthat = null;\n\t\t\treturn true;\n\t\t}\n\t}//-75\n\n\n/*--\nzim.Guide = function(obj, vertical, percent, hideKey, pixelKey)\n\nGuide Class\nextends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nGuide shows a guideline to help layout assets with code.\nCursor x and y in percentage or pixels are shown along edges\nas a distance from the guide.\nYou only need one guide per axis because you measure from the guide to your cursor.\nUse the G key to toggle guide visibility.\nUse the P key to toggle percent and pixels.\nMake sure you remove the guide for your final version (dispose).\n\nEXAMPLE\n// simple form for a vertical guide\n// use the distance from the guide to your cursor to measure\n// so you only need one vertical guide for horizontal measurement\nvar guide = new zim.Guide(stage);\n\n// better to add guides to a GuideManager\nvar manager = new zim.GuideManager();\nmanager.add(new zim.Guide(stage));\nmanager.add(new zim.Guide(stage, false));\n\n// or with pixels\n// manager.add(new zim.Guide(stage, true, false));\n// manager.add(new zim.Guide(stage, false, false));\n\n// then you can remove all guides with\n// manager.dispose();\n// handy with guides on multiple zim.Pages\n\n// and in frame resize event we can resize all guides:\nframe.on(\"resize\", function() {manager.resize();})\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nobj - object to add guide to for example the stage\nvertical - (default true) set to false for horizontal guide\npercent - (default true) set to false to show pixels\nhideKey - (default G) key to press to hide guide\npixelKey - (default P) key to press to swap percent and pixels\n\nMETHODS\nresize() - resizes the guide if the container size changes (put in frame resize event)\ndispose() - removes keyboard event listeners and guide\n\nPROPERTIES\npixels - boolean - set to true to change to pixels, false to go to percent\n--*///+76\n\tzim.Guide = function(obj, vertical, percent, hideKey, pixelKey) {\n\n\t\tvar sig = \"obj, vertical, percent, hideKey, pixelKey\";\n\t\tvar duo; if (duo = zob(zim.Guide, arguments, sig, this)) return duo;\n\t\tz_d(\"76\");\n\t\tthis.zimContainer_constructor();\n\n\t\tif (zot(obj)) {\n\t\t\tif (zimDefaultFrame) {\n\t\t\t\tobj = zimDefaultFrame.stage;\n\t\t\t} else {\n\t\t\t\tobj = \"stage\";\n\t\t\t}\n\t\t}\n\t\tif (zot(vertical)) vertical = true;\n\t\tif (obj != \"stage\" && (!obj.addChild || !obj.getBounds || !obj.getBounds())) {zog (\"zim pages - Guide(): Please provide container with bounds for the obj (setBounds())\"); return;}\n\t\tif (zot(percent)) percent = true;\n\t\tif (zot(hideKey)) hideKey = \"G\";\n\t\tif (zot(pixelKey)) pixelKey = \"P\";\n\n\t\tvar that = this;\n\t\tvar stageEvent;\n\n\t\t// make text boxes that show x and y\n\t\tvar boxW = 80;\n\t\tvar boxH = 26;\n\t\tvar minX = boxW/6+boxW/2;\n\t\tvar minY = boxH*2\n\t\tvar maxX; // set max values once we get a stage\n\t\tvar maxY;\n\n\t\tvar box;\n\t\tif (vertical) {\n\t\t\tbox = makeBox(\"#00c5af\", \"white\", \"white\");\n\t\t\tbox.shape.regX = boxW+boxW/6; box.shape.regY = boxH/2;\n\t\t\tbox.label.x = -boxW/2-boxW/6;\n\t\t} else {\n\t\t\tbox = makeBox(\"#d61fa0\", \"white\", \"white\");\n\t\t\tbox.shape.regX = boxW/2; box.shape.regY = boxH + boxH/4;\n\t\t\tbox.label.y = -boxH*3/4;\n\t\t}\n\n\t\tfunction makeBox(fill, stroke, textColor) {\n\t\t\tvar box = new zim.Container();\n\t\t\tbox.shape = new createjs.Shape();\n\t\t\tbox.shape.graphics.s(stroke).ss(1).f(fill).r(0,0,boxW,boxH);\n\t\t\tbox.shape.alpha = .9;\n\t\t\tbox.addChild(box.shape);\n\t\t\tbox.label = new createjs.Text(\"10\", \"16px verdana\", textColor);\n\t\t\tbox.label.textAlign = \"center\";\n\t\t\tbox.label.textBaseline = \"middle\";\n\t\t\tbox.addChild(box.label);\n\t\t\tbox.mouseChildren = false;\n\t\t\tbox.mouseEnabled = false;\n\t\t\treturn box;\n\t\t}\n\n\t\tvar stage;\n\t\tif (obj != \"stage\") obj.addChild(that);\n\t\tvar addedInterval = zim.added(that, added);\n\n\t\tvar guideCheck = false;\n\t\tvar objW;\n\t\tvar objH;\n\t\tvar line;\n\t\tvar dragBounds;\n\t\tfunction added() {\n\t\t\tif (obj == \"stage\") {\n\t\t\t\tstage =\tthat.getStage();\n\t\t\t\tobj = stage;\n\t\t\t} else {\n\t\t\t\tstage =\tobj.getStage();\n\t\t\t}\n\t\t\tobj.addChild(that);\n\t\t\tobjW = obj.getBounds().width;\n\t\t\tobjH = obj.getBounds().height;\n\t\t\tif (vertical) {\n\t\t\t\tbox.y = objH/2;\n\t\t\t\tbox.label.text = \"y:\" + ((that.pixels) ? Math.round(objW*70/100) : \"70%\");\n\t\t\t} else {\n\t\t\t\tbox.x = objW/2;\n\t\t\t\tbox.label.text = \"x:\" + ((that.pixels) ? Math.round(objH*70/100) : \"70%\");\n\t\t\t}\n\t\t\tline = new createjs.Shape();\n\t\t\tthat.addChild(line);\n\t\t\t(vertical) ? line.x = objW*.7 : line.y = objH*.7;\n\n\t\t\tif (!guideCheck) {\n\t\t\t\tobj.addChild(that);\n\t\t\t\tdrawGuide();\n\t\t\t}\n\t\t\tstage.off(\"stagemousemove\", stageEvent);\n\t\t\tstageEvent = stage.on(\"stagemousemove\", where);\n\t\t\tstage.update();\n\t\t};\n\n\t\tvar lastPoint = {x:0,y:0};\n\t\tfunction where(e) {\n\t\t\t// convert mouse location to local point\n\t\t\tvar point; var diff;\n\t\t\tif (e) {\n\t\t\t\tpoint = obj.globalToLocal(e.rawX, e.rawY);\n\t\t\t\tlastPoint = point;\n\t\t\t} else {\n\t\t\t\tpoint = {x:lastPoint.x, y:lastPoint.y}\n\t\t\t}\n\t\t\tif (!percent) {\t// pixels\n\t\t\t\tif (vertical) {\n\t\t\t\t\tdiff = Math.round(Math.abs(point.x-line.x));\n\t\t\t\t\tbox.label.text = \"x:\" + Math.max(0, Math.min(diff, Math.round(objW)));\n\t\t\t\t\tbox.y = Math.max(minY, Math.min(point.y, maxY));\n\t\t\t\t} else {\n\t\t\t\t\tdiff = Math.round(Math.abs(point.y-line.y));\n\t\t\t\t\tbox.label.text = \"y:\" + Math.max(0, Math.min(diff, Math.round(objH)));\n\t\t\t\t\tbox.x = Math.max(minX, Math.min(point.x, maxX));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (vertical) {\n\t\t\t\t\tdiff = Math.round(Math.abs(point.x-line.x)/objW*100);\n\t\t\t\t\tbox.label.text = \"x:\" + Math.max(0, Math.min(diff, 100)) + \"%\";\n\t\t\t\t\tbox.y = Math.max(minY, Math.min(point.y, maxY));\n\t\t\t\t} else {\n\t\t\t\t\tdiff = Math.round(Math.abs(point.y-line.y)/objH*100);\n\t\t\t\t\tbox.label.text = \"y:\" + Math.max(0, Math.min(diff, 100)) + \"%\";\n\t\t\t\t\tbox.x = Math.max(minX, Math.min(point.x, maxX));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (stage) stage.update();\n\t\t}\n\n\t\t// make the guide once we have the stage\n\t\t// and any time resize is called\n\t\tfunction drawGuide() {\n\t\t\tguideCheck = true;\n\t\t\tobjW = obj.getBounds().width;\n\t\t\tobjH = obj.getBounds().height;\n\t\t\tvar pointer;\n\t\t\tif (vertical) {\n\t\t\t\tpointer = \"ew-resize\";\n\t\t\t\tdragBounds = new createjs.Rectangle(0,0,objW,0);\n\t\t\t} else {\n\t\t\t\tpointer = \"ns-resize\";\n\t\t\t\tdragBounds = new createjs.Rectangle(0,0,0,objH);\n\t\t\t}\n\t\t\tzim.noDrag(line);\n\t\t\tsetTimeout(function() {\n\t\t\t\t// give time for content to settle\n\t\t\t\tzim.drag(line, dragBounds, pointer, pointer, null, null, true);\n\t\t\t}, 500);\n\t\t\tstage.mouseMoveOutside = true;\n\t\t\tstage.enableMouseOver(10);\n\n\t\t\tmaxX = objW-boxW*2/3;\n\t\t\tmaxY = objH-boxH - boxH;\n\t\t\tline.uncache();\n\t\t\tvar g = line.graphics;\n\t\t\tif (vertical) {\n\t\t\t\tg.c().s(\"rgba(0,255,255,.1)\").ss(20).mt(0,0).lt(0,objH);\n\t\t\t\tg.f().s(\"white\").ss(2).mt(0,0).lt(0,objH);\n\t\t\t\tg.s(\"#00c5af\").sd([20,20]).mt(0,0).lt(0,objH).sd();\n\t\t\t\tline.cache(-10,0,20,objH);\n\t\t\t} else {\n\t\t\t\tg.c().s(\"rgba(255,0,255,.1)\").ss(20).mt(0,0).lt(objW,0);\n\t\t\t\tg.f().s(\"white\").ss(2).mt(0,0).lt(objW, 0);\n\t\t\t\tg.s(\"#d61fa0\").sd([20,20]).mt(0,0).lt(objW, 0).sd();\n\n\t\t\t\tline.cache(0,-10,objW,20);\n\t\t\t}\n\n\t\t\t(vertical) ?  box.x = objW : box.y = objH;\n\t\t\tthat.addChild(box);\n\n\t\t}\n\n\t\tObject.defineProperty(this, 'pixels', {\n\t\t\tget: function() {\n\t\t\t\treturn !percent;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tpercent = !value;\n\t\t\t\tthat.resize();\n\t\t\t}\n\t\t});\n\n\t\t// add key listener to hide and show the guide\n\t\twindow.addEventListener(\"keydown\", keyEvent);\n\n\t\tfunction keyEvent(e) {\n\t\t\tif (!e) e=event;\n\t\t\tif (!stage) return;\n\t\t\tif (String.fromCharCode(e.keyCode) == hideKey.toUpperCase()) { // G\n\t\t\t\tthat.visible = !that.visible;\n\t\t\t\tstage.off(\"stagemousemove\", stageEvent);\n\t\t\t\tif (that.visible) {\n\t\t\t\t\tstageEvent = stage.on(\"stagemousemove\", where, that);\n\t\t\t\t}\n\t\t\t\tstage.update();\n\t\t\t}\n\t\t\tif (String.fromCharCode(e.keyCode) == pixelKey.toUpperCase()) { // P\n\t\t\t\tthat.pixels = !that.pixels;\n\t\t\t}\n\t\t}\n\n\t\tthis.resize = function() {\n\t\t\tif (!that) return false;\n\t\t\tif (stage) {\n\t\t\t\tdrawGuide();\n\t\t\t\twhere();\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tif (!that) return false;\n\t\t\tzim.noDrag(line);\n\t\t\tclearInterval(addedInterval);\n\t\t\tthat.removeAllChildren();\n\t\t\twindow.removeEventListener(\"keydown\", keyEvent);\n\t\t\tif (that.parent) that.parent.removeChild(that);\n\t\t\tthat = null;\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.Guide, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-76\n\n\n/*--\nzim.GuideManager = function()\n\nGuideManager\nzim class - extends the ZIM Manager abstract class\n\nDESCRIPTION\nAdd Zim Guide objects to a GuideManager object and update or remove all guides at once.\nGuides are handy to use but perhaps annoying to update and remove if you have many.\nGuideManager keeps track of the guides and lets you update or dispose of them on command.\n\nEXAMPLE\nvar manager = new zim.GuideManager();\nmanager.add(new zim.Guide(stage));\nmanager.add(new zim.Guide(stage, false));\n\n// or with pixels\n// manager.add(new zim.Guide(stage, true, false));\n// manager.add(new zim.Guide(stage, false, false));\n\n// then you can remove all guides with\n// manager.dispose();\n// handy with guides on multiple zim.Pages\n\n// and in frame resize event we can resize all guides:\nframe.on(\"resize\", function() {manager.resize();})\nEND EXAMPLE\n\nPROPERTIES\nitems - an array of all Guide objects added with add()\n\nMETHODS\nadd(guide) - registers a guide with the GuideManager\nresize() - resizes all the guides in the GuideManager (ie. if stage changes)\ndispose() - disposes all guides and the GuideManager\n\nNOTE: to just hide guides, you use the G key\nand to toggle percent and pixels use the P key\nyou can dispose guides individually or use this class to dispose all\ndisposing will remove the G, P key listener and the guide\n--*///+77\n\tzim.GuideManager = function() {\n\t\tz_d(\"77\");\n\t\tzim.Manager.call(this, \"GuideManager\");\n\t}\n\tzim.GuideManager.prototype = new zim.Manager();\n\tzim.GuideManager.prototype.constructor = zim.GuideManager;\n\t//-77\n\n/*--\nzim.Grid = function(obj, color, percent, hideKey, pixelKey)\n\nGrid\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nA Grid shows gridlines to help layout assets with code (percent is default).\nCursor x and y percentage or pixels are shown along edges.\nUse the G key to toggle grid visibility.\nUse the P key to toggle percent and pixels.\nMake sure you remove the grid for your final version (dispose).\n\nEXAMPLE\nvar grid = new zim.Grid(stage);\n\n// better to add grids to a GridManager\nvar manager = new zim.GridManager();\nmanager.add(new zim.Grid(stage));\n\n// or with pixels\n// manager.add(new zim.Grid(stage, null, false));\n\n// then you can remove all grids with\n// grid.dispose();\n// handy with guides on multiple zim.Pages\n\n// and in frame resize event we can resize all grids:\nframe.on(\"resize\", function() {manager.resize();})\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nobj - the object to add grid to (for example the stage)\ncolor - (default black) the color of the grid\npercent - (default true) set to false to show pixels\nhideKey - (default G) key to press to hide grid\npixelKey - (default P) key to press to swap percent and pixels\n\nMETHODS\nresize() - resize the grid if the container changes size (eg. put in frame resize event)\ndispose() - clears keyboard events and grid\n\nPROPERTIES\npixels - boolean - set to true to change to pixels, false to go to percent\n--*///+78\n\tzim.Grid = function(obj, color, percent, hideKey, pixelKey) {\n\n\t\tvar sig = \"obj, color, percent, hideKey, pixelKey\";\n\t\tvar duo; if (duo = zob(zim.Grid, arguments, sig, this)) return duo;\n\t\tz_d(\"78\");\n\t\tthis.zimContainer_constructor();\n\n\t\tif (zot(obj)) {\n\t\t\tif (zimDefaultFrame) {\n\t\t\t\tobj = zimDefaultFrame.stage;\n\t\t\t} else {\n\t\t\t\tobj = \"stage\";\n\t\t\t}\n\t\t}\n\t\tif (zot(color)) color = \"black\";\n\t\tif (obj != \"stage\" && (!obj.addChild || !obj.getBounds || !obj.getBounds())) {zog (\"zim pages - Grid(): Please provide container with bounds for the obj (setBounds())\"); return;}\n\t\tif (zot(percent)) percent = true;\n\t\tif (zot(hideKey)) hideKey = \"G\";\n\t\tif (zot(pixelKey)) pixelKey = \"P\";\n\n\t\tvar that = this;\n\t\tvar pixels = 10; // for grid\n\t\tvar stageEvent;\n\n\n\t\tthis.mouseChildren = false;\n\t\tthis.mouseEnabled = false;\n\n\t\t// make text boxes that show x and y\n\t\tvar boxW = 80;\n\t\tvar boxH = 26;\n\n\t\tvar top = makeBox(\"#dddddd\", color, \"#333333\");\n\t\ttop.shape.regX = boxW/2; top.shape.regY = -boxH/4;\n\t\ttop.label.y = boxH*3/4;\n\n\t\tvar left = makeBox(\"#dddddd\", color, \"#333333\");\n\t\tleft.shape.regX = -boxW/6; left.shape.regY = boxH/2;\n\t\tleft.label.x = boxW/2 + boxW/6;\n\n\t\tfunction makeBox(fill, stroke, textColor) {\n\t\t\tvar box = new zim.Container();\n\t\t\tbox.shape = new createjs.Shape();\n\t\t\tbox.shape.graphics.s(stroke).ss(1).f(fill).r(0,0,boxW,boxH);\n\t\t\tbox.shape.alpha = .9;\n\t\t\tbox.addChild(box.shape);\n\t\t\tbox.label = new createjs.Text(\"10\", \"16px verdana\", textColor);\n\t\t\tbox.label.textAlign = \"center\";\n\t\t\tbox.label.textBaseline = \"middle\";\n\t\t\tbox.addChild(box.label);\n\t\t\tbox.mouseChildren = false;\n\t\t\tbox.mouseEnabled = false;\n\t\t\treturn box;\n\t\t}\n\n\t\tvar minX = boxW/6+boxW/2;\n\t\tvar minY = boxH*2\n\t\tvar maxX; // set max values once we get a stage\n\t\tvar maxY;\n\n\t\ttop.x = minX;\n\t\tleft.y = minY;\n\t\ttop.label.text = \"x:0\";\n\t\tleft.label.text = \"y:0\";\n\n\t\tvar stage;\n\t\tif (obj != \"stage\") obj.addChild(that);\n\t\tvar addedInterval = zim.added(that, added);\n\n\t\tvar gridCheck = false;\n\t\tfunction added() {\n\t\t\tif (obj == \"stage\") {\n\t\t\t\tstage =\tthat.getStage();\n\t\t\t\tobj = stage;\n\t\t\t} else {\n\t\t\t\tstage =\tobj.getStage();\n\t\t\t}\n\t\t\tif (!gridCheck) {\n\t\t\t\tdrawGrid();\n\t\t\t\tobj.addChild(that);\n\t\t\t}\n\t\t\tstage.off(\"stagemousemove\", stageEvent);\n\t\t\tstageEvent = stage.on(\"stagemousemove\", where);\n\t\t\tstage.update();\n\t\t};\n\n\t\tvar lastPoint = {x:0,y:0};\n\t\tfunction where(e) {\n\t\t\t// convert mouse location to local point\n\t\t\tvar point;\n\t\t\tif (e) {\n\t\t\t\tpoint = obj.globalToLocal(e.rawX, e.rawY);\n\t\t\t\tlastPoint = point;\n\t\t\t} else {\n\t\t\t\tpoint = {x:lastPoint.x, y:lastPoint.y}\n\t\t\t}\n\t\t\tif (!percent) {\t// pixels\n\t\t\t\ttop.label.text = \"x:\" + Math.max(0, Math.min(Math.round(point.x), Math.round(objW)));\n\t\t\t\ttop.x = Math.max(minX, Math.min(point.x, maxX));\n\t\t\t\tleft.label.text = \"y:\" + Math.max(0, Math.min(Math.round(point.y), Math.round(objH)));\n\t\t\t\tleft.y = Math.max(minY, Math.min(point.y, maxY));\n\t\t\t} else {\n\t\t\t\ttop.label.text = \"x:\" + Math.max(0, Math.min(Math.round(point.x/objW*100), 100)) + \"%\";\n\t\t\t\ttop.x = Math.max(minX, Math.min(point.x, maxX));\n\t\t\t\tleft.label.text = \"y:\" + Math.max(0, Math.min(Math.round(point.y/objH*100), 100)) + \"%\";\n\t\t\t\tleft.y = Math.max(minY, Math.min(point.y, maxY));\n\t\t\t}\n\t\t\tif (stage) stage.update();\n\t\t}\n\n\t\t// make the grid once we have the stage\n\t\tvar objW;\n\t\tvar objH;\n\t\tvar cached;\n\t\tfunction drawGrid() {\n\t\t\t gridCheck = true;\n\n\t\t\tif (obj && obj.getBounds) {\n\t\t\t\tobjW = obj.getBounds().width;\n\t\t\t\tobjH = obj.getBounds().height;\n\t\t\t}\n\t\t\tif (stage) {\n\t\t\t\tstage.mouseMoveOutside = true;\n\t\t\t\tstage.enableMouseOver(10);\n\t\t\t}\n\n\t\t\tmaxX = objW-boxW*2/3;\n\t\t\tmaxY = objH-boxH - boxH;\n\n\t\t\tcached = new zim.Container();\n\t\t\tthat.addChild(cached);\n\t\t\tvar grid = new createjs.Shape();\n\t\t\tcached.addChild(grid);\n\t\t\tvar g = grid.graphics;\n\t\t\tg.s(color).ss(1);\n\n\t\t\tvar grid2 = new createjs.Shape();\n\t\t\tcached.addChild(grid2);\n\n\n\t\t\tif (!percent) { // pixels\n\n\t\t\t\tfor (var i=0; i<objW/pixels; i++) {\n\t\t\t\t\tg.mt(i*pixels, 0).lt(i*pixels, objH);\n\t\t\t\t}\n\t\t\t\tfor (var i=0; i<objH/pixels; i++) {\n\t\t\t\t\tg.mt(0, i*pixels).lt(objW, i*pixels);\n\t\t\t\t}\n\t\t\t\tgrid.alpha = .3;\n\n\t\t\t\tg = grid2.graphics;\n\t\t\t\tg.s(color).ss(1);\n\n\t\t\t\tfor (var i=0; i<objW/(pixels*10); i++) {\n\t\t\t\t\tg.mt(i*(pixels*10), 0).lt(i*(pixels*10), objH);\n\t\t\t\t}\n\t\t\t\tfor (var i=0; i<objH/(pixels*10); i++) {\n\t\t\t\t\tg.mt(0, i*(pixels*10)).lt(objW, i*(pixels*10));\n\t\t\t\t}\n\n\t\t\t} else { // percent - every 5 percent\n\n\t\t\t\tfor (var i=1; i<20+2; i++) {\n\t\t\t\t\tg.mt(i*objW/20, 0).lt(i*objW/20, objH);\n\t\t\t\t}\n\t\t\t\tfor (var i=1; i<20; i++) {\n\t\t\t\t\tg.mt(0, i*objH/20).lt(objW, i*objH/20);\n\t\t\t\t}\n\t\t\t\tgrid.alpha = .3;\n\n\t\t\t\tg = grid2.graphics;\n\t\t\t\tg.s(color).ss(1);\n\n\t\t\t\tfor (var i=1; i<10; i++) {\n\t\t\t\t\tg.mt(i*objW/10, 0).lt(i*objW/10, objH);\n\t\t\t\t}\n\t\t\t\tfor (var i=1; i<10; i++) {\n\t\t\t\t\tg.mt(0, i*objH/10).lt(objW, i*objH/10);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar crossSize = 80;\n\t\t\tg.s(\"#FFFFFF\").ss(8);\n\t\t\tg.mt(objW/2, objH/2-crossSize/2).lt(objW/2, objH/2+crossSize/2);\n\t\t\tg.mt(objW/2-crossSize/2, objH/2).lt(objW/2+crossSize/2, objH/2);\n\n\t\t\tg.s(\"#000000\").ss(4);\n\t\t\tg.mt(objW/2, objH/2-crossSize/2).lt(objW/2, objH/2+crossSize/2);\n\t\t\tg.mt(objW/2-crossSize/2, objH/2).lt(objW/2+crossSize/2, objH/2);\n\n\t\t\t// draw a border\n\t\t\tg.s(color).ss(3);\n\t\t\tg.dr(0,0,objW,objH);\n\n\t\t\tgrid2.alpha = .5;\n\t\t\tcached.cache(0,0,objW,objH);\n\n\t\t\tthat.addChild(top);\n\t\t\tthat.addChild(left);\n\n\t\t \tif (stage) stage.update();\n\t\t}\n\n\t\tObject.defineProperty(this, 'pixels', {\n\t\t\tget: function() {\n\t\t\t\treturn !percent;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tpercent = !value;\n\t\t\t\tthat.resize();\n\t\t\t}\n\t\t});\n\n\t\t// add key listener to hide and show the grid\n\t\twindow.addEventListener(\"keydown\", keyEvent);\n\n\t\tfunction keyEvent(e) {\n\t\t\tif (!e) e=event;\n\t\t\tif (!stage) return;\n\t\t\tif (String.fromCharCode(e.keyCode) == hideKey.toUpperCase()) { // G\n\t\t\t\tthat.visible = !that.visible;\n\t\t\t\tstage.off(\"stagemousemove\", stageEvent);\n\t\t\t\tif (that.visible) {\n\t\t\t\t\tstageEvent = stage.on(\"stagemousemove\", where, that);\n\t\t\t\t}\n\t\t\t\tstage.update();\n\t\t\t}\n\t\t\tif (String.fromCharCode(e.keyCode) == pixelKey.toUpperCase()) { // P\n\t\t\t\tthat.removeChild(cached);\n\t\t\t\tcached = null;\n\t\t\t\tthat.pixels = !that.pixels;\n\t\t\t}\n\t\t}\n\n\t\tthis.resize = function() {\n\t\t\tif (!that) return false;\n\t\t\tthat.removeChild(cached);\n\t\t\tcached = null;\n\t\t\tif (stage) {\n\t\t\t\tdrawGrid();\n\t\t\t\twhere();\n\t\t\t\tsetTimeout(function(){ // solve ipod bug\n\t\t\t\t\tthat.removeChild(cached);\n\t\t\t\t\tcached = null;\n\t\t\t\t\tdrawGrid();\n\t\t\t\t},200);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tclearInterval(addedInterval);\n\t\t\tthat.removeAllChildren();\n\t\t\twindow.removeEventListener(\"keydown\", keyEvent);\n\t\t\tif (that.parent) that.parent.removeChild(that);\n\t\t\tthat = null;\n\t\t\treturn true;\n\t\t}\n\n\t}\n\tzim.extend(zim.Grid, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-78\n\n\n/*--\nzim.GridManager = function()\n\nGridManager\nzim class - extends a zim.Manager\n\nDESCRIPTION\nAdd Zim Grid objects to a GridManager object and update or remove all grids at once.\nGrids are handy to use but perhaps annoying to update and remove if you have many.\nGridManager keeps track of the grids and lets you update or dispose of them on command.\n\nEXAMPLE\nvar manager = new zim.GridManager();\nmanager.add(new zim.Grid(stage));\n\n// or with pixels\n// manager.add(new zim.Grid(stage, null, false));\n\n// then you can remove all grids with\n// grid.dispose();\n// handy with guides on multiple zim.Pages\n\n// and in frame resize event we can resize all grids:\nframe.on(\"resize\", function() {manager.resize();})\nEND EXAMPLE\n\nMETHODS\nadd(grid) - registers a grid with the GridManager\nresize() - resizes all the grids in the GridManager (ie. if stage changes)\ndispose() - disposes all grids and the GridManager\n\nNOTE: to just hide grids, you use the G key\nand to toggle percent and pixels use the P key\nyou can dispose grids individually or use this class to dispose all\ndisposing will remove the G key listener and the grid\n\nPROPERTIES\nitems - an array of all Grid objects added with add()\n--*///+79\n\tzim.GridManager = function() {\n\t\tz_d(\"79\");\n\t\tzim.Manager.call(this, \"GridManager\");\n\t}\n\tzim.GridManager.prototype = new zim.Manager();\n\tzim.GridManager.prototype.constructor = zim.GridManager;\n\t//-79\n\n/*--\nzim.Layout = function(holder, regions, lastMargin, backgroundColor, vertical, regionShape, scalingObject, hideKey)\n\nLayout\nzim class - extends a createjs.EventDispatcher\n\nDESCRIPTION\nLayout arranges objects on the page by fitting them in regions.\nMake a layout object for each page if desired\nand even nest layout objects inside regions.\nFixed aspect ratio content is fit into regions.\nLayout is good for flexive design where you anchor titles and navigation.\nLayout handles any number of regions vertically or horizontally.\nIt is useful for full scale mode for different devices or browser window scale.\nYou need to run the resize() method to update the layout.\nPut the all your layouts in zim.LayoutManager to scale all at once.\n\nEXAMPLE\n// these would be containers with your content\n// make sure that bounds are set on containers\n// you may want to hard code bounds for clarity\nvar header = new zim.Rectangle(500, 200, \"blue\");\nvar content = new zim.Rectangle(600, 500, \"green\");\nvar footer = new zim.Rectangle(500, 200, \"blue\");\nstage.addChild(header, content, footer);\n\n// make the Layout - more useful for FULL scale mode\nvar layout = new zim.Layout({\n\tholder:stage,\n\tregions:[\n\t\t{object:header, marginTop:10, maxWidth:80, minHeight:10, valign:\"top\"},\n\t\t{object:content, marginTop:5, maxWidth:90}, // note, middle gets no minHeight\n\t\t{object:footer, marginTop:5, maxWidth:80, height:10}\n\t],\n\tlastMargin:5\n});\n\n// add to LayoutManager to resize or dispose all layouts together\n// disposing only removes keyboard events to show boundaries\nvar manager = new zim.LayoutManager();\nmanager.add(layout);\n\nframe.on(\"resize\", function() {\n\tmanager.resize();\n\tstage.update();\n});\n\nstage.update();\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nholder - object to hold layout (stage, container, etc) that must have bounds set\nregions - an array of region objects with specific properties for each\n\tExample VERTICAL region objects - all dimensions are percents\n\t\t[{object:title, marginTop:10, maxWidth:80, minHeight:20, align:\"left\", valign:\"top\"},\n\t\t{object:content, marginTop:5, maxWidth:90}, // note, middle gets no minHeight\n\t\t{object:nav, marginTop:5, maxWidth:80, height:20, backgroundColor:\"red\"}]\n\tnote: no minHeight for middle regions - but heights on any region\n\talign defaults to middle for the regions\n\tvalign defaults to top and bottom for the top and bottom region and middle for the others\n\tbackgroundColor applies a backing color to the region\n\tExample HORIZONTAL region objects\n\t\t[{object:col1, marginLeft:10, maxHeight:80, width:20, valign:\"bottom\"},\n\t\t{object:col2, marginLeft:5, maxHeight:90, align:\"middle\"}, // note, middle gets no minWidth\n\t\t{object:col3, marginLeft:5, maxHeight:80, minWidth:20, align:\"left\", valign:\"top\"}]\n\talign defaults to left and right for the outer regions and middle for the inside regions\n\tvalign defaults to top for all the regions\nlastMargin - (default 0) the margin at the bottom (vertical) or at the right (horizontal)\nbackgroundColor - (default null) background color for the whole holder\nvertical - (default true) set to false for horizontal layout\nregionShape - (default null) a zim or createjs Shape object to show bounds (gets added to holder)\n\tcan toggle on and off with B key - but must pass in the Shape to use the B key\nscalingTarget - (default holder) an object used as the bounds of the region scaling\n\tsetting a scalingTarget will also set the bounds of the holder to the scalingTarget bounds\n\tit does not scale the holder - only scales the region objects inside\nhideKey - (default B) is the hot key for hiding and showing the bounds\n\nMETHODS\nresize() - resize based on new bounds of the holder (or scalingObject)\ndispose() - removes the B key listener (otherwise, nothing to dispose)\naddShape(shape) - adds a bounding shape dynamically\nremoveShape() - permanently removes the bounding shape\ndisable() - disables all the layout (shape and sizing)\nenable() - enables all the layout (shape and sizing)\nif you want to get rid of the objects then you need to do so in your app\n\nPROPERTIES\nregions - the regions object - if changed will have to call resize() manually\n\nDESCRIPTION OF FLEXIVE DESIGN\nhere described with vertical layout - horizontal is similar but rotated 90\nthe content in the middle will try and expand against the top and bottom\nuntil it forces the top and bottom to their minimum percents\nif the content hits its maximum width percent first then the top and bottom\nwill fill up the rest of the height until they reach their maximum widths\n--*///+80\n\tzim.Layout = function(holder, regions, lastMargin, backgroundColor, vertical, regionShape, scalingObject, hideKey) {\n\n\t\tvar sig = \"holder, regions, lastMargin, backgroundColor, vertical, regionShape, scalingObject, hideKey\";\n\t\tvar duo; if (duo = zob(zim.Layout, arguments, sig, this)) return duo;\n\t\tz_d(\"80\");\n\t\tthis.cjsEventDispatcher_constructor();\n\n\t\tif (zot(holder) || !holder.getBounds) {zog (\"zim pages - Layout(): please provide an object with bounds set that holds the objects being laid out\"); return;}\n\t\tscalingObject = (zot(scalingObject)) ? holder : scalingObject;\n\t\tif (!scalingObject.getBounds || !scalingObject.getBounds()) {zog (\"zim pages - Layout(): holder must have bounds set or provide a scalingObject with bounds\"); return;}\n\t\tvar bounds = scalingObject.getBounds();\n\t\tholder.setBounds(0,0,bounds.width,bounds.height);\n\t\t// note, Layout sets bounds of holder but does not scale the holder - only the objects in regions\n\t\t// it may be that the holder is scaled by some external process\n\t\t// but probably not if a scalingObject is used\n\n\t\tif (zot(lastMargin)) lastMargin = 0;\n\t\tif (zot(vertical)) vertical = true;\n\t\tif (zot(backgroundColor)) backgroundColor = \"\";\n\t\tif (zot(hideKey)) hideKey = \"B\";\n\t\tvar backing = new createjs.Shape(); // holds any backing colors\n\t\tvar that = this;\n\t\tthis.active = true;\n\n\t\t// loop through region objects and assign defaults\n\t\t// also check that regions can fit with values given\n\t\t// we basically do the same thing with horizontal and vertical layouts\n\t\t// but obviously one uses widths and the other heights, etc.\n\t\t// so adapted generic phrases of PRIMARY and SECONDARY\n\t\t// primary for vertical is in the Y direction and uses height and top\n\t\t// primary for horizontal is in the X direction and uses width and left\n\t\t// secondary for vertical is X and for horizontal is Y\n\t\t// min, absolute and margin values are only available in the primary\n\t\t// max values are only available in the secondary\n\t\t// align, valign and backgroundcolor is available for primary and secondary\n\t\t// absolute values (height, width) are to be used if given\n\t\t// if not given we try to maximize size and to adhere to min values\n\t\t// as calculations progress we calculate given, maxGiven and marginGiven values\n\t\t// these are temporary depending on the resizing and are always in the primary direction\n\t\t// secondary direction is quite simple\n\t\t// primary direction is quite complex involving a number of steps and even some recursion\n\n\t\tthis.regions = regions; // expose the regions object for dynamic adjustments then manual resize\n\n\t\tvar r; // used to hold a region in a loop\n\t\tvar totalAbsolute = 0;\n\t\tvar minPrimary = \"minWidth\";\n\t\tvar primary = \"width\";\n\t\tvar secondary = \"height\";\n\t\tvar marginPrimary = \"marginLeft\";\n\t\tvar maxSecondary = \"maxHeight\";\n\t\tvar axisPrimary = \"x\";\n\t\tvar axisSecondary = \"y\";\n\t\tif (vertical) {\n\t\t\tminPrimary = \"minHeight\";\n\t\t\tprimary = \"height\";\n\t\t\tsecondary = \"width\";\n\t\t\tmarginPrimary = \"marginTop\";\n\t\t\tmaxSecondary = \"maxWidth\";\n\t\t\taxisPrimary = \"y\";\n\t\t\taxisSecondary = \"x\";\n\t\t}\n\t\tfor (var i=0; i<regions.length; i++) {\n\t\t\tr = regions[i];\n\t\t\tif (!r.object || !r.object.getBounds()) {zog(\"zim pages - Layout(): each region object must have an object with setBounds() set\"); return;}\n\t\t\tif (!r[minPrimary]) r[minPrimary] = 0;\n\t\t\tif (!r[primary]) r[primary] = 0;\n\t\t\tif (!r.backgroundColor) r.backgroundColor = \"\";\n\t\t\tr.given = 0;\n\t\t\tr.maxGiven = 0;\n\t\t\tif (!r[marginPrimary]) r[marginPrimary] = 0;\n\t\t\tif (!r[maxSecondary]) r[maxSecondary] = 100;\n\t\t\tif (vertical) {\n\t\t\t\t// default alignment differs for orientation\n\t\t\t\tif (!r.align) r.align = \"middle\";\n\t\t\t\tif (!r.valign) {\n\t\t\t\t\tif (i==0) {r.valign = \"top\";}\n\t\t\t\t\telse if (i==regions.length-1) {r.valign = \"bottom\";}\n\t\t\t\t\telse {r.valign = \"middle\";}\n\t\t\t\t\tif (regions.length == 1) {r.valign = \"middle\"}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!r.valign) r.valign = \"top\";\n\t\t\t\tif (!r.align) {\n\t\t\t\t\tif (i==0) {r.align = \"left\";}\n\t\t\t\t\telse if (i==regions.length-1) {r.align = \"right\";}\n\t\t\t\t\telse {r.align = \"middle\";}\n\t\t\t\t\tif (regions.length == 1) {r.align = \"middle\"}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (r[primary]) r[minPrimary] = 0; // primary overrides minPrimary\n\t\t\ttotalAbsolute += r[primary] + r[marginPrimary];\n\t\t}\n\n\t\t// primaries (not minPrimaries) are absolute percentage and are kept no matter what\n\t\t// margins are absolute percentage and are kept no matter what\n\t\t// check if primaries and margins are more than 100%\n\t\ttotalAbsolute += lastMargin;\n\t\tif (totalAbsolute > 100) {zog(\"zim pages - Layout(): cannot fit regions into 100% bounds\"); return;}\n\t\tvar leftOverPrimary = 100-totalAbsolute;\n\n\t\tdistribute(); // also called from within resize function\n\t\tfunction distribute() {\n\t\t\t// distribute leftOverPrimary to any regions without a primary or a given (primary)\n\t\t\t// proportion based on primary dimension of objects in regions\n\t\t\t// apply this primary to given (primary)\n\t\t\tvar totalPrimaries = 0;\n\t\t\tfor (var i=0; i<regions.length; i++) {\n\t\t\t\tr = regions[i];\n\t\t\t\tr.given = 0;\n\t\t\t\tif (r[primary] == 0) totalPrimaries += r.object.getBounds()[primary];\n\t\t\t}\n\t\t\t// now we know total raw heights of objects needing height applied\n\t\t\t// loop back through and give these objects their proportion of what is left\n\t\t\tfor (var i=0; i<regions.length; i++) {\n\t\t\t\tr = regions[i];\n\t\t\t\tif (r[primary] == 0) r.given = r.object.getBounds()[primary] / totalPrimaries * leftOverPrimary;\n\t\t\t}\n\t\t}\n\n\t\tthis.resize = function() {\n\t\t\tif (!that.active) return;\n\t\t\tbounds = scalingObject.getBounds();\n\t\t\tholder.setBounds(0,0,bounds.width,bounds.height);\n\t\t\tbacking.graphics.clear();\n\t\t\tif (backgroundColor!=\"\") backing.graphics.f(backgroundColor).r(0,0,bounds.width,bounds.height);\n\n\t\t\tfor (var i=0; i<regions.length; i++) {\n\t\t\t\tr = regions[i];\n\t\t\t\tr.maxGiven = 0;\n\t\t\t\tr.marginGiven = 0;\n\t\t\t}\n\t\t\t// all the primaries are applied\n\t\t\t// but some objects might not need the primary because they have maxed out on maxSecondary\n\t\t\t// we need to give this extra primary back to the pool\n\t\t\t// and keep doing it until there are no more maxed objects\n\n\t\t\tvar keepGoing = true; var allCheck; var giveBack;\n\t\t\tvar p; var s; var boundsP; var boundsS; var maxGiven;\n\t\t\tvar leftOverPrimary2 = leftOverPrimary;\n\t\t\twhile (keepGoing) {\n\t\t\t\t// check for objects maxed in width\n\t\t\t\tgiveBack = 0;\n\t\t\t\tkeepGoing = false; allCheck = true;\n\t\t\t\t// we want to keep going unless all objects are maxed\n\t\t\t\t// or none of the objects are maxed\n\t\t\t\tfor (var i=0; i<regions.length; i++) {\n\t\t\t\t\tr = regions[i];\n\t\t\t\t\tif (r.given > 0 && r.maxGiven == 0) {\n\t\t\t\t\t\tp = r.object.getBounds()[primary];\n\t\t\t\t\t\ts = r.object.getBounds()[secondary];\n\t\t\t\t\t\tboundsP =  r.given * bounds[primary]/100;\n\t\t\t\t\t\tboundsS =  r[maxSecondary] * bounds[secondary]/100; // convert to pixels\n\t\t\t\t\t\tmaxGiven = s/p*boundsP;\n\t\t\t\t\t\tif (maxGiven > boundsS) {\n\t\t\t\t\t\t\t// maxed out so give back height\n\t\t\t\t\t\t\t// keepGoing=true;\n\t\t\t\t\t\t\t// store this as maxGiven property\n\t\t\t\t\t\t\t// might have to take it away if later minHeights are not met\n\t\t\t\t\t\t\tr.maxGiven = p/s*boundsS * 100/bounds[primary]; // convert back to percentage\n\t\t\t\t\t\t\tgiveBack += r.given - r.maxGiven;\n\t\t\t\t\t\t\tleftOverPrimary2 -= r.maxGiven;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tallCheck = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// !keepGoing was missing when secondary affects primary so took check out\n\t\t\t\t// if (!keepGoing) break;\n\t\t\t\tif (allCheck) break;\n\n\t\t\t\t// redistribute the extra stuff too all that are not maxed out and not with primary values\n\t\t\t\t// proportion based on primary dimension of objects in regions\n\t\t\t\t// apply this primary to given (primary)\n\t\t\t\ttotalPrimaries = 0;\n\t\t\t\tfor (var i=0; i<regions.length; i++) {\n\t\t\t\t\tr = regions[i];\n\t\t\t\t\tif (r[primary] == 0 && r.maxGiven == 0) totalPrimaries += r.object.getBounds()[primary];\n\t\t\t\t}\n\t\t\t\t// now we know total raw heights of objects needing height applied\n\t\t\t\t// loop back through and give these objects their proportion of what is left\n\t\t\t\tfor (var i=0; i<regions.length; i++) {\n\t\t\t\t\tr = regions[i];\n\t\t\t\t\tif (r[primary] == 0 && r.maxGiven == 0) r.given = r.object.getBounds()[primary] / totalPrimaries * leftOverPrimary2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if end regions have not met their minPrimaries\n\t\t\t// set those minPrimaries to primaries and resize again\n\t\t\t// divide leftover primary to regions with no set primary\n\t\t\t// maximize middle regions as this is usually content\n\t\t\t// if the edge regions have minPrimaries set them to minPrimary\n\t\t\t// if they do not have minPrimaries then proportion them equally with the rest\n\n\t\t\tvar scaleCheck = true;\n\t\t\tr = regions[0];\n\t\t\tif (r.maxGiven > 0) {\n\t\t\t\t if (r.maxGiven < r[minPrimary]) {r[primary] = r[minPrimary]; scaleCheck = false;}\n\t\t\t} else if (r.given > 0) {\n\t\t\t\t if (r.given < r[minPrimary]) {r[primary] = r[minPrimary]; scaleCheck = false;}\n\t\t\t}\n\t\t\tr = regions[regions.length-1];\n\t\t\tif (r.maxGiven > 0) {\n\t\t\t\t if (r.maxGiven < r[minPrimary]) {r[primary] = r[minPrimary]; scaleCheck = false;}\n\t\t\t} else if (r.given > 0) {\n\t\t\t\t if (r.given < r[minPrimary]) {r[primary] = r[minPrimary]; scaleCheck = false;}\n\t\t\t}\n\t\t\tif (!scaleCheck) {\n\t\t\t\t// recalculate leftOverPrimary\n\t\t\t\ttotalAbsolute = 0;\n\t\t\t\tfor (var i=0; i<regions.length; i++) {\n\t\t\t\t\tr = regions[i];\n\t\t\t\t\ttotalAbsolute += r[primary] + r[marginPrimary];\n\t\t\t\t}\n\t\t\t\ttotalAbsolute += lastMargin;\n\t\t\t\tif (totalAbsolute > 100) {zog(\"zim build - Layout(): cannot fit regions into 100% bounds\"); return;}\n\n\t\t\t\tleftOverPrimary = 100-totalAbsolute;\n\t\t\t\tdistribute();\n\t\t\t\tthat.resize();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// if specified all primaries or all maxed in secondary\n\t\t\t// then distribute based on inner margins\n\t\t\t// watch out - may need to revert to original margins if page is resized\n\t\t\t// so introduce a new marginGiven property\n\n\t\t\tvar allHeights = true; var marginTotal = 0; var primaryTotal = 0;\n\t\t\tfor (var i=0; i<regions.length; i++) {\n\t\t\t\tr = regions[i];\n\t\t\t\tmarginTotal += r[marginPrimary];\n\t\t\t\tif (r[primary] > 0) primaryTotal += r[primary];\n\t\t\t\telse if (r.maxGiven > 0) primaryTotal += r.maxGiven;\n\t\t\t\telse if (r.given > 0) primaryTotal += r.given;\n\t\t\t\tif (r[primary] == 0) {\n\t\t\t\t\tallHeights = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (allHeights || allCheck) {\n\t\t\t\tmarginTotal += lastMargin;\n\t\t\t\tvar extra = 100-primaryTotal-marginTotal;\n\t\t\t\t// remove two outer margins\n\t\t\t\tmarginTotal -= (lastMargin + regions[0][marginPrimary]);\n\t\t\t\tif (extra != 0 && marginTotal != 0) { // divide up extra margin space\n\t\t\t\t\tfor (var i=0; i<regions.length; i++) {\n\t\t\t\t\t\tif (i==0) continue;\n\t\t\t\t\t\tr = regions[i];\n\t\t\t\t\t\tr.marginGiven = r[marginPrimary]/marginTotal*(marginTotal+extra);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// ready to fit objects into regions, align and draw any bounds and background colors\n\t\t\tvar pPos=0; // primary position (x for horizontal, y for vertical)\n\t\t\tvar sPos=0; // secondary position\n\t\t\tvar p;  \t// primary dimension (width for horizontal, height for vertical)\n\t\t\tvar s;\t\t// secondary dimension\n\t\t\tvar f; \t\t// fit variable will receive a handy object with new data and original region bounds data\n\t\t\t\t\t\t// {x:obj.x, y:obj.y, width:newW, height:newH, scale:scale, bX:left, bY:top, bWidth:width, bHeight:height}\n\n\t\t\tvar addedW; var addedH;\t// just a little offscreen coloring to help page transitions\n\t\t\tif (regionShape && regionShape.graphics) {\n\t\t\t\tvar g = regionShape.graphics;\n\t\t\t\tg.c();\n\t\t\t}\n\t\t\tfor (var i=0; i<regions.length; i++) {\n\t\t\t\tr = regions[i];\n\n\t\t\t\t// calculate primary data\n\t\t\t\tif (r.marginGiven > 0) pPos += r.marginGiven * bounds[primary]/100; // convert to pixels\n\t\t\t\telse pPos += r[marginPrimary] * bounds[primary]/100;\n\t\t\t\tif (r[primary] > 0) {p = r[primary];}\n\t\t\t\telse if (r.maxGiven > 0) {p = r.maxGiven;}\n\t\t\t\telse if (r.given > 0) {p = r.given;}\n\t\t\t\telse {p = 0;}\n\t\t\t\tp = p * bounds[primary]/100;\n\n\t\t\t\t// calculate secondary data\n\t\t\t\ts = r[maxSecondary] * bounds[secondary]/100;\n\t\t\t\tsPos = (bounds[secondary]-s)/2;\n\n\t\t\t\t// fit the objects into the region, align and draw any regionShape\n\t\t\t\t// this is slightly different for different orientations\n\t\t\t\tif (vertical) f = zim.fit(r.object,sPos,pPos,s,p);\n\t\t\t\telse f = zim.fit(r.object,pPos,sPos,p,s);\n\n\t\t\t\t// handle alignment\n\t\t\t\tif (r.valign == \"top\") r.object.y = f.bY;\n\t\t\t\telse if (r.valign == \"bottom\") r.object.y = f.bY+f.bHeight-f.height;\n\t\t\t\tif (r.align == \"left\") r.object.x = f.bX;\n\t\t\t\telse if (r.align == \"right\") r.object.x = f.bX+f.bWidth-f.width;\n\t\t\t\tif (regionShape && regionShape.graphics) {\n\t\t\t\t\tg.s(\"white\").ss(2).r(f.bX,f.bY,f.bWidth,f.bHeight);\n\t\t\t\t\tg.s(\"#ff8203\").sd([20,20]).r(f.bX,f.bY,f.bWidth,f.bHeight).sd();\n\t\t\t\t}\n\n\t\t\t\t// draw any backing colors for region\n\t\t\t\t// transitions in ZIM Pages need a little extra overlap on page edges\n\t\t\t\taddedH = addedW = 0;\n\t\t\t\tif (pPos == 0 || (pPos+p) == bounds[primary]) if (vertical) {addedH=1} else {addedW=1};\n\t\t\t\tif (s == bounds[secondary]) if (vertical) {addedW=1} else {addedH=1};\n\t\t\t\tif (r.backgroundColor != \"\") backing.graphics.f(r.backgroundColor).r(f.bX, f.bY, f.bWidth+addedW, f.bHeight+addedH);\n\n\t\t\t\t// increase our primary position\n\t\t\t\tpPos += p;\n\t\t\t}\n\t\t}\n\n\t\tthis.resize();\n\n\t\t// add regionShape if there is one and backing shape\n\t\tif (regionShape) holder.addChild(regionShape);\n\t\tholder.addChildAt(backing,0);\n\n\t\t// key listener and other methods:\n\n\t\t// add key listener to hide and show the bounds\n\t\twindow.addEventListener(\"keydown\", keyEvent);\n\t\tfunction keyEvent(e) {\n\t\t\tif (!e) e=event;\n\n\t\t\tif (regionShape) {\n\t\t\t\tif (String.fromCharCode(e.keyCode) == hideKey.toUpperCase()) { // B\n\t\t\t\t\tregionShape.visible = !regionShape.visible;\n\t\t\t\t\tif (regionShape.getStage()) regionShape.getStage().update();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.disable = function() {\n\t\t\tthat.active = false;\n\t\t\twindow.removeEventListener(\"keydown\", keyEvent);\n\t\t\tif (regionShape) regionShape.alpha = 0;\n\t\t}\n\n\t\tthis.enable = function() {\n\t\t\tthat.active = true;\n\t\t\twindow.addEventListener(\"keydown\", keyEvent);\n\t\t\tthat.resize();\n\t\t\tif (regionShape) regionShape.alpha = 1;\n\t\t}\n\n\t\tthis.removeShape = function() { // use for final app\n\t\t\tif (regionShape) {\n\t\t\t\tregionShape.graphics.clear();\n\t\t\t\tholder.removeChild(regionShape);\n\t\t\t\tregionShape = null;\n\t\t\t\tregionShape = false;\n\t\t\t}\n\t\t\twindow.removeEventListener(\"keydown\", keyEvent);\n\t\t}\n\n\t\tthis.addShape = function(shape, target) {\n\t\t\tthat.removeShape();\n\t\t\tregionShape = shape;\n\t\t\twindow.addEventListener(\"keydown\", keyEvent);\n\t\t\tholder.addChild(regionShape);\n\t\t\tthat.resize();\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\t// does not really dispose in case a resize is needed\n\t\t\t// it has no events aside from the keydown\n\t\t\t// which gets removed when we removeShape below\n\t\t\tthat.removeShape();\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.Layout, createjs.EventDispatcher, \"clone\", \"cjsEventDispatcher\", false);\n\t//-80\n\n/*--\nzim.LayoutManager = function()\n\nLayoutManager\nzim class\n\nDESCRIPTION\nAdd Zim Layout objects to a LayoutManager object and update them all at once.\nYou can remove all layout region bound shapes at once\nas well as remove the B key to show the region bound shapes.\nFor a final project, call the dispose().\nThis will remove all shapes and key events.\nThe layouts will remain in place to handle multiple screen sizes.\n\nEXAMPLE\n// these would be containers with your content\n// make sure that bounds are set on containers\n// you may want to hard code bounds for clarity\nvar header = new zim.Rectangle(500, 200, \"blue\");\nvar content = new zim.Rectangle(600, 500, \"green\");\nvar footer = new zim.Rectangle(500, 200, \"blue\");\nstage.addChild(header, content, footer);\n\n// make the Layout - more useful for FULL scale mode\nvar layout = new zim.Layout({\n\tholder:stage,\n\tregions:[\n\t\t{object:header, marginTop:10, maxWidth:80, minHeight:10, valign:\"top\"},\n\t\t{object:content, marginTop:5, maxWidth:90}, // note, middle gets no minHeight\n\t\t{object:footer, marginTop:5, maxWidth:80, height:10}\n\t],\n\tlastMargin:5\n});\n\n// add to LayoutManager to resize or dispose all layouts together\n// disposing only removes keyboard events to show boundaries\nvar manager = new zim.LayoutManager();\nmanager.add(layout);\n\nframe.on(\"resize\", function() {\n\tmanager.resize();\n\tstage.update();\n});\n\nstage.update();\nEND EXAMPLE\n\nMETHODS\nadd(layout) - registers a layout with the LayoutManager\nresize() - resizes all the layouts in the LayoutManager\ndisable() - disables all the layouts in the LayoutManager (shapes and sizing)\nenable() - enables all the layouts in the LayoutManager (shapes and sizing)\ndispose() - only removes bounds shapes and keyboard events (does not really dispose)\n\nNOTE: to just hide bounds, you use the B key\n\nPROPERTIES\nitems - an array of all Layout objects added with add()\n--*///+81\n\tzim.LayoutManager = function() {\n\t\tz_d(\"81\");\n\t\tvar that = this;\n\t\tthis.items = [];\n\t\tthis.add = function(layout) {\n\t\t\tthat.items.push(layout);\n\t\t}\n\t\tthis.resize = function() {\n\t\t\tfor (var i=0; i<that.items.length; i++) {\n\t\t\t\tthat.items[i].resize();\n\t\t\t}\n\t\t}\n\t\tthis.disable = function() {\n\t\t\tfor (var i=0; i<that.items.length; i++) {\n\t\t\t\tthat.items[i].disable();\n\t\t\t}\n\t\t}\n\t\tthis.enable = function() {\n\t\t\tfor (var i=0; i<that.items.length; i++) {\n\t\t\t\tthat.items[i].enable();\n\t\t\t}\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tfor (var i=0; i<that.items.length; i++) {\n\t\t\t\tthat.items[i].removeShape(); // also removes key events\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}//-81\n\n/*--\nzim.Parallax = function(stage, damp, layers, auto)\n\nParallax\nzim class\n\nDESCRIPTION\nTakes objects as layers and sets properties based on an input,\nfor instance, each layer could move a different x based on position of mouseX\nor each layer could scale a different amount based on scroll of y.\nThe types of input are mouseX, mouseY, scrollX, scrollY or custom.\nThe types of properties to change could be x, y, scaleX, scaleY, rotation, alpha, frameNumber, etc.\nParallax allows scale to be a property which scales scaleX and scaleY together.\nParallax allows frame to be a property and calls gotoAndStop() on a Sprite frame.\nParallax really just manages multiple ProportionDamp objects.\nFor proper parallax, the objects closer move more than the objects farther back.\n\nEXAMPLE\n// make assets to move around\n// these could be pictures, shapes, containers, etc.\nvar backing = new zim.Rectangle(800, 200, \"yellow\");\nbacking.center(stage);\nvar mid = new zim.Rectangle(400, 200, \"green\");\nmid.center(stage).y += 20;\nvar front = new zim.Circle(60, \"red\");\nfront.center(stage).y += 80;\n\n// make Parallax object - here we move with stage mouseX and mouseY\nvar parallax = new zim.Parallax(stage, .1, [\n\t{obj:backing, prop:\"x\", propChange:50}, {obj:backing, prop:\"y\", propChange:40, input:\"mouseY\"},\n\t{obj:mid, prop:\"x\", propChange:100}, {obj:mid, prop:\"y\", propChange:80, input:\"mouseY\"},\n\t{obj:front, prop:\"x\", propChange:150}, {obj:front, prop:\"y\", propChange:100, input:\"mouseY\"}\n]);\n\nstage.update();\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nstage - the stage\ndamp - (default .1) the damp value with 1 being no damping and 0 being no movement\nlayers - (default null) an array of layer objects, the format as below\n\tExample: to move an obj 200 px in the x as the window scrolls from 100 to 300 px in the y\n\t\t[{obj:obj, prop:\"x\", propChange:200, input:\"scrollY\", inMin:100, inMax:300, factor:1, integer:false}, etc.]\n\tobj - the object whose property is being changed\n\tprop - the property that is being changed\n\tpropChange - how much you want the property to change\n\tinput - (default mouseX) but can also be mouseY, scrollX, scrollY\n\tinMin - (default 0) minimum input range\n\tinMax - (default stageW (for x prop) stageH (for y prop)) maximum input range\n\tfactor - (default 1) set factor to -1 to change in the opposite direction\n\tinteger - (default false) set to true to round the value to an integer\n\tExample 2: a traditional mouse move parallax for one object\n\t\t[{obj:obj, prop:\"x\", propChange:100}, {obj:obj, prop:\"y\", propChange:50, input:\"mouseY\"}, etc.]\n\tyou would probably have more objects to follow\n\tor you can add these one at a time with the p.addLayer({layer object properties});\nauto - (default true) uses the specified input\n\tif auto is set to false, you must make your own Ticker and use the step(input) method\nNOTE: ticker and fps parameters have been removed - see zim.Ticker to set\n\nMETHODS\naddLayer({layer object properties}) - adds a layer\nremoveLayer(index) - removes a layer based on order added\nstep(input) - used when auto is false to send in custom input data\nimmediate([]) - immediately sets the target value for each layer object (no damping)\ndispose() - removes listeners\n\nPROPERTIES\ndamp - allows you to dynamically change the damping\n--*///+68\n\tzim.Parallax = function(stage, damp, layers, auto) {\n\n\t\tvar sig = \"stage, damp, layers, auto\";\n\t\tvar duo; if (duo = zob(zim.Parallax, arguments, sig, this)) return duo;\n\t\tz_d(\"68\");\n\t\tif (zot(stage) || !stage.getBounds) {zog(\"zim build - Parallax(): please pass in the stage with bounds as first parameter\"); return;}\n\t\tif (!stage.getBounds()) {zog(\"zim build - Parallax(): Please give the stage bounds using setBounds()\");\treturn;}\n\t\tif (zot(auto)) auto = true;\n\n\t\tvar stageW = stage.getBounds().width;\n\t\tvar stageH = stage.getBounds().height;\n\n\t\tvar that = this;\n\n\t\t// public properties\n\t\tvar _damp = (zot(damp)) ? .1 : damp;\n\n\t\t// public methods (do not get hoisted so define early)\n\t\t// addLayer works as a public method\n\t\t// and also is called from the object in case we add layers via the Parallax object parameters\n\t\t// the function prepares ProportionDamp objects for two values\n\t\t// and stores them on the layer object\n\t\t// and also stores the desired amounts on the layer objects themselves\n\t\t// finally, the layer object is added to the myLayers private property\n\t\t// the timer then loops through these layers and handles things from there\n\t\t// obj, distanceX, distanceY, minX, minY, maxX, maxY, factor, targetRound\n\t\tthis.addLayer = function(layer) {\n\t\t\t//{obj, prop, propChange, input, inMin, inMax, factor, integer}\n\t\t\tif (zot(layer.obj) || zot(layer.prop) || zot(layer.propChange)) return;\n\t\t\tvar obj = {obj:layer.obj, prop:layer.prop};\n\t\t\tobj[obj.prop] = layer.propChange;\n\t\t\tif (zot(layer.input)) layer.input = \"mouseX\";\n\t\t\tobj.input = layer.input;\n\n\t\t\tvar inMin = (zot(layer.inMin)) ? 0 : layer.inMin;\n\t\t\tvar inMax = (zot(layer.inMax)) ? stageW : layer.inMax;\n\t\t\tvar factor = (zot(layer.factor)) ? 1 : layer.factor;\n\t\t\tvar integer = (zot(layer.integer)) ? false : layer.integer;\n\n\t\t\t// baseMin, baseMax, targetMin, targetMax, damp, factor, targetRound\n\t\t\tobj[\"p_\"+obj.prop] = new zim.ProportionDamp(inMin, inMax, 0, obj[obj.prop], _damp, factor, integer);\n\t\t\tif (obj.prop == \"scale\") {\n\t\t\t\tobj[\"s_\"+obj.prop] = obj.obj.scaleX; // helper to allow scale to be property\n\t\t\t} else if (obj.prop == \"frame\") {\n\t\t\t\tobj[\"s_\"+obj.prop] = obj.obj.currentFrame;\n\t\t\t} else {\n\t\t\t\tobj[\"s_\"+obj.prop] = obj.obj[obj.prop]; // obj.s_x = obj.obj.x for example\n\t\t\t}\n\t\t\tmyLayers.push(obj);\n\t\t\treturn myLayers.length-1;\n\t\t}\n\n\t\tthis.removeLayer = function(index) {\n\t\t\tif (zot(index)) return;\n\t\t\tvar layer = myLayers[index];\n\t\t\tlayer[\"p_\"+layer.prop].dispose();\n\t\t\tmyLayers.splice(index,1);\n\t\t}\n\n\t\tthis.immediate = function(array) {\n\t\t\tvar o;\n\t\t\tfor (var i=0; i<myLayers.length; i++) {\n\t\t\t\to = myLayers[i];\n\t\t\t\to[\"p_\"+o.prop].immediate(array[i]);\n\t\t\t}\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tmyLayers = null;\n\t\t\tif (auto) zim.Ticker.remove(zimTicker);\n\t\t\treturn true;\n\t\t}\n\n\t\t// private properties\n\t\t// here are any layers that come in from Parallax object parameters\n\t\tlayers = (zot(layers)) ? [] : layers;\n\n\t\t// we now are going to process these layers with the public addLayer method\n\t\t// this will add the processed layers to the private property, myLayers\n\t\tvar myLayers = [];\n\t\tfor (var i=0; i<layers.length; i++) {\n\t\t\tthis.addLayer(layers[i]);\n\t\t}\n\n\t\tif (auto) {\n\t\t\tvar zimTicker = zim.Ticker.add(animate, stage);\n\t\t}\n\n\t\t// loop though our layers and apply the converted proportion damping\n\t\tfunction animate(e) {\n\t\t\tthat.step();\n\t\t}\n\n\t\tthis.step = function(custom) {\n\t\t\tvar o; var input;\n\t\t\tfor (var i=0; i<myLayers.length; i++) {\n\t\t\t\to = myLayers[i];\n\t\t\t\tif (zot(custom)) {\n\t\t\t\t\tif (o.input == \"mouseX\") input = stage.mouseX;\n\t\t\t\t\telse if (o.input == \"mouseY\") input = stage.mouseY;\n\t\t\t\t\telse if (o.input == \"scrollX\") input = zim.scrollX();\n\t\t\t\t\telse if (o.input == \"scrollY\") input = zim.scrollY();\n\t\t\t\t} else {\n\t\t\t\t\tinput = custom;\n\t\t\t\t}\n\t\t\t\t// damp object at property to start value + converted goal based on input\n\t\t\t\tif (o.prop == \"scale\") {\n\t\t\t\t\to.obj.scaleX = o.obj.scaleY = o[\"s_\"+o.prop] + o[\"p_\"+o.prop].convert(input);\n\t\t\t\t} else if (o.prop == \"frame\") {\n\t\t\t\t\to.obj.gotoAndStop(o[\"s_\"+o.prop] + o[\"p_\"+o.prop].convert(input));\n\t\t\t\t} else {\n\t\t\t\t\to.obj[o.prop] = o[\"s_\"+o.prop] + o[\"p_\"+o.prop].convert(input);\n\t\t\t\t\t// for x on mouseX we split the destination range in two for a centered parallax\n\t\t\t\t\tif (o.input == \"mouseX\" && auto) o.obj[o.prop] -= o[o.prop] / 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tObject.defineProperty(that, 'damp', {\n\t\t\tget: function() {\n\t\t\t\treturn _damp;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\t_damp = value;\n\t\t\t\tvar o;\n\t\t\t\tfor (var i=0; i<myLayers.length; i++) {\n\t\t\t\t\to = myLayers[i];\n\t\t\t\t\to[\"p_\"+o.prop].damp = _damp;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t}//-68\n\n\n/*--\nzim.Scroller = function(backing, speed, direction, horizontal, gapFix, stage, container)\n\nScroller\nzim class extends a createjs.EventDispatcher\n\nDESCRIPTION\nScroller animates a backing either horizontally or vertically (not both).\nThe Scroller object will create a clone of the backing\nand animate and swap the backgrounds when needed.\n\nNOTE: A scroller can be added to a zim.Accelerator object\nthis will allow the percentSpeed to be synched with other Scroller and Dynamo objects\nSee http://zimjs.com/code/zide/\n\nEXAMPLE\nvar one = new zim.Rectangle(1200, 400, \"red\");\nframe.makeCircles().center(one);\nstage.addChild(one);\n\nvar scroller = new zim.Scroller(one);\n\nstage.update();\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nbackground - an object to animate (make start and end edges match to be seemless)\nspeed - (default 1) how fast in pixels per second the animation is going\ndirection - (default 1) set to -1 for left or down\nhorizontal - (default true) set to false to animate vertically\n\tyou can adjust the speed and direction properties dynamically\n\tyou cannot adjust the backings and horizontal dynamically\n\tto change your animation, dispose() of the Scroller object and make a new one\n\tdisposing just removes the ticker - you have to remove the backings\n\tNOTE: the gapFix and ticker parameters have been removed - see zim.Ticker\ngapFix - (default 0) if a thin line appears when changing speed - try setting to 1 or 2\nstage - (default background.stage) if the backround is not on the stage then need to pass the stage it will be on\ncontainer - (default stage) what bounds are used for wrapping the background\n\nMETHODS\npause(state) - state defaults to true and pauses the scroller (sets speed to 0)\n\tset state to false to unpause the scroller (sets speed to speed before pausing)\ndispose() - get rid of the event listeners - you need to remove the backings (see backing properties)\n\nPROPERTIES\nbacking1 - the original backing passed in\nbacking2 - the cloned backing made from the original backing\nspeed - how fast the animation is going in pixels per frame\nbaseSpeed - the scroller speed when it was first made (or can override)\n\tused to determine percentage speed for percentSpeed property\npercentSpeed - get or set the percentage of the baseSpeed\n\tthis allows you to animate multiple scrollers relative to one another\n\tSee ScrollerManager class\ndirection - either left or right if horizontal or up or down if not horizontal\npause - read only - true if paused and false if not - must be set with pause() method\n\nEVENTS\nDispatches a pause event when paused is complete (sometimes a delay to slow to pause)\n--*///+69\n\tzim.Scroller = function(backing, speed, direction, horizontal, gapFix, stage, container) {\n\t\tvar sig = \"backing, speed, direction, horizontal, gapFix, stage, container\";\n\t\tvar duo; if (duo = zob(zim.Scroller, arguments, sig, this)) return duo;\n\n\t\tz_d(\"69\");\n\t\tthis.cjsEventDispatcher_constructor();\n\t\tvar b1 = this.backing1 = backing;\n\t\tif (zot(b1) || !b1.getBounds) return;\n\t\tvar b2 = this.backing2 = backing.clone();\n\t\tb1.parent.addChild(b2);\n\t\tif (zot(horizontal)) horizontal = true;\n\t\tif (zot(gapFix)) gapFix = 0;\n\t\tvar that = this; // we keep animate protected but want to access public properties\n\n\t\t// here are the public properties that can be changed\n\t\tthis.speed = (zot(speed)) ? 1 : speed;\n\t\tvar lastSpeed = this.baseSpeed = this.speed;\n\t\tthis.direction = (zot(direction)) ? 1 : direction;\n\t\tvar scale = horizontal ? b1.scaleX : b1.scaleY;\n\n\t\tif (!b1.getBounds()) {\n\t\t\tzog(\"zim build - Scroller(): please setBounds() on backing objects\");\n\t\t\treturn;\n\t\t}\n\t\tif (!stage && !b1.getStage()) {\n\t\t\tzog(\"zim build - Scroller(): please pass in stage parameter or add backing objects to stage to start\");\n\t\t\treturn;\n\t\t}\n\t\tstage = stage||b1.getStage();\n\t\tif (zot(container)) container = stage;\n\t\tif (!container.getBounds()) {zog(\"zim build - Scroller(): please setBounds() on container or stage if no container\"); return;}\n\n\t\tvar w = b1.getBounds().width*scale-gapFix;\n\t\tvar h = b1.getBounds().height*scale-gapFix;\n\n\t\tvar viewW;\n\t\tvar viewH;\n\n\t\tif (horizontal) {\n\t\t\tb2.x = w;\n\t\t} else {\n\t\t\tb2.y = h;\n\t\t}\n\n\t\tvar pausing = false; // for in the act of pausing\n\t\tvar zimTicker = zim.Ticker.add(animate, stage);\n\n\t\tfunction animate(e) {\n\t\t\tif (!viewW) {\n\t\t\t\tviewW = container.getBounds().width;\n\t\t\t\tviewH = container.getBounds().height;\n\t\t\t}\n\t\t\t// pausing the ticker does not really pause the ticker (weird)\n\t\t\tif (that.speed == 0 || that.direction == 0) {return;}\n\n\t\t\tif (horizontal) {\n\t\t\t\tb1.x -= that.speed*that.direction;\n\t\t\t\tif (b1.x < b2.x) {\n\t\t\t\t\tb2.x = b1.x + w;\n\t\t\t\t} else {\n\t\t\t\t\tb2.x = b1.x - w;\n\t\t\t\t}\n\t\t\t\tif (that.direction * that.speed > 0) {\n\t\t\t\t\tif (b2.x < 0 && b1.x < b2.x) {\n\t\t\t\t\t\tb1.x = b2.x + w;\n\t\t\t\t\t} else if (b1.x < 0 && b2.x < b1.x) {\n\t\t\t\t\t\tb2.x = b1.x + w;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (b2.x > viewW && b2.x > b1.x) {\n\t\t\t\t\t\tb2.x = b1.x - w;\n\t\t\t\t\t} else if (b1.x > viewW && b1.x > b2.x) {\n\t\t\t\t\t\tb1.x = b2.x - w;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tb1.y -= that.speed*that.direction;\n\t\t\t\tif (b1.y < b2.y) {\n\t\t\t\t\tb2.y = b1.y + h;\n\t\t\t\t} else {\n\t\t\t\t\tb2.y = b1.y - h;\n\t\t\t\t}\n\t\t\t\tif (that.direction * that.speed > 0) {\n\t\t\t\t\tif (b2.y < 0 && b1.y < b2.y) {\n\t\t\t\t\t\tb1.y = b2.y + h;\n\t\t\t\t\t} else if (b1.y < 0 && b2.y < b1.y) {\n\t\t\t\t\t\tb2.y = b1.y + h;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (b2.y > viewH && b2.y > b1.y) {\n\t\t\t\t\t\tb2.y = b1.y - h;\n\t\t\t\t\t} else if (b1.y > viewH && b1.y > b2.y) {\n\t\t\t\t\t\tb1.y = b2.y - h;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.paused = false;\n\t\tthis.pause = function(state, time) {\n\t\t\tif (zot(state)) state = true;\n\t\t\tif (zot(time)) time = 0;\n\t\t\tif (state) {\n\t\t\t\tlastSpeed = that.speed;\n\t\t\t\tif (time > 0) {\n\t\t\t\t\tpausing = true;\n\t\t\t\t\tzim.animate({target:that, obj:{pausingSpeed:0}, ticker:false, time:time, call:function() {\n\t\t\t\t\t\tthat.speed = 0;\n\t\t\t\t\t\tthat.paused = true;\n\t\t\t\t\t\tpausing = false;\n\t\t\t\t\t\tthat.dispatchEvent(\"pause\");\n\t\t\t\t\t}});\n\t\t\t\t} else {\n\t\t\t\t\tpausing = false;\n\t\t\t\t\tthat.speed = 0;\n\t\t\t\t\tthat.paused = true;\n\t\t\t\t\tsetTimeout(function() {that.dispatchEvent(\"pause\");}, 10);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpausing = false;\n\t\t\t\tif (time > 0) {\n\t\t\t\t\tzim.animate({target:that, obj:{pausingSpeed:lastSpeed}, ticker:false, time:time, call:function() {\n\t\t\t\t\t\tthat.speed = lastSpeed;\n\t\t\t\t\t\tthat.paused = false;\n\t\t\t\t\t\tpausing = false;\n\t\t\t\t\t}});\n\t\t\t\t} else {\n\t\t\t\t\tthat.speed = lastSpeed;\n\t\t\t\t\tthat.paused = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn that;\n\t\t}\n\n\t\tObject.defineProperty(that, 'percentSpeed', {\n\t\t\tget: function() {\n\t\t\t\tif (that.baseSpeed == 0) return NaN;\n\t\t\t\treturn that.speed / that.baseSpeed * 100;\n\t\t\t},\n\t\t\tset: function(percent) {\n\t\t\t\tif (pausing || that.paused) return;\n\t\t\t\tthat.speed = that.baseSpeed * percent / 100;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(that, 'pausingSpeed', {\n\t\t\tget: function() {\n\t\t\t\tif (that.baseSpeed == 0) return NaN;\n\t\t\t\treturn that.speed / that.baseSpeed * 100;\n\t\t\t},\n\t\t\tset: function(percent) {\n\t\t\t\tthat.speed = that.baseSpeed * percent / 100;\n\t\t\t}\n\t\t});\n\n\t\tthis.dispose = function() {\n\t\t\tif (zon) zog(\"bye from Scroller\");\n\t\t\tzim.Ticker.remove(zimTicker);\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.Scroller, createjs.EventDispatcher, null, \"cjsEventDispatcher\");\n\t//-69\n\n\n/*--\nzim.Dynamo = function(sprite, speed, label, startFrame, endFrame, update, reversable)\n\nDynamo\nzim class - extends a createjs EventDispatcher\n\nDESCRIPTION\nA Dynamo can run any zim.Sprite animation at varying speeds\nYou pass in an optional label, or start and end frames to define the animation frames\nYou can animate a Dynamo using speed or percentSpeed\npercentSpeed is handy for animating at speeds relative to other animations and scrollers\nYou can control Dynamo speeds with mouse position - or in a Parallax object\nA Dynamo loops automatically - you can pause it (with optional slowing or optional frame) and unpause it (with optional quickening)\nYou can also get or set its frame property at which point, it will loop from there (unless paused)\nA Dynamo dispatches a change event everytime the frame changes\nand a loop event everytime it loops to the start and a paused event when paused\n\nNOTE: A Dynamo can be added to a zim.Accelerator object\nthis will allow the percentSpeed to be synched with other Scroller and Dynamo objects\nSee http://zimjs.com/code/zide/\n\nNOTE: Dynamo is an alternative to a zim.Sprite.run() where you provide a set time for animation\nbut you can pause a Dynamo and then use run() and then unpause the Dynamo when the run is done\nIf you are controlling the Dynamo in a zim.Ticker.add() function,\nthen make sure to remove() the Ticker function when the Dynamo is paused\n\nEXAMPLE\n// we have a sprite of a guy and it has a \"walk\" animation\n// we can make this run faster and slower with an accelerator:\n// we pass in a speed of 30 fps and this becomes the baseSpeed\n\nvar dynamo = new zim.Dynamo(sprite, 30, \"walk\");\nzim.Ticker.add(function() {\n\t// the sprite will run at 0 speed when the cursor is at the left of the stage\n\t// and get faster as the cursor moves to the right\n\t// at the middle it will be 30 fps and at the right it will be 60 fps\n\tdynamo.percentSpeed = stage.MouseX/stageW*100*2;\n}, stage);\n\nHere we apply damping and make the sprite play backwards at the left of half stage\nvar dynamo = new zim.Dynamo(sprite, 30, \"walk\");\nzim.Ticker.add(function() {\n\t// will play backwards at 30 fps at left and forwards at 30 fps at right\n\t// it will stop at half the stage width\n\tdynamo.percentSpeed = stage.mouseX/stageW*200 - 100;\n}, stage);\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nsprite - the sprite to control\nspeed - (default 30) the frames per second at which to animate the sprite\nlabel - (default null) the label of the sprite to play (see zim.Sprite)\nstartFrame - (default 0) the frame to start the animation (ignored if a label is provided)\nendFrame - (default sprite.totalFrames) the frame to end the animation (ignored if a label is provided)\nupdate - (default false) set to true to update the stage (only do this if you are not already updating the stage!)\nreversable - (default true) will allow percentSpeed to be negative and reverse the animation.  Set to false to use absolute value.\n\nMETHODS\npause(state, time, frame) - the way to pause or unpause a Dynamo affecting the sprite animating\n\tstate - (default true) true pauses and setting the state to false will unpause the animation\n\ttime - (default 0) time in milliseconds to slow the animation down if pausing or speed it up if unpausing\n\tframe - (default null) which frame to pause on - overrides time (unless you want to do the calculation...)\ndispose() - cancels the requestAnimationFrame\n\nPROPERTIES\nframes - an array of frame numbers the Dynamo is acting on according to label, or startFrame, endFrame\nframe - the current frame of the Dynamo - this is sequential relative to frames\n\twhereas the actual Sprite frame may be different as labels can specify non-consecutive frame numbers\ntotalFrames - the total frames in frames (may be different than the Sprite's total frames)\npercentSpeed - get or set the percentage of the baseSpeed\n\tthis is what you should animate to speed up and slow down the sprite\n\tthis allows you to set the speed relative to other Sprites and Scrollers\nspeed - get or set the speed of the sprite in frames per second\nbaseSpeed - the start speed given in frames per second unless changed with this property\n\tthis affects the percentSpeed so usually it is not adjusted - but it can be\npaused - read only - whether the Dynamo is paused or not (by using the pause() method)\n\nEVENTS\ndispatches a change event when the Dynamo changes frame\ndispatches a loop event when the Dynamo loops (possibly in reverse)\ndispatches a pause event when the Dynamo is paused - could be delayed\n--*///+69.2\n\tzim.Dynamo = function(sprite, speed, label, startFrame, endFrame, update, reversable) {\n\t\tvar sig = \"sprite, speed, label, startFrame, endFrame, update, reversable\";\n\t\tvar duo; if (duo = zob(zim.Dynamo, arguments, sig, this)) return duo;\n\n\t\tz_d(\"69.2\");\n\t\tthis.cjsEventDispatcher_constructor();\n\n\t\tvar frames = this.frames = sprite.parseFrames(label, startFrame, endFrame);\n\t\tif (frames.length == 0) return;\n\t\tthis.totalFrames = frames.length;\n\t\tvar _frame = 0; // frame for getter and setter methods\n\t\tif (zot(speed)) speed = 30;\n\t\tif (zot(reversable)) reversable = true;\n\t\tvar lastSpeed = this.baseSpeed = this.speed = speed;\n\t\tif (zot(update)) update = false;\n\n\t\tvar that = this;\n\t\tvar requestID;\n\t\tvar speedFactor;\n\t\tvar lastTime = Date.now();\n\t\tvar currentTime;\n\t\tvar wait;\n\t\tvar endFrameRequest;\n\t\tvar pausing = false; // for in the act of pausing\n\t\tfunction doDynamo() {\n\t\t\trequestID = requestAnimationFrame(doDynamo);\n\t\t\tspeedFactor = frames[_frame].s;\n\t\t\tif (that.speed == 0 || speedFactor == 0) return;\n\t\t\twait = 1000/Math.abs(that.speed)*speedFactor;\n\t\t\tcurrentTime = Date.now();\n\t\t\tif (currentTime - lastTime > wait) {\n\t\t\t\tlastTime = currentTime;\n\t\t\t\tvar nextFrame = that.frame+((that.speed>0 || !reversable)?1:-1);\n\t\t\t\tvar loopCheck = false;\n\t\t\t\tif (nextFrame >= frames.length) {loopCheck = true; nextFrame = 0;}\n\t\t\t\tif (nextFrame < 0) {loopCheck = true; nextFrame = frames.length-1;}\n\t\t\t\tthat.frame = nextFrame;\n\t\t\t\tif (loopCheck) that.dispatchEvent(\"loop\");\n\t\t\t\tthat.dispatchEvent(\"change\");\n\t\t\t\tif (update && sprite.getStage()) sprite.getStage().update();\n\t\t\t\tif (!zot(endFrameRequest) && endFrameRequest == that.frame) {\n\t\t\t\t\tpausing = false;\n\t\t\t\t\tthat.speed = 0;\n\t\t\t\t\tthat.paused = true;\n\t\t\t\t\tthat.dispatchEvent(\"pause\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoDynamo();\n\n\t\tthis.paused = false;\n\t\tthis.pause = function(state, time, frame) {\n\t\t\tif (zot(state)) state = true;\n\t\t\tif (zot(time)) time = 0;\n\t\t\tif (state) {\n\t\t\t\tlastSpeed = that.speed;\n\t\t\t\tif (zot(frame)) {\n\t\t\t\t\tif (time > 0) {\n\t\t\t\t\t\tpausing = true;\n\t\t\t\t\t\tzim.animate({target:that, obj:{pausingSpeed:0}, ticker:false, time:time, call:function() {\n\t\t\t\t\t\t\tpausing = false;\n\t\t\t\t\t\t\tthat.speed = 0;\n\t\t\t\t\t\t\tthat.paused = true;\n\t\t\t\t\t\t\tthat.dispatchEvent(\"pause\");\n\t\t\t\t\t\t}});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpausing = false;\n\t\t\t\t\t\tthat.speed = 0;\n\t\t\t\t\t\tthat.paused = true;\n\t\t\t\t\t\tsetTimeout(function() {that.dispatchEvent(\"pause\");}, 10);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpausing = true;\n\t\t\t\t\tendFrameRequest = frame;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tendFrameRequest = null;\n\t\t\t\tif (time > 0) {\n\t\t\t\t\tpausing = true;\n\t\t\t\t\tzim.animate({target:that, obj:{pausingSpeed:lastSpeed}, ticker:false, time:time, call:function() {\n\t\t\t\t\t\tpausing = false;\n\t\t\t\t\t\tthat.speed = lastSpeed;\n\t\t\t\t\t\tthat.paused = false;\n\t\t\t\t\t}});\n\t\t\t\t} else {\n\t\t\t\t\tpausing = false;\n\t\t\t\t\tthat.speed = lastSpeed;\n\t\t\t\t\tthat.paused = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn that;\n\t\t}\n\n\t\tObject.defineProperty(that, 'frame', {\n\t\t\tget: function() {\n\t\t\t\treturn _frame;\n\t\t\t},\n\t\t\tset: function(frame) {\n\t\t\t\t_frame = Math.round(frame) % frames.length;\n\t\t\t\tvar f = frames[_frame];\n\t\t\t\tif (zot(f)) return;\n\t\t\t\tsprite.frame = f.f;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(that, 'percentSpeed', {\n\t\t\tget: function() {\n\t\t\t\tif (that.baseSpeed == 0) return NaN;\n\t\t\t\treturn that.speed / that.baseSpeed * 100;\n\t\t\t},\n\t\t\tset: function(percent) {\n\t\t\t\tif (pausing || that.paused) return;\n\t\t\t\tthat.speed = that.baseSpeed * percent / 100;\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(that, 'pausingSpeed', {\n\t\t\tget: function() {\n\t\t\t\tif (that.baseSpeed == 0) return NaN;\n\t\t\t\treturn that.speed / that.baseSpeed * 100;\n\t\t\t},\n\t\t\tset: function(percent) {\n\t\t\t\tthat.speed = that.baseSpeed * percent / 100;\n\t\t\t}\n\t\t});\n\n\t\tthis.dispose = function() {\n\t\t\tcancelAnimationFrame(requestID);\n\t\t}\n\t}\n\tzim.extend(zim.Dynamo, createjs.EventDispatcher, null, \"cjsEventDispatcher\");\n\t//-69.2\n\n/*--\nzim.Accelerator = function(objects)\n\nAccelerator\nzim class extends a createjs.EventDispatcher\n\nDESCRIPTION\nAn Accelerator lets you set percentSpeed properties of multiple objects\nsuch as zim.Scroller and zim.Dynamo objects\nA Dynamo object is a dynamic controller for a zim.Sprite object\nBoth the Scroller and the Dynamo can be controlled with percentSpeed\nThey can also be paused and paused over time\nAn Accelerator object lets you control these from one place\n\nEXAMPLE\n// assuming we have scroller1, scroller2 and a sprite\n// each of these would have a speed set so the scene animates nicely\nvar accelerator = new zim.Accelerator([scroller1, scroller2, sprite]);\n\n// here we increase the speed then decrease the speed of the whole scene:\nzim.animate({target:accelerator, obj:{percentSpeed:200}, time:1000, rewind:true, ticker:false});\n\n// here we change the speed of the whole scene based on the x position of the mouse\n// at the very left, the speed is -200 percent and at the right the speed is 200 percent\n// in the center, the speed is 0 - damping is optional but always looks better!\nvar damp = new zim.Damp(accelerator.percentSpeed);\nzim.Ticker.add(function() {\n\tvar newSpeed = (stage.mouseX-stageW/2)/(stageW/2)*100*2;\n\taccelerator.percentSpeed = damp.convert(newSpeed);\n}, stage);\nEND EXAMPLE\n\nPARAMETERS\nobjects - (default null) registers zim.Scroller or zim.Dynamo objects the Accelerator\n\tpass in a single object or an array of multiple objects\n\nMETHODS\nadd(objects) - registers zim.Scroller or zim.Dynamo objects with the Accelerator\n\tpass in a single object or an array of multiple objects\n\treturns the Accelerator object for chaining\nremove(objects) - unregisters a zim.Scroller or zim.Dynamo\n\tpass in a single object or an array of multiple objects\n\treturns the Accelerator object for chaining\npause(state, time, frameNumber) - pause (default) or unpause all the objects added to the Accelerator\n\tstate - (default true) set to false to unpause the objects added to the Accelerator\n\ttime - (default 0) time in milliseconds to slow down to a speed of 0 and pause\n\t\tthe pause event and paused property will be set after the time has passed\n\t\ttime is ignored if a frameNumber is provided\n\tframeNumber - (default null) get sprites to animate to the frameNumber (probably good for one sprite!)\n\t\tsetting this will make the scene ignore the time parameter above\ndispose() - calls dispose() on all the objects\n\nPROPERTIES\npercentSpeed - adjusts the speed relative to the baseSpeed of each items in the Accelerator\n\tthis can be dynamically changed to change all speeds relatively\npaused - whether the Accelerator is paused or not - only tracks if the pause() method is used\nitems - an array of all objects added with add()\n--*///+69.3\n\tzim.Accelerator = function(objects) {\n\t\tz_d(\"69.3\");\n\t\tthis.cjsEventDispatcher_constructor();\n\n\t\tvar that = this;\n\t\tthis.paused = false;\n\t\tthis.items = [];\n\t\tthis.paused = false;\n\t\tthis._percentSpeed = 100;\n\t\tthis.add = function(objects) {\n\t\t\tvar list;\n\t\t\tif (Array.isArray(objects)) {list = objects;} else {list = [objects];}\n\t\t\tvar ind;\n\t\t\tfor (var i=0; i<list.length; i++) {\n\t\t\t\tind = that.items.indexOf(list[i]);\n\t\t\t\tif (ind < 0 && list[i].pause) that.items.push(list[i]);\n\t\t\t}\n\t\t\treturn that;\n\t\t}\n\t\tif (objects) this.add(objects);\n\t\tthis.remove = function(objects) {\n\t\t\tvar list;\n\t\t\tif (Array.isArray(objects)) {list = objects;} else {list = [objects];}\n\t\t\tvar ind;\n\t\t\tfor (var i=0; i<list.length; i++) {\n\t\t\t\tind = that.items.indexOf(list[i]);\n\t\t\t\tif (ind >= 0) that.items.splice(ind,1);\n\t\t\t}\n\t\t\treturn that;\n\t\t}\n\t\tthis.pause = function(state, time, frameNumber) {\n\t\t\tif (zot(state)) state = true;\n\t\t\tvar pausingItems = [];\n\t\t\tif (state) {\n\t\t\t\tif (!zot(frameNumber)) time = null;\n\t\t\t\t// if we pause the scene with a time delay or frameNumber\n\t\t\t\t// then the pause may not happen right away\n\t\t\t\t// so leave the other animations going like scrollers until the pause\n\t\t\t\tvar waiting = false;\n\t\t\t\tfor (var i=0; i<that.items.length; i++) {\n\t\t\t\t\t// if time and not totalFrames and scroller - or - dynamo and (time or frameNumber)\n\t\t\t\t\tif ((!zot(time) && zot(frameNumber) && !that.items[i].totalFrames) || that.items[i].totalFrames && (!zot(time) || !zot(frameNumber))) {\n\t\t\t\t\t\tthat.items[i].pause(true, time, frameNumber); // frameNumber ignored by scroller\n\t\t\t\t\t\twaiting = true;\n\t\t\t\t\t\tpausingItems[i] = 1;\n\t\t\t\t\t\tthat.items[i].on(\"pause\", function(){\n\t\t\t\t\t\t\tif (!that.paused) {\n\t\t\t\t\t\t\t\tpauseAll(true);\n\t\t\t\t\t\t\t\tthat.paused = true;\n\t\t\t\t\t\t\t\tthat.dispatchEvent(\"pause\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, null, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// not waiting so pause all\n\t\t\t\tif (!waiting) {\n\t\t\t\t\tpauseAll();\n\t\t\t\t\tthat.paused = true;\n\t\t\t\t\tsetTimeout(function() {that.dispatchEvent(\"pause\");}, 10);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthat.paused = false;\n\t\t\t\tpauseAll();\n\t\t\t}\n\t\t\tfunction pauseAll(fromDelay) {\n\t\t\t\tfor (var i=0; i<that.items.length; i++) {\n\t\t\t\t\t// pauseAll does not need to pause the ones we were waiting for and are now done...\n\t\t\t\t\tif (pausingItems[i] != 1) {\n\t\t\t\t\t\tthat.items[i].pause(state);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tObject.defineProperty(that, 'percentSpeed', {\n\t\t\tget: function() {\n\t\t\t\treturn that._percentSpeed;\n\t\t\t},\n\t\t\tset: function(percent) {\n\t\t\t\tthat._percentSpeed = percent;\n\t\t\t\tfor (var i=0; i<that.items.length; i++) {\n\t\t\t\t\tthat.items[i].percentSpeed = percent;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.dispose = function() {\n\t\t\tfor (var i=0; i<that.items.length; i++) {\n\t\t\t\tthat.items[i].dispose();\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\tzim.extend(zim.Accelerator, createjs.EventDispatcher, null, \"cjsEventDispatcher\");\n\t//-69.3\n\n/*--\nzim.Swiper = function(swipeOn, target, property, sensitivity, horizontal, min, max, damp, integer)\n\nSwiper\nzim class - extends a createjs EventDispatcher\n\nDESCRIPTION\nSwiper lets you change a property of any object (with damping) by swiping.\nIn a sense, it is like an invisible Slider.\nYou pass in the DisplayObject to swipe on - stage, Container, Bitmap, etc.\nYou pass in which object holds the property to animate and the property name.\nThen Swiper will change this property with damping based on a sensitivity you set.\nYou can use horizontal or vertical but to do both, you need to make two Swiper objects.\nOriginally made for controlling 3D objects like rotation and scale\nbased on swiping a rectangle beneath the 3D object that is the same color as the stage.\n\nEXAMPLE\nvar circle = new zim.Circle(100, frame.green).center(stage);\n// will move circle twice as fast as swipe\nvar swiper = new zim.Swiper(stage, circle, \"x\", 2);\n\nvar man = new zim.Rectangle(50, 100, frame.brown).center(stage);\n// will move man up an down slowly within vertical bounds of stage\nvar swiper = new zim.Swiper(man, man, \"y\", .5, false, 0, stageH-man.height);\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nswipeOn - the DisplayObject to swipe on such as the stage or a Rectangle or Bitmap, etc.\ntarget - the object that holds the property that you want to change\nproperty - the property name as a String to change when swiping\nsensitivity - (default 1) the change in property is equal to the change in distance times the sensitivity\n\tset to 2 to change the property twice as fast as the swipe\n\tset to .5 to change the property half as fast as the swipe\n\tset to .001 to change the property very little while swiping\n\tset to -1 to go the opposite way (or -2, -.5, -.001, etc.)\nhorizontal - default(true) set to false for vertical swiping (y)\nmin - (default null) if specified, the property value will not go below this number\nmax - (default null) if specified, the property value will not go above this number\ndamp - (default .1) the damp value with 1 being no damping and 0 being no movement\ninteger - (default false) set to true to round the property value\n\nMETHODS\nimmediate(val) - set the damping immediately to this value to avoid damping to value\ndispose() - remove listeners and Ticker\n\nPROPERTIES\ntarget - get or set the target for the property that you are changing\nproperty - get or set the String property name that is being damped\ndesiredValue - the current value that the swiper is damping towards\nenabled (default true) - set to false to disable the Swiper and visa versa\n\nEVENTS\ndispatches a swipedown event when swipe is started\ndispatches a swipemove event when swipe is moving\ndispatches a swipeup event when swipe is ended\n--*///+69.5\n\tzim.Swiper = function(swipeOn, target, property, sensitivity, horizontal, min, max, damp, integer) {\n\t\tvar sig = \"swipeOn, target, property, sensitivity, horizontal, min, max, damp, integer\";\n\t\tvar duo; if (duo = zob(zim.Swiper, arguments, sig, this)) return duo;\n\t\tz_d(\"69.5\");\n\n\t\tthis.cjsEventDispatcher_constructor();\n\n\t\tif (zot(swipeOn) || !swipeOn.getStage || !swipeOn.getStage()) {zog(\"zim.Swiper() - please provide container on stage\"); return;}\n\t\tif (zot(target)) return;\n\t\tif (zot(sensitivity)) sensitivity = 1;\n\t\tif (zot(horizontal)) horizontal = true;\n\t\tif (zot(damp)) damp = .1;\n\t\tif (zot(integer)) integer = false;\n\n\t\tvar that = this;\n\t\tvar container = swipeOn;\n\t\tvar startPos;\n\t\tvar startVal;\n\t\tvar desiredVal = that.desiredValue = target[property];\n\t\tvar stage;\n\t\tthis.target = target;\n\t\tthis.property = property;\n\t\tvar downEvent;\n\t\tvar moveEvent;\n\t\tvar upEvent;\n\t\tif (container.canvas) {\n\t\t\tdownEvent = container.on(\"stagemousedown\", function() {\n\t\t\t\tdownHandler();\n\t\t\t\tmoveEvent = container.on(\"stagemousemove\", pressHandler);\n\t\t\t\tupEvent = container.on(\"stagemouseup\", function() {\n\t\t\t\t\tcontainer.off(\"stagemousemove\", moveEvent);\n\t\t\t\t\tcontainer.off(\"stagemouseup\", upEvent);\n\t\t\t\t\tthat.dispatchEvent(\"swipeup\");\n\t\t\t\t});\n\t\t\t});\n\t\t\tstage = container;\n\t\t} else {\n\t\t\tstage = container.getStage();\n\t\t\tdownEvent = container.on(\"mousedown\", downHandler);\n\t\t\tmoveEvent = container.on(\"pressmove\", pressHandler);\n\t\t\tupEvent = container.on(\"pressup\", function() {\n\t\t\t\tthat.dispatchEvent(\"swipeup\");\n\t\t\t});\n\t\t}\n\t\tfunction downHandler() {\n\t\t\tstartPos = horizontal?stage.mouseX:stage.mouseY;\n\t\t\tstartVal = that.target[that.property];\n\t\t\tthat.dispatchEvent(\"swipedown\");\n\t\t}\n\t\tfunction pressHandler() {\n\t\t\tvar diff = startPos-(horizontal?stage.mouseX:stage.mouseY);\n\t\t\tdesiredVal = startVal - diff*sensitivity;\n\t\t\tif (!zot(min)) desiredVal = Math.max(desiredVal, min);\n\t\t\tif (!zot(max)) desiredVal = Math.min(desiredVal, max);\n\t\t\tthat.desiredValue = desiredVal;\n\t\t\tthat.dispatchEvent(\"swipemove\");\n\t\t};\n\t\tvar swiperDamp = new zim.Damp(that.target[that.property]);\n\t\tvar ticker = zim.Ticker.add(function() {\n\t\t\tthat.target[that.property] = integer?Math.round(swiperDamp.convert(desiredVal)):swiperDamp.convert(desiredVal);\n\t\t}, stage);\n\n\t\tthis.immediate = function(val) {\n\t\t\tswiperDamp.immediate(val);\n\t\t\tthat.target[that.property] = integer?Math.round(val):val;\n\t\t\tthat.desiredValue = desiredVal = val;\n\t\t}\n\n\t\tvar _enabled = true;\n\t\tObject.defineProperty(that, 'enabled', {\n\t\t\tget: function() {\n\t\t\t\treturn _enabled;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (_enabled == value) return;\n\t\t\t\tif (value) {\n\t\t\t\t\tenable();\n\t\t\t\t} else {\n\t\t\t\t\tdisable();\n\t\t\t\t}\n\t\t\t\t_enabled = Boolean(value);\n\t\t\t}\n\t\t});\n\n\t\tfunction disable() {\n\t\t\tif (container.canvas) {\n\t\t\t\tcontainer.off(\"stagemousedown\", downEvent);\n\t\t\t\tcontainer.off(\"stagemousemove\", moveEvent);\n\t\t\t\tcontainer.off(\"stagemouseup\", upEvent);\n\t\t\t} else {\n\t\t\t\tcontainer.off(\"mousedown\", downEvent);\n\t\t\t\tcontainer.off(\"pressmove\", moveEvent);\n\t\t\t\tcontainer.off(\"pressup\", upEvent);\n\t\t\t}\n\t\t\tzim.Ticker.remove(ticker);\n\t\t}\n\n\t\tfunction enable() {\n\t\t\tif (container.canvas) {\n\t\t\t\tcontainer.on(\"stagemousedown\", downEvent);\n\t\t\t} else {\n\t\t\t\tcontainer.on(\"mousedown\", downEvent);\n\t\t\t\tcontainer.on(\"pressmove\", moveEvent);\n\t\t\t\tcontainer.on(\"pressup\", upEvent);\n\t\t\t}\n\t\t\tzim.Ticker.add(ticker, stage);\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\tdisable();\n\t\t\tswiperDamp = null;\n\t\t}\n\t}\n\tzim.extend(zim.Swiper, createjs.EventDispatcher, null, \"cjsEventDispatcher\", false);\n\t//-69.5\n\n/*--\nzim.MotionController = function(container, target, type, speed, axis, rect, map, diagonal, damp, flip, moveThreshold, stickThreshold)\n\nMotionController\nzim class - extends a createjs EventDispatcher\n\nDESCRIPTION\nMotionController lets you control an object (target) in a container (like the stage)\nwith \"mousedown\", \"mousemove\", \"keydown\", \"gamebutton\", \"gamestick\" or \"manual\" modes (types)\nFor instance, you can control a player in a game or a butterfly in field\n\nEXAMPLE\nvar circle = new zim.Circle(40, frame.green).center(stage);\nvar controller = new zim.MotionController(stage, circle); // circle moves to mouse press position with damping\n\nvar rect = new zim.Rectangle(50, 30, frame.green).centerReg(stage);\nvar controller = new zim.MotionController({\n\tcontainer:stage,\n\ttarget:rect,\n\ttype:\"keydown\",\n\tdiagonal:true,\n\tdamp:.1,\n\trotate:true\n});\n\nSEE: http://zimjs.com/code/controller for more examples\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\ncontainer - the Container the target is in - the stage is most likely fine\n\tthis must be on the stage (or be the stage) when the MotionController is made\ntarget - the object you want to control\n\tif you only want data from the MotionController you can leave the target parameter as null (don't include it)\ntype - (default \"mousedown\") by default will move to where you press in the container\n\tset to \"mousemove\" to have the target follow the mouse movement\n\tset to \"keydown\" to use keys to control the target (see map parameter)\n\tset to \"gamebutton\" to use gamepad buttons to control the target (see map parameter)\n\tset to \"gamestick\" to use gamepad stick(s) to control the target (see map parameter)\n\tset to \"swipe\" to use swipe to control the target\n\tset to \"manual\" to set your own with myController.convert() or myController.x and myController.y properties\nspeed - (default 7) pixels it will move each tick, keypress buttonpress, swipe, etc.\naxis - (default \"both\") or \"horizontal\" or \"vertical\" (see diagonal parameter)\nrect - (default null) a createjs.Rectangle or object with x, y, width and height properties\n\tthe registration point of the target will stay within these bounds\nmap - (default null) an Array with left, right, up, down values (or array of values) as outlined below\n \t- (default [[65,37], [68,39], [87,38], [83,40]] when type == \"keydown\") these are ADWS and arrows\n\t- (default [14, 15, 12, 13] when type == \"gamebutton\") these are DPAD_LEFT, DPAD_RIGHT, DPAD_UP, DPAD_DOWN on a gamepad\n\t- (default [14, 15, 7, 6] when type == \"gamebutton\" and firstPerson == true) these are DPAD_LEFT, DPAD_RIGHT, RT, LT on a gamepad\n\t- (default [0, 0, 1, 1] when type == \"gamestick\") these are LSX, LSX, LSY, LSY on a gamepad\n\t- (default [[0,2], [0,2], [1], [1]] when type == \"gamestick\" and firstPerson == true) turn with left or right stick X, advance with left stick Y\n\t\tuse [[0,2], [0,2], [1,3], [1,3]] for both sticks (first stick motion overrides second stick)\n\t\tNote: MotionController will only use the 0 and the 2 index for speed as the sticks use -1 to 1 values\n\t\tso you could not go only left with one stick and only right with another\n\t\tNote: stick values may exceed -1 and 1 on occasion (see also stickThreshold)\ndiagonal - (default true) set to false to lock movement to horizontal or vertical only\ndamp - (default .1) the damp value with 1 being no damping and 0 being no movement\nflip - (default null) set to \"horizontal\", \"vertical\" or \"both\" to flip the target when in negative direction\nrotate - (default false) set to true to rotate - starts facing right and rotates in direction of movement\nconstant - (default false) set to true to remove keyup or gamebutton up and always move in direction last key or button press\nfirstPerson - (default false) set to true for keydown, gamebutton and gamecontroller to go to first person mode\n\tin firstPerson, the direction starts facing up and by default up arrow is speed forward and left and right change rotation\n\tspeed will be damped by damp parameter - also, map parameter changes if in firstPerson mode - see map parameter\nturnSpeed - (default speed*.4) - the speed for turning in firstPerson mode - will be damped but damp parameter\nmoveThreshold - (default 5) pixels negative or positive to treat damped motion as stopped\nstickThreshold - (default .2) gamepad stick axes values are from -1 to 1 but there is a lot of noise\n\tso consider within +- stickThreshold as no motion 0\n\n\nMETHODS\nimmediate(x, y) - set the damping immediately to this value to avoid damping to value\nconvert(x, y) - for manual mode, pass in x and y and damping and rotation will be calculated\ndispose() - remove listeners and Ticker, Swiper and GamePad, where applicable\n\nPROPERTIES\ntarget - the target for the property that you are controlling\nx - the desired x position of the target before damping is applied (use this for manual imput - or convert() method)\ny - the desired y position of the target before damping is applied (use this for manual imput - or convert() method)\ndirX - the x direction the player is moving\ndirY - the x direction the player is moving\nrotation - read only rotation of the player in degrees\nscaleX - read only scaleX of player (to get flip data if only using controller for data)\nscaleY - read only scaleY of player (to get flip data if only using controller for data)\ndampX - reference to the horizonal Damp object\ndampY - reference to the vertical Damp object\nspeed - the speed setting which will be multiplied by direction\nturnSpeed - the turn speed for firstPerson mode\naxis - the axis (horizontal, vertical or both);\nmoving - get Boolean as to whether the target is moving (within moveThreshold)\nmovingX - get Boolean as to whether the target is moving in x direction (within moveThreshold)\nmovingY - get Boolean as to whether the target is moving in y direction (within moveThreshold)\ngamepad - reference to GamePad object if applicable - allows you to use this for more events like jumping, shooting, etc.\nmoveThreshold - the maximum value (+-) within which movement is considered stopped\nstickThreshold - the maximum value (+-) within which the gamepad stick axes values are considered 0\nenabled - set to false to disable or true to enable MotionController - can toggle with enabled = !enabled\n\nEVENTS\ndispatches a change event with dir as property of event object\n\tthat will hold \"left\", \"right\", \"up\", \"down\", null (no direction)\n--*///+69.7\n\n\tzim.MotionController = function(container, target, type, speed, axis, rect, map, diagonal, damp, flip, rotate, constant, firstPerson, turnSpeed, moveThreshold, stickThreshold) {\n\t\tvar sig = \"container, target, type, speed, axis, rect, map, diagonal, damp, flip, rotate, constant, firstPerson, turnSpeed, moveThreshold, stickThreshold\";\n\t\tvar duo; if (duo = zob(zim.MotionController, arguments, sig, this)) return duo;\n\t\tz_d(\"69.7\");\n\n\t\tthis.cjsEventDispatcher_constructor();\n\t\tif (zot(container) || !container.getStage) {zog(\"zim Controller(): Please pass in a reference to a container as first parameter\");\treturn;}\n\t\tif (zot(container.getStage())) {zog(\"zim Controller(): The Container must be on the stage\"); return;}\n\t\tvar stage = container.getStage();\n\t\tif (zot(target)) {target = new zim.Container(1,1);} // make a surrogate if only wanting controller data\n\t\tif (zot(speed)) speed = 7;\n\t\tif (zot(type) || (type != \"mousemove\" && type != \"keydown\" && type != \"gamebutton\" && type != \"gamestick\" && type != \"swipe\" && type != \"manual\")) type = \"mousedown\";\n\t\tif (zot(axis)) axis = \"both\"; // horizontal, vertical, both\n\t\tif (type == \"keydown\" && zot(map)) map = [[65,37], [68,39], [87,38], [83,40]] // left right up down\n\t\tif (type == \"gamebutton\" && zot(map)) {\n\t\t\tif (firstPerson) {\n\t\t\t\tmap = [14, 15, zim.GamePad.RT, zim.GamePad.LT] // DPAD_LEFT, DPAD_RIGHT, RT, LT on gamepad\n\t\t\t} else {\n\t\t\t\tmap = [14, 15, 12, 13] // DPAD_LEFT, DPAD_RIGHT, DPAD_UP, DPAD_DOWN on gamepad\n\t\t\t}\n\t\t}\n\t\tif (type == \"gamestick\" && zot(map)) {\n\t\t\tif (firstPerson) {\n\t\t\t\tmap = [[0,2], [0,2], [1], [1]]; // TURN: LSX or RSX, LSX or RSX, SPEED: LSY, LSY - on gamepad\n\t\t\t} else {\n\t\t\t\tmap = [0, 0, 1, 1]; // LSX, LSX, LSY, LSY - Left Stick on gamepad\n\t\t\t}\n\t\t}\n\n\t\tif (type == \"gamestick\" && zot(map)) map = [0, 0, 1, 1]; // LSX, LSX, LSY, LSY - Left Stick on gamepad\n\t\tif (zot(diagonal)) diagonal = true;\n\t\tif (axis == \"horizontal\" || axis == \"vertical\") diagonal = false;\n\t\tif (zot(damp)) damp = (type==\"keydown\" || type==\"gamebutton\") ? 1:.1;\n\t\tif (zot(firstPerson)) firstPerson = false;\n\t\tif (zot(turnSpeed)) turnSpeed = speed * .4;\n\t\tif (zot(moveThreshold)) moveThreshold = 4;\n\t\tif (zot(stickThreshold)) stickThreshold = .2;\n\n\t\tvar that = this;\n\t\tthis.dirX = 0;\n\t\tthis.dirY = 0;\n\t\tthis.speed = speed;\n\t\tthis.turnSpeed = turnSpeed;\n\t\tthis.axis = axis;\n\t\tthis.target = target;\n\t\tthis.moveThreshold = moveThreshold;\n\t\tthis.stickThreshold = stickThreshold;\n\n\t\tvar speedX = that.speed; // speedX and speedY hold proportioned speed based on angle\n\t\tvar speedY = that.speed;\n\t\tvar flipRotation = 0; // records if we need to adjust rotation if flipped\n\t\tthat.rotation = 0; // holds the pre-damped angle of the target\n\t\tthat.x = this.target.x; // holds the pre-damped x and y position of the target\n\t\tthat.y = this.target.y;\n\n\t\tvar originalScaleX = that.scaleX = target.scaleX;\n\t\tvar originalScaleY = that.scaleY = target.scaleY;\n\n\t\t// INPUTS\n\t\t// set up collecting the desired x and y based on various inputs:\n\t\t// keydown, gamebutton\n\t\t// mousedown, mousemove\n\t\t// gamestick\n\t\t// swipe\n\t\t// otherwise the setting is manual and MotionController x and y can be provided through calculate(x,y) method\n\n\t\tif (type == \"keydown\" || type == \"gamebutton\") {\n\n\t\t\t// which keys or buttons handle left, right, up, down are provided by the map parameter\n\t\t\t// this can be either a number or an array of numbers\n\t\t\t// so normalize this to always hold an array\n\t\t\tfor (var i=0; i<4; i++) {\n\t\t\t\tif (!Array.isArray(map[i])) map[i] = [map[i]];\n\t\t\t}\n\t\t\tvar down = [0,0,0,0];\n\t\t\tvar ord = []; // order the keys are pressed - so when we release, we can set to last currently pressed key\n\t\t\tvar way = [\"X\",\"X\",\"Y\",\"Y\"];\n\t\t\tvar dir = [-1,1,-1,1];\n\t\t\tvar names = [\"left\",\"right\",\"up\",\"down\"];\n\t\t\tvar rots = [-180,0,-90,90];\n\t\t\tvar d = {dirX:0, dirY:0}; // local directions for key and button - this.dirX and this.dirY are used in Ticker\n\n\t\t\tif (type == \"keydown\") {\n\t\t\t\tvar keydownEvent = frame.on(\"keydown\", doDown);\n\t\t\t} else {\n\t\t\t\tvar gamepad = that.gamepad = new zim.GamePad();\n\t\t\t\tvar buttondownEvent = gamepad.on(\"buttondown\", doDown);\n\t\t\t}\n\t\t\tfunction doDown(e) {\n\t\t\t\tvar key = type==\"keydown\"?e.keyCode:e.buttonCode;\n\t\t\t\tvar inOrd;\n\t\t\t\tfor (i=0; i<4; i++) {\n\t\t\t\t\tif (map[i].indexOf(key) > -1) {\n\t\t\t\t\t\tif (!diagonal && that.axis==\"both\") d.dirX = d.dirY = 0;\n\t\t\t\t\t\td[\"dir\"+way[i]] = dir[i];\n\t\t\t\t\t\tdown[i] = 1;\n\t\t\t\t\t\tinOrd = ord.indexOf(i);\n\t\t\t\t\t\tif (inOrd == 0) return; // already last pressed\n\t\t\t\t\t\tif (inOrd > 0) ord.splice(inOrd,1); // take key out if already down\n\t\t\t\t\t\tord.unshift(i); // add index to start of ord array\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (zot(constant)) {\n\t\t\t\tif (type == \"keydown\") {\n\t\t\t\t\tvar keyupEvent = frame.on(\"keyup\", doUp);\n\t\t\t\t} else {\n\t\t\t\t\tvar buttonupEvent = gamepad.on(\"buttonup\", doUp);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction doUp(e) {\n\t\t\t\tvar key = type==\"keydown\"?e.keyCode:e.buttonCode;\n\t\t\t\tvar inOrd;\n\t\t\t\tfor (i=0; i<4; i++) {\n\t\t\t\t\tif (map[i].indexOf(key) > -1) {\n\t\t\t\t\t\tdown[i] = 0;\n\t\t\t\t\t\tinOrd = ord.indexOf(i);\n\t\t\t\t\t\tif (inOrd >= 0) ord.splice(inOrd,1);\n\t\t\t\t\t\tif (that.axis != \"both\" || diagonal) { // either just one direction or can have both dirX and dirY\n\t\t\t\t\t\t\td[\"dir\"+way[i]] = -down[Math.floor(i/2)*2] +down[Math.floor(i/2)*2+1]; // the other might be down\n\t\t\t\t\t\t} else { // only use last pressed key for dirX or dirY but not both\n\t\t\t\t\t\t\tif (ord.length > 0) {\n\t\t\t\t\t\t\t\td[\"dir\"+way[i]] = 0;\n\t\t\t\t\t\t\t\tvar iOrd = ord[0];\n\t\t\t\t\t\t\t\td[\"dir\"+way[iOrd]] = dir[iOrd];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\td.dirX = d.dirY = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// use a ticker to position the desired x and y properties\n\t\t\t// we will then tween to these properties in the mainTicker later\n\t\t\tvar first = {rotation:0, speedX:that.speed, speedY:that.speed};\n\t\t\tvar keyTicker = zim.Ticker.add(function() {\n\t\t\t\tif (firstPerson) {doFirstPerson(d); return;}\n\t\t\t\tvar sX = that.speed;\n\t\t\t\tvar sY = that.speed;\n\t\t\t\tif (that.axis == \"both\" && d.dirX != 0 && d.dirY != 0) {\n\t\t\t\t\tvar trig = doTrig(d.dirX, d.dirY); // note - keys need to place desired x and y in a unit manner (or else target never goes anywhere)\n\t\t\t\t\tsX = trig.speedX;\n\t\t\t\t\tsY = trig.speedY;\n\t\t\t\t}\n\t\t\t\tif (that.axis == \"horizontal\" || that.axis == \"both\") {\n\t\t\t\t\tthat.x += sX * d.dirX;\n\t\t\t\t}\n\t\t\t\tif (that.axis == \"vertical\" || that.axis == \"both\") {\n\t\t\t\t\tthat.y += sY * d.dirY;\n\t\t\t\t}\n\t\t\t\tcalculate();\n\t\t\t}, stage);\n\t\t} else if (type == \"mousedown\" || type == \"mousemove\") {\n\t\t\tvar mouseEvent = stage.on(\"stage\" + type, function(){\n\t\t\t\tvar p = container.globalToLocal(stage.mouseX, stage.mouseY);\n\t\t\t\tthat.x = p.x; that.y = p.y;\n\t\t\t\tcalculate();\n\t\t\t});\n\t\t} else if (type == \"gamestick\") {\n\t\t\tvar gamepad = this.gamepad = new zim.GamePad();\n\t\t\tfor (var i=0; i<4; i++) { // make map hold arrays\n\t\t\t\tif (!Array.isArray(map[i])) map[i] = [map[i]];\n\t\t\t}\n\t\t\tvar first = {rotation:0, speedX:that.speed, speedY:that.speed};\n\t\t\tvar stickEvent = gamepad.on(\"data\", function(e) {\n\n\t\t\t\tvar d = {dirX:0, dirY:0};\n\t\t\t\t// map = [[0,2], [0,2], [1,3], [1,3]]\n\t\t\t\tfor (var i=0; i<map[0].length; i++) {\n\t\t\t\t\tvar a = e.axes[map[0][i]];\n\t\t\t\t\tif (Math.abs(a) > that.stickThreshold) {\n\t\t\t\t\t\td.dirX = a;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (var i=0; i<map[2].length; i++) {\n\t\t\t\t\tvar a = e.axes[map[2][i]];\n\t\t\t\t\tif (Math.abs(a) > that.stickThreshold) {\n\t\t\t\t\t\td.dirY = a;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (firstPerson) {doFirstPerson(d); return;}\n\n\t\t\t\tthat.x += that.speed*d.dirX;\n\t\t\t\tthat.y += that.speed*d.dirY;\n\t\t\t\tcalculate();\n\t\t\t});\n\t\t} else if (type == \"swipe\") {\n\t\t\tvar swiperX = new zim.Swiper(stage, that, \"x\", .8);\n\t\t\tvar swiperY = new zim.Swiper(stage, that, \"y\", .8, false);\n\t\t\tvar swiperEvent = swiperX.on(\"swipemove\", function() {\n\t\t\t\tcalculate();\n\t\t\t});\n\t\t}\n\n\t\tfunction doFirstPerson(d) {\n\t\t\tfirst.rotation += d.dirX * that.turnSpeed;\n\t\t\tthat.rotation = first.rotation;\n\t\t\tfirst.speedX = Math.sin(first.rotation*Math.PI/180) * that.speed * -d.dirY;\n\t\t\tfirst.speedY = - Math.cos(first.rotation*Math.PI/180) * that.speed * -d.dirY;\n\t\t\tthat.x += first.speedX;\n\t\t\tthat.y += first.speedY;\n\t\t\treturn;\n\t\t}\n\n\t\t// CALCULATE\n\t\t// each input calls calculate to determine the angle of direction\n\t\t// and the speed along each axis, speedX and speedY\n\t\tfunction calculate() {\n\n\t\t\t// trig() returns an object with speedX, speedY and rotation properties\n\t\t\tvar diffX = that.x-that.target.x;\n\t\t\tvar diffY = that.y-that.target.y;\n\t\t\tvar trig = doTrig(diffX, diffY);\n\n\t\t\tspeedX = trig.speedX;\n\t\t\tspeedY = trig.speedY;\n\n\t\t\tif (!rotate) return;\n\t\t\tthat.rotation = trig.angle;\n\t\t\tif (zot(that.rotation)) {\n\t\t\t\tthat.rotation = that.target.rotation;\n\t\t\t\treturn; // when no motion purposely left null so stopped target keeps rotation\n\t\t\t}\n\n\t\t\tthat.rotation += flipRotation; // if flipped we need to add 180 to rotation\n\n\t\t\t// make sure angle damps to shortest direction - this is tricky\n\t\t\tvar newR = normalizeAngle(that.rotation);\n\t\t\tvar oldR = that.target.rotation = normalizeAngle(that.target.rotation);\n\t\t\tif (Math.abs(newR-oldR) > 180) {\n\t\t\t\tif (oldR > newR) {\n\t\t\t\t\toldR -= 360; // put current rotation behind new rotation so damps clockwise\n\t\t\t\t} else {\n\t\t\t\t\tnewR -= 360; // put new rotation behind current rotation so damps counterclockwise\n\t\t\t\t}\n\t\t\t}\n\t\t\tthat.dampR.immediate(oldR); // required otherwise damping equation has mind of its own\n\t\t\tthat.target.rotation = oldR; // make sure to set this again as we may have changed oldR for proper rotational direction when damped\n\t\t\tthat.rotation = newR;\n\t\t}\n\t\tfunction normalizeAngle(a) {\n\t\t\treturn (a % 360 + 360) % 360;\n\t\t}\n\t\tfunction doTrig(diffX, diffY) {\n\t\t\tvar sX = that.speed;\n\t\t\tvar sY = that.speed;\n\t\t\tvar sA; // keep angle null if no movement - so that last rotation during movement is kept when movement stops\n\t\t\tvar hyp = Math.sqrt(Math.pow(diffX, 2) + Math.pow(diffY, 2));\n\t\t\tif (hyp > 0) {\n\t\t\t\tsX = Math.abs(diffX) / hyp * that.speed;\n\t\t\t\tsY = Math.abs(diffY) / hyp * that.speed;\n\t\t\t\tsA = 90 - Math.atan2(diffX, diffY)*180/Math.PI;\n\t\t\t}\n\t\t\treturn {speedX:sX, speedY:sY, angle:sA};\n\t\t}\n\n\n\t\t// TICKER FOR ALL\n\t\t// damp movement and rotation to desired x and y\n\n\t\tvar tempX = this.x = this.target.x;\n\t\tvar tempY = this.y = this.target.y;\n\t\tthis.dampX = new zim.Damp(tempX, damp);\n\t\tthis.dampY = new zim.Damp(tempY, damp);\n\t\tthis.dampR = new zim.Damp(this.target.rotation, damp);\n\t\tvar lastDirX=0;\n\t\tvar lastDirY=0;\n\n\t\tvar mainTicker = zim.Ticker.add(function() {\n\t\t\tif (rect) {\n\t\t\t\tthat.x = zim.constrain(that.x, rect.x, rect.x+rect.width);\n\t\t\t\tthat.y = zim.constrain(that.y, rect.y, rect.y+rect.height);\n\t\t\t}\n\t\t\t// tempX and tempY head towards the desired x and y\n\t\t\t// at the speed set by calculate and in the direction it needs to go calculated here\n\t\t\t// we then damp the actual motion using the dampX or dampY zim.Damp object's convert method\n\t\t\tif (that.axis == \"horizontal\" || that.axis == \"both\") {\n\t\t\t\tthat.dirX = zim.sign(that.x-tempX);\n\t\t\t\tif (Math.abs(that.x-tempX) < speedX) {\n\t\t\t\t\ttempX = that.x;\n\t\t\t\t} else {\n\t\t\t\t\ttempX += that.dirX*speedX;\n\t\t\t\t}\n\t\t\t\tthat.target.x = that.dampX.convert(tempX);\n\t\t\t}\n\t\t\tif (that.axis == \"vertical\" || that.axis == \"both\") {\n\t\t\t\tthat.dirY = zim.sign(that.y-tempY);\n\t\t\t\tif (Math.abs(that.y-tempY) < speedY) {\n\t\t\t\t\ttempY = that.y;\n\t\t\t\t} else {\n\t\t\t\t\ttempY += zim.sign(that.y-tempY)*speedY;\n\t\t\t\t}\n\t\t\t\tthat.target.y = that.dampY.convert(tempY);\n\t\t\t}\n\n\t\t\t// check for last direction change and dispatch event and flip if necessary\n\t\t\tif (that.dirX != lastDirX || that.dirY != lastDirY) {\n\t\t\t\tvar e = new createjs.Event(\"change\");\n\t\t\t\tif (that.dirX != lastDirX) {\n\t\t\t\t\tvar options = [\"left\", null, \"right\"];\n\t\t\t\t\te.dir = options[that.dirX+1];\n\t\t\t\t\tlastDirX = that.dirX;\n\t\t\t\t\tif (flip == \"horizontal\" || flip == \"both\") {\n\t\t\t\t\t\tthat.scaleX = target.scaleX = that.dirX?Math.abs(target.scaleX)*that.dirX:target.scaleX;\n\t\t\t\t\t\tif (originalScaleX != 0 && Math.round(that.scaleX/originalScaleX) == -1) {\n\t\t\t\t\t\t\tflipRotation = 180;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tflipRotation = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar options = [\"up\", null, \"down\"];\n\t\t\t\t\te.dir = options[that.dirY+1];\n\t\t\t\t\tlastDirY = that.dirY;\n\t\t\t\t\tif (flip == \"vertical\" || flip == \"both\") {\n\t\t\t\t\t\tthat.scaleY = target.scaleY = that.dirY?Math.abs(target.scaleY) * that.dirY:target.scaleY;\n\t\t\t\t\t\t// not sure why this breaks flip?\n\t\t\t\t\t\t// if (originalScaleY != 0 && Math.round(that.scaleY/originalScaleY) == -1) {\n\t\t\t\t\t\t// \tflipRotation = 180;\n\t\t\t\t\t\t// } else {\n\t\t\t\t\t\t// \tflipRotation = 0;\n\t\t\t\t\t\t// }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthat.dispatchEvent(e);\n\t\t\t}\n\n\t\t\t// set moving properties\n\t\t\tthat.movingX = Math.abs(tempX-that.target.x) > that.moveThreshold;\n\t\t\tthat.movingY = Math.abs(tempY-that.target.y) > that.moveThreshold;\n\t\t\tthat.moving = that.movingX || that.movingY\n\n\t\t\t// damp the rotation - but not if the angle is null which happens when no movement\n\t\t\t// this keeps the last angle during movement rather than setting it to 0 which is not right\n\t\t\tif (rotate && !zot(that.rotation)) {\n\t\t\t\tthat.target.rotation = that.dampR.convert(that.rotation);\n\t\t\t}\n\n\t\t}, stage);\n\n\n\t\tthis.immediate = function(x,y,r) {\n\t\t\tif (!zot(x) && that.dampX) {\n\t\t\t\tthat.dampX.immediate(x);\n\t\t\t\tthat.x = that.target.x = tempX = x;\n\t\t\t\tif (swiperX) swiperX.immediate(x);\n\t\t\t}\n\t\t\tif (!zot(y) && that.dampY) {\n\t\t\t\tthat.dampY.immediate(y);\n\t\t\t\tthat.y = that.target.y = tempY = y;\n\t\t\t\tif (swiperY) swiperY.immediate(y);\n\t\t\t}\n\t\t\tif (!zot(r) && that.dampR) {\n\t\t\t\tthat.dampR.immediate(r);\n\t\t\t\tthat.rotation = that.target.rotation = r;\n\t\t\t}\n\t\t}\n\n\t\tthis.convert = function(x,y) {\n\t\t\tif (!zot(x)) that.x = x;\n\t\t\tif (!zot(y)) that.y = y;\n\t\t\tcalculate();\n\t\t}\n\n\t\tvar _enabled = true;\n\t\tObject.defineProperty(that, 'enabled', {\n\t\t\tget: function() {\n\t\t\t\treturn _enabled;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tif (_enabled == value) return;\n\t\t\t\tif (value) {\n\t\t\t\t\tenable();\n\t\t\t\t} else {\n\t\t\t\t\tdisable();\n\t\t\t\t}\n\t\t\t\t_enabled = Boolean(value);\n\t\t\t}\n\t\t});\n\t\tfunction enable() {\n\t\t\tif (type == \"keydown\") {\n\t\t\t\tframe.on(\"keydown\", keydownEvent);\n\t\t\t\tframe.on(\"keyup\", keyupEvent);\n\t\t\t\tzim.Ticker.add(keyTicker, stage);\n\t\t\t} else if (type == \"gamebutton\") {\n\t\t\t\tgamepad.on(\"buttondown\", buttondownEvent);\n\t\t\t\tgamepad.on(\"buttonup\", buttonupEvent);\n\t\t\t\tzim.Ticker.add(keyTicker, stage);\n\t\t\t} else if (type == \"gamestick\") {\n\t\t\t\tgamepad.on(\"data\", stickEvent);\n\t\t\t} else if (type == \"swipe\") {\n\t\t\t\tswiperX.enabled = true;\n\t\t\t\tswiperY.enabled = true;\n\t\t\t\tswiperX.on(\"swipemove\", swiperEvent);\n\t\t\t} else if (type == \"mousedown\" || type == \"mousemove\") {\n\t\t\t\tstage.on(\"stage\" + type, mouseEvent);\n\t\t\t}\n\t\t\tzim.Ticker.add(mainTicker, stage);\n\t\t}\n\t\tfunction disable() {\n\t\t\tif (type == \"keydown\") {\n\t\t\t\tframe.off(\"keydown\", keydownEvent);\n\t\t\t\tframe.off(\"keyup\", keyupEvent);\n\t\t\t\tzim.Ticker.remove(keyTicker);\n\t\t\t} else if (type == \"gamebutton\") {\n\t\t\t\tgamepad.off(\"buttondown\", buttondownEvent);\n\t\t\t\tgamepad.off(\"buttonup\", buttonupEvent);\n\t\t\t\tzim.Ticker.remove(keyTicker);\n\t\t\t} else if (type == \"gamestick\") {\n\t\t\t\tgamepad.off(\"data\", stickEvent);\n\t\t\t} else if (type == \"swipe\") {\n\t\t\t\tswiperX.enabled = false;\n\t\t\t\tswiperY.enabled = false;\n\t\t\t\tswiperX.off(\"swipemove\", swiperEvent);\n\t\t\t} else if (type == \"mousedown\" || type == \"mousemove\") {\n\t\t\t\tstage.off(\"stage\" + type, mouseEvent);\n\t\t\t}\n\t\t\tzim.Ticker.remove(mainTicker);\n\n\t\t}\n\t\tthis.dispose = function() {\n\t\t\tdisable();\n\t\t\tif (gamepad) gamepad.dispose();\n\t\t\tif (swiperX) swiperX.dispose();\n\t\t\tif (swiperY) swiperX.dispose();\n\t\t}\n\n\t}\n\tzim.extend(zim.MotionController, createjs.EventDispatcher, \"enabled\", \"cjsEventDispatcher\");\n\t//-69.7\n\n/*--\nzim.GamePad = function()\n\nGamePad\nzim class - extends a createjs EventDispatcher\n\nDESCRIPTION\nGamePad connects to Game Controllers as inputs using the HTML navigator.getGamepads API\nDispatches buttondown and buttonup events for the following common buttons:\n\n\"A\",\"B\",\"X\",\"Y\", (or for Triangle, Circle, Cross and Square)\n\"LB\",\"RB\",\"LT\",\"RT\", (for left bumper, right bumper, left trigger, right trigger)\n\"BACK\",\"START\",\n\"LS\",\"RS\", (for left stick press, right stick press)\n\"DPAD_UP\",\"DPAD_DOWN\",\"DPAD_LEFT\",\"DPAD_RIGHT\"\n\nThe event object will have a button property telling which button is pressed using the string values above\nDispatches a data event constantly to get axes data for the sticks (and constant data for the buttons)\nThe event object in this case will have axes and buttons properties\nThe axes property is an array of four numbers for the left and right stick's x and y properies (-1 to 1)\n\nEXAMPLE\nvar gamepad = new zim.GamePad();\ngamepad.on(\"buttondown\", function(e) {\n\t// only fires once per button press (unlike constant keydown event)\n\tzog(e.button); // LT for instance for Left trigger\n\tif (e.button == \"LT\") {\n\t\tzog(\"left trigger is down\");\n\t}\n\tzog(e.buttonCode); // 6\n\tif (e.buttonCode == zim.GamePad.LT) {\n\t\tzog(\"another way to do catch left trigger down\");\n\t}\n});\n\ngamepad.on(\"buttonup\", function(e) {\n\tzog(e.button); // LT for instance for Left trigger\n}\n\ngamepad.on(\"data\", function(e) {\n\t// fires constantly in a requestAnimationFrame\n\tzog(e.axes[0]); // left stick x or horizontal data from -1 to 1 (lots of decimal noise)\n\tzog(e.axes[zim.GamePad.LTX]); // another way of accessing left stick x\n\tzog(e.buttons[9]); // true or false depending on if the START button is pressed\n\tzog(e.buttons[zim.GamePad.START]); another way to find if the START button is pressed\n});\nEND EXAMPLE\n\nMETHODS\ndispose() - removes all listeners and cancels requestAnimationFrame\n\nPROPERTIES\nconnected - Boolean true if connected and false if not connected (may need to press key, etc)\ncurrentIndex - get or set the index of the controller\n\tgives multiple controller support - make two GameController objects and set different indexes\ndata - object that holds buttons (raw data - slightly different than buttons below) and axes properties\nbuttons - an array of Booleans as to whether the button is pressed\n\tthe order of the buttons match the order of the constants below\nconstants: A,B,X,Y,LB,RB,LT,RT,BACK,START,LS,RS,DPAD_UP,DPAD_DOWN,DPAD_LEFT,DPAD_RIGHT\n\tzim.GamePad.A == 0\n\tzim.GamePad.B == 1, etc. up to\n\tzim.GamePad.DPAD_RIGHT == 15\naxes - an array of four stick values from -1 to 1\n\tfor left x and y and right x and y values (or horizontal and vertical values)\nconstants: LSX,LSY,RSX,RSY\n\tzim.GamePad.LSX == 0\n\tzim.GamePad.LSY == 1\n\tzim.GamePad.RSX == 2\n\tzim.GamePad.RSY == 3\n\nEVENTS\ndispatches a gamepadconnected and gamepaddisconnected when connected and disconnected\n\tthese have an event object with index and id properties - the index and id may not work in chrome\ndispatches a buttondown event with button and buttonCode properties\ndispatches a buttonup event with button and buttonCode properties\ndispatches a data event with axes and buttons array properties\n\tthese can be handled as outlined in the description and examples\n--*///+69.8\n\n\tzim.GamePad = function() {\n\t\tz_d(\"69.8\");\n\n\t\tthis.cjsEventDispatcher_constructor();\n\t\tif (!navigator.getGamepads) {this.error = true; if (zon) {zog(\"zim.GamePad() - no browswer support\");} return;} // if no gamepad support\n\t\tvar processPad;\n\t\twindow.addEventListener(\"gamepadconnected\", init);\n\t\tthis.currentIndex = 0;\n\t\tvar that = this;\n\t\tfunction init(eventObject) {\n\t\t\tthat.connected = true;\n\t\t\tdispatch(\"gamepadconnected\", eventObject);\n\t\t\tvar startData = navigator.getGamepads()[that.currentIndex];\n\t\t\tthat.lastData = [];\n\t\t\tfor (var i=0; i<startData.buttons.length; i++) {\n\t\t\t\tthat.lastData[i] = startData.buttons[i].pressed;\n\t\t\t}\n\t\t\tfunction doPad() {\n\t\t\t\tprocessPad = requestAnimationFrame(doPad);\n\t\t\t\tthat.data = navigator.getGamepads()[that.currentIndex];\n\t\t\t\tif (!that.data) return;\n\t\t\t\tvar pressed = false;\n\t\t\t\tvar currentData = that.buttons = [];\n\t\t\t\tfor (var i=0; i<that.data.buttons.length; i++) {\n\t\t\t\t\tcurrentData[i] = that.data.buttons[i].pressed;\n\t\t\t\t\tif (currentData[i] != that.lastData[i]) {\n\t\t\t\t\t\tthat.lastData[i] = currentData[i];\n\t\t\t\t\t\tif (currentData[i]) {\n\t\t\t\t\t\t\t// button was up and now is down\n\t\t\t\t\t\t\t// chose to dispatch only once unlike a keydown\n\t\t\t\t\t\t\t// if we want constant data then use data event and e.buttons\n\t\t\t\t\t\t\tvar e = new createjs.Event(\"buttondown\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar e = new createjs.Event(\"buttonup\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\te.buttonCode = i;\n\t\t\t\t\t\te.button = gamePadButtons[i];\n\t\t\t\t\t\tthat.dispatchEvent(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvar e = new createjs.Event(\"data\");\n\t\t\t\te.axes = that.axes = that.data.axes;\n\t\t\t\te.buttons = that.buttons;\n\t\t\t\tthat.dispatchEvent(e);\n\t\t\t}\n\t\t\tdoPad();\n\t\t}\n\t\tvar gamepadCheck = setInterval(function() { // for chrome\n\t\t\tif (navigator.getGamepads && navigator.getGamepads()[0]) {\n\t\t\t\tif (!that.connected) init();\n\t\t\t\tclearInterval(gamepadCheck);\n\t\t\t}\n\t\t}, 500);\n\t\tfunction dispatch(type, eventObject) {\n\t\t\tvar e = new createjs.Event(type);\n\t\t\te.index = eventObject.gamepad.index;\n\t\t\te.id = eventObject.gamepad.id;\n\t\t\te.buttons = eventObject.gamepad.buttons;\n\t\t\te.axes = eventObject.gamepad.axes;\n\t\t\tthat.dispatchEvent(e);\n\t\t}\n\t\tvar disconnectEvent = window.addEventListener(\"gamepaddisconnected\", function(e) {\n\t\t\tif (e.gamepad.index == that.currentIndex) {\n\t\t\t\tcancelAnimationFrame(processPad);\n\t\t\t\tconnected = false;\n\t\t\t\tthat.dispatchEvent(\"gamepaddisconnected\");\n\t\t\t}\n\t\t});\n\t\tthis.dispose = function() {\n\t\t\twindow.removeEventListener(\"gamepadconnected\", init);\n\t\t\twindow.addEventListener(\"gamepaddisconnected\", disconnectEvent);\n\t\t\tcancelAnimationFrame(processPad);\n\t\t\tclearInterval(gamepadCheck);\n\t\t\tthat.connected = false;\n\t\t}\n\t}\n\tvar gamePadButtons = [\"A\",\"B\",\"X\",\"Y\",\"LB\",\"RB\",\"LT\",\"RT\",\"BACK\",\"START\",\"LS\",\"RS\",\"DPAD_UP\",\"DPAD_DOWN\",\"DPAD_LEFT\",\"DPAD_RIGHT\"];\n\tfor (var i=0; i<gamePadButtons.length; i++) zim.GamePad[gamePadButtons[i]] = i;\n\tvar gamePadAxes = [\"LSX\",\"LSY\",\"RSX\",\"RSY\"];\n\tfor (i=0; i<gamePadAxes.length; i++) zim.GamePad[gamePadAxes[i]] = i;\n\tzim.extend(zim.GamePad, createjs.EventDispatcher, null, \"cjsEventDispatcher\");\n\t//-69.8\n\n/*--\nzim.Emitter = function(obj, width, height, interval, num, life, fade, shrink, decayTime, decayStart, trace, traceFadeTime, traceShiftX, traceShiftY, angle, force, gravity, wind, layers, animation, random, horizontal, vertical, sink, sinkForce, cache, events, startPaused, pool, poolMin)\n\nEmitter\nzim class - extends a zim.Container which extends a createjs.Container\n\nDESCRIPTION\nA particle emitter - so this makes and animates display objects like shapes or bitmaps\nParticle emitters are often used for things like fireworks, fire, smoke, sparks, falling objects, etc.\nThe zim.Emitter is filled with options so have a look at the doc parameters\nHere are some examples:\nhttp://zimjs.com/code/particles/\n\nNOTE: consider the Emitter as somewhat experimental and pushing the bounds of the canvas\nIn future versions we will look into addin CreateJS StageGL (WebGL) examples / support (it might work already)\nThe Emitter certainly can make excellent and workable effects\nBut it can also bog the browser if pushed to extremes or sometimes if left going\nThis possibly means there are memory leaks - we have been doing our best to track things down\nThe Emitter is reporting an expected number of children so any leaks might be beyond ZIM control\n\nNOTE: each particle starts at the center of the container width and height\nIf the trace parameter is true then the particle is put in a container that does not move\nand the particle moves inside that container as the container is cached with the source-over composite operation\nThe currentParticle property and all the event objects' particle parameter is the moving particle\nHowever, the children of the Emitter, will be slightly different in each case:\nwhen trace is false, the children of the Emitter container are any active particles\nwhen trace is true, the children of the Emitter container are the containers that hold the active particles\nIf you have moved, scaled or rotated the Emitter or its container,\nthen you will want to use var point = myEmitter.localToGlobal(particle.x, particle.y)\nand get point.x and point.y to find the location of the particle relative to the stage coordinates\n\nEXAMPLE\n// eg.1 make a bunch of spewing pink circles affected by gravity\nvar emitter = new zim.Emitter(new zim.Circle(5, frame.pink))\n\t.centerReg(stage);\n\n// eg.2 use a sink to attract the particles\nvar sink = new zim.Circle(10, frame.pink).centerReg(stage).alp(0);\n// make one of three types of particles and randomize the colors\nvar particles = new zim.Emitter({\n\tobj:[\n\t\tnew zim.Circle(20,null,frame.darker,2),\n\t\tnew zim.Rectangle(30,30,null,frame.darker,2),\n\t\tnew zim.Triangle(40,40,40,null,frame.darker,2)\n\t],\n\trandom:{color:[frame.blue, frame.green, frame.pink, frame.yellow, frame.orange]},\n\tinterval:20, // default\n\tlife:5000,\n\tdecayTime:1000, // default\n\tsink:sink,\n\tsinkForce:.5,\n\tgravity:0,\n\tforce:1,\n\tcache:zim.mobile(), // default\n})\n\t.centerReg(stage)\n\t.scale(2);\n\n// eg. 3 use a StageGL Frame and createjs.SpriteSheetBuilder for circles:\nvar frame = new zim.Frame({scale:\"fit\", width:1024, height:768, gpu:true});\nframe.on(\"ready\", function() {\n\tvar stage = frame.stage;\n\t// if we pass in just a zim.Circle then we would have to turn on cache\n\t// and cache on WebGL counts as an image for each one\n\t// whereas a SpriteSheet just counts as an image for all of the particles\n\t// so build a SpriteSheet from the Circle\n\tvar builder = new createjs.SpriteSheetBuilder();\n\tbuilder.addFrame(new zim.Circle(50, frame.purple));\n\tbuilder.build();\n\tvar emitter = new zim.Emitter({\n\t\tobj:new zim.Sprite({spriteSheet:builder.spriteSheet}),\n\t\tnum:10, // ten Sprites made every 20 ms for about 1000 particles\n\t\tlife:2000,\n\t\tinterval:20,\n\t\tgravity:0,\n\t\tforce:2\n\t}).centerReg(stage);\n});\n\n\n// see more examples at http://zimjs.com/code/particles\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\n** some parameters below support ZIM VEE values that use zik() to pick a random option\nThe ZIM VEE value can be the following:\n1. an Array of values to pick from - eg. [\"red\", \"green\", \"blue\"]\n2. a Function that returns a value - eg. function(){return Date.now();}\n3. a ZIM RAND object literal - eg. {min:10, max:20, integer:true, negative:true} max is required\n4. any combination of the above - eg. [\"red\", function(){x>100?[\"green\", \"blue\"]:\"yellow\"}] zik is recursive\n5. a single value such as a Number, String, zim.Rectangle(), etc. this just passes through unchanged\n\nobj - |ZIM VEE| a display object to clone - eg. new zim.Circle(10, frame.green);\n\tcan also specify a shape config object with the following properties to draw inside a shape as an alternative to the trace property\n\t{type:\"shape\", s:\"white\", ss:1, f:\"red\", sd:[20, 10], offset:3}\n\tthe parameters accept ZIM VEE values except the type and sd as it requires an array as a final value\n\ttype:\"shape\" is required.  s is setStroke, ss is setStrokeStyle, sd and offset are setStrokeDash in CreateJS\n\tline thickness (ss) is currently not staying in the latest CDN CreateJS - this is working in the NEXT build\nwidth - (default 300) the width of the Emitter container - used as cache bounds for trace if trace is true\nheight - (default 300) the height of the Emitter container - used as cache bounds for trace if trace is true\n\tthese dimensions will affect performance if the trace parameter is true so use carefully\n\talso see the traceShiftX and traceShiftY to specify the caching rectangle position\ninterval - |ZIM VEE| (default 300) the time in ms between imitting particles\nnum - |ZIM VEE| (default 1) the number of particles emitted each interval\nlife - (default 1000) the time in ms the particle will exist\nfade - (default true) Boolean to fade the particle (alpha 0) - set to false to not fade out the particle over the decayTime\nshrink - (default true unless trace is true) Boolean to shrink the particle (scale 0) - set to false to not shrink the particle over the decayTime\ndecayTime - (default 1000) time in ms to fade and / or shrink the particle - ends animation at the life time unless decayStart is set\ndecayStart - (default null) time in ms to start the decayTime otherwise decay (fade and shrink) ends at the end of life time\ntrace - (default false) Boolean set to true to leave trails by caching each particle with source-over composite operation\ntraceFadeTime - (default decayTime) time in ms to fade out traced particle to 0 alpha at the end of the particle life time\ntraceShiftX - (default 0) x amount to shift the cache rectangle for the traced particle\ntraceShiftY - (default 0) y amount to shift the cache rectangle for the traced particle\n\tthe particle starts centered in the width and height of the Emitter container\n\tif you have particles falling - for instance fireworks, you can shift the cache rectangle down to see more trails\n\tand then place the Emitter up higher on the stage\nangle - |ZIM VEE| (default {min:0, max:360}) the angle the particle will emit (0 is along the positive x axis)\n\tif you want to shoot particles in one direction just use angle = 20\n\tif you want something shooting up on either side of the y axis you can use:\n\tangle = {min:-90-20, max:-90+20}; this may be easier to visualize\n\tif you want to emit at 45 or 90 then use [45, 90]\nforce - |ZIM VEE| (default 5) the force for the emitter to shoot the partice at an angle\n\tif you want to shoot a variety use force = {min:2, max:10} etc.\ngravity - (default 9.8) the force of gravity going down - can be negative to make particles float up\nwind - (default 0) a force you can apply in the horizontal direction either negaitive for left or positive for right\nlayers - (default \"top\") where to place the current particle being emitted - values are \"top\", \"bottom\", \"random\"\nanimation - |ZIM VEE| (default null) a zim animate config object to apply to the particle\n\tThis is the whole zim DUO object to pass to animate - including an obj parameter that holds the animation object (different than the animate object)\nrandom - (default null) an object holding properties to animate, each property holding a ZIM VEE Value object for zik to pick from per particle\n\teg: {color:[\"red\", \"white\", \"green\"], scale:{min:1, max:2}} // scale is a convienence property for both scaleX and scaleY\nhorizontal - (default false) start the particles across the emitter's width at the top of the emitter (unless vertical is set to true)\nvertical - (default false) start the particles across the emitter's height at the left of the emitter (unless horizontal is set to true)\nsink - (default null) an object with x and y properties (can be a display object) that the particles will be pulled to (or pushed if sinkForce is negative)\nsinkForce - (default 10 if sink) the force particles are moved towards the sink location\ncache - (default zim.mobile() or false if gpu) Boolean to cache each particle - helpful if complex shape or text (do not use for Bitmap or SpriteSheet)\nevents - (default false) Boolean - set to true to receive events from Emitter\nstartPaused - (default false) Boolean - set to true to start the Emitter in the paused state\npool - (default true) Boolean if true, makes as many particles as it needs before recycling particles\n\tthis improves performance as new particles do not need to be made and old ones remove\n\tsee also the clearPool() method to start collecting a new type of particle, etc.\npoolMin - (default 0) a minimum number of pooled particles before new particles are no longer made (if pool is true)\n\teg. setting poolMin to 100 would make 100 particles and then start reusing these particles for performance\n\tif you set pool to true and do not specify a poolMin then ZIM will calculate the needed number to properly recycle\n\tbut you can override this number if you want a larger pool for more selection\n\nMETHODS\nspurt(num, time, restart) - shoots particles (usually would pause Emitter before doing this)\n\tsupports ZIM DUO config object\n\tnum - |ZIM VEE| (default null) number of particles to emit according to Emitter settings\n\ttime - |ZIM VEE| (default null) alternatively, time to emit particles according to Emitter settings\n\t\tif both num and time are provided the faster one will stop the emitting\n\t\tdispatches three different spurt events - see events\n\trestart (default false) set to true to restart the particles when spurted (removes old particles)\npause(state, restart, freeze, immediate) - pause or unpause the Emitter\n\tstate (default true) will pause the emitter or set to false to unpause the emitter\n\t\tthis will set the read only paused property to true or false accordingly\n\trestart (default false) set to true to restart the particles when unpaused\n\t\totherwise continues the particles from where they were\n\tfreeze (default false) set to true to freeze the particles\n\t\tothewise pause just stops emitting and existing particles continue their life\n\timmediate (default false) set to true to emit right away after unpausing\n\t\totherwise just emits on normal schedule\nclearPool() - clear the pool of particles - use if you change the obj or its properties (no effect if pool parameter is false)\nresize(width, height) - resizes the Emitter container and any cache bounds for new particles\nclone() - makes a copy with properties such as x, y, etc. also copied\n\tall current properties will be cloned except for startPaused for which the initial paramter value is cloned\ndispose() - removes event listeners from Window and content and removes any Ticker functions\n\nALSO: ZIM 4TH adds all the methods listed under zim.Container (see above), such as:\ndrag(), hitTestRect(), move(), animate(), scale(), center(), centerReg(),\naddTo(), removeFrom(), loop(), outline(), place(), pos(), alp(), rot(), setMask(), etc.\nALSO: See the CreateJS Easel Docs for Container methods, such as:\non(), off(), getBounds(), setBounds(), cache(), uncache(), updateCache(), dispatchEvent(),\naddChild(), removeChild(), addChildAt(), getChildAt(), contains(), removeAllChildren(), etc.\n\nPROPERTIES\n** All the PARAMETERS are available as PROPERTIES to get and set (except for the cache parameter - and width and height act differently)\npaused - read only Boolean as to whether the Emitter is paused or not - see also pause() method\ncurrentParticle - the latest particle emitted\n\tif trace is false then this is myEmitter.getChildAt(myEmitter.numChildren-1);\n\tif trace is true then this is myEmitter.getChildAt(myEmitter.numChildren-1).getChildAt(0);\nparticlesEmitted - the number of particles that have been made / emitted\nspurtNum - total number of particles to spurt (when spurt() is called)\nspurtCount - number of particles spurted so far (when spurt() is called)\nzimInterval - the interval used to create particles\nzimTicker - the ticker used to animate particles\n** CHILD PROPERTIES - each child has a particle (if trace is true) or is a particle (if trace is false)\nparticle -  a reference to the particle for the child (could be to itself)\nparticleNormal - true or false if particle is not decaying or fizzing\nparticleDecaying - true or false if decaying - particle is currently animating to either scale 0 or alpha 0\nparticleFizzing - true or false if fizzing - trace container is currently animating to alpha 0\n** setting widths and heights adjusts scale not bounds and getting these uses the bounds dimension times the scale\n** these will not remake the cache bounds, etc. - they just scale the Emitter - see resize()\nwidth - gets or sets the width. Setting the width will scale the height to keep proportion (see widthOnly below)\nheight - gets or sets the height. Setting the height will scale the width to keep proportion (see heightOnly below)\nwidthOnly - gets or sets the width.  This sets only the width and may change the aspect ratio of the object\nheightOnly - gets or sets the height.  This sets only the height and may change the aspect ratio of the object\n\nALSO: See the CreateJS Easel Docs for Container properties, such as:\nx, y, rotation, scaleX, scaleY, regX, regY, skewX, skewY,\nalpha, cursor, shadow, mouseChildren, mouseEnabled, parent, numChildren, compositeOperation, etc.\n\nEVENTS\n** the below events all have a particle property that gives access to the particle (not the particle container for a traced particle - ask for the particle.parent for that)\ndispatches a \"spurted\" event once the spurt() method is finished emitting particles\ndispatches a \"spurtdecayed\" event once the last spurted particle decays (fade / shrink)\ndispatches a \"spurtfizzed\" event once the last spurted particle's life ends\n** the below events only trigger if the events parameter is set to true (default is false for slight performance edge)\ndispatches an \"emitted\" event when a particle is made\ndispatches a \"decayed\" event when the particle's decayStart + decayTime ms has elapsed\ndispatches a \"fizzed\" event when the particle's life ms has elapsed\n\nALSO: See the CreateJS Easel Docs for Container events, such as:\nadded, click, dblclick, mousedown, mouseout, mouseover, pressmove, pressup, removed, rollout, rollover\n--*///+69.9\n\tzim.Emitter = function(obj, width, height, interval, num, life, fade, shrink, decayTime, decayStart, trace, traceFadeTime, traceShiftX, traceShiftY, angle, force, gravity, wind, layers, animation, random, horizontal, vertical, sink, sinkForce, cache, events, startPaused, pool, poolMin) {\n\t    var sig = \"obj, width, height, interval, num, life, fade, shrink, decayTime, decayStart, trace, traceFadeTime, traceShiftX, traceShiftY, angle, force, gravity, wind, layers, animation, random, horizontal, vertical, sink, sinkForce, cache, events, startPaused, pool, poolMin\";\n\t    var duo; if (duo = zob(zim.Emitter, arguments, sig, this)) return duo;\n\t\tz_d(\"69.9\");\n\n\t    if (zot(obj)) obj = [];\n\t\tif (zot(width)) width = 300;\n\t\tif (zot(height)) height = 300;\n\t    if (zot(interval)) interval = 20;\n\t    if (typeof interval == \"number\") interval = Math.max(10, interval);\n\t\tif (zot(num)) num = 1;\n\t\tif (zot(trace)) trace = false;\n\t\tif (zot(traceFadeTime)) traceFadeTime = decayTime;\n\t\tif (zot(traceShiftX)) traceShiftX = 0;\n\t\tif (zot(traceShiftY)) traceShiftY = 0;\n\t    if (zot(life)) life = 1000;\n\t    if (zot(fade)) fade = true;\n\t\tif (zot(shrink)) shrink = trace?false:true;\n\t    if (zot(decayTime)) decayTime = 1000;\n\t    if (zot(angle)) angle = {min:0, max:360};\n\t    if (zot(force)) force = 5;\n\t    if (zot(gravity)) gravity = 9.8\n\t    if (zot(wind)) wind = 0;\n\t    if (zot(layers)) layers = \"top\"; // bottom, random\n\t    if (zot(width)) width = 100;\n\t    if (zot(height)) height = 100;\n\t    if (zot(horizontal)) horizontal = false;\n\t    if (zot(vertical)) vertical = false;\n\t    if (!zot(sink) && zot(sinkForce)) sinkForce = 10;\n\t\tif (zot(events)) events = false;\n\t\tif (zot(startPaused)) startPaused = false;\n\t\tif (zot(pool)) pool = true;\n\t\tif (zot(poolMin)) poolMin = 0;\n\n\t    this.zimContainer_constructor(width, height);\n\t    var that = this;\n\n\t    // might want many of these as dynamic properties - sigh.\n\t    that.obj = obj; that.interval = interval; that.num = num;\n\t    that.life = life; that.fade = fade; that.shrink = shrink;\n\t\tthat.decayTime = decayTime;  that.decayStart = decayStart;\n\t\tthat.trace = trace; that.traceFadeTime = traceFadeTime,\n\t\tthat.traceShiftX = traceShiftX; that.traceShiftY = traceShiftY;\n\t    that.angle = angle, that.force = force;\n\t\tthat.gravity = gravity; that.wind = wind;\n\t    that.layers = layers; that.animation = animation; that.random = random;\n\t\tthat.horizontal = horizontal; that.vertical = vertical;\n\t    that.sink = sink; that.sinkForce = sinkForce;\n\t\tthat.events = events; that.startPaused = startPaused;\n\t\tthat.pool = pool; that.poolMin = poolMin;\n\n\t\tthat.particlesEmitted = 0;\n\t\tvar poolList = [];\n\t\tvar poolIndex = 0;\n\t\tvar poolCount = 0;\n\n\t\tvar stage;\n\t\tzim.added(that, addedToStage);\n\t    function addedToStage(s) {\n\t        stage = s;\n\t\t\tif (zot(cache)) {\n\t\t\t\tif (stage.isWebGL) {\n\t\t\t\t\tcache = false;\n\t\t\t\t} else {\n\t\t\t\t\tcache = zim.mobile();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (cache) stage.snapToPixelEnabled = true;\n\t        if (stage) {\n\t\t\t\tif (!horizontal && !vertical) that.centerReg();\n\n\t\t\t\t//-------------   INTERVAL\n\n\t            that.zimInterval = zim.interval(that.interval, function() {\n\t\t\t\t\t// zog(that.numChildren)\n\t\t\t\t\tif (that.startPaused) {that.pause(); return;}\n\t\t\t\t\t// want to leave that.obj as it was provided\n\t\t\t\t\t// but for creation we will normalize it as an Array\n\t\t\t\t\tobj = Array.isArray(that.obj)?that.obj:[that.obj];\n\t                if (obj.length <= 0) return;\n\n\t\t\t\t\tvar minInterval; // used to calculate max pool\n\t\t\t\t\tvar maxNum;\n\t\t\t\t\tfunction sortNumber(a,b) {return a - b;}\n\t\t\t\t\tif (Array.isArray(that.interval)) {\n\t\t\t\t\t\tthat.interval.sort(sortNumber);\n\t\t\t\t\t\tminInterval = that.interval[0];\n\t\t\t\t\t} else if (that.interval.constructor == {}.constructor){\n\t\t\t\t\t\tminInterval = that.interval.min;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tminInterval = that.interval;\n\t\t\t\t\t}\n\t\t\t\t\tif (Array.isArray(that.num)) {\n\t\t\t\t\t\tthat.num.sort(sortNumber);\n\t\t\t\t\t\tmaxNum = that.num[that.num.length-1];\n\t\t\t\t\t} else if (that.num.constructor == {}.constructor){\n\t\t\t\t\t\tmaxNum = that.num.max;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmaxNum = that.num;\n\t\t\t\t\t}\n\n\t\t\t\t\tzim.loop(zik(that.num), function() {\n\t\t                if (that.decayTime > 0) {\n\t\t                    var decay = {};\n\t\t                    if (that.shrink) decay.scale=0;\n\t\t                    if (that.fade) decay.alpha=0;\n\t\t                }\n\t\t\t\t\t\tif (that.pool && poolList.length > 0 && poolCount >= Math.max(that.poolMin, (that.life/minInterval+5)*maxNum)) { // USE POOL... throw in an extra 5 for good measure\n\t\t\t\t\t\t\tvar container = poolList[(poolIndex++)%poolList.length];\n\t\t\t\t\t\t\tcontainer.visible = true;\n\t\t\t\t\t\t\tvar particle = container.trace?container.getChildAt(0):container;\n\t\t\t\t\t\t\tif (particle.emitShape) {\n\t\t\t\t\t\t\t\tvar t = particle.template;\n\t\t\t\t\t\t\t\tparticle.graphics.c().s(t.s?zik(t.s):null).ss(t.ss?zik(t.ss):null).sd(t.sd?zik(t.sd):null, t.offset?zik(t.offset):null);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (container.trace) container.updateCache();\n\t\t\t\t\t\t\tif (that.layers == \"top\") {\n\t\t\t\t\t\t\t\tif (particle.emitShape) container.addTo(that);\n\t\t\t\t\t\t\t\telse container.centerReg(that);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (particle.emitShape) container.addTo(that, true, that.layers==\"bottom\"?0:zim.rand(that.numChildren));\n\t\t\t\t\t\t\t\telse container.centerReg(that, true, that.layers==\"bottom\"?0:zim.rand(that.numChildren));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontainer.alpha = 1;\n\t\t\t\t\t\t\tcontainer.scale(1);\n\t\t\t\t\t\t\tparticle.alpha = particle.originalAlpha;\n\t\t\t\t\t\t\tparticle.scaleX = particle.originalScaleX;\n\t\t\t\t\t\t\tparticle.scaleY = particle.originalScaleY;\n\t\t\t\t\t\t\tparticle.endSpurt = false;\n\n\t\t\t\t\t\t} else { // END POOL, START NOT POOL\n\t\t\t\t\t\t\tpoolCount++;\n\t\t\t\t\t\t\tvar container;\n\t\t\t\t\t\t\tif (that.trace) {\n\t\t\t\t\t\t\t\tcontainer = new zim.Container(width,height);\n\t\t\t\t\t\t\t\tcontainer.trace = true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar template = zik(zim.shuffle(obj)[0]);\n\t\t\t\t\t\t\tif (template.type == \"shape\") { // shape needs to be top left whereas others need to be centerReg\n\t\t\t\t\t\t\t\tvar t = template;\n\t\t\t\t\t\t\t\t// {type:\"shape\", s:\"white\", ss:2, f:null, sd:[20, 10], offset:3}\n\t\t\t\t\t\t\t\t// line thickness is currently not staying in the latest CDN CreateJS - this is working in the NEXT build\n\t\t\t\t\t\t\t\tvar particle = new zim.Shape(1,1);\n\t\t\t\t\t\t\t\tparticle.emitShape = true;\n\t\t\t\t\t\t\t\tparticle.template = t;\n\t\t\t\t\t\t\t\tparticle.graphics.s(t.s?zik(t.s):null).ss(t.ss?zik(t.ss):null).sd(t.sd?zik(t.sd):null, t.offset?zik(t.offset):null);\n\t\t\t\t\t\t\t\tif (that.trace) {\n\t\t\t\t\t\t\t\t\tparticle.addTo(container)\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (that.layers == \"top\") {\n\t\t\t\t\t\t\t\t\t\tparticle.addTo(that);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tparticle.addTo(that, that.layers==\"bottom\"?0:zim.rand(that.numChildren));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else { // others need to be centerReg\n\t\t\t\t\t\t\t\tvar particle = template.clone();\n\t\t\t\t\t\t\t\tif (!particle.centerReg) zimify(particle);\n\t\t\t\t\t\t\t\tif (that.trace) {\n\t\t\t\t\t\t\t\t\tparticle.centerReg(container).pos(-1000,-1000); // cache was drawing this in center - perhaps missing an update so just move it away\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (that.layers == \"top\") {\n\t\t\t\t\t\t\t\t\t\tparticle.centerReg(that);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tparticle.centerReg(that, true, that.layers==\"bottom\"?0:zim.rand(that.numChildren));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (that.trace) { // still need to add the container if there is one\n\t\t\t\t\t\t\t\tif (that.layers == \"top\") {\n\t\t\t\t\t\t\t\t\tcontainer.addTo(that);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcontainer.addTo(that, that.layers==\"bottom\"?0:zim.rand(that.numChildren));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcontainer.cache(traceShiftX,traceShiftY,width,height);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!that.trace) container = particle;\n\t\t\t\t\t\t\tcontainer.particle = particle;\n\t\t\t\t\t\t\tparticle.originalAlpha = particle.alpha;\n\t\t\t\t\t\t\tparticle.originalScaleX = particle.scaleX;\n\t\t\t\t\t\t\tparticle.originalScaleY = particle.scaleY;\n\n\t\t\t\t\t\t} // END NOT POOL\n\n\t\t\t\t\t\tthat.currentParticle = particle;\n\t\t\t\t\t\tthat.particlesEmitted++;\n\n\t\t\t\t\t\tcontainer.particleNormal = true;\n\t\t\t\t\t\tcontainer.particleDecaying = false;\n\t\t\t\t\t\tcontainer.particleFizzing = false;\n\n\t\t\t\t\t\tvar angle = zik(that.angle);\n\t\t                var speed = zik(that.force);\n\t\t                var speedX = speed*Math.cos(angle*Math.PI/180);\n\t\t                var speedY = speed*Math.sin(angle*Math.PI/180);\n\t\t                particle.info = {\n\t\t                    position: {x:width/2, y:height/2},\n\t\t                    velocity: {x:speedX, y:speedY},\n\t\t                }\n\t\t\t\t\t\tif (that.horizontal) particle.info.position = {x:zim.rand(0, width), y:that.vertical?height/2:0};\n\t\t                if (that.vertical) particle.info.position = {x:that.horizontal?width/2:0, y:zim.rand(0, height)};\n\t\t\t\t\t\tif (particle.emitShape) {\n\t\t\t\t\t\t\tparticle.graphics.mt(particle.info.position.x, particle.info.position.y);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tparticle.pos(particle.info.position.x, particle.info.position.y);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (that.random) {\n\t\t                    // {color:[frame.blue, frame.pink, frame.yellow, frame.orange]}\n\t\t                    zim.loop(that.random, function(property, options) {\n\t\t                        val = zik(options);\n\t\t                        if (property == \"scale\") {\n\t\t                            particle.scale(val);\n\t\t                        } else {\n\t\t\t\t\t\t\t\t\tif (property == \"x\") {\n\t\t\t\t\t\t\t\t\t\tparticle.info.position.x = (that.horizontal || that.vertical)?val:val+width/2;\n\t\t\t\t\t\t\t\t\t} else if (property == \"y\") {\n\t\t\t\t\t\t\t\t\t\tparticle.info.position.y = (that.horizontal || that.vertical)?val:val+height/2;\n\t\t\t\t\t\t\t\t\t}\n\t\t                            particle[property] = val;\n\t\t\t\t\t\t\t\t\tif (particle.emitShape) particle.pos(0,0); // just adjust info for x and y of shape\n\t\t                        }\n\t\t                    });\n\t\t                }\n\n\t\t\t\t        if (cache && !particle.emitShape) particle.cache(particle.getBounds().x-10,particle.getBounds().y-10,particle.getBounds().width+20,particle.getBounds().height+20);\n\n\t\t\t\t\t\t//-------------    DECAY, FADE, SHRINK, FIZZ\n\n\t\t\t\t\t\t// do not shrink shapes as registration is at 0,0 not at the particle\n\t\t\t\t\t\tvar shrinkMe = particle.emitShape?false:that.shrink;\n\n\t\t                if (that.decayTime > 0 && (that.fade || shrinkMe || (that.trace && that.traceFadeTime > 0))) {\n\n\n\t\t\t\t\t\t\tif (that.trace && that.traceFadeTime > 0) {\n\t\t\t\t\t\t\t\tcontainer.animate({\n\t\t\t\t\t\t\t\t\tobj:{alpha:0},\n\t\t\t\t\t\t\t\t\ttime:that.traceFadeTime,\n\t\t\t\t\t\t\t\t\twait:that.life-that.traceFadeTime,\n\t\t\t\t\t\t\t\t\twaitedCall:function(t) {\n\t\t\t\t\t\t\t\t\t\tt.particleNormal = false;\n\t\t\t\t\t\t\t\t\t\tt.particleFizzing = true;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcall:fizz,\n\t\t\t\t\t\t\t\t\toverride:false,\n\t\t\t\t\t\t\t\t\tid:\"decay\"\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (that.fade || shrinkMe) {\n\t\t\t\t\t\t\t\tvar o = {};\n\t\t\t\t\t\t\t\tif (that.fade) o.alpha = 0;\n\t\t\t\t\t\t\t\tif (shrinkMe) {\n\t\t\t\t\t\t\t\t\to.scaleX = 0;\n\t\t\t\t\t\t\t\t\to.scaleY = 0;\n\t\t\t\t\t\t\t\t}\n\t\t\t                    particle.animate({\n\t\t\t\t\t\t\t\t\tobj:o,\n\t\t\t\t\t\t\t\t\ttime:that.decayTime,\n\t\t\t\t\t\t\t\t\twait:zot(that.decayStart)?that.life-that.decayTime:that.decayStart,\n\t\t\t\t\t\t\t\t\twaitedCall:function(t) {\n\t\t\t\t\t\t\t\t\t\tif (t.parent != that) t = t.parent; // access container if there is one\n\t\t\t\t\t\t\t\t\t\tt.particleNormal = false;\n\t\t\t\t\t\t\t\t\t\tt.particleDecaying = true;\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcall:function(t) {\n\t\t\t\t\t\t\t\t\t\tif (that.events) sendEvent(\"decayed\", t);\n\t\t\t\t\t\t\t\t\t\tif (t.endSpurt) sendEvent(\"spurtDecayed\", t);\n\t\t\t\t\t\t\t\t\t\tif (!(that.trace && that.traceFadeTime > 0)) {\n\t\t\t\t\t\t\t\t\t\t\tif (zot(that.decayStart) || that.decayStart+that.decayTime>that.life) {\n\t\t\t\t\t\t\t\t\t\t\t\tfizz(t.parent.trace?t.parent:t); // only want to call fizz once\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t-function() {\n\t\t\t\t\t\t                            var c = container;\n\t\t\t\t\t\t                            zim.timeout(that.life-(that.decayStart+that.decayTime), function(){fizz(c);})\n\t\t\t\t\t\t                        }();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\toverride:false,\n\t\t\t\t\t\t\t\t\tid:\"decay\"\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t                } else {\n\t\t                    if (that.life > 0) {\n\t\t                        -function() {\n\t\t                            var c = container;\n\t\t                            c.timeOut = zim.timeout(that.life, function(){fizz(c);})\n\t\t                        }();\n\t\t                    }\n\t\t               \t}\n\t\t\t\t\t\tif (that.events) sendEvent(\"emitted\", container);\n\t\t\t\t\t\tspurtCheck(particle);\n\t\t                if (that.animation) {\n\t\t\t\t\t\t\tvar a = zik(that.animation);\n\t\t                    if (zot(a.override)) a.override = false;\n\t\t                    particle.animate(zim.copy(a));\n\t\t                }\n\t\t\t\t\t});\n\t            }, null, true); // true for immediate\n\n\n\t\t\t\t//-------------  TICKER\n\n\t\t\t\tvar framerate = 0; // need a Ticker before can get the framerate so set this after Ticker\n\t\t\t\tvar emitterTicker = this.emitterTicker = zim.Ticker.add(function() {\n\t                zim.loop(that, function(particle) {\n\t\t\t\t\t\tif (particle.trace) {\n\t\t\t\t\t\t\tvar particleContainer = particle;\n\t\t\t\t\t\t\tparticle = particle.getChildAt(0);\n\t\t\t\t\t\t}\n\t                    var p = particle.info;\n\t                    var sinkX = 0;\n\t                    var sinkY = 0;\n\t                    // will add multiple sinks in the future\n\t                    // also - try sink with negative force to deflect\n\t                    if (!zot(that.sink)) {\n\t                        var b = that.localToGlobal(p.position.x, p.position.y);\n\t\t\t\t\t\t\tvar s;\n\t\t\t\t\t\t\tif (that.sink.parent && that.sink.parent.localToGlobal) {\n\t\t\t\t\t\t\t\tvar s = that.sink.parent.localToGlobal(that.sink.x, that.sink.y);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ts = new createjs.Point(zik(that.sink.x), zik(that.sink.y));\n\t\t\t\t\t\t\t}\n\t                        var sinkAngle = zim.angle(b.x, b.y, s.x, s.y);\n\t                        var sinkX = that.sinkForce*Math.cos(sinkAngle*Math.PI/180)\n\t                        var sinkY = that.sinkForce*Math.sin(sinkAngle*Math.PI/180)\n\t                    }\n\t                    var ax = that.wind + sinkX;\n\t                    var ay = that.gravity + sinkY;\n\t                    p.velocity.x += ax*frameRate;\n\t                    p.velocity.y += ay*frameRate;\n\t\t\t\t\t\tp.position.x += p.velocity.x*frameRate*100;\n\t                   \tp.position.y += p.velocity.y*frameRate*100;\n\t\t\t\t\t\tif (particle.emitShape) {\n\t\t\t\t\t\t\tparticle.graphics.lt(p.position.x, p.position.y);\n\t\t\t\t\t\t} else {\n\t\t                    particle.x = p.position.x;\n\t\t                    particle.y = p.position.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (that.trace && particleContainer) particleContainer.updateCache(particle.emitShape?null:\"source-over\");\n\n\t\t\t\t\t});\n\t            }, stage);\n\t            frameRate = 1 / zim.Ticker.framerate;\n\t        }\n\t    };\n\n\t\t//-------------    FUNCTIONS\n\n\t\tfunction fizz(p) {\n\n\t\t\tif (that.events) sendEvent(\"fizzed\", p);\n\t\t\tif (p.trace?p.getChildAt(0).endSpurt:p.endSpurt) {\n\t\t\t\tsendEvent(\"spurtFizzed\", p);\n\t\t\t\tthat.spurting = false;\n\t\t\t}\n\t\t\tif (that.pool) {\n\t\t\t\tif (p.pooled == \"end\") {\n\t\t\t\t\t// already removed from poolList by clearPool\n\t\t\t\t\t// go through and removeChild\n\t\t\t\t} else if (p.pooled) { // already in the pool\n\t\t\t\t\tp.visible = false;\n\t\t\t\t\treturn;\n\t\t\t\t} else { // add to pool and return so does not get removed\n\t\t\t\t\tp.pooled = true;\n\t\t\t\t\tpoolList.push(p);\n\t\t\t\t\tp.visible = false;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthat.removeChild(p);\n\t\t\tif (that.trace) p.uncache();\n\t\t\tp = null;\n\t\t}\n\n\t\tfunction sendEvent(type, object) {\n\t\t\tvar e = new createjs.Event(type);\n\t\t\te.particle = object.trace?object.getChildAt(0):object;\n\t\t\tthat.dispatchEvent(e);\n\t\t}\n\n\t\tfunction spurtCheck(p) {\n\t\t\tif (zot(that.spurtCount) && zot(that.spurtNum)) return;\n\t\t\tthat.spurtCount++;\n\t\t\tif (that.spurtCount >= that.spurtNum) {\n\t\t\t\tlastSpurt(p);\n\t\t\t}\n\t\t}\n\n\t\tfunction lastSpurt(p) {\n\t\t\tthat.pause();\n\t\t\tthat.spurtCount = that.spurtNum = null;\n\t\t\tsendEvent(\"spurted\", p);\n\t\t\tp.endSpurt = true;\n\n\t\t}\n\n\t\t//-------------    PROPERTIES\n\n\t\tObject.defineProperty(that, 'interval', {\n\t\t\tget: function() {\n\t\t\t\treturn interval;\n\t\t\t},\n\t\t\tset: function(theInterval) {\n\t\t\t\tinterval = theInterval;\n\t\t\t\tif (that.zimInterval) that.zimInterval.time = interval;\n\t\t\t}\n\t\t});\n\n\t\t//-------------    METHODS\n\n\t\tthis.spurting = false;\n\t\tthis.spurt = function(num, time, restart) {\n\t\t\tvar sig = \"num, time, restart\";\n\t   \t \tvar duo; if (duo = zob(that.spurt, arguments, sig)) return duo;\n\n\t\t\tif (!zot(time)) {\n\t\t\t\tzim.timeout(zik(time), function() {\n\t\t\t\t\tlastSpurt(that.currentParticle);\n\t\t\t\t});\n\t\t\t\tthat.spurting = true;\n\t\t\t}\n\t\t\tif (!zot(num)) {\n\t\t\t\t// handled by checkSpurt() function\n\t\t\t\tthat.spurtNum = zik(num);\n\t\t\t\tthat.spurtCount = 0;\n\t\t\t\tthat.spurting = true;\n\t\t\t}\n\t\t\tthat.pause(false, restart, null, true); // unpause and immediately call call interval function\n\t\t}\n\n\t\tthis.clearPool = function() {\n\t\t\tzim.loop(that, function(p) {\n\t\t\t\tp.pooled=\"end\";\n\t\t\t\tif (!p.visible) that.removeChild(p);\n\t\t\t},true);\n\t\t\tpoolCount = 0;\n\t\t\tpoolIndex = 0;\n\t\t\tpoolList = [];\n\t\t}\n\n\t\tif (!that.startPaused) this.paused = false; // do not set to false - as it will be done below if needed\n\t\tthis.pause = function(state, restart, freeze, immediate) {\n\t\t\tthat.startPaused = null;\n\t\t\tif (zot(state)) state = true;\n\t\t\tif (zot(restart)) restart = false;\n\t\t\tif (zot(freeze)) freeze = false;\n\t\t\tif (state) { // pausing\n\t\t\t\tif (that.paused) return that;\n\t\t\t\tif (freeze) {\n\t\t\t\t\tif (emitterTicker) zim.Ticker.remove(emitterTicker);\n\t\t\t        zim.loop(that, function(particle) {\n\t\t\t            particle.pauseZimAnimate();\n\t\t\t\t\t\tif (particle.trace) particle.getChildAt(0).pauseZimAnimate();\n\t\t\t\t\t\tif (particle.timeOut) {\n\t\t\t\t\t\t\tparticle.timeOut.pause();\n\t\t\t\t\t\t}\n\t\t\t        });\n\t\t\t\t}\n\t\t        that.zimInterval.pause();\n\t\t\t\tthat.paused = true;\n\t\t\t} else { // unpausing\n\t\t\t\tif (!that.paused) return that;\n\t\t\t\tif (restart) {\n\t\t\t\t\tzim.loop(that, function(particle) {\n\t\t\t            particle.stopZimAnimate();\n\t\t\t\t\t\tif (particle.timeOut) particle.timeOut.clear();\n\t\t\t\t\t\tif (particle.trace) particle.getChildAt(0).pauseZimAnimate();\n\t\t\t        });\n\t\t\t\t\tthat.removeAllChildren();\n\t\t\t\t}\n\t\t\t\tif (stage && emitterTicker && !zim.Ticker.has(stage, emitterTicker)) {\n\t\t\t\t\tzim.Ticker.add(emitterTicker, stage);\n\t\t\t        zim.loop(that, function(particle) {\n\t\t\t            particle.pauseZimAnimate(false);\n\t\t\t\t\t\tif (particle.timeOut) particle.timeOut.pause(false);\n\t\t\t\t\t\tif (particle.trace) particle.getChildAt(0).pauseZimAnimate(false);\n\t\t\t        });\n\t\t\t\t}\n\t\t        that.zimInterval.pause(false, immediate);\n\t\t\t\tthat.paused = false;\n\t\t\t}\n\t\t\treturn that;\n\t\t}\n\n\t\tthis.resize = function(w, h) {\n\t\t\tif (!zot(w)) width = w;\n\t\t\tif (!zot(h)) height = h;\n\t\t\tthat.setBounds(0,0,width,height);\n\t\t\tif (!horizontal && !vertical) that.centerReg();\n\t\t\tthat.clearPool();\n\t\t}\n\n\t    this.clone = function() {\n\t\t\tvar objClone;\n\t\t\tif (Array.isArray(that.obj) || that.obj.constructor == {}.constructor) {\n\t\t\t\tobjClone = zim.copy(that.obj);\n\t\t\t} else if (that.obj.clone) {\n\t\t\t\tobjClone = that.obj.clone();\n\t\t\t} else {\n\t\t\t\tobjClone = that.obj;\n\t\t\t}\n\t\t\t// note that all will clone the current property except for startPaused which clones the initial parameter value\n\t\t\treturn that.cloneProps(new zim.Emitter(objClone, width, height, that.interval, that.num, that.life, that.fade, that.shrink, that.decayTime, that.decayStart, that.trace, that.traceFadeTime, that.traceShiftX, that.traceShiftY, that.angle, that.force, that.gravity, that.wind, that.layers, that.animation, zim.copy(that.random), that.horizontal, that.vertical, that.sink, that.sinkForce, cache, that.events, startPaused, that.pool, that.poolMin));\n\t    }\n\n\t    this.dispose = function() {\n\t        if (emitterTicker) zim.Ticker.remove(emitterTicker);\n\t        zim.loop(that, function(particle) {\n\t            particle.stopZimAnimate();\n\t        });\n\t        that.zimInterval.clear();\n\t        return true;\n\t    }\n\t}\n\tzim.extend(zim.Emitter, zim.Container, \"clone\", \"zimContainer\", false);\n\t//-69.9\n\n////////////////  ZIM FRAME  //////////////\n\n// Zim Frame provides code to help you set up your coding environment\n\n\tif (zon) zog(\"ZIM FRAME\");\n\n/*--\nzim.Frame = function(scaling, width, height, color, rollover, touch, scrollTop, align, valign, canvasID, rollPerSecond, delay, handleTabs, tabHighlight, tabHighlightScale, tabHighlightAlpha, tabHighlightTime, tabHighlightObject, canvasCheck, gpu, gpuObj, nextFrame, nextStage)\n\nFrame\nzim class - extends a createjs EventDispatcher\n\nDESCRIPTION\nFrame creates a canvas and stage.\nFrame lets you decide how you want your stage to scale.\nIt also provides events for ready, resizing and orientation change\nas well as a way to remake the canvas if necessary.\nFrame handles loading Bitmap and Sound assets by wrapping PreloadJS\nsee http://zimjs.com/code/frame.html for sample templates using Frame.\n\nEXAMPLE\nvar frame = new zim.Frame(\"fit\", 1024, 768, \"#CCC\");\nframe.on(\"ready\", function() {\n\tvar stage = frame.stage;\n\tvar stageW = frame.width;\n\tvar stageH = frame.height;\n\n\t// code here - or optionally load assets\n\n\tframe.loadAssets(\"image.png\");\n\tframe.on(\"complete\", function() {\n\n\t\t// app code goes here if waiting for assets\n\t\tvar image = frame.asset(\"image.png\");\n\t\timage.center(stage);\n\t\tstage.update();\n\n\t}); // end asset complete\n\n\t// OR for multiple assets in an assets folder:\n\n\tframe.loadAssets([\"sound.mp3\", \"spriteData.json\", \"spriteImage.png\"], \"assets/\");\n\tframe.on(\"complete\", function() {\n\n\t\t// app code goes here if waiting for assets\n\t\tvar soundInstance = frame.asset(\"sound.mp3\").play();\n\t\t// later soundInstance.paused = true; // etc.\n\n\t\tvar sprite = new zim.Sprite({json:frame.asset(\"spriteData.json\")});\n\t\tsprite.center(stage).run(2000);\n\t\t// the image for the sprite is specified in the JSON\n\t\t// but we still want to load it so it is in the loadAssets()\n\t\t// and the JSON data will take care of adding it to the sprite\n\n\t\tstage.update();\n\n\t}); // end asset complete\n\n}); // end of ready\n\n\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nscaling - (default \"full\") can have values as follows\n\t\"fit\"      sets canvas and stage to dimensions and scales to fit inside window size\n\t\"outside\"  sets canvas and stage to dimensions and scales to fit outside window size\n\t\"full\"     sets stage to window size with no scaling\n\t\"tagID\"    add canvas to HTML tag of ID - set to dimensions if provided - no scaling\n\nFIT and OUTSIDE: width and height will set the stage width and height and the canvas is then scaled\nthis is handy because all your dimensions are set to start\nFULL: width and height are ignored when scaling as these are set to the window width and height\nTAG: if width and height are provided then the canvas and stage will be these dimensions\nif width and height are not provided in tag mode, the canvas and stage will take the dimensions of the tag\nthis means, the tag must have some sort of width and height dimensions set or it will be really big!\nNOTE: in tag mode, the tag must exist before running Frame - so use a window DOMContentLoaded event\n\ncolor - (default null) the background color of the frame (any CSS value) - or just set in styles\nrollover - (default true) activates rollovers\ntouch - (default true) activates touch on mobile\nscrollTop - (default true) activates scrolling on older apple devices to hide the url bar\nalign - (default \"center\") for fit and outside, the horizontal alignment \"left\", \"center/middle\", \"right\"\nvalign - (default \"center\") for fit and outside, the vertical alignment \"top\", \"center/middle\", \"bottom\"\ncanvasID - (default \"myCanvas\") will be set to tagIDCanvas if a tagID is provided - eg. scaling=test, canvasID=testCanvas\nrollPerSecond - (default 20) times per second rollover is activated (if rollover parameter is true)\ndelay - (default 500) time in milliseconds to resize ONCE MORE after a orientation change\n\tunfortunately, some older devices may have a delay (after a window resize event) in reporting screen sizes\n\tso a time of 500 or so might catch the dimension change then call the frame resize event with the proper dimensions\n\tsetting this may cause a flash on faster devices that do not need it - so it is a no win situation\n\tthis effects only full mode with the Layout class and they can always refresh a screen if it is not quite right in the changed orientation\nhandleTabs - (default true) prevents default behaviour from the tab key so that frame.tabOrder overrides browser tabbing.\n\tsetting to false will still allow frame.tabOrder to work but will not prevent default tab action\ntabHighlight - (default true) highlights the object being put in focus by a tab if handleTabs is true or frame.tab() call\n\tset to false to not highlight objects receiving tab focus\ntabHighlightScale - (default .8) scale the highlight relative to the object with tab focus if handleTabs is set\ntabHighlightAlpha - (default .3) alpha of the tabHighlightObject if handleTabs is set\ntabHighlightTime - (default 700ms) milliseconds to show tabHightlightObject if handleTabs is set\ntabHighlightObject - (default Circle(100, \"white\")) set to a display object - including animated objects\ncanvasCheck - (default true) check to see if there is canvas support - uses !!window.HTMLCanvasElement\ngpu - (default false) set to true to use a CreateJS StageGL stage for GPU renderer\n \tSee: http://blog.createjs.com/stagegl-faster-better-stronger-webgl-update-easeljs/\n\tCan use http://d309knd7es5f10.cloudfront.net/createjs-2017.05.02.min.js (CreateJS NEXT version made for ZIM)\ngpuObj - (default null) object with following properties (with defaults) See CreateJS docs on GITHUB:\n\tpreserveBuffer (false), antialias (false), transparent (false), premultiply (false), autoPurge (1200)\nnextFrame - (default null) set to zim Frame object of Frame underneath current Frame to pass events to nextFrame\nnextStage - (default null) alternative to nextFrame if the stage beneath current Frame is not a ZIM Frame but just a CreateJS Stage\n\nPROPERTIES\nstage - read only reference to the createjs stage - to change run remakeCanvas()\n\tframe gives the stage read only stage.width and stage.height properties\ncanvas - a reference to the frame's canvas tag\ntag - the containing tag if scaling is set to an HTML tag id (else null)\nisLoading - a Boolean to indicate whether loadAssets() is currently loading assets\nwidth - read only reference to the stage width - to change run remakeCanvas()\nheight - read only reference to the stage height - to change run remakeCanvas()\nscale - read only returns the scale of the canvas - will return 1 for full and tag scale modes\norientation - \"vertical\" or \"horizontal\" (updated live with orientation change)\ntabOrder - get or set an array with the order in which components will receive focus if component uses keys\n\tthis is new and currently works with Steppers and Tabs\n\tthere is no screen reader support as of yet but is under consideration\n\tapps made with ZIM are often very visual so support for visually impared is perhaps less needed\nzil - reference to zil events that stop canvas from shifting\ncolors: orange, green, pink, blue, brown, yellow, silver, tin, grey, lighter, light, dark, darker, purple, white, black, clear (0 alpha), faint (.01 alpha)\ntabObject - the object for tab focus if handleTabs is true\naltKey - true if the alt key is being pressed otherwise false\nctrlKey - true if the ctrl key is being pressed otherwise false\nmetaKey - true if the meta key (⌘ command on Mac or ⊞ windows key) is being pressed otherwise false\nshiftKey - true if the shift key is being pressed otherwise false\n\nMETHODS\nloadAssets(file||[file, file, etc.], path, xhr, time)\n\tpass in an file (String) or an array of files to assets,\n\tpass in an optional path to directory and XHR (default false)\n\tasset types (from CreateJS PreloadJS): Image, JSON, Sound, SVG, Text, XML\n\ttime defaults to 0 and is the minimum number of milliseconds for the complete event to trigger\n\tuse this for testing or to always have time to show a loading message\n\tRETURNS: a zim.Queue object that can be used for control with multiple loadAssets calls\n\tEach zim.Queue will trigger progress, assetload and complete events\n\tEach zim.Queue will have a preload property to the CreateJS LoadQueue and an isLoading property\n\tThe frame also has these events and properties but acts for all loading - so be careful!\n\tIt is recommended to use the zim.Queue any time you use multiple LoadAssets() calls at the same time\n\tYou still access assets with frame.asset() as outlined below whether you use the zim.Queue or not\nasset(file) - access a loaded asset based on file string (not including path)\n\tif the asset is an image then this is a zim.Bitmap and you add it to the stage\n\tif the asset is a sound then use asset(file).play();\n\tor can pass in a configuration object in play\n\twith the following properties (see CreateJS SoundJS docs)\n\tdelay, offset, loop, volume, pan, startTime, interrupt and duration\n\tasset(file).play({volume:.5, pan:-1, loop:2});\n\tthis returns createjs sound instance which can also be manipulated\n\tto stop the sound or set its volume dynamically, etc.\n\tif the asset is anything else, then it is what it is!\nmakeCircles(radius) - returns a createjs.Shape with the ZIM Circles (centered reg)\nremakeCanvas(width, height) - removes old canvas and makes a new one and a new stage\n\twill have to set your local stage, stageW and stageH variables again\ndispose() - removes canvas, resize listener and stage\n\nEVENTS\n\"ready\" - fired when the stage is made\n\"failed\" - fired if no canvas support (and canvasCheck parameter is set to true - which is the default)\n\"progress\" - fires constantly as assets are loaded with loadAssets() to represent overall load progress\n\"assetload\" - fired when an asset loaded with loadAssets() has loaded (use asset property of event object - with type and id properties)\n\"complete\" - fired when all assets loaded with loadAssets() are loaded (then use frame.asset())\n\"error\" - fired when there is a problem loading an asset with loadAssets()\n\"resize\" - fired on resize of screen\n\"orientation\" - fired on orientation change\n\"keydown\" - fires on keydown - just like the window keydown event with eventObject.keyCode, etc.\n\talso stores frame.altKey, frame.ctrlKey, frame.metaKey, frame.shiftKey\n\"keyup\" - fires on keyup - just like the window keyup event with eventObject.keyCode, etc.\n--*///+83\n\tzim.Frame = function(scaling, width, height, color, rollover, touch, scrollTop, align, valign, canvasID, rollPerSecond, delay, handleTabs, tabHighlight, tabHighlightScale, tabHighlightAlpha, tabHighlightTime, tabHighlightObject, canvasCheck, gpu, gpuObj, nextFrame, nextStage) {\n\n\t\tvar sig = \"scaling, width, height, color, rollover, touch, scrollTop, align, valign, canvasID, rollPerSecond, delay, handleTabs, tabHighlight, tabHighlightScale, tabHighlightAlpha, tabHighlightTime, tabHighlightObject, canvasCheck, gpu, gpuObj, nextFrame, nextStage\";\n\t\tvar duo; if (duo = zob(zim.Frame, arguments, sig, this)) return duo;\n\t\tz_d(\"83\");\n\t\tthis.cjsEventDispatcher_constructor();\n\t\tvar that = this;\n\n\t\t// global variables to help reference the frame in some cases\n\t\t// not currently used for stage critical functions\n\t\t// just used to get key events or colors internally\n\t\t// also, as of zim 5.1.0 used for Ticker.add(function(){});\n\t\t// will use the zimDefaultFrame.stage if stage is not supplied as second parameter\n\t\t// this may lead to problems if a second frame is used\n\t\t// and the second frame stage is not used for the Ticker.add()\n\t\t// but two frames are rarely used and this simplifies 99% of the tickers\n\t\tif (typeof zimDefaultFrame == 'undefined') zimDefaultFrame = this;\n\n\t\tif (zot(canvasCheck)) canvasCheck = true;\n\t\tvar canvasSupported = !!window.HTMLCanvasElement;\n\t\tif (!canvasSupported && canvasCheck) { // no canvas support\n\t\t\tsetTimeout(function() {\n\t\t\t\tthat.dispatchEvent(\"failed\");\n\t\t\t}, 100);\n\t\t\treturn;\n\t\t}\n\t\tvar mobile = zim.mobile();\n\t\tif (zot(scaling)) scaling = \"full\";\n\t\tif (zot(rollover)) rollover = !mobile;\n\t\tif (zot(touch)) touch = true;\n\t\tif (zot(scrollTop)) scrollTop = true;\n\t\tif (zot(align)) align = \"center\";\n\t\tif (zot(valign)) valign = \"center\";\n\t\tif (zot(canvasID)) canvasID = \"myCanvas\";\n\t\tif (zot(rollPerSecond)) rollPerSecond = 20;\n\t\tif (zot(delay)) delay = 0;\n\t\tif (zot(handleTabs)) handleTabs = true;\n\t\tif (zot(tabHighlight)) tabHighlight = true;\n\t\tif (zot(tabHighlightScale)) tabHighlightScale = .8;\n\t\tif (zot(tabHighlightAlpha)) tabHighlightAlpha = .3;\n\t\tif (zot(tabHighlightTime)) tabHighlightTime = 700;\n\t\tif (zot(tabHighlightObject)) tabHighlightObject = new zim.Circle(100, \"white\");\n\t\tif (zot(gpu)) gpu = false;\n\n\t\t// setting a scaling of something other than this list will set the scaling to tag mode\n\t\t// where the scaling parameter value is assumed to be the ID of an HTML tag to contain the Frame\n\t\tvar types = [\"fit\",\"outside\",\"full\"];\n\n\t\tthis.scale = 1;\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\n\t\tvar stage;\n\t\tvar stageW = width;\n\t\tvar stageH = height;\n\t\tvar largest; // automatically set\n\t\tvar appOrientation; // watch out - orientation keyword is used by apple - sigh\n\t\tvar lastOrientation; // used to detect orientation change\n\t\tvar appReady = false; // check variable (watch - \"ready\" is reserved)\n\t\tvar tagID;\n\t\tvar tag;\n\n\t\tvar initCheck = false;\n\t\tif (document.readyState === 'interactive' || document.readyState === 'complete' ) { // DOM has loaded\n\t\t\tsetTimeout(function() {init();}, 200); // can't dispatch directly from a constructor\n\t\t} else {\n\t\t\tdocument.addEventListener('DOMContentLoaded', init);\n\t\t}\n\n\t\t// Firefox has a glitch when setting the canvas to a new dimension\n\t\t// this only happens in full mode if a Ticker is updating the stage\n\t\t// so set the Ticker update to false - unfortunately for 500ms\n\t\t// which means animations will pause a little during resize\n\t\t// the resize event triggers pretty quickly and that will update the stage\n\t\tvar lastTicker;\n\t\tvar pauseTicker = false;\n\t\tvar checkResize = (scaling == \"full\" && typeof InstallTrigger !== 'undefined'); // firefox check\n\t\twindow.addEventListener('resize', function() {\n\t\t\tif (checkResize) {\n\t\t\t\tif (!pauseTicker) {\n\t\t\t\t\tpauseTicker = true;\n\t\t\t\t\tlastTicker = zim.Ticker.update;\n\t\t\t\t\tzim.Ticker.update = false;\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tpauseTicker = false;\n\t\t\t\t\t\t// only have one Frame set this...\n\t\t\t\t\t\tif (stage == zimDefaultFrame.stage) zim.Ticker.update = lastTicker;\n\t\t\t\t\t}, 40);\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tsizeCanvas();\n\t\t\t\t\t\tdispatchResize();\n\t\t\t\t\t}, 20);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsizeCanvas();\n\t\t\t\tdispatchResize();\n\t\t\t\tif (delay > 0) {\n\t\t\t\t\tif (mobile) setTimeout(function() {\n\t\t\t\t\t\tsizeCanvas();\n\t\t\t\t\t\tdispatchResize();\n\t\t\t\t\t}, delay); // to catch delayed screen sizes\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tfunction init() {\n\t\t\tif (initCheck) return;\n\t\t\tinitCheck = true;\n\t\t\tif (types.indexOf(scaling) == -1) {\n\t\t\t\ttagID = scaling;\n\t\t\t\tif (zot(zid(tagID))) {zog(\"zim.Frame - scaling: HTML tag with id=\"+scaling+\" must exist\"); return;};\n\t\t\t\ttag = this.tag = zid(tagID);\n\t\t\t\tscaling = (zot(width) || zot(height)) ? \"tag\" : \"inline\"; // tag with no dimensions or dimensions\n\t\t\t\tif (canvasID == \"myCanvas\") canvasID = tagID + \"Canvas\";\n\t\t\t}\n\n\t\t\t// now assign default width and height (ignored by full and tag)\n\t\t\tif (zot(width)) width = 500;\n\t\t\tif (zot(height)) height = 500;\n\n\t\t\tmakeCanvas();\n\t\t\tmakeStage();\n\n\t\t\tif (mobile) {\n\t\t\t\t// for older mobile - pan hides the location bar\n\t\t\t\tif (scrollTop) {setTimeout(function() {window.scrollTo(0, 0);}, 50);}\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t// on all mobile devices\n\t\t\t\t\t// note, this is a second sizing as there is a sizing in makeStage\n\t\t\t\t\tsizeCanvas();\n\t\t\t\t\tthat.dispatchEvent(\"ready\");\n\t\t\t\t\tappReady = true;\n\t\t\t\t\tdispatchResize();\n\t\t\t\t}, 100);\n\t\t\t\t// for extra delay\n\t\t\t\tif (delay > 100) setTimeout(function() {sizeCanvas(); dispatchResize();}, delay); // to catch delayed screen sizes\n\t\t\t} else {\n\t\t\t\tthat.dispatchEvent(\"ready\");\n\t\t\t\tappReady = true;\n\t\t\t\tdispatchResize();\n\t\t\t}\n\t\t}\n\n\t\tfunction makeCanvas() {\n\t\t\t// note the width and height of a canvas\n\t\t\t// are separate from from the width and height styles\n\t\t\t// so beware of unintentionally stretching the canvas with styles\n\n\t\t\tvar canvas = that.canvas = document.createElement(\"canvas\");\n\t\t\tcanvas.setAttribute(\"id\", canvasID);\n\t\t\tif (scaling == \"full\" || scaling == \"tag\") {\n\t\t\t\tcanvas.setAttribute(\"width\", zim.windowWidth());\n\t\t\t\tcanvas.setAttribute(\"height\", zim.windowHeight());\n\t\t\t} else {\n\t\t\t\tcanvas.setAttribute(\"width\", stageW);\n\t\t\t\tcanvas.setAttribute(\"height\", stageH);\n\t\t\t}\n\t\t\tif (scaling == \"tag\" || scaling  == \"inline\") {\n\t\t\t\ttag.appendChild(canvas);\n\t\t\t} else {\n\t\t\t\tdocument.body.appendChild(canvas);\n\t\t\t}\n\t\t\tif (!zot(color)) canvas.style.backgroundColor = color;\n\t\t\tif (scaling == \"full\" || scaling == \"fit\" || scaling == \"outside\") {\n\t\t\t\tcanvas.style.position = \"absolute\";\n\t\t\t\tdocument.body.style.overflow = \"hidden\";\n\t\t\t}\n\t\t}\n\n\t\tfunction makeStage() {\n\t\t\tsizeCanvas();\n\t\t\tif (types.indexOf(scaling) != -1) {that.zil = zil();} // keep canvas still (from arrows, scrollwheel, etc.) (fit, outside and full only)\n\t\t\tstage = gpu?new createjs.StageGL(canvasID, gpuObj):new createjs.Stage(canvasID);\n\t\t\tif (!zot(color) && gpu) stage.setClearColor(zim.convertColor(color));\n\t\t\tstage.setBounds(0, 0, stageW, stageH);\n\t\t\tstage.width = stageW;\n\t\t\tstage.height = stageH;\n\t\t\tif (rollover) stage.enableMouseOver(10); // if you need mouse rollover\n\t\t\tif (touch) createjs.Touch.enable(stage,true); // added for mobile\n\t\t\tif (nextFrame) stage.nextStage = nextFrame.stage;\n\t\t\tif (nextStage) stage.nextStage = nextStage;\n\t\t}\n\n\t\tfunction sizeCanvas() {\n\t\t\tvar can = zid(canvasID);\n\t\t\tvar w = zim.windowWidth();\n\t\t\tvar h = zim.windowHeight();\n\t\t\tvar newW; var newH;\n\t\t\tappOrientation = that.orientation = (w > h) ? \"horizontal\" : \"vertical\";\n\t\t\tif (appOrientation != lastOrientation) { // new orientation\n\t\t\t\tlastOrientation = appOrientation;\n\t\t\t\tthat.dispatchEvent(\"orientation\");\n\t\t\t}\n\t\t\tif (mobile && scrollTop) {setTimeout(function() {window.scrollTo(0, 0);}, 100);}\n\t\t\tif (!can) return;\n\n\t\t\tif (scaling == \"fit\") {\n\t\t\t\t// scales canvas to fit dimensions inside screen\n\t\t\t\tthat.scale = (w/h >= stageW/stageH) ? h/stageH : w/stageW;\n\t\t\t} else if (scaling == \"outside\") {\n\t\t\t\t// scales canvas so screen inside dimensions\n\t\t\t\tthat.scale = (w/h >= stageW/stageH) ? w/stageW : h/stageH;\n\t\t\t} else if (scaling == \"full\") {\n\t\t\t\t// does not scale canvas but sets width and height to screen\n\t\t\t\tcan.style.left = can.style.top = \"0px\";\n\t\t\t\tcan.width = stageW = w;\n\t\t\t\tcan.height = stageH = h;\n\t\t\t\tif (stage) {\n\t\t\t\t\tstage.setBounds(0,0,stageW,stageH); // need this\n\t\t\t\t\tstage.width = stageW;\n\t\t\t\t\tstage.height = stageH;\n\t\t\t\t\tif (gpu) stage.updateViewport(stageW, stageH);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t} else if (scaling == \"tag\") {\n\t\t\t\t// does not scale canvas but sets width and height to tag\n\t\t\t\tstageW = tag.offsetWidth;\n\t\t\t\tstageH = tag.offsetHeight;\n\t\t\t\tif (stage) {\n\t\t\t\t\tstage.setBounds(0,0,stageW,stageH); // need this\n\t\t\t\t\tstage.width = stageW;\n\t\t\t\t\tstage.height = stageH;\n\t\t\t\t\tif (gpu) stage.updateViewport(stageW, stageH);\n\t\t\t\t}\n\t\t\t\ttag.style.overflow = \"hidden\";\n\t\t\t\tcan.style.left = can.style.top = \"0px\";\n\t\t\t\treturn;\n\t\t\t} else if (scaling == \"inline\") {\n\t\t\t\t// does not scale canvas but sets width and height\n\t\t\t\tif (stage) {\n\t\t\t\t\tstage.setBounds(0,0,stageW,stageH); // need this\n\t\t\t\t\tstage.width = stageW;\n\t\t\t\t\tstage.height = stageH;\n\t\t\t\t\tif (gpu) stage.updateViewport(stageW, stageH);\n\t\t\t\t}\n\t\t\t\tcan.style.left = can.style.top = \"0px\";\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// scaling and positioning for fit and outside\n\t\t\tnewH = stageH * that.scale;\n\t\t\tnewW = stageW * that.scale;\n\t\t\tcan.style.width = newW + \"px\";\n\t\t\tcan.style.height = newH + \"px\";\n\t\t\t// note, changing the canvas width and height and scaling the stage\n\t\t\t// does not look as shart at smaller scales - so decided to scale with styles\n\t\t\t// which is like scaling down an image\n\t\t\t// scaling up does not look as good - so just make your canvas as big as you will scale\n\n\t\t\tif (align==\"left\") that.x = 0;\n\t\t\telse if (align==\"right\") that.x = (w-newW);\n\t\t\telse that.x = ((w-newW)/2);\n\t\t\tif (valign==\"top\") that.y = 0;\n\t\t\telse if (valign==\"bottom\") that.y = (h-newH);\n\t\t\telse that.y = ((h-newH)/2);\n\t\t\tcan.style.left = that.x + \"px\";\n\t\t\tcan.style.top = that.y + \"px\";\n\t\t}\n\n\t\tfunction dispatchResize() {\n\t\t\tif (!appReady) return;\n\t\t\tthat.dispatchEvent(\"resize\");\n\t\t\tif (!zim.OPTIMIZE && stage && scaling == \"full\") stage.update();\n\t\t}\n\n\t\t// ASSETS\n\t\tthis.loadAssetsCount = 0;\n\t\tthis.assets = {}; // store asset Bitmap or play function for sound\n\t\tthis.loadAssets = function(arr, path, xhr, time) {\n\t\t\tif (zot(arr)) return;\n\t\t\tif (zot(xhr)) xhr = false;\n\t\t\tif (!Array.isArray(arr)) arr = [arr];\n\t\t\tif (zot(time)) time = 0;\n\t\t\tvar soundCheck = false;\n\t\t\tvar manifest = [];\n\t\t\tvar a; var ext; var i; var j;\n\t\t\tvar re = /\\.([^.]+)$/i; // get extension\n\t\t\tfor (i=0; i<arr.length; i++) {\n\t\t\t\ta = arr[i];\n\t\t\t\text = a.match(re);\n\t\t\t\tif (createjs.Sound.SUPPORTED_EXTENSIONS.indexOf(ext[1]) >= 0) soundCheck = true;\n\t\t\t\tmanifest.push({src:a});\n\t\t\t}\n\t\t\tvar queue = new zim.Queue();\n\t\t\tthat.loadAssetsCount++;\n\t\t\tthat.isLoading = true;\n\t\t\tvar preload = queue.preload = that.preload = new createjs.LoadQueue(xhr, path);\n\t\t\tif (soundCheck) preload.installPlugin(createjs.Sound);\n\t\t\tpreload.on(\"progress\", function(e) {queue.dispatchEvent(e); that.dispatchEvent(e);});\n\t\t\tpreload.on(\"error\", function(e) {queue.dispatchEvent(e); that.dispatchEvent(e);});\n\t\t\tpreload.on(\"fileload\", function(e) {\n\t\t\t\tvar item = e.item;\n\t\t\t\tvar type = e.item.type;\n\t\t\t\tvar ext = item.id.match(re);\n\t\t\t\tvar asset;\n\t\t\t\tif (type && type == createjs.LoadQueue.SOUND) {\n\t\t\t\t\tasset = that.assets[item.id] = {\n                        type:\"sound\",\n                        id:item.id,\n                        play:function(added){\n                            var instance = createjs.Sound.play(item.id, added);\n                            instance.getStage = function(){return stage;}\n                            return instance;\n                        }\n                    };\n\t\t\t\t} else if (type == createjs.LoadQueue.IMAGE) {\n\t\t\t\t\tasset = that.assets[item.id] = new zim.Bitmap(e.result, item.id);\n\t\t\t\t} else {\n\t\t\t\t\tasset = that.assets[item.id] = e.result;\n\t\t\t\t}\n\t\t\t\tvar ev = new createjs.Event(\"assetload\");\n\t\t\t\tev.item = item; // createjs preload item\n\t\t\t\tev.asset = asset;\n\t\t\t\tqueue.dispatchEvent(e);\n\t\t\t\tthat.dispatchEvent(ev);\n\t\t\t});\n\t\t\t// setting a time will force the preload to wait at least this amount of time\n\t\t\t// this can be used for testing or if you always want time to show a loading message\n\t\t\tvar startLoad = Date.now();\n\t\t\tthat.preloadEvent = preload.on(\"complete\", function(e) {\n\t\t\t\tvar endLoad = Date.now();\n\t\t\t\ttime = Math.max(0, time-(endLoad-startLoad));\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tthat.loadAssetsCount--;\n\t\t\t\t\tif (that.loadAssetsCount <= 0) that.isLoading = false;\n\t\t\t\t\tqueue.isLoading = false;\n\t\t\t\t\tqueue.dispatchEvent(e);\n\t\t\t\t\tthat.dispatchEvent(e);\n\t\t\t\t}, time);\n\t\t\t});\n\t\t\tpreload.loadManifest(manifest);\n\t\t\treturn queue;\n\t\t}\n\n\t\tthis.asset = function(n) {\n\t\t\tif (zot(n)) return;\n\t\t\treturn that.assets[n] || {play:function(){if (zon) {zog(\"zim.Frame - asset(\"+n+\") not found\"); return {};}}};\n\t\t}\n\n\t\tObject.defineProperty(that, 'stage', {\n\t\t\tget: function() {\n\t\t\t\treturn stage;\n\t\t\t},\n\t\t\tset: function(s) {\n\t\t\t\tzog(\"zim.Frame(): stage is read only - see remakeCanvas(), perhaps\");\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(that, 'width', {\n\t\t\tget: function() {\n\t\t\t\treturn stageW;\n\t\t\t},\n\t\t\tset: function(w) {\n\t\t\t\tzog(\"zim.Frame(): width is read only - see remakeCanvas(), perhaps\");\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(that, 'height', {\n\t\t\tget: function() {\n\t\t\t\treturn stageH;\n\t\t\t},\n\t\t\tset: function(h) {\n\t\t\t\tzog(\"zim.Frame(): height is read only - see remakeCanvas(), perhaps\");\n\t\t\t}\n\t\t});\n\n\t\tObject.defineProperty(this, 'color', {\n\t\t\tget: function() {\n\t\t\t\treturn color;\n\t\t\t},\n\t\t\tset: function(value) {\n\t\t\t\tcolor = value;\n\t\t\t\tif (!zot(value)) {\n\t\t\t\t\tzid(canvasID).style.backgroundColor = color;\n\t\t\t\t\tif (!zot(color) && gpu) stage.setClearColor(zim.convertColor(color));\n\t\t\t\t} else {\n\t\t\t\t\tzid(canvasID).style.backgroundColor = \"default\";\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tvar _tabOrder = [];\n\t\tObject.defineProperty(this, 'tabOrder', {\n\t\t\tget: function() {\n\t\t\t\treturn _tabOrder;\n\t\t\t},\n\t\t\tset: function(array) {\n\t\t\t\t_tabOrder = array;\n\t\t\t}\n\t\t});\n\n\t\tthis.remakeCanvas = function(width, height) {\n\t\t\tif (scaling == \"full\") return;\n\t\t\tif (zot(width)) width = stageW;\n\t\t\tif (zot(height)) height = stageH;\n\t\t\tif (zid(canvasID)) zid(canvasID).parentNode.removeChild(zid(canvasID));\n\t\t\tstageW = width;\n\t\t\tstageH = height;\n\t\t\tmakeCanvas();\n\t\t\tmakeStage();\n\t\t}\n\n\t\tvar eDown = new createjs.Event(\"keydown\");\n\t\tthis.eventRemove = eDown.remove;\n\t\twindow.addEventListener(\"keydown\", function(e) {\n\t\t\te.remove = that.eventRemove;\n\t\t\tif (e.keyCode==9) {\n\t\t\t\tif (e.shiftKey) {\n\t\t\t\t\tthat.tab(-1);\n\t\t\t\t} else {\n\t\t\t\t\tthat.tab(1);\n\t\t\t\t}\n\t\t\t\tif (handleTabs) e.preventDefault();\n\t\t\t}\n\t\t\tthat.altKey = e.altKey;\n\t\t\tthat.ctrlKey = e.ctrlKey;\n\t\t\tthat.metaKey = e.metaKey;\n\t\t\tthat.shiftKey = e.shiftKey;\n\t\t\tthat.dispatchEvent(e);\n\t\t});\n\t\twindow.addEventListener(\"keyup\", function(e) {\n\t\t\te.remove = that.eventRemove;\n\t\t\tthat.altKey = e.altKey;\n\t\t\tthat.ctrlKey = e.ctrlKey;\n\t\t\tthat.metaKey = e.metaKey;\n\t\t\tthat.shiftKey = e.shiftKey;\n\t\t\tthat.dispatchEvent(e);\n\t\t});\n\t\tvar tabTimeout;\n\t\tthis.tab = function(dir) {\n\t\t\tclearTimeout(tabTimeout);\n\t\t\tif (zot(dir)) dir = 1;\n\t\t\tfor (var i=0; i<_tabOrder.length; i++) {\n\t\t\t\tvar t = _tabOrder[i];\n\t\t\t\tif (t.focus) {\n\t\t\t\t\tt.focus = false;\n\t\t\t\t\tvar index = i + dir;\n\t\t\t\t\tvar t = _tabOrder[(index+_tabOrder.length*100)%_tabOrder.length];\n\t\t\t\t\tt.focus = true;\n\t\t\t\t\tvar b = zim.boundsToGlobal(t);\n\t\t\t\t\ttabHighlightObject.alp(tabHighlightAlpha).addTo(frame.stage)\n\t\t\t\t\ttabHighlightObject.fit(b.x, b.y, b.width, b.height)\n\t\t\t\t\ttabHighlightObject.scale(tabHighlightObject.scaleX*tabHighlightScale);\n\t\t\t\t\ttabTimeout = setTimeout(function(){frame.stage.removeChild(tabHighlightObject);}, tabHighlightTime);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dispose = function() {\n\t\t\twindow.removeEventListener('resize', sizeCanvas);\n\t\t\tstage.removeAllChildren();\n\t\t\tstage.removeAllEventListeners();\n\t\t\tif (zid(canvasID)) zid(canvasID).parentNode.removeChild(zid(canvasID));\n\t\t\tstage = null;\n\t\t\tthat = null;\n\t\t\treturn true;\n\t\t}\n\n\t\t// zim colors\n\t\tthis.orange\t\t= \"#f58e25\";\n\t\tthis.green  \t= \"#acd241\";\n\t\tthis.pink  \t\t= \"#e472c4\";\n\t\tthis.blue   \t= \"#50c4b7\";\n\t\tthis.brown  \t= \"#d1a170\";\n\t\tthis.yellow   \t= \"#ebcb35\";\n\t\tthis.silver\t\t= \"#999999\";\n\t\tthis.tin\t\t= \"#777777\";\n\t\tthis.grey   \t= \"#555555\"\n\t\tthis.gray \t\t= \"#555555\";\n\t\tthis.lighter \t= \"#eeeeee\";\n\t\tthis.light \t\t= \"#cccccc\";\n\t\tthis.dark \t\t= \"#333333\";\n\t\tthis.darker \t= \"#111111\";\n\t\tthis.purple\t\t= \"#993399\";\n\t\tthis.black \t\t= \"#000000\";\n\t\tthis.white\t\t= \"#FFFFFF\";\n\t\tthis.clear \t\t= \"rgba(0,0,0,0)\";\n\t\tthis.faint \t\t= \"rgba(0,0,0,.01)\";\n\n\t\tthis.makeCircles = function(radius) {\n\t\t\tif (zot(radius)) radius = 100;\n\t\t\tvar colors = [that.orange, that.green, that.pink, that.blue, that.brown, that.dark];\n\t\t\tvar c = new zim.Shape();\n\t\t\tvar g = c.graphics;\n\t\t\tc.radius = radius;\n\t\t\tfor (var i=0; i<colors.length; i++) {\n\t\t\t\tg.f(colors[i]).dc(0,0,(c.radius/colors.length)*(colors.length-i));\n\t\t\t}\n\t\t\tc.setBounds(-c.radius,-c.radius,c.radius*2,c.radius*2);\n\t\t\treturn c;\n\t\t}\n\n\n\n\t}\n\tzim.extend(zim.Frame, createjs.EventDispatcher, \"clone\", \"cjsEventDispatcher\", false);\n\n\tzim.Queue = function() {\n\t\t// internal usage only by Frame\n\t\tthis.cjsEventDispatcher_constructor();\n\t\tthis.isLoading = true; // thanks Frank Los for the suggestion.\n\t}\n\tzim.extend(zim.Queue, createjs.EventDispatcher, null, \"cjsEventDispatcher\");\n\t//-83\n\n\n////////////////  ZIM META  //////////////\n\n// the Meta section is for overall classes that operate on ZIM\n// for instance zim.Distill and zim.Wonder\n\n/*--\nzim.DISTILL\n\ndistill\nzim constant\n\nDESCRIPTION\nDistill allows you to track which functions you are using in your app\nand create a custom minified js file with just those functions.\nSet zim.DISTILL to true to record which functions your are using in your app -\ndefault is false.  While running your app, call the zim.distill() function\ntake the results to http://zimjs.com/code/distill to create a minified distilled file.\n\nEXAMPLE\n// at the start of your code\nzim.DISTILL = true;\n\n// at the end of your code (once everything has run)\n// this means we may have to wait for events to happen, etc.\nzim.distill();\n\n// this will log to the console a series of numbers\n// separated by spaces representing the functions used\n\n1 6 81 81 79 75 77 75 55 54 52 53 55 54 52 53 55 54 52\n53 42 80 74 46 46 46 80 74 46 46 46 55 54 52 53 55 54\n52 53 55 54 52 53 42 80 74\n\n// copy these into the zim DISTILL form field\n// to get the minified JavaScript for these functions\n// NOTE: Distill will not duplicate the functions\n// data duplication is left in for statistical purposes\nEND EXAMPLE\n--*///+83.1\n\tzim.DISTILL = false;\n\tzim.distillery = [];\n//-83.1\n\n/*--\nzim.distill = function()\n\ndistill\nzim function\n\nDESCRIPTION\nCall the distill function to display which zim functions you are using in your app.\nYou must set zim.DISTILL constant to true before using (set at the start of your app).\nAfter running through your app, call zim.distill() and see the console (F12).\nTake the results to http://zimjs.com/code/distill to create a minified distilled js file.\nYou would then host this js file yourself or include it in your mobile files, etc.\nNOTE: zim.distill() only records functions that have been used\nso you may have functions still to be used in your app.\nYou will want to make sure you call distill() after you have used all your functions,\nfor instance, on a restart event, etc.\nNOTE: zim.distill() will not be available from your distilled file.\n\nEXAMPLE\n// at the start of your code\nzim.DISTILL = true;\n\n// at the end of your code (once everything has run)\n// this means we may have to wait for events to happen, etc.\nzim.distill();\n\n// this will log to the console a series of numbers\n// separated by spaces representing the functions used\n\n1 6 81 81 79 75 77 75 55 54 52 53 55 54 52 53 55 54 52\n53 42 80 74 46 46 46 80 74 46 46 46 55 54 52 53 55 54\n52 53 55 54 52 53 42 80 74\n\n// copy these into the zim DISTILL form field\n// to get the minified JavaScript for these functions\n// NOTE: Distill will not duplicate the functions\n// data duplication is left in for statistical purposes\nEND EXAMPLE\n--*///+83.2\n\tzim.distill = function() {\n\t\tzog(\"zim.distill() - go to http://zimjs.com/code/distill and enter the following:\");\n\t\tzog((zim.distillery.length>0)?zim.distillery.join(\" \"):\"must set zim.DISTILL = true;\");\n\t}//-83.2\n\n\treturn zim;\n} (zim || {});\n\n// internal global function for the distill process\nfunction z_d(n) {if (zim && zim.DISTILL) zim.distillery.push(n);}\n\n// internal global function for zim.addDisplayMembers\n\n/*--\nzimify = function(obj)\n\nzimify\nglobal function\n\nDESCRIPTION\nShort-cut for zim.addDisplayMembers(obj).\nUsed to add all the ZIM Create module functions to obj.\nHandy for adapting CreateJS objects that are exported from Adobe Animate\nlike createjs.Shape(), createjs.Sprite(), createjs.MovieClip()\n\nEXAMPLE\nvar cjsShape = new lib.Shape1(); // include the js from Adobe Animate\nzimify(cjsShape);\ncjsShape.center(stage);\ncjsShape.drag();\n\n// otherwise would have to use:\nzim.center(cjsShape, stage);\nzim.drag(cjsShape); // etc.\nEND EXAMPLE\n\nRETURNS - obj for chaining\n--*///+83.3\nfunction zimify(obj) {\n\tz_d(\"83.3\");\n\tzim.addDisplayMembers(obj);\n\treturn obj;\n}//-83.3\n\n// back into zim\nvar zim = function(zim) {\n\n/*--\nzim.Wonder = function(wid, client, app, notes, server)\n\nWonder\nzim class\n\nDESCRIPTION\nWonder sends counts, times, and orders to a server for user testing or statistical purposes.\nGo to http://zimjs.com/code/wonder/ to get a Wonder ID (wid) and set up Wonder stats with ZIM\nor make up your own wid and use your own server script to collect data.\nSee the zim Wonder site for a sample script to collect data.\nNOTE: all records at ZIM are archived NEW YEARS DAY and kept for a year after that.\nService is provided as is and ZIM and Dan Zen are not responsible for lost data.\n\nUSAGE\ncount will count things like app loads, button clicks within an app, how many monsters they killed\ntime will tell you the time the user took to do something - like solve a puzzle, or locate the witch\norder will record the order items were done - which section did they go to first, second, third, etc.\n\nEXAMPLE\n// make a Wonder object\n// wonderID is e-mailed to you when you sign up\n// client is your client's name that you provide\n// app is the app for which you are recording data\n// you can also pass an optional note\nvar wonder = new zim.Wonder(\"wonderID\", \"client\", \"app\");\n\n// COUNT EXAMPLE\n// for this example we count times a button is pressed\nvar button = new zim.Button(\"CLICK\");\nbutton.center(stage);\nbutton.on(\"click\", function(){\n\t// records an entry for this keyword in your stats\n\t// along with date, time, session, etc.\n\twonder.count(\"wow\");\n});\n\n// TIME EXAMPLE\n// assuming we have our Wonder object from above\n// (you only need one Wonder object)\n// start the timer counting for a keyword called \"test\"\n// this will record nothing until you timeEnd()\n// or you timeStart() again\n// you can also timePause() and timeUnpause()\n// see DOCS for more functionality and information\nwonder.timeStart(\"test\");\n\n// add the circle\nvar circle = new zim.Circle(100, \"red\");\ncircle.center(stage);\ncircle.drag();\ncircle.on(\"pressup\", function(){\n\tif (circle.hitTestRect(square)) {\n\t\t// if the shapes are hitting then end the timer\n\t\t// this will send data to your Wonder report\n\t\twonder.timeEnd(\"test\");\n\t}\n});\n\n// add the square to a random location on stage\nvar square = new zim.Rectangle(100, \"yellow\");\nstage.addChild(square);\nsquare.x = zim.rand(stageW-square.width);\nsquare.y = zim.rand(stageH-square.height);\n\n// ORDER EXAMPLE\n// assuming we have our Wonder object from above\n// (you only need one Wonder object)\n\n// make tabs\nvar tabs = new zim.Tabs(400, 40, [\"MOUSE\", \"CAT\", \"MONKEY\"]);\ntabs.selectedIndex = -1; // start with no selection\ntabs.center(stage);\nvar count = 0; // perhaps get the first four presses\ntabs.on(\"change\", function(){\n\t// record which tab was pressed\n\t// this gets stored under keyword animal\n\twonder.order(\"animal\", tabs.text);\n\tcount++;\n\t// turn the order recording off for \"animal\"\n\tif (count == 4) wonder.orderOff(\"animal\");\n});\nEND EXAMPLE\n\nPARAMETERS supports DUO - parameters or single object with properties below\nwid - string with your company wonder ID for example z14i46m3z29\n\t  this is the ID you are e-mailed when you sign up or sign in with your company name\n\t  this is NOT your company name that you log into Wonder with\n\t  NOTE: recording to a non-registered wid on the ZIM server will not work and there is no error message\nclient - the client the app is for - if it is for your company, just put your company\napp - the app or site the Wonder stats are for\nserver - a server with zim Wonder running\n\tNote: the default value for the server parameter has been removed as it risks being out-of-date\n\tIf you have signed up for ZIM Wonder at http://zimjs.com/code/wonder/ then\n\timport http://d309knd7es5f10.cloudfront.net/zimserver_url.js in your code (script tag up top)\n\tthis gives a global zimWonderURL variable to pass into the server parameter\n\tthe zimserver_url.js script will always hold the latest domain:port for the zim server\nnotes - (default null) any extra notes like any user data (limit 256 characters as it is stored each record)\n\nMETHODS\ncount(keyword) - sends a line to the server script with the given keyword as well as date and time\ntimeStart(keyword) - starts timing for the specified keyword (nothing sent to server yet)\ntimePause(keyword) - pauses the timing for this keyword\ntimeUnpause(keyword) - unpauses the timing for this keyword\ntimeEnd(keyword) - ends timing for the specific keyword and sends the time to the server\n\tNOTE: if the user exits the app (or leaves page) nothing gets sent to the server\n\t\t  due to unreliable beforeUnload events in the HTML world (otherwise all this would be batched)\norder(keyword, item) - sends a line to the server for this item along with a unique order id for the keyword for the user\n\ncountOff(keyword) - prevents counts from being sent for this keyword\ncountOn(keyword) - allows counts from being sent for this keyword (default)\ntimeOff(keyword) - prevents sending time to the server for this keyword\ntimeOn(keyword) - allows sending time to the server for this keyword (default)\norderOff(keyword) - prevents sending orders to the server for this keyword\norderOn(keyword) - allows sending orders for this keyword (default)\n\ndispose() - clear any event listeners, etc.\n--*///+82\n\tzim.Wonder = function(wid, client, app, notes, server) {\n\n\t\tvar sig = \"wid, client, app, notes, server\";\n\t\tvar duo; if (duo = zob(zim.Wonder, arguments, sig, this)) return duo;\n\t\tz_d(\"82\");\n\t\tif (zot(wid)) {zog(\"zim.Wonder() - please provide Wonder ID (see http://zimjs.com/code/wonder/)\"); return;}\n\t\tif (zot(server)) server = \"http://54.237.229.197:3001/wonder\"; // adjust to amazon server\n\t\tvar that = this;\n\t\tif (zot(zim.wonderSession)) zim.wonderSession = \"W\"+zim.rand(100000,999999); // session id\n\t\tvar data = [];\n\t\t// buffer to send at most every second\n\t\tvar wonderInterval = setInterval(sendData,1000);\n\t\tvar sendCount = 0;\n\t\tfunction sendData() {\n\t\t\tif (data.length > 0) {\n\t\t\t\tzim.async(server + \"?wonder=\" + JSON.stringify(data));\n\t\t\t\tdata = [];\n\t\t\t\tsendCount++;\n\t\t\t}\n\t\t}\n\t\tvar lastKeyword;\n\t\tvar wonderCheck = setInterval(function(){\n\t\t\tif (sendCount > 28) {\n\t\t\t\tdata.push({id:wid, c:client, a:app, n:notes, k:lastKeyword, t:\"e\", v:\"frequency max - terminated\", s:zim.wonderSession});\n\t\t\t\tzog(\"zim.Wonder() - frequency max - terminated\");\n\t\t\t\tthat.dispose();\n\t\t\t}\n\t\t\tsendCount=0;\n\t\t}, 30*1000); // 30 seconds\n\t\tthis.countsOff = {};\n\t\tthis.timesOff = {};\n\t\tthis.ordersOff = {};\n\t\tfunction kw(k,t){\n\t\t\tif (zot(k)) {\n\t\t\t\tzog(\"zim.Wonder \"+t+\" - please provide a keyword\"); return false;\n\t\t\t} else { // check if in off lists\n\t\t\t\tif (that[t+\"sOff\"][k]) return false;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tthis.count = function(keyword) {\n\t\t\tif (!kw(keyword, \"count\")) return;\n\t\t\tlastKeyword = keyword;\n\t\t\tdata.push({id:wid, c:client, a:app, n:notes, k:keyword, t:\"c\", v:1, s:zim.wonderSession});\n\t\t}\n\t\tvar times = {};\n\t\tthis.timeStart = function(keyword) {\n\t\t\tif (!kw(keyword, \"time\")) return;\n\t\t\tthat.timeEnd(keyword);\n\t\t\tlastKeyword = keyword;\n\t\t\ttimes[keyword] = new Date().getTime();\n\t\t}\n\t\tvar pauseTimes = {};\n\t\tthis.timePause = function(keyword) {\n\t\t\tif (!kw(keyword, \"time\")) return;\n\t\t\tif (pauseTimes[keyword]) return; // already pausing\n\t\t\tpauseTimes[keyword] = new Date().getTime();\n\t\t}\n\t\tthis.timeUnpause = function(keyword) {\n\t\t\tif (!kw(keyword, \"time\")) return;\n\t\t\tif (!pauseTimes[keyword]) return; // no pauses\n\t\t\tvar pausedTime = new Date().getTime() - pauseTimes[keyword];\n\t\t\tif (times[keyword]) times[keyword] += pausedTime;\n\t\t\tdelete pauseTimes[keyword];\n\t\t}\n\t\tthis.timeEnd = function(keyword) {\n\t\t\tif (!kw(keyword, \"time\")) return;\n\t\t\tif (!times[keyword]) return;\n\t\t\tvar t1 = (pauseTimes[keyword]) ? pauseTimes[keyword] : new Date().getTime();\n\t\t\tvar time = Math.round((t1 - times[keyword])/1000);\n\t\t\tdelete pauseTimes[keyword];\n\t\t\tdelete times[keyword];\n\t\t\tdata.push({id:wid, c:client, a:app, n:notes, k:keyword, t:\"t\", v:time, s:zim.wonderSession});\n\t\t}\n\t\tthis.order = function(keyword, item) {\n\t\t\tif (!kw(keyword, \"order\")) return;\n\t\t\tlastKeyword = keyword;\n\t\t\tif (zot(item)) {zog(\"zim.Wonder order() - please provide an item\"); return;}\n\t\t\tdata.push({id:wid, c:client, a:app, n:notes, k:keyword, t:\"o\", v:item, s:zim.wonderSession});\n\t\t}\n\t\tthis.countOff = function(keyword) {that.countsOff[keyword] = 1;}\n\t\tthis.countOn = function(keyword) {delete that.countOff[keyword];}\n\t\tthis.timeOff = function(keyword) {that.timesOff[keyword] = 1;}\n\t\tthis.timeOn = function(keyword) {delete that.timesOff[keyword];}\n\t\tthis.orderOff = function(keyword) {that.ordersOff[keyword] = 1;}\n\t\tthis.orderOn = function(keyword) {delete that.ordersOff[keyword];}\n\n\t\tthis.dispose = function() {\n\t\t\tsendData();\n\t\t\tclearInterval(wonderInterval);\n\t\t\tclearInterval(wonderCheck);\n\t\t}\n\t}//-82\n\n\treturn zim;\n} (zim || {});\n\nmodule.exports = zim;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./zim.js\n// module id = 3\n// module chunks = 0\n\n//# sourceURL=webpack:///./zim.js?");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

eval("/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, {}))\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/amd-options.js\n// module id = 4\n// module chunks = 0\n\n//# sourceURL=webpack:///(webpack)/buildin/amd-options.js?");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 5\n// module chunks = 0\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 6\n// module chunks = 0\n\n//# sourceURL=webpack:///(webpack)/buildin/module.js?");

/***/ })
/******/ ]);